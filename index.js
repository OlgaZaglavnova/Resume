!function(e){function t(t){for(var r,a,l=t[0],u=t[1],c=t[2],f=0,d=[];f<l.length;f++)a=l[f],Object.prototype.hasOwnProperty.call(o,a)&&o[a]&&d.push(o[a][0]),o[a]=0;for(r in u)Object.prototype.hasOwnProperty.call(u,r)&&(e[r]=u[r]);for(s&&s(t);d.length;)d.shift()();return i.push.apply(i,c||[]),n()}function n(){for(var e,t=0;t<i.length;t++){for(var n=i[t],r=!0,l=1;l<n.length;l++){var u=n[l];0!==o[u]&&(r=!1)}r&&(i.splice(t--,1),e=a(a.s=n[0]))}return e}var r={},o={0:0},i=[];function a(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,a),n.l=!0,n.exports}a.m=e,a.c=r,a.d=function(e,t,n){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)a.d(n,r,function(t){return e[t]}.bind(null,r));return n},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="/";var l=window.webpackJsonp=window.webpackJsonp||[],u=l.push.bind(l);l.push=t,l=l.slice();for(var c=0;c<l.length;c++)t(l[c]);var s=u;i.push([56,1]),n()}([function(e,t,n){"use strict";e.exports=n(35)},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},function(e,t,n){e.exports=n(41)()},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,"a",(function(){return r}))},,function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,l){if(!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,i,a,l],s=0;(u=new Error(t.replace(/%s/g,(function(){return c[s++]})))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";t.a=function(e,t){}},function(e,t,n){"use strict";var r=n(7);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=i.default.memo(i.default.forwardRef((function(t,n){return i.default.createElement(a.default,(0,o.default)({ref:n},t),e)})));0;return n.muiName=a.default.muiName,n};var o=r(n(49)),i=r(n(0)),a=r(n(57))},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(36)},function(e,t,n){"use strict";var r=n(18),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?a:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=a;var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,m=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(m){var o=p(n);o&&o!==m&&e(t,o,r)}var a=s(n);f&&(a=a.concat(f(n)));for(var l=u(t),h=u(n),v=0;v<a.length;++v){var y=a[v];if(!(i[y]||r&&r[y]||h&&h[y]||l&&l[y])){var g=d(n,y);try{c(t,y,g)}catch(e){}}}}return t}},function(e,t,n){var r=n(39);e.exports=function(e){return r(e).replace(/\s(\w)/g,(function(e,t){return t.toUpperCase()}))}},function(e,t,n){"use strict";(function(e,r){var o,i=n(22);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(19),n(45)(e))},function(e,t,n){"use strict";(function(e){var r=n(0),o=n.n(r),i=n(15),a=n(2),l=n.n(a),u="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==e?e:{};function c(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}var s=o.a.createContext||function(e,t){var n,o,a,s="__create-react-context-"+((u[a="__global_unique_id__"]=(u[a]||0)+1)+"__"),f=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).emitter=c(t.props.value),t}Object(i.a)(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[s]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,o=e.value;((i=r)===(a=o)?0!==i||1/i==1/a:i!=i&&a!=a)?n=0:(n="function"==typeof t?t(r,o):1073741823,0!==(n|=0)&&this.emitter.set(e.value,n))}var i,a},r.render=function(){return this.props.children},n}(r.Component);f.childContextTypes=((n={})[s]=l.a.object.isRequired,n);var d=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}Object(i.a)(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?1073741823:t},r.componentDidMount=function(){this.context[s]&&this.context[s].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?1073741823:e},r.componentWillUnmount=function(){this.context[s]&&this.context[s].off(this.onUpdate)},r.getValue=function(){return this.context[s]?this.context[s].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(r.Component);return d.contextTypes=((o={})[s]=l.a.object,o),{Provider:f,Consumer:d}};t.a=s}).call(this,n(19))},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",(function(){return r}))},function(e,t,n){var r=n(46);e.exports=p,e.exports.parse=i,e.exports.compile=function(e,t){return l(i(e,t),t)},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,l="",s=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],d=n[1],p=n.index;if(l+=e.slice(a,p),a=p+f.length,d)l+=d[1];else{var m=e[a],h=n[2],v=n[3],y=n[4],g=n[5],b=n[6],w=n[7];l&&(r.push(l),l="");var E=null!=h&&null!=m&&m!==h,x="+"===b||"*"===b,k="?"===b||"*"===b,S=n[2]||s,O=y||g;r.push({name:v||i++,prefix:h||"",delimiter:S,optional:k,repeat:x,partial:E,asterisk:!!w,pattern:O?c(O):w?".*":"[^"+u(S)+"]+?"})}}return a<e.length&&(l+=e.substr(a)),l&&r.push(l),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function l(e,t){for(var n=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(n[o]=new RegExp("^(?:"+e[o].pattern+")$",f(t)));return function(t,o){for(var i="",l=t||{},u=(o||{}).pretty?a:encodeURIComponent,c=0;c<e.length;c++){var s=e[c];if("string"!=typeof s){var f,d=l[s.name];if(null==d){if(s.optional){s.partial&&(i+=s.prefix);continue}throw new TypeError('Expected "'+s.name+'" to be defined')}if(r(d)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=u(d[p]),!n[c].test(f))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===p?s.prefix:s.delimiter)+f}}else{if(f=s.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):u(d),!n[c].test(f))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but received "'+f+'"');i+=s.prefix+f}}else i+=s}return i}}function u(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function s(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",l=0;l<e.length;l++){var c=e[l];if("string"==typeof c)a+=u(c);else{var d=u(c.prefix),p="(?:"+c.pattern+")";t.push(c),c.repeat&&(p+="(?:"+d+p+")*"),a+=p=c.optional?c.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var m=u(n.delimiter||"/"),h=a.slice(-m.length)===m;return o||(a=(h?a.slice(0,-m.length):a)+"(?:"+m+"(?=$))?"),a+=i?"$":o&&h?"":"(?="+m+"|$)",s(new RegExp("^"+a,f(n)),t)}function p(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return s(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(p(e[o],t,n).source);return s(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return d(i(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,l,u=a(e),c=1;c<arguments.length;c++){for(var s in n=Object(arguments[c]))o.call(n,s)&&(u[s]=n[s]);if(r){l=r(n);for(var f=0;f<l.length;f++)i.call(n,l[f])&&(u[l[f]]=n[l[f]])}}return u}},function(e,t,n){"use strict";e.exports=n(43)},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},,function(e,t,n){"use strict";e.exports=n(44)},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){var r;"undefined"!=typeof self&&self,e.exports=(r=n(0),function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=7)}([function(e,t,n){"use strict";function r(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw i}}return n}}(e,t)||function(e,t){if(e){if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?o(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var i=n(1),a=n.n(i),l=n(8),u=n.n(l),c=n(2),s=n(10),f=n.n(s),d=n(3),p=n(6),m=function(e){if(!e)return null;var t=Object.keys(e);return 0===t.length?null:t.reduce((function(t,n){return t[Object(c.a)(n)]=e[n],t}),{})},h=function(){var e=a.a.useRef(!1);return a.a.useEffect((function(){e.current=!0}),[]),e.current},v=function(e){var t=function(){return function(e){return e.query||Object(d.a)(e)}(e)},n=r(a.a.useState(t),2),o=n[0],i=n[1];return a.a.useEffect((function(){var e=t();o!==e&&i(e)}),[e]),o};t.a=function(e,t,n){var o=function(e){var t=a.a.useContext(p.a),n=function(){return m(e)||m(t)},o=r(a.a.useState(n),2),i=o[0],l=o[1];return a.a.useEffect((function(){var e=n();f()(i,e)||l(e)}),[e,t]),i}(t),i=v(e);if(!i)throw new Error("Invalid or missing MediaQuery!");var l=function(e){var t=r(a.a.useState(e.matches),2),n=t[0],o=t[1];return a.a.useEffect((function(){var t=function(){o(e.matches)};return e.addListener(t),t(),function(){e.removeListener(t)}}),[e]),n}(function(e,t){var n=function(){return u()(e,t||{},!!t)},o=r(a.a.useState(n),2),i=o[0],l=o[1],c=h();return a.a.useEffect((function(){return c&&l(n()),function(){i.dispose()}}),[e,t]),i}(i,o)),c=h();return a.a.useEffect((function(){c&&n&&n(l)}),[l]),l}},function(e,t){e.exports=r},function(e,t,n){"use strict";function r(e){return"-"+e.toLowerCase()}var o=/[A-Z]/g,i=/^ms-/,a={};t.a=function(e){if(a.hasOwnProperty(e))return a[e];var t=e.replace(o,r);return a[e]=i.test(t)?"-"+t:t}},function(e,t,n){"use strict";var r=n(2),o=n(11);t.a=function(e){var t=[];return Object.keys(o.a.all).forEach((function(n){var o=e[n];null!=o&&t.push(function(e,t){var n=Object(r.a)(e);return"number"==typeof t&&(t="".concat(t,"px")),!0===t?n:!1===t?"not ".concat(n):"(".concat(n,": ").concat(t,")")}(n,o))})),t.join(" and ")}},function(e,t,n){"use strict";e.exports=n(13)},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=n(1),o=n.n(r).a.createContext();t.a=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=n(17),i=n(3),a=n(6);n.d(t,"default",(function(){return o.a})),n.d(t,"useMediaQuery",(function(){return r.a})),n.d(t,"toQuery",(function(){return i.a})),n.d(t,"Context",(function(){return a.a}))},function(e,t,n){"use strict";function r(e,t,n){function r(e){a.matches=e.matches,a.media=e.media}var a=this;if(i&&!n){var l=i.call(window,e);this.matches=l.matches,this.media=l.media,l.addListener(r)}else this.matches=o(e,t),this.media=e;this.addListener=function(e){l&&l.addListener(e)},this.removeListener=function(e){l&&l.removeListener(e)},this.dispose=function(){l&&l.removeListener(r)}}var o=n(9).match,i="undefined"!=typeof window?window.matchMedia:null;e.exports=function(e,t,n){return new r(e,t,n)}},function(e,t,n){"use strict";function r(e){return e.split(",").map((function(e){var t=(e=e.trim()).match(l),n=t[1],r=t[2],o=t[3]||"",i={};return i.inverse=!!n&&"not"===n.toLowerCase(),i.type=r?r.toLowerCase():"all",o=o.match(/\([^\)]+\)/g)||[],i.expressions=o.map((function(e){var t=e.match(u),n=t[1].toLowerCase().match(c);return{modifier:n[1],feature:n[2],value:t[2]}})),i}))}function o(e){var t,n=Number(e);return n||(n=(t=e.match(/^(\d+)\s*\/\s*(\d+)$/))[1]/t[2]),n}function i(e){var t=parseFloat(e);switch(String(e).match(f)[1]){case"dpcm":return t/2.54;case"dppx":return 96*t;default:return t}}function a(e){var t=parseFloat(e);switch(String(e).match(s)[1]){case"em":case"rem":return 16*t;case"cm":return 96*t/2.54;case"mm":return 96*t/2.54/10;case"in":return 96*t;case"pt":return 72*t;case"pc":return 72*t/12;default:return t}}t.match=function(e,t){return r(e).some((function(e){var n=e.inverse,r="all"===e.type||t.type===e.type;if(r&&n||!r&&!n)return!1;var l=e.expressions.every((function(e){var n=e.feature,r=e.modifier,l=e.value,u=t[n];if(!u)return!1;switch(n){case"orientation":case"scan":return u.toLowerCase()===l.toLowerCase();case"width":case"height":case"device-width":case"device-height":l=a(l),u=a(u);break;case"resolution":l=i(l),u=i(u);break;case"aspect-ratio":case"device-aspect-ratio":case"device-pixel-ratio":l=o(l),u=o(u);break;case"grid":case"color":case"color-index":case"monochrome":l=parseInt(l,10)||1,u=parseInt(u,10)||0}switch(r){case"min":return u>=l;case"max":return u<=l;default:return u===l}}));return l&&!n||!l&&n}))},t.parse=r;var l=/(?:(only|not)?\s*([^\s\(\)]+)(?:\s*and)?\s*)?(.+)?/i,u=/\(\s*([^\s\:\)]+)\s*(?:\:\s*([^\s\)]+))?\s*\)/,c=/^(?:(min|max)-)?(.+)/,s=/(em|rem|px|cm|mm|in|pt|pc)?$/,f=/(dpi|dpcm|dppx)?$/},function(e,t,n){"use strict";e.exports=function(e,t){if(e===t)return!0;if(!e||!t)return!1;var n=Object.keys(e),r=Object.keys(t),o=n.length;if(r.length!==o)return!1;for(var i=0;i<o;i++){var a=n[i];if(e[a]!==t[a]||!Object.prototype.hasOwnProperty.call(t,a))return!1}return!0}},function(e,t,n){"use strict";function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var a=n(12),l=n.n(a),u=l.a.oneOfType([l.a.string,l.a.number]),c={orientation:l.a.oneOf(["portrait","landscape"]),scan:l.a.oneOf(["progressive","interlace"]),aspectRatio:l.a.string,deviceAspectRatio:l.a.string,height:u,deviceHeight:u,width:u,deviceWidth:u,color:l.a.bool,colorIndex:l.a.bool,monochrome:l.a.bool,resolution:u},s=o({minAspectRatio:l.a.string,maxAspectRatio:l.a.string,minDeviceAspectRatio:l.a.string,maxDeviceAspectRatio:l.a.string,minHeight:u,maxHeight:u,minDeviceHeight:u,maxDeviceHeight:u,minWidth:u,maxWidth:u,minDeviceWidth:u,maxDeviceWidth:u,minColor:l.a.number,maxColor:l.a.number,minColorIndex:l.a.number,maxColorIndex:l.a.number,minMonochrome:l.a.number,maxMonochrome:l.a.number,minResolution:u,maxResolution:u},c),f={all:l.a.bool,grid:l.a.bool,aural:l.a.bool,braille:l.a.bool,handheld:l.a.bool,print:l.a.bool,projection:l.a.bool,screen:l.a.bool,tty:l.a.bool,tv:l.a.bool,embossed:l.a.bool},d=o(o({},f),s);c.type=Object.keys(f),t.a={all:d,types:f,matchers:c,features:s}},function(e,t,n){var r=n(4);e.exports=n(14)(r.isElement,!0)},function(e,t,n){"use strict";!function(){function e(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:var n=e.type;switch(n){case f:case d:case a:case u:case l:case m:return n;default:var r=n&&n.$$typeof;switch(r){case s:case p:case y:case v:case c:return r;default:return t}}case i:return t}}}function n(t){return e(t)===d}var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,l=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,m=r?Symbol.for("react.suspense"):60113,h=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116,g=r?Symbol.for("react.block"):60121,b=r?Symbol.for("react.fundamental"):60117,w=r?Symbol.for("react.responder"):60118,E=r?Symbol.for("react.scope"):60119,x=f,k=d,S=s,O=c,T=o,P=p,_=a,C=y,j=v,N=i,R=u,M=l,A=m,I=!1;t.AsyncMode=x,t.ConcurrentMode=k,t.ContextConsumer=S,t.ContextProvider=O,t.Element=T,t.ForwardRef=P,t.Fragment=_,t.Lazy=C,t.Memo=j,t.Portal=N,t.Profiler=R,t.StrictMode=M,t.Suspense=A,t.isAsyncMode=function(t){return I||(I=!0,console.warn("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.")),n(t)||e(t)===f},t.isConcurrentMode=n,t.isContextConsumer=function(t){return e(t)===s},t.isContextProvider=function(t){return e(t)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(t){return e(t)===p},t.isFragment=function(t){return e(t)===a},t.isLazy=function(t){return e(t)===y},t.isMemo=function(t){return e(t)===v},t.isPortal=function(t){return e(t)===i},t.isProfiler=function(t){return e(t)===u},t.isStrictMode=function(t){return e(t)===l},t.isSuspense=function(t){return e(t)===m},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===u||e===l||e===m||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===v||e.$$typeof===c||e.$$typeof===s||e.$$typeof===p||e.$$typeof===b||e.$$typeof===w||e.$$typeof===E||e.$$typeof===g)},t.typeOf=e}()},function(e,t,n){"use strict";function r(){return null}var o,i=n(4),a=n(15),l=n(5),u=n(16),c=Function.call.bind(Object.prototype.hasOwnProperty);o=function(e){var t="Warning: "+e;"undefined"!=typeof console&&console.error(t);try{throw new Error(t)}catch(e){}},e.exports=function(e,t){function n(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function s(e){this.message=e,this.stack=""}function f(e){function n(n,a,u,c,f,d,p){if(c=c||b,d=d||u,p!==l){if(t){var m=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");throw m.name="Invariant Violation",m}if("undefined"!=typeof console){var h=c+":"+u;!r[h]&&i<3&&(o("You are manually calling a React.PropTypes validation function for the `"+d+"` prop on `"+c+"`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."),r[h]=!0,i++)}}return null==a[u]?n?new s(null===a[u]?"The "+f+" `"+d+"` is marked as required in `"+c+"`, but its value is `null`.":"The "+f+" `"+d+"` is marked as required in `"+c+"`, but its value is `undefined`."):null:e(a,u,c,f,d)}var r={},i=0,a=n.bind(null,!1);return a.isRequired=n.bind(null,!0),a}function d(e){return f((function(t,n,r,o,i,a){var l=t[n];return m(l)!==e?new s("Invalid "+o+" `"+i+"` of type `"+h(l)+"` supplied to `"+r+"`, expected `"+e+"`."):null}))}function p(t){switch(typeof t){case"number":case"string":case"undefined":return!0;case"boolean":return!t;case"object":if(Array.isArray(t))return t.every(p);if(null===t||e(t))return!0;var n=function(e){var t=e&&(y&&e[y]||e[g]);if("function"==typeof t)return t}(t);if(!n)return!1;var r,o=n.call(t);if(n!==t.entries){for(;!(r=o.next()).done;)if(!p(r.value))return!1}else for(;!(r=o.next()).done;){var i=r.value;if(i&&!p(i[1]))return!1}return!0;default:return!1}}function m(e){var t=typeof e;return Array.isArray(e)?"array":e instanceof RegExp?"object":function(e,t){return"symbol"===e||!!t&&("Symbol"===t["@@toStringTag"]||"function"==typeof Symbol&&t instanceof Symbol)}(t,e)?"symbol":t}function h(e){if(null==e)return""+e;var t=m(e);if("object"===t){if(e instanceof Date)return"date";if(e instanceof RegExp)return"regexp"}return t}function v(e){var t=h(e);switch(t){case"array":case"object":return"an "+t;case"boolean":case"date":case"regexp":return"a "+t;default:return t}}var y="function"==typeof Symbol&&Symbol.iterator,g="@@iterator",b="<<anonymous>>",w={array:d("array"),bool:d("boolean"),func:d("function"),number:d("number"),object:d("object"),string:d("string"),symbol:d("symbol"),any:f(r),arrayOf:function(e){return f((function(t,n,r,o,i){if("function"!=typeof e)return new s("Property `"+i+"` of component `"+r+"` has invalid PropType notation inside arrayOf.");var a=t[n];if(!Array.isArray(a))return new s("Invalid "+o+" `"+i+"` of type `"+m(a)+"` supplied to `"+r+"`, expected an array.");for(var u=0;u<a.length;u++){var c=e(a,u,r,o,i+"["+u+"]",l);if(c instanceof Error)return c}return null}))},element:f((function(t,n,r,o,i){var a=t[n];return e(a)?null:new s("Invalid "+o+" `"+i+"` of type `"+m(a)+"` supplied to `"+r+"`, expected a single ReactElement.")})),elementType:f((function(e,t,n,r,o){var a=e[t];return i.isValidElementType(a)?null:new s("Invalid "+r+" `"+o+"` of type `"+m(a)+"` supplied to `"+n+"`, expected a single ReactElement type.")})),instanceOf:function(e){return f((function(t,n,r,o,i){if(!(t[n]instanceof e)){var a=e.name||b;return new s("Invalid "+o+" `"+i+"` of type `"+((l=t[n]).constructor&&l.constructor.name?l.constructor.name:b)+"` supplied to `"+r+"`, expected instance of `"+a+"`.")}var l;return null}))},node:f((function(e,t,n,r,o){return p(e[t])?null:new s("Invalid "+r+" `"+o+"` supplied to `"+n+"`, expected a ReactNode.")})),objectOf:function(e){return f((function(t,n,r,o,i){if("function"!=typeof e)return new s("Property `"+i+"` of component `"+r+"` has invalid PropType notation inside objectOf.");var a=t[n],u=m(a);if("object"!==u)return new s("Invalid "+o+" `"+i+"` of type `"+u+"` supplied to `"+r+"`, expected an object.");for(var f in a)if(c(a,f)){var d=e(a,f,r,o,i+"."+f,l);if(d instanceof Error)return d}return null}))},oneOf:function(e){function t(t,r,o,i,a){for(var l=t[r],u=0;u<e.length;u++)if(n(l,e[u]))return null;var c=JSON.stringify(e,(function(e,t){return"symbol"===h(t)?String(t):t}));return new s("Invalid "+i+" `"+a+"` of value `"+String(l)+"` supplied to `"+o+"`, expected one of "+c+".")}return Array.isArray(e)?f(t):(o(arguments.length>1?"Invalid arguments supplied to oneOf, expected an array, got "+arguments.length+" arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).":"Invalid argument supplied to oneOf, expected an array."),r)},oneOfType:function(e){if(!Array.isArray(e))return o("Invalid argument supplied to oneOfType, expected an instance of array."),r;for(var t=0;t<e.length;t++){var n=e[t];if("function"!=typeof n)return o("Invalid argument supplied to oneOfType. Expected an array of check functions, but received "+v(n)+" at index "+t+"."),r}return f((function(t,n,r,o,i){for(var a=0;a<e.length;a++)if(null==(0,e[a])(t,n,r,o,i,l))return null;return new s("Invalid "+o+" `"+i+"` supplied to `"+r+"`.")}))},shape:function(e){return f((function(t,n,r,o,i){var a=t[n],u=m(a);if("object"!==u)return new s("Invalid "+o+" `"+i+"` of type `"+u+"` supplied to `"+r+"`, expected `object`.");for(var c in e){var f=e[c];if(f){var d=f(a,c,r,o,i+"."+c,l);if(d)return d}}return null}))},exact:function(e){return f((function(t,n,r,o,i){var u=t[n],c=m(u);if("object"!==c)return new s("Invalid "+o+" `"+i+"` of type `"+c+"` supplied to `"+r+"`, expected `object`.");var f=a({},t[n],e);for(var d in f){var p=e[d];if(!p)return new s("Invalid "+o+" `"+i+"` key `"+d+"` supplied to `"+r+"`.\nBad object: "+JSON.stringify(t[n],null,"  ")+"\nValid keys: "+JSON.stringify(Object.keys(e),null,"  "));var h=p(u,d,r,o,i+"."+d,l);if(h)return h}return null}))}};return s.prototype=Error.prototype,w.checkPropTypes=u,w.resetWarningCache=u.resetWarningCache,w.PropTypes=w,w}},function(e,t,n){"use strict";function r(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var o=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,l,u=r(e),c=1;c<arguments.length;c++){for(var s in n=Object(arguments[c]))i.call(n,s)&&(u[s]=n[s]);if(o){l=o(n);for(var f=0;f<l.length;f++)a.call(n,l[f])&&(u[l[f]]=n[l[f]])}}return u}},function(e,t,n){"use strict";function r(e,t,n,r,u){for(var c in e)if(l(e,c)){var s;try{if("function"!=typeof e[c]){var f=Error((r||"React class")+": "+n+" type `"+c+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+typeof e[c]+"`.");throw f.name="Invariant Violation",f}s=e[c](t,c,r,n,null,i)}catch(e){s=e}if(!s||s instanceof Error||o((r||"React class")+": type specification of "+n+" `"+c+"` is invalid; the type checker function must return `null` or an `Error` but returned a "+typeof s+". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."),s instanceof Error&&!(s.message in a)){a[s.message]=!0;var d=u?u():"";o("Failed "+n+" type: "+s.message+(null!=d?d:""))}}}var o=function(){},i=n(5),a={},l=Function.call.bind(Object.prototype.hasOwnProperty);o=function(e){var t="Warning: "+e;"undefined"!=typeof console&&console.error(t);try{throw new Error(t)}catch(e){}},r.resetWarningCache=function(){a={}},e.exports=r},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}t.a=function(e){var t=e.children,n=e.device,i=e.onChange,a=r(e,["children","device","onChange"]),l=Object(o.a)(a,n,i);return"function"==typeof t?t(l):l?t:null};var o=n(0)}]))},function(e,t,n){"use strict";var r=n(7);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),i=(0,r(n(9)).default)(o.default.createElement(o.default.Fragment,null,o.default.createElement("path",{d:"M11.17 8l-.59-.59L9.17 6H4v12h16V8h-8.83zM19 16v1h-8v-1c0-1.33 2.67-2 4-2s4 .67 4 2zm-4-7c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2z",opacity:".3"}),o.default.createElement("path",{d:"M20 6h-8l-2-2H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm0 12H4V6h5.17l2 2H20v10zm-5-5c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm-4 3v1h8v-1c0-1.33-2.67-2-4-2s-4 .67-4 2z"})),"FolderSharedTwoTone");t.default=i},function(e,t,n){"use strict";var r=n(7);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),i=(0,r(n(9)).default)(o.default.createElement(o.default.Fragment,null,o.default.createElement("path",{d:"M21 5c-1.11-.35-2.33-.5-3.5-.5-1.95 0-4.05.4-5.5 1.5-1.45-1.1-3.55-1.5-5.5-1.5S2.45 4.9 1 6v14.65c0 .25.25.5.5.5.1 0 .15-.05.25-.05C3.1 20.45 5.05 20 6.5 20c1.95 0 4.05.4 5.5 1.5 1.35-.85 3.8-1.5 5.5-1.5 1.65 0 3.35.3 4.75 1.05.1.05.15.05.25.05.25 0 .5-.25.5-.5V6c-.6-.45-1.25-.75-2-1zM3 18.5V7c1.1-.35 2.3-.5 3.5-.5 1.34 0 3.13.41 4.5.99v11.5C9.63 18.41 7.84 18 6.5 18c-1.2 0-2.4.15-3.5.5zm18 0c-1.1-.35-2.3-.5-3.5-.5-1.34 0-3.13.41-4.5.99V7.49c1.37-.59 3.16-.99 4.5-.99 1.2 0 2.4.15 3.5.5v11.5z"}),o.default.createElement("path",{d:"M11 7.49c-1.37-.58-3.16-.99-4.5-.99-1.2 0-2.4.15-3.5.5v11.5c1.1-.35 2.3-.5 3.5-.5 1.34 0 3.13.41 4.5.99V7.49z",opacity:".3"}),o.default.createElement("g",null,o.default.createElement("path",{d:"M17.5 10.5c.88 0 1.73.09 2.5.26V9.24c-.79-.15-1.64-.24-2.5-.24-1.28 0-2.46.16-3.5.47v1.57c.99-.35 2.18-.54 3.5-.54zM17.5 13.16c.88 0 1.73.09 2.5.26V11.9c-.79-.15-1.64-.24-2.5-.24-1.28 0-2.46.16-3.5.47v1.57c.99-.34 2.18-.54 3.5-.54zM17.5 15.83c.88 0 1.73.09 2.5.26v-1.52c-.79-.15-1.64-.24-2.5-.24-1.28 0-2.46.16-3.5.47v1.57c.99-.35 2.18-.54 3.5-.54z"}))),"MenuBookTwoTone");t.default=i},function(e,t,n){"use strict";var r=n(7);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),i=(0,r(n(9)).default)(o.default.createElement(o.default.Fragment,null,o.default.createElement("path",{d:"M12 3.99c-4.42 0-8 3.58-8 8s3.58 8 8 8 8-3.58 8-8-3.58-8-8-8zm4.25 12.24c-2.35 2.34-6.15 2.34-8.49 0L12 11.99v-6c1.54 0 3.07.59 4.24 1.76 2.35 2.34 2.35 6.14.01 8.48z",opacity:".3"}),o.default.createElement("path",{d:"M16.24 7.75c-1.17-1.17-2.7-1.76-4.24-1.76v6l-4.24 4.24c2.34 2.34 6.14 2.34 8.49 0 2.34-2.34 2.34-6.14-.01-8.48zM12 1.99c-5.52 0-10 4.48-10 10s4.48 10 10 10 10-4.48 10-10-4.48-10-10-10zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"})),"TimelapseTwoTone");t.default=i},function(e,t,n){"use strict";var r=n(7);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),i=(0,r(n(9)).default)(o.default.createElement(o.default.Fragment,null,o.default.createElement("path",{d:"M11.92 8.28c.24-1.4-.16-2.89-1.24-3.96-.94-.95-2.2-1.39-3.44-1.32l3.09 3.09-4.24 4.24L3 7.24c-.07 1.24.37 2.49 1.31 3.44 1.04 1.04 2.47 1.45 3.83 1.25.71-.1 1.4-.38 2-.82l9.46 9.46.88-.88-9.45-9.45c.47-.6.77-1.26.89-1.96z",opacity:".3"}),o.default.createElement("path",{d:"M22.61 18.97L13.54 9.9c.93-2.34.45-5.1-1.44-7C9.8.6 6.22.39 3.67 2.25L7.5 6.08 6.08 7.5 2.25 3.67C.39 6.21.6 9.79 2.9 12.09c1.86 1.86 4.57 2.35 6.89 1.48l9.11 9.11c.39.39 1.02.39 1.41 0l2.3-2.3c.4-.38.4-1.02 0-1.41zm-3 1.6l-9.46-9.46c-.61.45-1.29.72-2 .82-1.36.2-2.79-.21-3.83-1.25-.95-.94-1.39-2.2-1.32-3.44l3.09 3.09 4.24-4.24L7.24 3c1.24-.07 2.49.37 3.44 1.31 1.08 1.08 1.49 2.57 1.24 3.96-.12.7-.42 1.36-.88 1.95l9.45 9.45-.88.9z"})),"BuildTwoTone");t.default=i},function(e,t,n){"use strict";var r=n(7);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),i=(0,r(n(9)).default)(o.default.createElement(o.default.Fragment,null,o.default.createElement("path",{d:"M4 8h16v11H4z",opacity:".3"}),o.default.createElement("path",{d:"M20 6h-4V4c0-1.11-.89-2-2-2h-4c-1.11 0-2 .89-2 2v2H4c-1.11 0-1.99.89-1.99 2L2 19c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zM10 4h4v2h-4V4zm10 15H4V8h16v11z"})),"WorkTwoTone");t.default=i},function(e,t,n){"use strict";var r=n(7);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),i=(0,r(n(9)).default)(o.default.createElement(o.default.Fragment,null,o.default.createElement("path",{d:"M5 19.09h14V4.91H5v14.18zM6 7h12v2H6V7zm0 4h12v2H6v-2zm0 4h12v2H6v-2z",opacity:".3"}),o.default.createElement("path",{d:"M19.5 3.5L18 2l-1.5 1.5L15 2l-1.5 1.5L12 2l-1.5 1.5L9 2 7.5 3.5 6 2 4.5 3.5 3 2v20l1.5-1.5L6 22l1.5-1.5L9 22l1.5-1.5L12 22l1.5-1.5L15 22l1.5-1.5L18 22l1.5-1.5L21 22V2l-1.5 1.5zM19 19.09H5V4.91h14v14.18zM6 15h12v2H6zm0-4h12v2H6zm0-4h12v2H6z"})),"ReceiptTwoTone");t.default=i},function(e,t,n){"use strict";var r=n(7);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),i=(0,r(n(9)).default)(o.default.createElement(o.default.Fragment,null,o.default.createElement("path",{d:"M9 12h6v8H9z",opacity:".3"}),o.default.createElement("path",{d:"M12 1C8.98 1 6.24 2.23 4.25 4.21l1.41 1.41C7.28 4 9.53 3 12 3s4.72 1 6.34 2.62l1.41-1.41C17.76 2.23 15.02 1 12 1zM7 7.07L8.43 8.5c.91-.91 2.18-1.48 3.57-1.48s2.66.57 3.57 1.48L17 7.07C15.72 5.79 13.95 5 12 5s-3.72.79-5 2.07zm7.86 2.94L9.14 10C8.51 10 8 10.51 8 11.14v9.71c0 .63.51 1.14 1.14 1.14h5.71c.63 0 1.14-.51 1.14-1.14v-9.71c.01-.63-.5-1.13-1.13-1.13zM15 20H9v-8h6v8z"})),"SpeakerPhoneTwoTone");t.default=i},function(e,t,n){"use strict";var r=n(7);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),i=(0,r(n(9)).default)(o.default.createElement("path",{d:"M19 8H5c-1.66 0-3 1.34-3 3v6h4v4h12v-4h4v-6c0-1.66-1.34-3-3-3zm-3 11H8v-5h8v5zm3-7c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm-1-9H6v4h12V3z"}),"Print");t.default=i},,,,function(e,t,n){"use strict";
/** @license React v16.14.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(17),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,l=o?Symbol.for("react.fragment"):60107,u=o?Symbol.for("react.strict_mode"):60108,c=o?Symbol.for("react.profiler"):60114,s=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,d=o?Symbol.for("react.forward_ref"):60112,p=o?Symbol.for("react.suspense"):60113,m=o?Symbol.for("react.memo"):60115,h=o?Symbol.for("react.lazy"):60116,v="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function w(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}function E(){}function x(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(y(85));this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},E.prototype=w.prototype;var k=x.prototype=new E;k.constructor=x,r(k,w.prototype),k.isPureReactComponent=!0;var S={current:null},O=Object.prototype.hasOwnProperty,T={key:!0,ref:!0,__self:!0,__source:!0};function P(e,t,n){var r,o={},a=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)O.call(t,r)&&!T.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];o.children=c}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:i,type:e,key:a,ref:l,props:o,_owner:S.current}}function _(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var C=/\/+/g,j=[];function N(e,t,n,r){if(j.length){var o=j.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function R(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>j.length&&j.push(e)}function M(e,t,n){return null==e?0:function e(t,n,r,o){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var u=!1;if(null===t)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case i:case a:u=!0}}if(u)return r(o,t,""===n?"."+A(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var s=n+A(l=t[c],c);u+=e(l,s,r,o)}else if(null===t||"object"!=typeof t?s=null:s="function"==typeof(s=v&&t[v]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),c=0;!(l=t.next()).done;)u+=e(l=l.value,s=n+A(l,c++),r,o);else if("object"===l)throw r=""+t,Error(y(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return u}(e,"",t,n)}function A(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function I(e,t){e.func.call(e.context,t,e.count++)}function z(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?L(e,r,n,(function(e){return e})):null!=e&&(_(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(C,"$&/")+"/")+n)),r.push(e))}function L(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(C,"$&/")+"/"),M(e,z,t=N(t,i,r,o)),R(t)}var D={current:null};function F(){var e=D.current;if(null===e)throw Error(y(321));return e}var $={ReactCurrentDispatcher:D,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:S,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return L(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;M(e,I,t=N(null,null,t,n)),R(t)},count:function(e){return M(e,(function(){return null}),null)},toArray:function(e){var t=[];return L(e,t,null,(function(e){return e})),t},only:function(e){if(!_(e))throw Error(y(143));return e}},t.Component=w,t.Fragment=l,t.Profiler=c,t.PureComponent=x,t.StrictMode=u,t.Suspense=p,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=$,t.cloneElement=function(e,t,n){if(null==e)throw Error(y(267,e));var o=r({},e.props),a=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=S.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)O.call(t,s)&&!T.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];o.children=c}return{$$typeof:i,type:e.type,key:a,ref:l,props:o,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=P,t.createFactory=function(e){var t=P.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:d,render:e}},t.isValidElement=_,t.lazy=function(e){return{$$typeof:h,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return F().useCallback(e,t)},t.useContext=function(e,t){return F().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return F().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return F().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return F().useLayoutEffect(e,t)},t.useMemo=function(e,t){return F().useMemo(e,t)},t.useReducer=function(e,t,n){return F().useReducer(e,t,n)},t.useRef=function(e){return F().useRef(e)},t.useState=function(e){return F().useState(e)},t.version="16.14.0"},function(e,t,n){"use strict";
/** @license React v16.14.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(17),i=n(37);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));function l(e,t,n,r,o,i,a,l,u){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var u=!1,c=null,s=!1,f=null,d={onError:function(e){u=!0,c=e}};function p(e,t,n,r,o,i,a,s,f){u=!1,c=null,l.apply(d,arguments)}var m=null,h=null,v=null;function y(e,t,n){var r=e.type||"unknown-event";e.currentTarget=v(n),function(e,t,n,r,o,i,l,d,m){if(p.apply(this,arguments),u){if(!u)throw Error(a(198));var h=c;u=!1,c=null,s||(s=!0,f=h)}}(r,t,void 0,e),e.currentTarget=null}var g=null,b={};function w(){if(g)for(var e in b){var t=b[e],n=g.indexOf(e);if(!(-1<n))throw Error(a(96,e));if(!x[n]){if(!t.extractEvents)throw Error(a(97,e));for(var r in x[n]=t,n=t.eventTypes){var o=void 0,i=n[r],l=t,u=r;if(k.hasOwnProperty(u))throw Error(a(99,u));k[u]=i;var c=i.phasedRegistrationNames;if(c){for(o in c)c.hasOwnProperty(o)&&E(c[o],l,u);o=!0}else i.registrationName?(E(i.registrationName,l,u),o=!0):o=!1;if(!o)throw Error(a(98,r,e))}}}}function E(e,t,n){if(S[e])throw Error(a(100,e));S[e]=t,O[e]=t.eventTypes[n].dependencies}var x=[],k={},S={},O={};function T(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!b.hasOwnProperty(t)||b[t]!==r){if(b[t])throw Error(a(102,t));b[t]=r,n=!0}}n&&w()}var P=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),_=null,C=null,j=null;function N(e){if(e=h(e)){if("function"!=typeof _)throw Error(a(280));var t=e.stateNode;t&&(t=m(t),_(e.stateNode,e.type,t))}}function R(e){C?j?j.push(e):j=[e]:C=e}function M(){if(C){var e=C,t=j;if(j=C=null,N(e),t)for(e=0;e<t.length;e++)N(t[e])}}function A(e,t){return e(t)}function I(e,t,n,r,o){return e(t,n,r,o)}function z(){}var L=A,D=!1,F=!1;function $(){null===C&&null===j||(z(),M())}function H(e,t,n){if(F)return e(t,n);F=!0;try{return L(e,t,n)}finally{F=!1,$()}}var B=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,U=Object.prototype.hasOwnProperty,V={},W={};function q(e,t,n,r,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i}var Q={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){Q[e]=new q(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];Q[t]=new q(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){Q[e]=new q(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){Q[e]=new q(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){Q[e]=new q(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){Q[e]=new q(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){Q[e]=new q(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){Q[e]=new q(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){Q[e]=new q(e,5,!1,e.toLowerCase(),null,!1)}));var G=/[\-:]([a-z])/g;function K(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(G,K);Q[t]=new q(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(G,K);Q[t]=new q(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(G,K);Q[t]=new q(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){Q[e]=new q(e,1,!1,e.toLowerCase(),null,!1)})),Q.xlinkHref=new q("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){Q[e]=new q(e,1,!1,e.toLowerCase(),null,!0)}));var J=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function Z(e,t,n,r){var o=Q.hasOwnProperty(t)?Q[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!U.call(W,e)||!U.call(V,e)&&(B.test(e)?W[e]=!0:(V[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}J.hasOwnProperty("ReactCurrentDispatcher")||(J.ReactCurrentDispatcher={current:null}),J.hasOwnProperty("ReactCurrentBatchConfig")||(J.ReactCurrentBatchConfig={suspense:null});var Y=/^(.*)[\\\/]/,X="function"==typeof Symbol&&Symbol.for,ee=X?Symbol.for("react.element"):60103,te=X?Symbol.for("react.portal"):60106,ne=X?Symbol.for("react.fragment"):60107,re=X?Symbol.for("react.strict_mode"):60108,oe=X?Symbol.for("react.profiler"):60114,ie=X?Symbol.for("react.provider"):60109,ae=X?Symbol.for("react.context"):60110,le=X?Symbol.for("react.concurrent_mode"):60111,ue=X?Symbol.for("react.forward_ref"):60112,ce=X?Symbol.for("react.suspense"):60113,se=X?Symbol.for("react.suspense_list"):60120,fe=X?Symbol.for("react.memo"):60115,de=X?Symbol.for("react.lazy"):60116,pe=X?Symbol.for("react.block"):60121,me="function"==typeof Symbol&&Symbol.iterator;function he(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=me&&e[me]||e["@@iterator"])?e:null}function ve(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case oe:return"Profiler";case re:return"StrictMode";case ce:return"Suspense";case se:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case ae:return"Context.Consumer";case ie:return"Context.Provider";case ue:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case fe:return ve(e.type);case pe:return ve(e.render);case de:if(e=1===e._status?e._result:null)return ve(e)}return null}function ye(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=ve(e.type);n=null,r&&(n=ve(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(Y,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}function ge(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function be(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function we(e){e._valueTracker||(e._valueTracker=function(e){var t=be(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Ee(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=be(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function xe(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ke(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=ge(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Se(e,t){null!=(t=t.checked)&&Z(e,"checked",t,!1)}function Oe(e,t){Se(e,t);var n=ge(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Pe(e,t.type,n):t.hasOwnProperty("defaultValue")&&Pe(e,t.type,ge(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Te(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Pe(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function _e(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Ce(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ge(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function je(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Ne(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:ge(n)}}function Re(e,t){var n=ge(t.value),r=ge(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Me(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var Ae="http://www.w3.org/1999/xhtml",Ie="http://www.w3.org/2000/svg";function ze(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ze(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var De,Fe=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==Ie||"innerHTML"in e)e.innerHTML=t;else{for((De=De||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=De.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function $e(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function He(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Be={animationend:He("Animation","AnimationEnd"),animationiteration:He("Animation","AnimationIteration"),animationstart:He("Animation","AnimationStart"),transitionend:He("Transition","TransitionEnd")},Ue={},Ve={};function We(e){if(Ue[e])return Ue[e];if(!Be[e])return e;var t,n=Be[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ve)return Ue[e]=n[t];return e}P&&(Ve=document.createElement("div").style,"AnimationEvent"in window||(delete Be.animationend.animation,delete Be.animationiteration.animation,delete Be.animationstart.animation),"TransitionEvent"in window||delete Be.transitionend.transition);var qe=We("animationend"),Qe=We("animationiteration"),Ge=We("animationstart"),Ke=We("transitionend"),Je="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ze=new("function"==typeof WeakMap?WeakMap:Map);function Ye(e){var t=Ze.get(e);return void 0===t&&(t=new Map,Ze.set(e,t)),t}function Xe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Xe(e)!==e)throw Error(a(188))}function nt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Xe(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return tt(o),e;if(i===r)return tt(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=i;break}if(u===r){l=!0,r=o,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=o;break}if(u===r){l=!0,r=i,n=o;break}u=u.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function rt(e,t){if(null==t)throw Error(a(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function ot(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var it=null;function at(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)y(e,t[r],n[r]);else t&&y(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function lt(e){if(null!==e&&(it=rt(it,e)),e=it,it=null,e){if(ot(e,at),it)throw Error(a(95));if(s)throw e=f,s=!1,f=null,e}}function ut(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ct(e){if(!P)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var st=[];function ft(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>st.length&&st.push(e)}function dt(e,t,n,r){if(st.length){var o=st.pop();return o.topLevelType=e,o.eventSystemFlags=r,o.nativeEvent=t,o.targetInst=n,o}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function pt(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=Pn(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=ut(e.nativeEvent);r=e.topLevelType;var i=e.nativeEvent,a=e.eventSystemFlags;0===n&&(a|=64);for(var l=null,u=0;u<x.length;u++){var c=x[u];c&&(c=c.extractEvents(r,t,i,o,a))&&(l=rt(l,c))}lt(l)}}function mt(e,t,n){if(!n.has(e)){switch(e){case"scroll":Gt(t,"scroll",!0);break;case"focus":case"blur":Gt(t,"focus",!0),Gt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":ct(e)&&Gt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Je.indexOf(e)&&Qt(e,t)}n.set(e,null)}}var ht,vt,yt,gt=!1,bt=[],wt=null,Et=null,xt=null,kt=new Map,St=new Map,Ot=[],Tt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Pt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function _t(e,t,n,r,o){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:o,container:r}}function Ct(e,t){switch(e){case"focus":case"blur":wt=null;break;case"dragenter":case"dragleave":Et=null;break;case"mouseover":case"mouseout":xt=null;break;case"pointerover":case"pointerout":kt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":St.delete(t.pointerId)}}function jt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=_t(t,n,r,o,i),null!==t&&(null!==(t=_n(t))&&vt(t)),e):(e.eventSystemFlags|=r,e)}function Nt(e){var t=Pn(e.target);if(null!==t){var n=Xe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=et(n)))return e.blockedOn=t,void i.unstable_runWithPriority(e.priority,(function(){yt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Rt(e){if(null!==e.blockedOn)return!1;var t=Yt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=_n(t);return null!==n&&vt(n),e.blockedOn=t,!1}return!0}function Mt(e,t,n){Rt(e)&&n.delete(t)}function At(){for(gt=!1;0<bt.length;){var e=bt[0];if(null!==e.blockedOn){null!==(e=_n(e.blockedOn))&&ht(e);break}var t=Yt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:bt.shift()}null!==wt&&Rt(wt)&&(wt=null),null!==Et&&Rt(Et)&&(Et=null),null!==xt&&Rt(xt)&&(xt=null),kt.forEach(Mt),St.forEach(Mt)}function It(e,t){e.blockedOn===t&&(e.blockedOn=null,gt||(gt=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,At)))}function zt(e){function t(t){return It(t,e)}if(0<bt.length){It(bt[0],e);for(var n=1;n<bt.length;n++){var r=bt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==wt&&It(wt,e),null!==Et&&It(Et,e),null!==xt&&It(xt,e),kt.forEach(t),St.forEach(t),n=0;n<Ot.length;n++)(r=Ot[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Ot.length&&null===(n=Ot[0]).blockedOn;)Nt(n),null===n.blockedOn&&Ot.shift()}var Lt={},Dt=new Map,Ft=new Map,$t=["abort","abort",qe,"animationEnd",Qe,"animationIteration",Ge,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ke,"transitionEnd","waiting","waiting"];function Ht(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1],i="on"+(o[0].toUpperCase()+o.slice(1));i={phasedRegistrationNames:{bubbled:i,captured:i+"Capture"},dependencies:[r],eventPriority:t},Ft.set(r,t),Dt.set(r,i),Lt[o]=i}}Ht("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Ht("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Ht($t,2);for(var Bt="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Ut=0;Ut<Bt.length;Ut++)Ft.set(Bt[Ut],0);var Vt=i.unstable_UserBlockingPriority,Wt=i.unstable_runWithPriority,qt=!0;function Qt(e,t){Gt(t,e,!1)}function Gt(e,t,n){var r=Ft.get(t);switch(void 0===r?2:r){case 0:r=Kt.bind(null,t,1,e);break;case 1:r=Jt.bind(null,t,1,e);break;default:r=Zt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Kt(e,t,n,r){D||z();var o=Zt,i=D;D=!0;try{I(o,e,t,n,r)}finally{(D=i)||$()}}function Jt(e,t,n,r){Wt(Vt,Zt.bind(null,e,t,n,r))}function Zt(e,t,n,r){if(qt)if(0<bt.length&&-1<Tt.indexOf(e))e=_t(null,e,t,n,r),bt.push(e);else{var o=Yt(e,t,n,r);if(null===o)Ct(e,r);else if(-1<Tt.indexOf(e))e=_t(o,e,t,n,r),bt.push(e);else if(!function(e,t,n,r,o){switch(t){case"focus":return wt=jt(wt,e,t,n,r,o),!0;case"dragenter":return Et=jt(Et,e,t,n,r,o),!0;case"mouseover":return xt=jt(xt,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return kt.set(i,jt(kt.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,St.set(i,jt(St.get(i)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r)){Ct(e,r),e=dt(e,r,null,t);try{H(pt,e)}finally{ft(e)}}}}function Yt(e,t,n,r){if(null!==(n=Pn(n=ut(r)))){var o=Xe(n);if(null===o)n=null;else{var i=o.tag;if(13===i){if(null!==(n=et(o)))return n;n=null}else if(3===i){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;n=null}else o!==n&&(n=null)}}e=dt(e,r,n,t);try{H(pt,e)}finally{ft(e)}return null}var Xt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},en=["Webkit","ms","Moz","O"];function tn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Xt.hasOwnProperty(e)&&Xt[e]?(""+t).trim():t+"px"}function nn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=tn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Xt).forEach((function(e){en.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Xt[t]=Xt[e]}))}));var rn=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function on(e,t){if(t){if(rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62,""))}}function an(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ln=Ae;function un(e,t){var n=Ye(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=O[t];for(var r=0;r<t.length;r++)mt(t[r],e,n)}function cn(){}function sn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function fn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function dn(e,t){var n,r=fn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=fn(r)}}function pn(){for(var e=window,t=sn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=sn((e=t.contentWindow).document)}return t}function mn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var hn=null,vn=null;function yn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function gn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var bn="function"==typeof setTimeout?setTimeout:void 0,wn="function"==typeof clearTimeout?clearTimeout:void 0;function En(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function xn(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var kn=Math.random().toString(36).slice(2),Sn="__reactInternalInstance$"+kn,On="__reactEventHandlers$"+kn,Tn="__reactContainere$"+kn;function Pn(e){var t=e[Sn];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Tn]||n[Sn]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=xn(e);null!==e;){if(n=e[Sn])return n;e=xn(e)}return t}n=(e=n).parentNode}return null}function _n(e){return!(e=e[Sn]||e[Tn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Cn(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function jn(e){return e[On]||null}function Nn(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Rn(e,t){var n=e.stateNode;if(!n)return null;var r=m(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}function Mn(e,t,n){(t=Rn(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function An(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=Nn(t);for(t=n.length;0<t--;)Mn(n[t],"captured",e);for(t=0;t<n.length;t++)Mn(n[t],"bubbled",e)}}function In(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=Rn(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function zn(e){e&&e.dispatchConfig.registrationName&&In(e._targetInst,null,e)}function Ln(e){ot(e,An)}var Dn=null,Fn=null,$n=null;function Hn(){if($n)return $n;var e,t,n=Fn,r=n.length,o="value"in Dn?Dn.value:Dn.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return $n=o.slice(e,1<t?1-t:void 0)}function Bn(){return!0}function Un(){return!1}function Vn(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Bn:Un,this.isPropagationStopped=Un,this}function Wn(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function qn(e){if(!(e instanceof this))throw Error(a(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Qn(e){e.eventPool=[],e.getPooled=Wn,e.release=qn}o(Vn.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Bn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Bn)},persist:function(){this.isPersistent=Bn},isPersistent:Un,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Un,this._dispatchInstances=this._dispatchListeners=null}}),Vn.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Vn.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,Qn(n),n},Qn(Vn);var Gn=Vn.extend({data:null}),Kn=Vn.extend({data:null}),Jn=[9,13,27,32],Zn=P&&"CompositionEvent"in window,Yn=null;P&&"documentMode"in document&&(Yn=document.documentMode);var Xn=P&&"TextEvent"in window&&!Yn,er=P&&(!Zn||Yn&&8<Yn&&11>=Yn),tr=String.fromCharCode(32),nr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},rr=!1;function or(e,t){switch(e){case"keyup":return-1!==Jn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function ir(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var ar=!1;var lr={eventTypes:nr,extractEvents:function(e,t,n,r){var o;if(Zn)e:{switch(e){case"compositionstart":var i=nr.compositionStart;break e;case"compositionend":i=nr.compositionEnd;break e;case"compositionupdate":i=nr.compositionUpdate;break e}i=void 0}else ar?or(e,n)&&(i=nr.compositionEnd):"keydown"===e&&229===n.keyCode&&(i=nr.compositionStart);return i?(er&&"ko"!==n.locale&&(ar||i!==nr.compositionStart?i===nr.compositionEnd&&ar&&(o=Hn()):(Fn="value"in(Dn=r)?Dn.value:Dn.textContent,ar=!0)),i=Gn.getPooled(i,t,n,r),o?i.data=o:null!==(o=ir(n))&&(i.data=o),Ln(i),o=i):o=null,(e=Xn?function(e,t){switch(e){case"compositionend":return ir(t);case"keypress":return 32!==t.which?null:(rr=!0,tr);case"textInput":return(e=t.data)===tr&&rr?null:e;default:return null}}(e,n):function(e,t){if(ar)return"compositionend"===e||!Zn&&or(e,t)?(e=Hn(),$n=Fn=Dn=null,ar=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return er&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Kn.getPooled(nr.beforeInput,t,n,r)).data=e,Ln(t)):t=null,null===o?t:null===t?o:[o,t]}},ur={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function cr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!ur[e.type]:"textarea"===t}var sr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function fr(e,t,n){return(e=Vn.getPooled(sr.change,e,t,n)).type="change",R(n),Ln(e),e}var dr=null,pr=null;function mr(e){lt(e)}function hr(e){if(Ee(Cn(e)))return e}function vr(e,t){if("change"===e)return t}var yr=!1;function gr(){dr&&(dr.detachEvent("onpropertychange",br),pr=dr=null)}function br(e){if("value"===e.propertyName&&hr(pr))if(e=fr(pr,e,ut(e)),D)lt(e);else{D=!0;try{A(mr,e)}finally{D=!1,$()}}}function wr(e,t,n){"focus"===e?(gr(),pr=n,(dr=t).attachEvent("onpropertychange",br)):"blur"===e&&gr()}function Er(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return hr(pr)}function xr(e,t){if("click"===e)return hr(t)}function kr(e,t){if("input"===e||"change"===e)return hr(t)}P&&(yr=ct("input")&&(!document.documentMode||9<document.documentMode));var Sr={eventTypes:sr,_isInputEventSupported:yr,extractEvents:function(e,t,n,r){var o=t?Cn(t):window,i=o.nodeName&&o.nodeName.toLowerCase();if("select"===i||"input"===i&&"file"===o.type)var a=vr;else if(cr(o))if(yr)a=kr;else{a=Er;var l=wr}else(i=o.nodeName)&&"input"===i.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(a=xr);if(a&&(a=a(e,t)))return fr(a,n,r);l&&l(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Pe(o,"number",o.value)}},Or=Vn.extend({view:null,detail:null}),Tr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Tr[e])&&!!t[e]}function _r(){return Pr}var Cr=0,jr=0,Nr=!1,Rr=!1,Mr=Or.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:_r,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Cr;return Cr=e.screenX,Nr?"mousemove"===e.type?e.screenX-t:0:(Nr=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=jr;return jr=e.screenY,Rr?"mousemove"===e.type?e.screenY-t:0:(Rr=!0,0)}}),Ar=Mr.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Ir={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},zr={eventTypes:Ir,extractEvents:function(e,t,n,r,o){var i="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(i&&0==(32&o)&&(n.relatedTarget||n.fromElement)||!a&&!i)return null;(i=r.window===r?r:(i=r.ownerDocument)?i.defaultView||i.parentWindow:window,a)?(a=t,null!==(t=(t=n.relatedTarget||n.toElement)?Pn(t):null)&&(t!==Xe(t)||5!==t.tag&&6!==t.tag)&&(t=null)):a=null;if(a===t)return null;if("mouseout"===e||"mouseover"===e)var l=Mr,u=Ir.mouseLeave,c=Ir.mouseEnter,s="mouse";else"pointerout"!==e&&"pointerover"!==e||(l=Ar,u=Ir.pointerLeave,c=Ir.pointerEnter,s="pointer");if(e=null==a?i:Cn(a),i=null==t?i:Cn(t),(u=l.getPooled(u,a,n,r)).type=s+"leave",u.target=e,u.relatedTarget=i,(n=l.getPooled(c,t,n,r)).type=s+"enter",n.target=i,n.relatedTarget=e,s=t,(r=a)&&s)e:{for(c=s,a=0,e=l=r;e;e=Nn(e))a++;for(e=0,t=c;t;t=Nn(t))e++;for(;0<a-e;)l=Nn(l),a--;for(;0<e-a;)c=Nn(c),e--;for(;a--;){if(l===c||l===c.alternate)break e;l=Nn(l),c=Nn(c)}l=null}else l=null;for(c=l,l=[];r&&r!==c&&(null===(a=r.alternate)||a!==c);)l.push(r),r=Nn(r);for(r=[];s&&s!==c&&(null===(a=s.alternate)||a!==c);)r.push(s),s=Nn(s);for(s=0;s<l.length;s++)In(l[s],"bubbled",u);for(s=r.length;0<s--;)In(r[s],"captured",n);return 0==(64&o)?[u]:[u,n]}};var Lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Dr=Object.prototype.hasOwnProperty;function Fr(e,t){if(Lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Dr.call(t,n[r])||!Lr(e[n[r]],t[n[r]]))return!1;return!0}var $r=P&&"documentMode"in document&&11>=document.documentMode,Hr={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Br=null,Ur=null,Vr=null,Wr=!1;function qr(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Wr||null==Br||Br!==sn(n)?null:("selectionStart"in(n=Br)&&mn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Vr&&Fr(Vr,n)?null:(Vr=n,(e=Vn.getPooled(Hr.select,Ur,e,t)).type="select",e.target=Br,Ln(e),e))}var Qr={eventTypes:Hr,extractEvents:function(e,t,n,r,o,i){if(!(i=!(o=i||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{o=Ye(o),i=O.onSelect;for(var a=0;a<i.length;a++)if(!o.has(i[a])){o=!1;break e}o=!0}i=!o}if(i)return null;switch(o=t?Cn(t):window,e){case"focus":(cr(o)||"true"===o.contentEditable)&&(Br=o,Ur=t,Vr=null);break;case"blur":Vr=Ur=Br=null;break;case"mousedown":Wr=!0;break;case"contextmenu":case"mouseup":case"dragend":return Wr=!1,qr(n,r);case"selectionchange":if($r)break;case"keydown":case"keyup":return qr(n,r)}return null}},Gr=Vn.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Kr=Vn.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Jr=Or.extend({relatedTarget:null});function Zr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Yr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Xr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},eo=Or.extend({key:function(e){if(e.key){var t=Yr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Zr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Xr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:_r,charCode:function(e){return"keypress"===e.type?Zr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Zr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),to=Mr.extend({dataTransfer:null}),no=Or.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:_r}),ro=Vn.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),oo=Mr.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),io={eventTypes:Lt,extractEvents:function(e,t,n,r){var o=Dt.get(e);if(!o)return null;switch(e){case"keypress":if(0===Zr(n))return null;case"keydown":case"keyup":e=eo;break;case"blur":case"focus":e=Jr;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Mr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=to;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=no;break;case qe:case Qe:case Ge:e=Gr;break;case Ke:e=ro;break;case"scroll":e=Or;break;case"wheel":e=oo;break;case"copy":case"cut":case"paste":e=Kr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Ar;break;default:e=Vn}return Ln(t=e.getPooled(o,t,n,r)),t}};if(g)throw Error(a(101));g=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),w(),m=jn,h=_n,v=Cn,T({SimpleEventPlugin:io,EnterLeaveEventPlugin:zr,ChangeEventPlugin:Sr,SelectEventPlugin:Qr,BeforeInputEventPlugin:lr});var ao=[],lo=-1;function uo(e){0>lo||(e.current=ao[lo],ao[lo]=null,lo--)}function co(e,t){lo++,ao[lo]=e.current,e.current=t}var so={},fo={current:so},po={current:!1},mo=so;function ho(e,t){var n=e.type.contextTypes;if(!n)return so;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function vo(e){return null!=(e=e.childContextTypes)}function yo(){uo(po),uo(fo)}function go(e,t,n){if(fo.current!==so)throw Error(a(168));co(fo,t),co(po,n)}function bo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,ve(t)||"Unknown",i));return o({},n,{},r)}function wo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||so,mo=fo.current,co(fo,e),co(po,po.current),!0}function Eo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=bo(e,t,mo),r.__reactInternalMemoizedMergedChildContext=e,uo(po),uo(fo),co(fo,e)):uo(po),co(po,n)}var xo=i.unstable_runWithPriority,ko=i.unstable_scheduleCallback,So=i.unstable_cancelCallback,Oo=i.unstable_requestPaint,To=i.unstable_now,Po=i.unstable_getCurrentPriorityLevel,_o=i.unstable_ImmediatePriority,Co=i.unstable_UserBlockingPriority,jo=i.unstable_NormalPriority,No=i.unstable_LowPriority,Ro=i.unstable_IdlePriority,Mo={},Ao=i.unstable_shouldYield,Io=void 0!==Oo?Oo:function(){},zo=null,Lo=null,Do=!1,Fo=To(),$o=1e4>Fo?To:function(){return To()-Fo};function Ho(){switch(Po()){case _o:return 99;case Co:return 98;case jo:return 97;case No:return 96;case Ro:return 95;default:throw Error(a(332))}}function Bo(e){switch(e){case 99:return _o;case 98:return Co;case 97:return jo;case 96:return No;case 95:return Ro;default:throw Error(a(332))}}function Uo(e,t){return e=Bo(e),xo(e,t)}function Vo(e,t,n){return e=Bo(e),ko(e,t,n)}function Wo(e){return null===zo?(zo=[e],Lo=ko(_o,Qo)):zo.push(e),Mo}function qo(){if(null!==Lo){var e=Lo;Lo=null,So(e)}Qo()}function Qo(){if(!Do&&null!==zo){Do=!0;var e=0;try{var t=zo;Uo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),zo=null}catch(t){throw null!==zo&&(zo=zo.slice(e+1)),ko(_o,qo),t}finally{Do=!1}}}function Go(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Ko(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Jo={current:null},Zo=null,Yo=null,Xo=null;function ei(){Xo=Yo=Zo=null}function ti(e){var t=Jo.current;uo(Jo),e.type._context._currentValue=t}function ni(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function ri(e,t){Zo=e,Xo=Yo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(ja=!0),e.firstContext=null)}function oi(e,t){if(Xo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Xo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Yo){if(null===Zo)throw Error(a(308));Yo=t,Zo.dependencies={expirationTime:0,firstContext:t,responders:null}}else Yo=Yo.next=t;return e._currentValue}var ii=!1;function ai(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function li(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function ui(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function ci(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function si(e,t){var n=e.alternate;null!==n&&li(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function fi(e,t,n,r){var i=e.updateQueue;ii=!1;var a=i.baseQueue,l=i.shared.pending;if(null!==l){if(null!==a){var u=a.next;a.next=l.next,l.next=u}a=l,i.shared.pending=null,null!==(u=e.alternate)&&(null!==(u=u.updateQueue)&&(u.baseQueue=l))}if(null!==a){u=a.next;var c=i.baseState,s=0,f=null,d=null,p=null;if(null!==u)for(var m=u;;){if((l=m.expirationTime)<r){var h={expirationTime:m.expirationTime,suspenseConfig:m.suspenseConfig,tag:m.tag,payload:m.payload,callback:m.callback,next:null};null===p?(d=p=h,f=c):p=p.next=h,l>s&&(s=l)}else{null!==p&&(p=p.next={expirationTime:1073741823,suspenseConfig:m.suspenseConfig,tag:m.tag,payload:m.payload,callback:m.callback,next:null}),iu(l,m.suspenseConfig);e:{var v=e,y=m;switch(l=t,h=n,y.tag){case 1:if("function"==typeof(v=y.payload)){c=v.call(h,c,l);break e}c=v;break e;case 3:v.effectTag=-4097&v.effectTag|64;case 0:if(null==(l="function"==typeof(v=y.payload)?v.call(h,c,l):v))break e;c=o({},c,l);break e;case 2:ii=!0}}null!==m.callback&&(e.effectTag|=32,null===(l=i.effects)?i.effects=[m]:l.push(m))}if(null===(m=m.next)||m===u){if(null===(l=i.shared.pending))break;m=a.next=l.next,l.next=u,i.baseQueue=a=l,i.shared.pending=null}}null===p?f=c:p.next=d,i.baseState=f,i.baseQueue=p,au(s),e.expirationTime=s,e.memoizedState=c}}function di(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=o,o=n,"function"!=typeof r)throw Error(a(191,r));r.call(o)}}}var pi=J.ReactCurrentBatchConfig,mi=(new r.Component).refs;function hi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var vi={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Xe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=ql(),o=pi.suspense;(o=ui(r=Ql(r,e,o),o)).payload=t,null!=n&&(o.callback=n),ci(e,o),Gl(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=ql(),o=pi.suspense;(o=ui(r=Ql(r,e,o),o)).tag=1,o.payload=t,null!=n&&(o.callback=n),ci(e,o),Gl(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=ql(),r=pi.suspense;(r=ui(n=Ql(n,e,r),r)).tag=2,null!=t&&(r.callback=t),ci(e,r),Gl(e,n)}};function yi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!Fr(n,r)||!Fr(o,i))}function gi(e,t,n){var r=!1,o=so,i=t.contextType;return"object"==typeof i&&null!==i?i=oi(i):(o=vo(t)?mo:fo.current,i=(r=null!=(r=t.contextTypes))?ho(e,o):so),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=vi,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function bi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&vi.enqueueReplaceState(t,t.state,null)}function wi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=mi,ai(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=oi(i):(i=vo(t)?mo:fo.current,o.context=ho(e,i)),fi(e,n,o,r),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(hi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&vi.enqueueReplaceState(o,o.state,null),fi(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var Ei=Array.isArray;function xi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===mi&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function ki(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Si(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Tu(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Cu(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=xi(e,t,n),r.return=e,r):((r=Pu(n.type,n.key,n.props,null,e.mode,r)).ref=xi(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=ju(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=_u(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Cu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=Pu(t.type,t.key,t.props,null,e.mode,n)).ref=xi(e,null,t),n.return=e,n;case te:return(t=ju(t,e.mode,n)).return=e,t}if(Ei(t)||he(t))return(t=_u(t,e.mode,n,null)).return=e,t;ki(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===o?n.type===ne?f(e,t,n.props.children,r,o):c(e,t,n,r):null;case te:return n.key===o?s(e,t,n,r):null}if(Ei(n)||he(n))return null!==o?null:f(e,t,n,r,null);ki(e,n)}return null}function m(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?f(t,e,r.props.children,o,r.key):c(t,e,r,o);case te:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Ei(r)||he(r))return f(t,e=e.get(n)||null,r,o,null);ki(t,r)}return null}function h(o,a,l,u){for(var c=null,s=null,f=a,h=a=0,v=null;null!==f&&h<l.length;h++){f.index>h?(v=f,f=null):v=f.sibling;var y=p(o,f,l[h],u);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(o,f),a=i(y,a,h),null===s?c=y:s.sibling=y,s=y,f=v}if(h===l.length)return n(o,f),c;if(null===f){for(;h<l.length;h++)null!==(f=d(o,l[h],u))&&(a=i(f,a,h),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(o,f);h<l.length;h++)null!==(v=m(f,o,h,l[h],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?h:v.key),a=i(v,a,h),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach((function(e){return t(o,e)})),c}function v(o,l,u,c){var s=he(u);if("function"!=typeof s)throw Error(a(150));if(null==(u=s.call(u)))throw Error(a(151));for(var f=s=null,h=l,v=l=0,y=null,g=u.next();null!==h&&!g.done;v++,g=u.next()){h.index>v?(y=h,h=null):y=h.sibling;var b=p(o,h,g.value,c);if(null===b){null===h&&(h=y);break}e&&h&&null===b.alternate&&t(o,h),l=i(b,l,v),null===f?s=b:f.sibling=b,f=b,h=y}if(g.done)return n(o,h),s;if(null===h){for(;!g.done;v++,g=u.next())null!==(g=d(o,g.value,c))&&(l=i(g,l,v),null===f?s=g:f.sibling=g,f=g);return s}for(h=r(o,h);!g.done;v++,g=u.next())null!==(g=m(h,o,v,g.value,c))&&(e&&null!==g.alternate&&h.delete(null===g.key?v:g.key),l=i(g,l,v),null===f?s=g:f.sibling=g,f=g);return e&&h.forEach((function(e){return t(o,e)})),s}return function(e,r,i,u){var c="object"==typeof i&&null!==i&&i.type===ne&&null===i.key;c&&(i=i.props.children);var s="object"==typeof i&&null!==i;if(s)switch(i.$$typeof){case ee:e:{for(s=i.key,c=r;null!==c;){if(c.key===s){switch(c.tag){case 7:if(i.type===ne){n(e,c.sibling),(r=o(c,i.props.children)).return=e,e=r;break e}break;default:if(c.elementType===i.type){n(e,c.sibling),(r=o(c,i.props)).ref=xi(e,c,i),r.return=e,e=r;break e}}n(e,c);break}t(e,c),c=c.sibling}i.type===ne?((r=_u(i.props.children,e.mode,u,i.key)).return=e,e=r):((u=Pu(i.type,i.key,i.props,null,e.mode,u)).ref=xi(e,r,i),u.return=e,e=u)}return l(e);case te:e:{for(c=i.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=ju(i,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Cu(i,e.mode,u)).return=e,e=r),l(e);if(Ei(i))return h(e,r,i,u);if(he(i))return v(e,r,i,u);if(s&&ki(e,i),void 0===i&&!c)switch(e.tag){case 1:case 0:throw e=e.type,Error(a(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Oi=Si(!0),Ti=Si(!1),Pi={},_i={current:Pi},Ci={current:Pi},ji={current:Pi};function Ni(e){if(e===Pi)throw Error(a(174));return e}function Ri(e,t){switch(co(ji,t),co(Ci,e),co(_i,Pi),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Le(null,"");break;default:t=Le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}uo(_i),co(_i,t)}function Mi(){uo(_i),uo(Ci),uo(ji)}function Ai(e){Ni(ji.current);var t=Ni(_i.current),n=Le(t,e.type);t!==n&&(co(Ci,e),co(_i,n))}function Ii(e){Ci.current===e&&(uo(_i),uo(Ci))}var zi={current:0};function Li(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Di(e,t){return{responder:e,props:t}}var Fi=J.ReactCurrentDispatcher,$i=J.ReactCurrentBatchConfig,Hi=0,Bi=null,Ui=null,Vi=null,Wi=!1;function qi(){throw Error(a(321))}function Qi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Lr(e[n],t[n]))return!1;return!0}function Gi(e,t,n,r,o,i){if(Hi=i,Bi=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Fi.current=null===e||null===e.memoizedState?ya:ga,e=n(r,o),t.expirationTime===Hi){i=0;do{if(t.expirationTime=0,!(25>i))throw Error(a(301));i+=1,Vi=Ui=null,t.updateQueue=null,Fi.current=ba,e=n(r,o)}while(t.expirationTime===Hi)}if(Fi.current=va,t=null!==Ui&&null!==Ui.next,Hi=0,Vi=Ui=Bi=null,Wi=!1,t)throw Error(a(300));return e}function Ki(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Vi?Bi.memoizedState=Vi=e:Vi=Vi.next=e,Vi}function Ji(){if(null===Ui){var e=Bi.alternate;e=null!==e?e.memoizedState:null}else e=Ui.next;var t=null===Vi?Bi.memoizedState:Vi.next;if(null!==t)Vi=t,Ui=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Ui=e).memoizedState,baseState:Ui.baseState,baseQueue:Ui.baseQueue,queue:Ui.queue,next:null},null===Vi?Bi.memoizedState=Vi=e:Vi=Vi.next=e}return Vi}function Zi(e,t){return"function"==typeof t?t(e):t}function Yi(e){var t=Ji(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Ui,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var u=l=i=null,c=o;do{var s=c.expirationTime;if(s<Hi){var f={expirationTime:c.expirationTime,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===u?(l=u=f,i=r):u=u.next=f,s>Bi.expirationTime&&(Bi.expirationTime=s,au(s))}else null!==u&&(u=u.next={expirationTime:1073741823,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),iu(s,c.suspenseConfig),r=c.eagerReducer===e?c.eagerState:e(r,c.action);c=c.next}while(null!==c&&c!==o);null===u?i=r:u.next=l,Lr(r,t.memoizedState)||(ja=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function Xi(e){var t=Ji(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);Lr(i,t.memoizedState)||(ja=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function ea(e){var t=Ki();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Zi,lastRenderedState:e}).dispatch=ha.bind(null,Bi,e),[t.memoizedState,e]}function ta(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Bi.updateQueue)?(t={lastEffect:null},Bi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function na(){return Ji().memoizedState}function ra(e,t,n,r){var o=Ki();Bi.effectTag|=e,o.memoizedState=ta(1|t,n,void 0,void 0===r?null:r)}function oa(e,t,n,r){var o=Ji();r=void 0===r?null:r;var i=void 0;if(null!==Ui){var a=Ui.memoizedState;if(i=a.destroy,null!==r&&Qi(r,a.deps))return void ta(t,n,i,r)}Bi.effectTag|=e,o.memoizedState=ta(1|t,n,i,r)}function ia(e,t){return ra(516,4,e,t)}function aa(e,t){return oa(516,4,e,t)}function la(e,t){return oa(4,2,e,t)}function ua(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ca(e,t,n){return n=null!=n?n.concat([e]):null,oa(4,2,ua.bind(null,t,e),n)}function sa(){}function fa(e,t){return Ki().memoizedState=[e,void 0===t?null:t],e}function da(e,t){var n=Ji();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Qi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function pa(e,t){var n=Ji();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Qi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function ma(e,t,n){var r=Ho();Uo(98>r?98:r,(function(){e(!0)})),Uo(97<r?97:r,(function(){var r=$i.suspense;$i.suspense=void 0===t?null:t;try{e(!1),n()}finally{$i.suspense=r}}))}function ha(e,t,n){var r=ql(),o=pi.suspense;o={expirationTime:r=Ql(r,e,o),suspenseConfig:o,action:n,eagerReducer:null,eagerState:null,next:null};var i=t.pending;if(null===i?o.next=o:(o.next=i.next,i.next=o),t.pending=o,i=e.alternate,e===Bi||null!==i&&i===Bi)Wi=!0,o.expirationTime=Hi,Bi.expirationTime=Hi;else{if(0===e.expirationTime&&(null===i||0===i.expirationTime)&&null!==(i=t.lastRenderedReducer))try{var a=t.lastRenderedState,l=i(a,n);if(o.eagerReducer=i,o.eagerState=l,Lr(l,a))return}catch(e){}Gl(e,r)}}var va={readContext:oi,useCallback:qi,useContext:qi,useEffect:qi,useImperativeHandle:qi,useLayoutEffect:qi,useMemo:qi,useReducer:qi,useRef:qi,useState:qi,useDebugValue:qi,useResponder:qi,useDeferredValue:qi,useTransition:qi},ya={readContext:oi,useCallback:fa,useContext:oi,useEffect:ia,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ra(4,2,ua.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ra(4,2,e,t)},useMemo:function(e,t){var n=Ki();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Ki();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=ha.bind(null,Bi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Ki().memoizedState=e},useState:ea,useDebugValue:sa,useResponder:Di,useDeferredValue:function(e,t){var n=ea(e),r=n[0],o=n[1];return ia((function(){var n=$i.suspense;$i.suspense=void 0===t?null:t;try{o(e)}finally{$i.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ea(!1),n=t[0];return t=t[1],[fa(ma.bind(null,t,e),[t,e]),n]}},ga={readContext:oi,useCallback:da,useContext:oi,useEffect:aa,useImperativeHandle:ca,useLayoutEffect:la,useMemo:pa,useReducer:Yi,useRef:na,useState:function(){return Yi(Zi)},useDebugValue:sa,useResponder:Di,useDeferredValue:function(e,t){var n=Yi(Zi),r=n[0],o=n[1];return aa((function(){var n=$i.suspense;$i.suspense=void 0===t?null:t;try{o(e)}finally{$i.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Yi(Zi),n=t[0];return t=t[1],[da(ma.bind(null,t,e),[t,e]),n]}},ba={readContext:oi,useCallback:da,useContext:oi,useEffect:aa,useImperativeHandle:ca,useLayoutEffect:la,useMemo:pa,useReducer:Xi,useRef:na,useState:function(){return Xi(Zi)},useDebugValue:sa,useResponder:Di,useDeferredValue:function(e,t){var n=Xi(Zi),r=n[0],o=n[1];return aa((function(){var n=$i.suspense;$i.suspense=void 0===t?null:t;try{o(e)}finally{$i.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Xi(Zi),n=t[0];return t=t[1],[da(ma.bind(null,t,e),[t,e]),n]}},wa=null,Ea=null,xa=!1;function ka(e,t){var n=Su(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Sa(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Oa(e){if(xa){var t=Ea;if(t){var n=t;if(!Sa(e,t)){if(!(t=En(n.nextSibling))||!Sa(e,t))return e.effectTag=-1025&e.effectTag|2,xa=!1,void(wa=e);ka(wa,n)}wa=e,Ea=En(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,xa=!1,wa=e}}function Ta(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;wa=e}function Pa(e){if(e!==wa)return!1;if(!xa)return Ta(e),xa=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!gn(t,e.memoizedProps))for(t=Ea;t;)ka(e,t),t=En(t.nextSibling);if(Ta(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Ea=En(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Ea=null}}else Ea=wa?En(e.stateNode.nextSibling):null;return!0}function _a(){Ea=wa=null,xa=!1}var Ca=J.ReactCurrentOwner,ja=!1;function Na(e,t,n,r){t.child=null===e?Ti(t,null,n,r):Oi(t,e.child,n,r)}function Ra(e,t,n,r,o){n=n.render;var i=t.ref;return ri(t,o),r=Gi(e,t,n,r,i,o),null===e||ja?(t.effectTag|=1,Na(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ga(e,t,o))}function Ma(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Ou(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Pu(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Aa(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:Fr)(o,r)&&e.ref===t.ref)?Ga(e,t,i):(t.effectTag|=1,(e=Tu(a,r)).ref=t.ref,e.return=t,t.child=e)}function Aa(e,t,n,r,o,i){return null!==e&&Fr(e.memoizedProps,r)&&e.ref===t.ref&&(ja=!1,o<i)?(t.expirationTime=e.expirationTime,Ga(e,t,i)):za(e,t,n,r,i)}function Ia(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function za(e,t,n,r,o){var i=vo(n)?mo:fo.current;return i=ho(t,i),ri(t,o),n=Gi(e,t,n,r,i,o),null===e||ja?(t.effectTag|=1,Na(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ga(e,t,o))}function La(e,t,n,r,o){if(vo(n)){var i=!0;wo(t)}else i=!1;if(ri(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),gi(t,n,r),wi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,l=t.memoizedProps;a.props=l;var u=a.context,c=n.contextType;"object"==typeof c&&null!==c?c=oi(c):c=ho(t,c=vo(n)?mo:fo.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||u!==c)&&bi(t,a,r,c),ii=!1;var d=t.memoizedState;a.state=d,fi(t,r,a,o),u=t.memoizedState,l!==r||d!==u||po.current||ii?("function"==typeof s&&(hi(t,n,s,r),u=t.memoizedState),(l=ii||yi(t,n,l,r,d,u,c))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=c,r=l):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,li(e,t),l=t.memoizedProps,a.props=t.type===t.elementType?l:Ko(t.type,l),u=a.context,"object"==typeof(c=n.contextType)&&null!==c?c=oi(c):c=ho(t,c=vo(n)?mo:fo.current),(f="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||u!==c)&&bi(t,a,r,c),ii=!1,u=t.memoizedState,a.state=u,fi(t,r,a,o),d=t.memoizedState,l!==r||u!==d||po.current||ii?("function"==typeof s&&(hi(t,n,s,r),d=t.memoizedState),(s=ii||yi(t,n,l,r,u,d,c))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,c),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,c)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),a.props=r,a.state=d,a.context=c,r=s):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),r=!1);return Da(e,t,n,r,i,o)}function Da(e,t,n,r,o,i){Ia(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&Eo(t,n,!1),Ga(e,t,i);r=t.stateNode,Ca.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=Oi(t,e.child,null,i),t.child=Oi(t,null,l,i)):Na(e,t,l,i),t.memoizedState=r.state,o&&Eo(t,n,!0),t.child}function Fa(e){var t=e.stateNode;t.pendingContext?go(0,t.pendingContext,t.pendingContext!==t.context):t.context&&go(0,t.context,!1),Ri(e,t.containerInfo)}var $a,Ha,Ba,Ua={dehydrated:null,retryTime:0};function Va(e,t,n){var r,o=t.mode,i=t.pendingProps,a=zi.current,l=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&a)&&(null===e||null!==e.memoizedState)),r?(l=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(a|=1),co(zi,1&a),null===e){if(void 0!==i.fallback&&Oa(t),l){if(l=i.fallback,(i=_u(null,o,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=_u(l,o,n,null)).return=t,i.sibling=n,t.memoizedState=Ua,t.child=i,n}return o=i.children,t.memoizedState=null,t.child=Ti(t,null,o,n)}if(null!==e.memoizedState){if(o=(e=e.child).sibling,l){if(i=i.fallback,(n=Tu(e,e.pendingProps)).return=t,0==(2&t.mode)&&(l=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=l;null!==l;)l.return=n,l=l.sibling;return(o=Tu(o,i)).return=t,n.sibling=o,n.childExpirationTime=0,t.memoizedState=Ua,t.child=n,o}return n=Oi(t,e.child,i.children,n),t.memoizedState=null,t.child=n}if(e=e.child,l){if(l=i.fallback,(i=_u(null,o,0,null)).return=t,i.child=e,null!==e&&(e.return=i),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=_u(l,o,n,null)).return=t,i.sibling=n,n.effectTag|=2,i.childExpirationTime=0,t.memoizedState=Ua,t.child=i,n}return t.memoizedState=null,t.child=Oi(t,e,i.children,n)}function Wa(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),ni(e.return,t)}function qa(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailExpiration=0,a.tailMode=o,a.lastEffect=i)}function Qa(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Na(e,t,r.children,n),0!=(2&(r=zi.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Wa(e,n);else if(19===e.tag)Wa(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(co(zi,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Li(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),qa(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Li(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}qa(t,!0,n,null,i,t.lastEffect);break;case"together":qa(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Ga(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&au(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Tu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Tu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Ka(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ja(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return vo(t.type)&&yo(),null;case 3:return Mi(),uo(po),uo(fo),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!Pa(t)||(t.effectTag|=4),null;case 5:Ii(t),n=Ni(ji.current);var i=t.type;if(null!==e&&null!=t.stateNode)Ha(e,t,i,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Ni(_i.current),Pa(t)){r=t.stateNode,i=t.type;var l=t.memoizedProps;switch(r[Sn]=t,r[On]=l,i){case"iframe":case"object":case"embed":Qt("load",r);break;case"video":case"audio":for(e=0;e<Je.length;e++)Qt(Je[e],r);break;case"source":Qt("error",r);break;case"img":case"image":case"link":Qt("error",r),Qt("load",r);break;case"form":Qt("reset",r),Qt("submit",r);break;case"details":Qt("toggle",r);break;case"input":ke(r,l),Qt("invalid",r),un(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Qt("invalid",r),un(n,"onChange");break;case"textarea":Ne(r,l),Qt("invalid",r),un(n,"onChange")}for(var u in on(i,l),e=null,l)if(l.hasOwnProperty(u)){var c=l[u];"children"===u?"string"==typeof c?r.textContent!==c&&(e=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(e=["children",""+c]):S.hasOwnProperty(u)&&null!=c&&un(n,u)}switch(i){case"input":we(r),Te(r,l,!0);break;case"textarea":we(r),Me(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=cn)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(u=9===n.nodeType?n:n.ownerDocument,e===ln&&(e=ze(i)),e===ln?"script"===i?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(i,{is:r.is}):(e=u.createElement(i),"select"===i&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,i),e[Sn]=t,e[On]=r,$a(e,t),t.stateNode=e,u=an(i,r),i){case"iframe":case"object":case"embed":Qt("load",e),c=r;break;case"video":case"audio":for(c=0;c<Je.length;c++)Qt(Je[c],e);c=r;break;case"source":Qt("error",e),c=r;break;case"img":case"image":case"link":Qt("error",e),Qt("load",e),c=r;break;case"form":Qt("reset",e),Qt("submit",e),c=r;break;case"details":Qt("toggle",e),c=r;break;case"input":ke(e,r),c=xe(e,r),Qt("invalid",e),un(n,"onChange");break;case"option":c=_e(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},c=o({},r,{value:void 0}),Qt("invalid",e),un(n,"onChange");break;case"textarea":Ne(e,r),c=je(e,r),Qt("invalid",e),un(n,"onChange");break;default:c=r}on(i,c);var s=c;for(l in s)if(s.hasOwnProperty(l)){var f=s[l];"style"===l?nn(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&Fe(e,f):"children"===l?"string"==typeof f?("textarea"!==i||""!==f)&&$e(e,f):"number"==typeof f&&$e(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(S.hasOwnProperty(l)?null!=f&&un(n,l):null!=f&&Z(e,l,f,u))}switch(i){case"input":we(e),Te(e,r,!1);break;case"textarea":we(e),Me(e);break;case"option":null!=r.value&&e.setAttribute("value",""+ge(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?Ce(e,!!r.multiple,n,!1):null!=r.defaultValue&&Ce(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof c.onClick&&(e.onclick=cn)}yn(i,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Ba(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Ni(ji.current),Ni(_i.current),Pa(t)?(n=t.stateNode,r=t.memoizedProps,n[Sn]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Sn]=t,t.stateNode=n)}return null;case 13:return uo(zi),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Pa(t):(r=null!==(i=e.memoizedState),n||null===i||null!==(i=e.child.sibling)&&(null!==(l=t.firstEffect)?(t.firstEffect=i,i.nextEffect=l):(t.firstEffect=t.lastEffect=i,i.nextEffect=null),i.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&zi.current)?Pl===wl&&(Pl=El):(Pl!==wl&&Pl!==El||(Pl=xl),0!==Rl&&null!==Sl&&(Mu(Sl,Tl),Au(Sl,Rl)))),(n||r)&&(t.effectTag|=4),null);case 4:return Mi(),null;case 10:return ti(t),null;case 17:return vo(t.type)&&yo(),null;case 19:if(uo(zi),null===(r=t.memoizedState))return null;if(i=0!=(64&t.effectTag),null===(l=r.rendering)){if(i)Ka(r,!1);else if(Pl!==wl||null!==e&&0!=(64&e.effectTag))for(l=t.child;null!==l;){if(null!==(e=Li(l))){for(t.effectTag|=64,Ka(r,!1),null!==(i=e.updateQueue)&&(t.updateQueue=i,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)l=n,(i=r).effectTag&=2,i.nextEffect=null,i.firstEffect=null,i.lastEffect=null,null===(e=i.alternate)?(i.childExpirationTime=0,i.expirationTime=l,i.child=null,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null):(i.childExpirationTime=e.childExpirationTime,i.expirationTime=e.expirationTime,i.child=e.child,i.memoizedProps=e.memoizedProps,i.memoizedState=e.memoizedState,i.updateQueue=e.updateQueue,l=e.dependencies,i.dependencies=null===l?null:{expirationTime:l.expirationTime,firstContext:l.firstContext,responders:l.responders}),r=r.sibling;return co(zi,1&zi.current|2),t.child}l=l.sibling}}else{if(!i)if(null!==(e=Li(l))){if(t.effectTag|=64,i=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Ka(r,!0),null===r.tail&&"hidden"===r.tailMode&&!l.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*$o()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,i=!0,Ka(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=r.last)?n.sibling=l:t.child=l,r.last=l)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=$o()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=$o(),n.sibling=null,t=zi.current,co(zi,i?1&t|2:1&t),n):null}throw Error(a(156,t.tag))}function Za(e){switch(e.tag){case 1:vo(e.type)&&yo();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Mi(),uo(po),uo(fo),0!=(64&(t=e.effectTag)))throw Error(a(285));return e.effectTag=-4097&t|64,e;case 5:return Ii(e),null;case 13:return uo(zi),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return uo(zi),null;case 4:return Mi(),null;case 10:return ti(e),null;default:return null}}function Ya(e,t){return{value:e,source:t,stack:ye(t)}}$a=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ha=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var l,u,c=t.stateNode;switch(Ni(_i.current),e=null,n){case"input":a=xe(c,a),r=xe(c,r),e=[];break;case"option":a=_e(c,a),r=_e(c,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=je(c,a),r=je(c,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(c.onclick=cn)}for(l in on(n,r),n=null,a)if(!r.hasOwnProperty(l)&&a.hasOwnProperty(l)&&null!=a[l])if("style"===l)for(u in c=a[l])c.hasOwnProperty(u)&&(n||(n={}),n[u]="");else"dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(S.hasOwnProperty(l)?e||(e=[]):(e=e||[]).push(l,null));for(l in r){var s=r[l];if(c=null!=a?a[l]:void 0,r.hasOwnProperty(l)&&s!==c&&(null!=s||null!=c))if("style"===l)if(c){for(u in c)!c.hasOwnProperty(u)||s&&s.hasOwnProperty(u)||(n||(n={}),n[u]="");for(u in s)s.hasOwnProperty(u)&&c[u]!==s[u]&&(n||(n={}),n[u]=s[u])}else n||(e||(e=[]),e.push(l,n)),n=s;else"dangerouslySetInnerHTML"===l?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(e=e||[]).push(l,s)):"children"===l?c===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(l,""+s):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(S.hasOwnProperty(l)?(null!=s&&un(i,l),e||c===s||(e=[])):(e=e||[]).push(l,s))}n&&(e=e||[]).push("style",n),i=e,(t.updateQueue=i)&&(t.effectTag|=4)}},Ba=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var Xa="function"==typeof WeakSet?WeakSet:Set;function el(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ye(n)),null!==n&&ve(n.type),t=t.value,null!==e&&1===e.tag&&ve(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function tl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){gu(e,t)}else t.current=null}function nl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Ko(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(a(163))}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function ol(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function il(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void ol(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:Ko(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&di(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}di(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&yn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&zt(n)))));case 19:case 17:case 20:case 21:return}throw Error(a(163))}function al(e,t,n){switch("function"==typeof xu&&xu(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Uo(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var o=t;try{n()}catch(e){gu(o,e)}}e=e.next}while(e!==r)}))}break;case 1:tl(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){gu(e,t)}}(t,n);break;case 5:tl(t);break;case 4:sl(e,t,n)}}function ll(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&ll(t)}function ul(e){return 5===e.tag||3===e.tag||4===e.tag}function cl(e){e:{for(var t=e.return;null!==t;){if(ul(t)){var n=t;break e}t=t.return}throw Error(a(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.effectTag&&($e(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ul(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?function e(t,n,r){var o=t.tag,i=5===o||6===o;if(i)t=i?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=cn));else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var o=t.tag,i=5===o||6===o;if(i)t=i?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function sl(e,t,n){for(var r,o,i=t,l=!1;;){if(!l){l=i.return;e:for(;;){if(null===l)throw Error(a(160));switch(r=l.stateNode,l.tag){case 5:o=!1;break e;case 3:case 4:r=r.containerInfo,o=!0;break e}l=l.return}l=!0}if(5===i.tag||6===i.tag){e:for(var u=e,c=i,s=n,f=c;;)if(al(u,f,s),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===c)break e;for(;null===f.sibling;){if(null===f.return||f.return===c)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}o?(u=r,c=i.stateNode,8===u.nodeType?u.parentNode.removeChild(c):u.removeChild(c)):r.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){r=i.stateNode.containerInfo,o=!0,i.child.return=i,i=i.child;continue}}else if(al(e,i,n),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(l=!1)}i.sibling.return=i.return,i=i.sibling}}function fl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void rl(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[On]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Se(n,r),an(e,o),t=an(e,r),o=0;o<i.length;o+=2){var l=i[o],u=i[o+1];"style"===l?nn(n,u):"dangerouslySetInnerHTML"===l?Fe(n,u):"children"===l?$e(n,u):Z(n,l,u,t)}switch(e){case"input":Oe(n,r);break;case"textarea":Re(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Ce(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Ce(n,!!r.multiple,r.defaultValue,!0):Ce(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,zt(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Al=$o()),null!==n)e:for(e=n;;){if(5===e.tag)i=e.stateNode,r?"function"==typeof(i=i.style).setProperty?i.setProperty("display","none","important"):i.display="none":(i=e.stateNode,o=null!=(o=e.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null,i.style.display=tn("display",o));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(i=e.child.sibling).return=e,e=i;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void dl(t);case 19:return void dl(t);case 17:return}throw Error(a(163))}function dl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Xa),t.forEach((function(t){var r=wu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function ml(e,t,n){(n=ui(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){zl||(zl=!0,Ll=r),el(e,t)},n}function hl(e,t,n){(n=ui(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return el(e,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Dl?Dl=new Set([this]):Dl.add(this),el(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var vl,yl=Math.ceil,gl=J.ReactCurrentDispatcher,bl=J.ReactCurrentOwner,wl=0,El=3,xl=4,kl=0,Sl=null,Ol=null,Tl=0,Pl=wl,_l=null,Cl=1073741823,jl=1073741823,Nl=null,Rl=0,Ml=!1,Al=0,Il=null,zl=!1,Ll=null,Dl=null,Fl=!1,$l=null,Hl=90,Bl=null,Ul=0,Vl=null,Wl=0;function ql(){return 0!=(48&kl)?1073741821-($o()/10|0):0!==Wl?Wl:Wl=1073741821-($o()/10|0)}function Ql(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Ho();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&kl))return Tl;if(null!==n)e=Go(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Go(e,150,100);break;case 97:case 96:e=Go(e,5e3,250);break;case 95:e=2;break;default:throw Error(a(326))}return null!==Sl&&e===Tl&&--e,e}function Gl(e,t){if(50<Ul)throw Ul=0,Vl=null,Error(a(185));if(null!==(e=Kl(e,t))){var n=Ho();1073741823===t?0!=(8&kl)&&0==(48&kl)?Xl(e):(Zl(e),0===kl&&qo()):Zl(e),0==(4&kl)||98!==n&&99!==n||(null===Bl?Bl=new Map([[e,t]]):(void 0===(n=Bl.get(e))||n>t)&&Bl.set(e,t))}}function Kl(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return null!==o&&(Sl===o&&(au(t),Pl===xl&&Mu(o,Tl)),Au(o,t)),o}function Jl(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Ru(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function Zl(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Wo(Xl.bind(null,e));else{var t=Jl(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=ql();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var o=e.callbackPriority;if(e.callbackExpirationTime===t&&o>=r)return;n!==Mo&&So(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Wo(Xl.bind(null,e)):Vo(r,Yl.bind(null,e),{timeout:10*(1073741821-t)-$o()}),e.callbackNode=t}}}function Yl(e,t){if(Wl=0,t)return Iu(e,t=ql()),Zl(e),null;var n=Jl(e);if(0!==n){if(t=e.callbackNode,0!=(48&kl))throw Error(a(327));if(hu(),e===Sl&&n===Tl||nu(e,n),null!==Ol){var r=kl;kl|=16;for(var o=ou();;)try{uu();break}catch(t){ru(e,t)}if(ei(),kl=r,gl.current=o,1===Pl)throw t=_l,nu(e,n),Mu(e,n),Zl(e),t;if(null===Ol)switch(o=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Pl,Sl=null,r){case wl:case 1:throw Error(a(345));case 2:Iu(e,2<n?2:n);break;case El:if(Mu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fu(o)),1073741823===Cl&&10<(o=Al+500-$o())){if(Ml){var i=e.lastPingedTime;if(0===i||i>=n){e.lastPingedTime=n,nu(e,n);break}}if(0!==(i=Jl(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=bn(du.bind(null,e),o);break}du(e);break;case xl:if(Mu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fu(o)),Ml&&(0===(o=e.lastPingedTime)||o>=n)){e.lastPingedTime=n,nu(e,n);break}if(0!==(o=Jl(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==jl?r=10*(1073741821-jl)-$o():1073741823===Cl?r=0:(r=10*(1073741821-Cl)-5e3,0>(r=(o=$o())-r)&&(r=0),(n=10*(1073741821-n)-o)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*yl(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=bn(du.bind(null,e),r);break}du(e);break;case 5:if(1073741823!==Cl&&null!==Nl){i=Cl;var l=Nl;if(0>=(r=0|l.busyMinDurationMs)?r=0:(o=0|l.busyDelayMs,r=(i=$o()-(10*(1073741821-i)-(0|l.timeoutMs||5e3)))<=o?0:o+r-i),10<r){Mu(e,n),e.timeoutHandle=bn(du.bind(null,e),r);break}}du(e);break;default:throw Error(a(329))}if(Zl(e),e.callbackNode===t)return Yl.bind(null,e)}}return null}function Xl(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&kl))throw Error(a(327));if(hu(),e===Sl&&t===Tl||nu(e,t),null!==Ol){var n=kl;kl|=16;for(var r=ou();;)try{lu();break}catch(t){ru(e,t)}if(ei(),kl=n,gl.current=r,1===Pl)throw n=_l,nu(e,t),Mu(e,t),Zl(e),n;if(null!==Ol)throw Error(a(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Sl=null,du(e),Zl(e)}return null}function eu(e,t){var n=kl;kl|=1;try{return e(t)}finally{0===(kl=n)&&qo()}}function tu(e,t){var n=kl;kl&=-2,kl|=8;try{return e(t)}finally{0===(kl=n)&&qo()}}function nu(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,wn(n)),null!==Ol)for(n=Ol.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&yo();break;case 3:Mi(),uo(po),uo(fo);break;case 5:Ii(r);break;case 4:Mi();break;case 13:case 19:uo(zi);break;case 10:ti(r)}n=n.return}Sl=e,Ol=Tu(e.current,null),Tl=t,Pl=wl,_l=null,jl=Cl=1073741823,Nl=null,Rl=0,Ml=!1}function ru(e,t){for(;;){try{if(ei(),Fi.current=va,Wi)for(var n=Bi.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if(Hi=0,Vi=Ui=Bi=null,Wi=!1,null===Ol||null===Ol.return)return Pl=1,_l=t,Ol=null;e:{var o=e,i=Ol.return,a=Ol,l=t;if(t=Tl,a.effectTag|=2048,a.firstEffect=a.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var u=l;if(0==(2&a.mode)){var c=a.alternate;c?(a.updateQueue=c.updateQueue,a.memoizedState=c.memoizedState,a.expirationTime=c.expirationTime):(a.updateQueue=null,a.memoizedState=null)}var s=0!=(1&zi.current),f=i;do{var d;if(d=13===f.tag){var p=f.memoizedState;if(null!==p)d=null!==p.dehydrated;else{var m=f.memoizedProps;d=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!s)}}if(d){var h=f.updateQueue;if(null===h){var v=new Set;v.add(u),f.updateQueue=v}else h.add(u);if(0==(2&f.mode)){if(f.effectTag|=64,a.effectTag&=-2981,1===a.tag)if(null===a.alternate)a.tag=17;else{var y=ui(1073741823,null);y.tag=2,ci(a,y)}a.expirationTime=1073741823;break e}l=void 0,a=t;var g=o.pingCache;if(null===g?(g=o.pingCache=new pl,l=new Set,g.set(u,l)):void 0===(l=g.get(u))&&(l=new Set,g.set(u,l)),!l.has(a)){l.add(a);var b=bu.bind(null,o,u,a);u.then(b,b)}f.effectTag|=4096,f.expirationTime=t;break e}f=f.return}while(null!==f);l=Error((ve(a.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ye(a))}5!==Pl&&(Pl=2),l=Ya(l,a),f=i;do{switch(f.tag){case 3:u=l,f.effectTag|=4096,f.expirationTime=t,si(f,ml(f,u,t));break e;case 1:u=l;var w=f.type,E=f.stateNode;if(0==(64&f.effectTag)&&("function"==typeof w.getDerivedStateFromError||null!==E&&"function"==typeof E.componentDidCatch&&(null===Dl||!Dl.has(E)))){f.effectTag|=4096,f.expirationTime=t,si(f,hl(f,u,t));break e}}f=f.return}while(null!==f)}Ol=su(Ol)}catch(e){t=e;continue}break}}function ou(){var e=gl.current;return gl.current=va,null===e?va:e}function iu(e,t){e<Cl&&2<e&&(Cl=e),null!==t&&e<jl&&2<e&&(jl=e,Nl=t)}function au(e){e>Rl&&(Rl=e)}function lu(){for(;null!==Ol;)Ol=cu(Ol)}function uu(){for(;null!==Ol&&!Ao();)Ol=cu(Ol)}function cu(e){var t=vl(e.alternate,e,Tl);return e.memoizedProps=e.pendingProps,null===t&&(t=su(e)),bl.current=null,t}function su(e){Ol=e;do{var t=Ol.alternate;if(e=Ol.return,0==(2048&Ol.effectTag)){if(t=Ja(t,Ol,Tl),1===Tl||1!==Ol.childExpirationTime){for(var n=0,r=Ol.child;null!==r;){var o=r.expirationTime,i=r.childExpirationTime;o>n&&(n=o),i>n&&(n=i),r=r.sibling}Ol.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Ol.firstEffect),null!==Ol.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Ol.firstEffect),e.lastEffect=Ol.lastEffect),1<Ol.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Ol:e.firstEffect=Ol,e.lastEffect=Ol))}else{if(null!==(t=Za(Ol)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Ol.sibling))return t;Ol=e}while(null!==Ol);return Pl===wl&&(Pl=5),null}function fu(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function du(e){var t=Ho();return Uo(99,pu.bind(null,e,t)),null}function pu(e,t){do{hu()}while(null!==$l);if(0!=(48&kl))throw Error(a(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var o=fu(n);if(e.firstPendingTime=o,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Sl&&(Ol=Sl=null,Tl=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){var i=kl;kl|=32,bl.current=null,hn=qt;var l=pn();if(mn(l)){if("selectionStart"in l)var u={start:l.selectionStart,end:l.selectionEnd};else e:{var c=(u=(u=l.ownerDocument)&&u.defaultView||window).getSelection&&u.getSelection();if(c&&0!==c.rangeCount){u=c.anchorNode;var s=c.anchorOffset,f=c.focusNode;c=c.focusOffset;try{u.nodeType,f.nodeType}catch(e){u=null;break e}var d=0,p=-1,m=-1,h=0,v=0,y=l,g=null;t:for(;;){for(var b;y!==u||0!==s&&3!==y.nodeType||(p=d+s),y!==f||0!==c&&3!==y.nodeType||(m=d+c),3===y.nodeType&&(d+=y.nodeValue.length),null!==(b=y.firstChild);)g=y,y=b;for(;;){if(y===l)break t;if(g===u&&++h===s&&(p=d),g===f&&++v===c&&(m=d),null!==(b=y.nextSibling))break;g=(y=g).parentNode}y=b}u=-1===p||-1===m?null:{start:p,end:m}}else u=null}u=u||{start:0,end:0}}else u=null;vn={activeElementDetached:null,focusedElem:l,selectionRange:u},qt=!1,Il=o;do{try{mu()}catch(e){if(null===Il)throw Error(a(330));gu(Il,e),Il=Il.nextEffect}}while(null!==Il);Il=o;do{try{for(l=e,u=t;null!==Il;){var w=Il.effectTag;if(16&w&&$e(Il.stateNode,""),128&w){var E=Il.alternate;if(null!==E){var x=E.ref;null!==x&&("function"==typeof x?x(null):x.current=null)}}switch(1038&w){case 2:cl(Il),Il.effectTag&=-3;break;case 6:cl(Il),Il.effectTag&=-3,fl(Il.alternate,Il);break;case 1024:Il.effectTag&=-1025;break;case 1028:Il.effectTag&=-1025,fl(Il.alternate,Il);break;case 4:fl(Il.alternate,Il);break;case 8:sl(l,s=Il,u),ll(s)}Il=Il.nextEffect}}catch(e){if(null===Il)throw Error(a(330));gu(Il,e),Il=Il.nextEffect}}while(null!==Il);if(x=vn,E=pn(),w=x.focusedElem,u=x.selectionRange,E!==w&&w&&w.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(w.ownerDocument.documentElement,w)){null!==u&&mn(w)&&(E=u.start,void 0===(x=u.end)&&(x=E),"selectionStart"in w?(w.selectionStart=E,w.selectionEnd=Math.min(x,w.value.length)):(x=(E=w.ownerDocument||document)&&E.defaultView||window).getSelection&&(x=x.getSelection(),s=w.textContent.length,l=Math.min(u.start,s),u=void 0===u.end?l:Math.min(u.end,s),!x.extend&&l>u&&(s=u,u=l,l=s),s=dn(w,l),f=dn(w,u),s&&f&&(1!==x.rangeCount||x.anchorNode!==s.node||x.anchorOffset!==s.offset||x.focusNode!==f.node||x.focusOffset!==f.offset)&&((E=E.createRange()).setStart(s.node,s.offset),x.removeAllRanges(),l>u?(x.addRange(E),x.extend(f.node,f.offset)):(E.setEnd(f.node,f.offset),x.addRange(E))))),E=[];for(x=w;x=x.parentNode;)1===x.nodeType&&E.push({element:x,left:x.scrollLeft,top:x.scrollTop});for("function"==typeof w.focus&&w.focus(),w=0;w<E.length;w++)(x=E[w]).element.scrollLeft=x.left,x.element.scrollTop=x.top}qt=!!hn,vn=hn=null,e.current=n,Il=o;do{try{for(w=e;null!==Il;){var k=Il.effectTag;if(36&k&&il(w,Il.alternate,Il),128&k){E=void 0;var S=Il.ref;if(null!==S){var O=Il.stateNode;switch(Il.tag){case 5:E=O;break;default:E=O}"function"==typeof S?S(E):S.current=E}}Il=Il.nextEffect}}catch(e){if(null===Il)throw Error(a(330));gu(Il,e),Il=Il.nextEffect}}while(null!==Il);Il=null,Io(),kl=i}else e.current=n;if(Fl)Fl=!1,$l=e,Hl=t;else for(Il=o;null!==Il;)t=Il.nextEffect,Il.nextEffect=null,Il=t;if(0===(t=e.firstPendingTime)&&(Dl=null),1073741823===t?e===Vl?Ul++:(Ul=0,Vl=e):Ul=0,"function"==typeof Eu&&Eu(n.stateNode,r),Zl(e),zl)throw zl=!1,e=Ll,Ll=null,e;return 0!=(8&kl)||qo(),null}function mu(){for(;null!==Il;){var e=Il.effectTag;0!=(256&e)&&nl(Il.alternate,Il),0==(512&e)||Fl||(Fl=!0,Vo(97,(function(){return hu(),null}))),Il=Il.nextEffect}}function hu(){if(90!==Hl){var e=97<Hl?97:Hl;return Hl=90,Uo(e,vu)}}function vu(){if(null===$l)return!1;var e=$l;if($l=null,0!=(48&kl))throw Error(a(331));var t=kl;for(kl|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:rl(5,n),ol(5,n)}}catch(t){if(null===e)throw Error(a(330));gu(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return kl=t,qo(),!0}function yu(e,t,n){ci(e,t=ml(e,t=Ya(n,t),1073741823)),null!==(e=Kl(e,1073741823))&&Zl(e)}function gu(e,t){if(3===e.tag)yu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){yu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Dl||!Dl.has(r))){ci(n,e=hl(n,e=Ya(t,e),1073741823)),null!==(n=Kl(n,1073741823))&&Zl(n);break}}n=n.return}}function bu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Sl===e&&Tl===n?Pl===xl||Pl===El&&1073741823===Cl&&$o()-Al<500?nu(e,Tl):Ml=!0:Ru(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,Zl(e)))}function wu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=Ql(t=ql(),e,null)),null!==(e=Kl(e,t))&&Zl(e)}vl=function(e,t,n){var r=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||po.current)ja=!0;else{if(r<n){switch(ja=!1,t.tag){case 3:Fa(t),_a();break;case 5:if(Ai(t),4&t.mode&&1!==n&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:vo(t.type)&&wo(t);break;case 4:Ri(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,o=t.type._context,co(Jo,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Va(e,t,n):(co(zi,1&zi.current),null!==(t=Ga(e,t,n))?t.sibling:null);co(zi,1&zi.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return Qa(e,t,n);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),co(zi,zi.current),!r)return null}return Ga(e,t,n)}ja=!1}}else ja=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=ho(t,fo.current),ri(t,n),o=Gi(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,vo(r)){var i=!0;wo(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ai(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&hi(t,r,l,e),o.updater=vi,t.stateNode=o,o._reactInternalFiber=t,wi(t,r,e,n),t=Da(null,t,r,!0,i,n)}else t.tag=0,Na(null,t,o,n),t=t.child;return t;case 16:e:{if(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(o),1!==o._status)throw o._result;switch(o=o._result,t.type=o,i=t.tag=function(e){if("function"==typeof e)return Ou(e)?1:0;if(null!=e){if((e=e.$$typeof)===ue)return 11;if(e===fe)return 14}return 2}(o),e=Ko(o,e),i){case 0:t=za(null,t,o,e,n);break e;case 1:t=La(null,t,o,e,n);break e;case 11:t=Ra(null,t,o,e,n);break e;case 14:t=Ma(null,t,o,Ko(o.type,e),r,n);break e}throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,za(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 1:return r=t.type,o=t.pendingProps,La(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 3:if(Fa(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,li(e,t),fi(t,r,null,n),(r=t.memoizedState.element)===o)_a(),t=Ga(e,t,n);else{if((o=t.stateNode.hydrate)&&(Ea=En(t.stateNode.containerInfo.firstChild),wa=t,o=xa=!0),o)for(n=Ti(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Na(e,t,r,n),_a();t=t.child}return t;case 5:return Ai(t),null===e&&Oa(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,gn(r,o)?l=null:null!==i&&gn(r,i)&&(t.effectTag|=16),Ia(e,t),4&t.mode&&1!==n&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Na(e,t,l,n),t=t.child),t;case 6:return null===e&&Oa(t),null;case 13:return Va(e,t,n);case 4:return Ri(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Oi(t,null,r,n):Na(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Ra(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 7:return Na(e,t,t.pendingProps,n),t.child;case 8:case 12:return Na(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,i=o.value;var u=t.type._context;if(co(Jo,u._currentValue),u._currentValue=i,null!==l)if(u=l.value,0===(i=Lr(u,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,i):1073741823))){if(l.children===o.children&&!po.current){t=Ga(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var c=u.dependencies;if(null!==c){l=u.child;for(var s=c.firstContext;null!==s;){if(s.context===r&&0!=(s.observedBits&i)){1===u.tag&&((s=ui(n,null)).tag=2,ci(u,s)),u.expirationTime<n&&(u.expirationTime=n),null!==(s=u.alternate)&&s.expirationTime<n&&(s.expirationTime=n),ni(u.return,n),c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}Na(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ri(t,n),r=r(o=oi(o,i.unstable_observedBits)),t.effectTag|=1,Na(e,t,r,n),t.child;case 14:return i=Ko(o=t.type,t.pendingProps),Ma(e,t,o,i=Ko(o.type,i),r,n);case 15:return Aa(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Ko(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,vo(r)?(e=!0,wo(t)):e=!1,ri(t,n),gi(t,r,o),wi(t,r,o,n),Da(null,t,r,!0,e,n);case 19:return Qa(e,t,n)}throw Error(a(156,t.tag))};var Eu=null,xu=null;function ku(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Su(e,t,n,r){return new ku(e,t,n,r)}function Ou(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Tu(e,t){var n=e.alternate;return null===n?((n=Su(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Pu(e,t,n,r,o,i){var l=2;if(r=e,"function"==typeof e)Ou(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case ne:return _u(n.children,o,i,t);case le:l=8,o|=7;break;case re:l=8,o|=1;break;case oe:return(e=Su(12,n,t,8|o)).elementType=oe,e.type=oe,e.expirationTime=i,e;case ce:return(e=Su(13,n,t,o)).type=ce,e.elementType=ce,e.expirationTime=i,e;case se:return(e=Su(19,n,t,o)).elementType=se,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case ie:l=10;break e;case ae:l=9;break e;case ue:l=11;break e;case fe:l=14;break e;case de:l=16,r=null;break e;case pe:l=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Su(l,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function _u(e,t,n,r){return(e=Su(7,e,r,t)).expirationTime=n,e}function Cu(e,t,n){return(e=Su(6,e,null,t)).expirationTime=n,e}function ju(e,t,n){return(t=Su(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Nu(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Ru(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Mu(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Au(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Iu(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function zu(e,t,n,r){var o=t.current,i=ql(),l=pi.suspense;i=Ql(i,o,l);e:if(n){t:{if(Xe(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(a(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(vo(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(a(171))}if(1===n.tag){var c=n.type;if(vo(c)){n=bo(n,c,u);break e}}n=u}else n=so;return null===t.context?t.context=n:t.pendingContext=n,(t=ui(i,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ci(o,t),Gl(o,i),i}function Lu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Du(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Fu(e,t){Du(e,t),(e=e.alternate)&&Du(e,t)}function $u(e,t,n){var r=new Nu(e,t,n=null!=n&&!0===n.hydrate),o=Su(3,null,null,2===t?7:1===t?3:0);r.current=o,o.stateNode=r,ai(o),e[Tn]=r.current,n&&0!==t&&function(e,t){var n=Ye(t);Tt.forEach((function(e){mt(e,t,n)})),Pt.forEach((function(e){mt(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function Hu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Bu(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=Lu(a);l.call(e)}}zu(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new $u(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var u=o;o=function(){var e=Lu(a);u.call(e)}}tu((function(){zu(t,a,e,o)}))}return Lu(a)}function Uu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Vu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Hu(t))throw Error(a(200));return Uu(e,t,null,n)}$u.prototype.render=function(e){zu(e,this._internalRoot,null,null)},$u.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;zu(null,e,null,(function(){t[Tn]=null}))},ht=function(e){if(13===e.tag){var t=Go(ql(),150,100);Gl(e,t),Fu(e,t)}},vt=function(e){13===e.tag&&(Gl(e,3),Fu(e,3))},yt=function(e){if(13===e.tag){var t=ql();Gl(e,t=Ql(t,e,null)),Fu(e,t)}},_=function(e,t,n){switch(t){case"input":if(Oe(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=jn(r);if(!o)throw Error(a(90));Ee(r),Oe(r,o)}}}break;case"textarea":Re(e,n);break;case"select":null!=(t=n.value)&&Ce(e,!!n.multiple,t,!1)}},A=eu,I=function(e,t,n,r,o){var i=kl;kl|=4;try{return Uo(98,e.bind(null,t,n,r,o))}finally{0===(kl=i)&&qo()}},z=function(){0==(49&kl)&&(function(){if(null!==Bl){var e=Bl;Bl=null,e.forEach((function(e,t){Iu(t,e),Zl(t)})),qo()}}(),hu())},L=function(e,t){var n=kl;kl|=2;try{return e(t)}finally{0===(kl=n)&&qo()}};var Wu,qu,Qu={Events:[_n,Cn,jn,T,k,Ln,function(e){ot(e,zn)},R,M,Zt,lt,hu,{current:!1}]};qu=(Wu={findFiberByHostInstance:Pn,bundleType:0,version:"16.14.0",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Eu=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},xu=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(o({},Wu,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:J.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=nt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return qu?qu(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Qu,t.createPortal=Vu,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return e=null===(e=nt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&kl))throw Error(a(187));var n=kl;kl|=1;try{return Uo(99,e.bind(null,t))}finally{kl=n,qo()}},t.hydrate=function(e,t,n){if(!Hu(t))throw Error(a(200));return Bu(null,e,t,!0,n)},t.render=function(e,t,n){if(!Hu(t))throw Error(a(200));return Bu(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Hu(e))throw Error(a(40));return!!e._reactRootContainer&&(tu((function(){Bu(null,null,e,!1,(function(){e._reactRootContainer=null,e[Tn]=null}))})),!0)},t.unstable_batchedUpdates=eu,t.unstable_createPortal=function(e,t){return Vu(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Hu(n))throw Error(a(200));if(null==e||void 0===e._reactInternalFiber)throw Error(a(38));return Bu(e,t,n,!1,r)},t.version="16.14.0"},function(e,t,n){"use strict";e.exports=n(38)},function(e,t,n){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,i,a,l;if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,c=null,s=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(s,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==u?setTimeout(r,0,e):(u=e,setTimeout(s,0))},o=function(e,t){c=setTimeout(e,t)},i=function(){clearTimeout(c)},a=function(){return!1},l=t.unstable_forceFrameRate=function(){}}else{var d=window.performance,p=window.Date,m=window.setTimeout,h=window.clearTimeout;if("undefined"!=typeof console){var v=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof v&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof d&&"function"==typeof d.now)t.unstable_now=function(){return d.now()};else{var y=p.now();t.unstable_now=function(){return p.now()-y}}var g=!1,b=null,w=-1,E=5,x=0;a=function(){return t.unstable_now()>=x},l=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):E=0<e?Math.floor(1e3/e):5};var k=new MessageChannel,S=k.port2;k.port1.onmessage=function(){if(null!==b){var e=t.unstable_now();x=e+E;try{b(!0,e)?S.postMessage(null):(g=!1,b=null)}catch(e){throw S.postMessage(null),e}}else g=!1},r=function(e){b=e,g||(g=!0,S.postMessage(null))},o=function(e,n){w=m((function(){e(t.unstable_now())}),n)},i=function(){h(w),w=-1}}function O(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<_(o,t)))break e;e[r]=t,e[n]=o,n=r}}function T(e){return void 0===(e=e[0])?null:e}function P(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],l=i+1,u=e[l];if(void 0!==a&&0>_(a,n))void 0!==u&&0>_(u,a)?(e[r]=u,e[l]=n,r=l):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==u&&0>_(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function _(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var C=[],j=[],N=1,R=null,M=3,A=!1,I=!1,z=!1;function L(e){for(var t=T(j);null!==t;){if(null===t.callback)P(j);else{if(!(t.startTime<=e))break;P(j),t.sortIndex=t.expirationTime,O(C,t)}t=T(j)}}function D(e){if(z=!1,L(e),!I)if(null!==T(C))I=!0,r(F);else{var t=T(j);null!==t&&o(D,t.startTime-e)}}function F(e,n){I=!1,z&&(z=!1,i()),A=!0;var r=M;try{for(L(n),R=T(C);null!==R&&(!(R.expirationTime>n)||e&&!a());){var l=R.callback;if(null!==l){R.callback=null,M=R.priorityLevel;var u=l(R.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?R.callback=u:R===T(C)&&P(C),L(n)}else P(C);R=T(C)}if(null!==R)var c=!0;else{var s=T(j);null!==s&&o(D,s.startTime-n),c=!1}return c}finally{R=null,M=r,A=!1}}function $(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var H=l;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){I||A||(I=!0,r(F))},t.unstable_getCurrentPriorityLevel=function(){return M},t.unstable_getFirstCallbackNode=function(){return T(C)},t.unstable_next=function(e){switch(M){case 1:case 2:case 3:var t=3;break;default:t=M}var n=M;M=t;try{return e()}finally{M=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=H,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=M;M=e;try{return t()}finally{M=n}},t.unstable_scheduleCallback=function(e,n,a){var l=t.unstable_now();if("object"==typeof a&&null!==a){var u=a.delay;u="number"==typeof u&&0<u?l+u:l,a="number"==typeof a.timeout?a.timeout:$(e)}else a=$(e),u=l;return e={id:N++,callback:n,priorityLevel:e,startTime:u,expirationTime:a=u+a,sortIndex:-1},u>l?(e.sortIndex=u,O(j,e),null===T(C)&&e===T(j)&&(z?i():z=!0,o(D,u-l))):(e.sortIndex=a,O(C,e),I||A||(I=!0,r(F))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();L(e);var n=T(C);return n!==R&&null!==R&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<R.expirationTime||a()},t.unstable_wrapCallback=function(e){var t=M;return function(){var n=M;M=t;try{return e.apply(this,arguments)}finally{M=n}}}},function(e,t,n){var r=n(40);e.exports=function(e){return r(e).replace(/[\W_]+(.|$)/g,(function(e,t){return t?" "+t:""})).trim()}},function(e,t){e.exports=function(e){return n.test(e)?e.toLowerCase():r.test(e)?(function(e){return e.replace(i,(function(e,t){return t?" "+t:""}))}(e)||e).toLowerCase():o.test(e)?function(e){return e.replace(a,(function(e,t,n){return t+" "+n.toLowerCase().split("").join(" ")}))}(e).toLowerCase():e.toLowerCase()};var n=/\s/,r=/(_|-|\.|:)/,o=/([a-z][A-Z]|[A-Z][a-z])/;var i=/[\W_]+(.|$)/g;var a=/(.)([A-Z]+)/g},function(e,t,n){"use strict";var r=n(42);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.12.0
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,l=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,m=r?Symbol.for("react.suspense"):60113,h=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116,g=r?Symbol.for("react.fundamental"):60117,b=r?Symbol.for("react.responder"):60118,w=r?Symbol.for("react.scope"):60119;function E(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case d:case a:case u:case l:case m:return e;default:switch(e=e&&e.$$typeof){case s:case p:case y:case v:case c:return e;default:return t}}case i:return t}}}function x(e){return E(e)===d}t.typeOf=E,t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=s,t.ContextProvider=c,t.Element=o,t.ForwardRef=p,t.Fragment=a,t.Lazy=y,t.Memo=v,t.Portal=i,t.Profiler=u,t.StrictMode=l,t.Suspense=m,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===u||e===l||e===m||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===v||e.$$typeof===c||e.$$typeof===s||e.$$typeof===p||e.$$typeof===g||e.$$typeof===b||e.$$typeof===w)},t.isAsyncMode=function(e){return x(e)||E(e)===f},t.isConcurrentMode=x,t.isContextConsumer=function(e){return E(e)===s},t.isContextProvider=function(e){return E(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return E(e)===p},t.isFragment=function(e){return E(e)===a},t.isLazy=function(e){return E(e)===y},t.isMemo=function(e){return E(e)===v},t.isPortal=function(e){return E(e)===i},t.isProfiler=function(e){return E(e)===u},t.isStrictMode=function(e){return E(e)===l},t.isSuspense=function(e){return E(e)===m}},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,l=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,m=r?Symbol.for("react.suspense"):60113,h=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116,g=r?Symbol.for("react.block"):60121,b=r?Symbol.for("react.fundamental"):60117,w=r?Symbol.for("react.responder"):60118,E=r?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case d:case a:case u:case l:case m:return e;default:switch(e=e&&e.$$typeof){case s:case p:case y:case v:case c:return e;default:return t}}case i:return t}}}function k(e){return x(e)===d}t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=s,t.ContextProvider=c,t.Element=o,t.ForwardRef=p,t.Fragment=a,t.Lazy=y,t.Memo=v,t.Portal=i,t.Profiler=u,t.StrictMode=l,t.Suspense=m,t.isAsyncMode=function(e){return k(e)||x(e)===f},t.isConcurrentMode=k,t.isContextConsumer=function(e){return x(e)===s},t.isContextProvider=function(e){return x(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return x(e)===p},t.isFragment=function(e){return x(e)===a},t.isLazy=function(e){return x(e)===y},t.isMemo=function(e){return x(e)===v},t.isPortal=function(e){return x(e)===i},t.isProfiler=function(e){return x(e)===u},t.isStrictMode=function(e){return x(e)===l},t.isSuspense=function(e){return x(e)===m},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===u||e===l||e===m||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===v||e.$$typeof===c||e.$$typeof===s||e.$$typeof===p||e.$$typeof===b||e.$$typeof===w||e.$$typeof===E||e.$$typeof===g)},t.typeOf=x},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},,,function(e,t){function n(){return e.exports=n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n.apply(this,arguments)}e.exports=n},,,,,,,function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),i=n(10),a=n.n(i),l=n(3),u=(n(2),n(1));function c(e){return"/"===e.charAt(0)}function s(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var f=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],o=t&&t.split("/")||[],i=e&&c(e),a=t&&c(t),l=i||a;if(e&&c(e)?o=r:r.length&&(o.pop(),o=o.concat(r)),!o.length)return"/";if(o.length){var u=o[o.length-1];n="."===u||".."===u||""===u}else n=!1;for(var f=0,d=o.length;d>=0;d--){var p=o[d];"."===p?s(o,d):".."===p?(s(o,d),f++):f&&(s(o,d),f--)}if(!l)for(;f--;f)o.unshift("..");!l||""===o[0]||o[0]&&c(o[0])||o.unshift("");var m=o.join("/");return n&&"/"!==m.substr(-1)&&(m+="/"),m};var d=function(e,t){if(!e)throw new Error("Invariant failed")};function p(e){return"/"===e.charAt(0)?e:"/"+e}function m(e){return"/"===e.charAt(0)?e.substr(1):e}function h(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function v(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function y(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function g(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=Object(u.a)({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=f(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function b(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):o(!0):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var w=!("undefined"==typeof window||!window.document||!window.document.createElement);function E(e,t){t(window.confirm(e))}function x(){try{return window.history.state||{}}catch(e){return{}}}function k(e){void 0===e&&(e={}),w||d(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),i=e,a=i.forceRefresh,l=void 0!==a&&a,c=i.getUserConfirmation,s=void 0===c?E:c,f=i.keyLength,m=void 0===f?6:f,k=e.basename?v(p(e.basename)):"";function S(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return k&&(i=h(i,k)),g(i,r,n)}function O(){return Math.random().toString(36).substr(2,m)}var T=b();function P(e){Object(u.a)(F,e),F.length=n.length,T.notifyListeners(F.location,F.action)}function _(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||N(S(e.state))}function C(){N(S(x()))}var j=!1;function N(e){if(j)j=!1,P();else{T.confirmTransitionTo(e,"POP",s,(function(t){t?P({action:"POP",location:e}):function(e){var t=F.location,n=M.indexOf(t.key);-1===n&&(n=0);var r=M.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(j=!0,I(o))}(e)}))}}var R=S(x()),M=[R.key];function A(e){return k+y(e)}function I(e){n.go(e)}var z=0;function L(e){1===(z+=e)&&1===e?(window.addEventListener("popstate",_),o&&window.addEventListener("hashchange",C)):0===z&&(window.removeEventListener("popstate",_),o&&window.removeEventListener("hashchange",C))}var D=!1;var F={length:n.length,action:"POP",location:R,createHref:A,push:function(e,t){var o=g(e,t,O(),F.location);T.confirmTransitionTo(o,"PUSH",s,(function(e){if(e){var t=A(o),i=o.key,a=o.state;if(r)if(n.pushState({key:i,state:a},null,t),l)window.location.href=t;else{var u=M.indexOf(F.location.key),c=M.slice(0,u+1);c.push(o.key),M=c,P({action:"PUSH",location:o})}else window.location.href=t}}))},replace:function(e,t){var o=g(e,t,O(),F.location);T.confirmTransitionTo(o,"REPLACE",s,(function(e){if(e){var t=A(o),i=o.key,a=o.state;if(r)if(n.replaceState({key:i,state:a},null,t),l)window.location.replace(t);else{var u=M.indexOf(F.location.key);-1!==u&&(M[u]=o.key),P({action:"REPLACE",location:o})}else window.location.replace(t)}}))},go:I,goBack:function(){I(-1)},goForward:function(){I(1)},block:function(e){void 0===e&&(e=!1);var t=T.setPrompt(e);return D||(L(1),D=!0),function(){return D&&(D=!1,L(-1)),t()}},listen:function(e){var t=T.appendListener(e);return L(1),function(){L(-1),t()}}};return F}var S={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+m(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:m,decodePath:p},slash:{encodePath:p,decodePath:p}};function O(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function T(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function P(e){window.location.replace(O(window.location.href)+"#"+e)}function _(e){void 0===e&&(e={}),w||d(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,o=void 0===r?E:r,i=n.hashType,a=void 0===i?"slash":i,l=e.basename?v(p(e.basename)):"",c=S[a],s=c.encodePath,f=c.decodePath;function m(){var e=f(T());return l&&(e=h(e,l)),g(e)}var x=b();function k(e){Object(u.a)(F,e),F.length=t.length,x.notifyListeners(F.location,F.action)}var _=!1,C=null;function j(){var e,t,n=T(),r=s(n);if(n!==r)P(r);else{var i=m(),a=F.location;if(!_&&(t=i,(e=a).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(C===y(i))return;C=null,function(e){if(_)_=!1,k();else{x.confirmTransitionTo(e,"POP",o,(function(t){t?k({action:"POP",location:e}):function(e){var t=F.location,n=A.lastIndexOf(y(t));-1===n&&(n=0);var r=A.lastIndexOf(y(e));-1===r&&(r=0);var o=n-r;o&&(_=!0,I(o))}(e)}))}}(i)}}var N=T(),R=s(N);N!==R&&P(R);var M=m(),A=[y(M)];function I(e){t.go(e)}var z=0;function L(e){1===(z+=e)&&1===e?window.addEventListener("hashchange",j):0===z&&window.removeEventListener("hashchange",j)}var D=!1;var F={length:t.length,action:"POP",location:M,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=O(window.location.href)),n+"#"+s(l+y(e))},push:function(e,t){var n=g(e,void 0,void 0,F.location);x.confirmTransitionTo(n,"PUSH",o,(function(e){if(e){var t=y(n),r=s(l+t);if(T()!==r){C=t,function(e){window.location.hash=e}(r);var o=A.lastIndexOf(y(F.location)),i=A.slice(0,o+1);i.push(t),A=i,k({action:"PUSH",location:n})}else k()}}))},replace:function(e,t){var n=g(e,void 0,void 0,F.location);x.confirmTransitionTo(n,"REPLACE",o,(function(e){if(e){var t=y(n),r=s(l+t);T()!==r&&(C=t,P(r));var o=A.indexOf(y(F.location));-1!==o&&(A[o]=t),k({action:"REPLACE",location:n})}}))},go:I,goBack:function(){I(-1)},goForward:function(){I(1)},block:function(e){void 0===e&&(e=!1);var t=x.setPrompt(e);return D||(L(1),D=!0),function(){return D&&(D=!1,L(-1)),t()}},listen:function(e){var t=x.appendListener(e);return L(1),function(){L(-1),t()}}};return F}function C(e,t,n){return Math.min(Math.max(e,t),n)}function j(e){void 0===e&&(e={});var t=e,n=t.getUserConfirmation,r=t.initialEntries,o=void 0===r?["/"]:r,i=t.initialIndex,a=void 0===i?0:i,l=t.keyLength,c=void 0===l?6:l,s=b();function f(e){Object(u.a)(w,e),w.length=w.entries.length,s.notifyListeners(w.location,w.action)}function d(){return Math.random().toString(36).substr(2,c)}var p=C(a,0,o.length-1),m=o.map((function(e){return g(e,void 0,"string"==typeof e?d():e.key||d())})),h=y;function v(e){var t=C(w.index+e,0,w.entries.length-1),r=w.entries[t];s.confirmTransitionTo(r,"POP",n,(function(e){e?f({action:"POP",location:r,index:t}):f()}))}var w={length:m.length,action:"POP",location:m[p],index:p,entries:m,createHref:h,push:function(e,t){var r=g(e,t,d(),w.location);s.confirmTransitionTo(r,"PUSH",n,(function(e){if(e){var t=w.index+1,n=w.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),f({action:"PUSH",location:r,index:t,entries:n})}}))},replace:function(e,t){var r=g(e,t,d(),w.location);s.confirmTransitionTo(r,"REPLACE",n,(function(e){e&&(w.entries[w.index]=r,f({action:"REPLACE",location:r}))}))},go:v,goBack:function(){v(-1)},goForward:function(){v(1)},canGo:function(e){var t=w.index+e;return t>=0&&t<w.entries.length},block:function(e){return void 0===e&&(e=!1),s.setPrompt(e)},listen:function(e){return s.appendListener(e)}};return w}var N=n(14),R=n(16),M=n.n(R),A=(n(18),n(4)),I=n(11),z=n.n(I),L=function(e){var t=Object(N.a)();return t.displayName=e,t}("Router-History"),D=function(e){var t=Object(N.a)();return t.displayName=e,t}("Router"),F=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}Object(l.a)(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return o.a.createElement(D.Provider,{value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},o.a.createElement(L.Provider,{children:this.props.children||null,value:this.props.history}))},t}(o.a.Component);o.a.Component;o.a.Component;var $={},H=0;function B(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,i=void 0!==o&&o,a=n.strict,l=void 0!==a&&a,u=n.sensitive,c=void 0!==u&&u;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=$[n]||($[n]={});if(r[e])return r[e];var o=[],i={regexp:M()(e,o,t),keys:o};return H<1e4&&(r[e]=i,H++),i}(n,{end:i,strict:l,sensitive:c}),o=r.regexp,a=r.keys,u=o.exec(e);if(!u)return null;var s=u[0],f=u.slice(1),d=e===s;return i&&!d?null:{path:n,url:"/"===n&&""===s?"/":s,isExact:d,params:a.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var U=function(e){function t(){return e.apply(this,arguments)||this}return Object(l.a)(t,e),t.prototype.render=function(){var e=this;return o.a.createElement(D.Consumer,null,(function(t){t||d(!1);var n=e.props.location||t.location,r=e.props.computedMatch?e.props.computedMatch:e.props.path?B(n.pathname,e.props):t.match,i=Object(u.a)({},t,{location:n,match:r}),a=e.props,l=a.children,c=a.component,s=a.render;return Array.isArray(l)&&0===l.length&&(l=null),o.a.createElement(D.Provider,{value:i},i.match?l?"function"==typeof l?l(i):l:c?o.a.createElement(c,i):s?s(i):null:"function"==typeof l?l(i):null)}))},t}(o.a.Component);function V(e){return"/"===e.charAt(0)?e:"/"+e}function W(e,t){if(!e)return t;var n=V(e);return 0!==t.pathname.indexOf(n)?t:Object(u.a)({},t,{pathname:t.pathname.substr(n.length)})}function q(e){return"string"==typeof e?e:y(e)}function Q(e){return function(){d(!1)}}function G(){}o.a.Component;var K=function(e){function t(){return e.apply(this,arguments)||this}return Object(l.a)(t,e),t.prototype.render=function(){var e=this;return o.a.createElement(D.Consumer,null,(function(t){t||d(!1);var n,r,i=e.props.location||t.location;return o.a.Children.forEach(e.props.children,(function(e){if(null==r&&o.a.isValidElement(e)){n=e;var a=e.props.path||e.props.from;r=a?B(i.pathname,Object(u.a)({},e.props,{path:a})):t.match}})),r?o.a.cloneElement(n,{location:i,computedMatch:r}):null}))},t}(o.a.Component);o.a.useContext;o.a.Component;var J=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=_(t.props),t}return Object(l.a)(t,e),t.prototype.render=function(){return o.a.createElement(F,{history:this.history,children:this.props.children})},t}(o.a.Component);var Z=function(e,t){return"function"==typeof e?e(t):e},Y=function(e,t){return"string"==typeof e?g(e,null,null,t):e},X=function(e){return e},ee=o.a.forwardRef;void 0===ee&&(ee=X);var te=ee((function(e,t){var n=e.innerRef,r=e.navigate,i=e.onClick,a=Object(A.a)(e,["innerRef","navigate","onClick"]),l=a.target,c=Object(u.a)({},a,{onClick:function(e){try{i&&i(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||l&&"_self"!==l||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return c.ref=X!==ee&&t||n,o.a.createElement("a",c)}));var ne=ee((function(e,t){var n=e.component,r=void 0===n?te:n,i=e.replace,a=e.to,l=e.innerRef,c=Object(A.a)(e,["component","replace","to","innerRef"]);return o.a.createElement(D.Consumer,null,(function(e){e||d(!1);var n=e.history,s=Y(Z(a,e.location),e.location),f=s?n.createHref(s):"",p=Object(u.a)({},c,{href:f,navigate:function(){var t=Z(a,e.location);(i?n.replace:n.push)(t)}});return X!==ee?p.ref=t||l:p.innerRef=l,o.a.createElement(r,p)}))})),re=function(e){return e},oe=o.a.forwardRef;void 0===oe&&(oe=re);var ie=oe((function(e,t){var n=e["aria-current"],r=void 0===n?"page":n,i=e.activeClassName,a=void 0===i?"active":i,l=e.activeStyle,c=e.className,s=e.exact,f=e.isActive,p=e.location,m=e.sensitive,h=e.strict,v=e.style,y=e.to,g=e.innerRef,b=Object(A.a)(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return o.a.createElement(D.Consumer,null,(function(e){e||d(!1);var n=p||e.location,i=Y(Z(y,n),n),w=i.pathname,E=w&&w.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),x=E?B(n.pathname,{path:E,exact:s,sensitive:m,strict:h}):null,k=!!(f?f(x,n):x),S=k?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(c,a):c,O=k?Object(u.a)({},v,{},l):v,T=Object(u.a)({"aria-current":k&&r||null,className:S,style:O,to:i},b);return re!==oe?T.ref=t||g:T.innerRef=g,o.a.createElement(ne,T)}))})),ae=n(6),le=n.n(ae),ue=function(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t},ce=function(e){return"function"==typeof e},se=function(e){return e},fe=function(e){return Array.isArray(e)},de=function(e){return"string"==typeof e},pe=function(e){return null==e},me=function(e){return e[e.length-1]},he=n(12),ve=n.n(he),ye=function(e){return-1===e.indexOf("/")?ve()(e):e.split("/").map(ve.a).join("/")},ge=function(e,t){return e.reduce((function(e,n){return t(e,n)}),{})},be=function(e){return"undefined"!=typeof Map&&e instanceof Map};function we(e){if(be(e))return Array.from(e.keys());if("undefined"!=typeof Reflect&&"function"==typeof Reflect.ownKeys)return Reflect.ownKeys(e);var t=Object.getOwnPropertyNames(e);return"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(e))),t}function Ee(e,t){return be(t)?t.get(e):t[e]}var xe=function(e){return function t(n,r,o,i){var a=void 0===r?{}:r,l=a.namespace,u=void 0===l?"/":l,c=a.prefix;return void 0===o&&(o={}),void 0===i&&(i=""),we(n).forEach((function(r){var a=function(e){return i||!c||c&&new RegExp("^"+c+u).test(e)?e:""+c+u+e}(function(e){var t;if(!i)return e;var n=e.toString().split("||"),r=i.split("||");return(t=[]).concat.apply(t,r.map((function(e){return n.map((function(t){return""+e+u+t}))}))).join("||")}(r)),l=Ee(r,n);e(l)?t(l,{namespace:u,prefix:c},o,a):o[a]=l})),o}},ke=xe(ue);function Se(e,t){var n=void 0===t?{}:t,r=n.namespace,o=void 0===r?"/":r,i=n.prefix;var a={};return Object.getOwnPropertyNames(e).forEach((function(t){var n=i?t.replace(""+i+o,""):t;return function t(n,r,o){var i=ye(o.shift());0===o.length?r[i]=e[n]:(r[i]||(r[i]={}),t(n,r[i],o))}(t,a,n.split(o))})),a}var Oe=function(e){return null===e};function Te(e,t,n){void 0===t&&(t=se),le()(ce(t)||Oe(t),"Expected payloadCreator to be a function, undefined or null");var r=Oe(t)||t===se?se:function(e){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return e instanceof Error?e:t.apply(void 0,[e].concat(r))},o=ce(n),i=e.toString(),a=function(){var t=r.apply(void 0,arguments),i={type:e};return t instanceof Error&&(i.error=!0),void 0!==t&&(i.payload=t),o&&(i.meta=n.apply(void 0,arguments)),i};return a.toString=function(){return i},a}function Pe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){_e(e,t,n[t])}))}return e}function _e(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ce(e,t){return Se(je(ke(e,t)),t)}function je(e,t){var n=void 0===t?{}:t,r=n.prefix,o=n.namespace,i=void 0===o?"/":o;return ge(Object.keys(e),(function(t,n){var o,a=e[n];le()(function(e){if(ce(e)||pe(e))return!0;if(fe(e)){var t=e[0],n=void 0===t?se:t,r=e[1];return ce(n)&&ce(r)}return!1}(a),"Expected function, undefined, null, or array with payload and meta functions for "+n);var l=r?""+r+i+n:n,u=fe(a)?Te.apply(void 0,[l].concat(a)):Te(l,a);return Pe({},t,((o={})[n]=u,o))}))}function Ne(e,t){var n=je(ge(e,(function(e,t){var n;return Pe({},e,((n={})[t]=se,n))})),t);return ge(Object.keys(n),(function(e,t){var r;return Pe({},e,((r={})[ye(t)]=n[t],r))}))}var Re=function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=ue(me(n))?n.pop():{};return le()(n.every(de)&&(de(e)||ue(e)),"Expected optional object followed by string action types"),de(e)?Ne([e].concat(n),o):Pe({},Ce(e,o),Ne(n,o))}({LOAD_DATA:function(){return{}},SET_IS_OPEN:function(e){return{isOpenVal:e}},SET_NAV_IS_HIDDEN:function(e){return{navIsHiddenVal:e}}}),Me=Re.loadData,Ae=Re.setIsOpen,Ie=Re.setNavIsHidden,ze=o.a.createContext(null);var Le=function(e){e()},De={notify:function(){}};function Fe(){var e=Le,t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}var $e=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=De,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=Fe())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=De)},e}();var He=function(e){var t=e.store,n=e.context,i=e.children,a=Object(r.useMemo)((function(){var e=new $e(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),l=Object(r.useMemo)((function(){return t.getState()}),[t]);Object(r.useEffect)((function(){var e=a.subscription;return e.trySubscribe(),l!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[a,l]);var u=n||ze;return o.a.createElement(u.Provider,{value:a},i)};function Be(){return(Be=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Ue(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var Ve=n(21),We="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect,qe=[],Qe=[null,null];function Ge(e,t){var n=e[1];return[t.payload,n+1]}function Ke(e,t,n){We((function(){return e.apply(void 0,t)}),n)}function Je(e,t,n,r,o,i,a){e.current=r,t.current=o,n.current=!1,i.current&&(i.current=null,a())}function Ze(e,t,n,r,o,i,a,l,u,c){if(e){var s=!1,f=null,d=function(){if(!s){var e,n,d=t.getState();try{e=r(d,o.current)}catch(e){n=e,f=e}n||(f=null),e===i.current?a.current||u():(i.current=e,l.current=e,a.current=!0,c({type:"STORE_UPDATED",payload:{error:n}}))}};n.onStateChange=d,n.trySubscribe(),d();return function(){if(s=!0,n.tryUnsubscribe(),n.onStateChange=null,f)throw f}}}var Ye=function(){return[null,0]};function Xe(e,t){void 0===t&&(t={});var n=t,i=n.getDisplayName,a=void 0===i?function(e){return"ConnectAdvanced("+e+")"}:i,l=n.methodName,u=void 0===l?"connectAdvanced":l,c=n.renderCountProp,s=void 0===c?void 0:c,f=n.shouldHandleStateChanges,d=void 0===f||f,p=n.storeKey,m=void 0===p?"store":p,h=(n.withRef,n.forwardRef),v=void 0!==h&&h,y=n.context,g=void 0===y?ze:y,b=Ue(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]),w=g;return function(t){var n=t.displayName||t.name||"Component",i=a(n),l=Be({},b,{getDisplayName:a,methodName:u,renderCountProp:s,shouldHandleStateChanges:d,storeKey:m,displayName:i,wrappedComponentName:n,WrappedComponent:t}),c=b.pure;var f=c?r.useMemo:function(e){return e()};function p(n){var i=Object(r.useMemo)((function(){var e=n.reactReduxForwardedRef,t=Ue(n,["reactReduxForwardedRef"]);return[n.context,e,t]}),[n]),a=i[0],u=i[1],c=i[2],s=Object(r.useMemo)((function(){return a&&a.Consumer&&Object(Ve.isContextConsumer)(o.a.createElement(a.Consumer,null))?a:w}),[a,w]),p=Object(r.useContext)(s),m=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch);Boolean(p)&&Boolean(p.store);var h=m?n.store:p.store,v=Object(r.useMemo)((function(){return function(t){return e(t.dispatch,l)}(h)}),[h]),y=Object(r.useMemo)((function(){if(!d)return Qe;var e=new $e(h,m?null:p.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[h,m,p]),g=y[0],b=y[1],E=Object(r.useMemo)((function(){return m?p:Be({},p,{subscription:g})}),[m,p,g]),x=Object(r.useReducer)(Ge,qe,Ye),k=x[0][0],S=x[1];if(k&&k.error)throw k.error;var O=Object(r.useRef)(),T=Object(r.useRef)(c),P=Object(r.useRef)(),_=Object(r.useRef)(!1),C=f((function(){return P.current&&c===T.current?P.current:v(h.getState(),c)}),[h,k,c]);Ke(Je,[T,O,_,c,C,P,b]),Ke(Ze,[d,h,g,v,T,O,_,P,b,S],[h,g,v]);var j=Object(r.useMemo)((function(){return o.a.createElement(t,Be({},C,{ref:u}))}),[u,t,C]);return Object(r.useMemo)((function(){return d?o.a.createElement(s.Provider,{value:E},j):j}),[s,j,E])}var h=c?o.a.memo(p):p;if(h.WrappedComponent=t,h.displayName=i,v){var y=o.a.forwardRef((function(e,t){return o.a.createElement(h,Be({},e,{reactReduxForwardedRef:t}))}));return y.displayName=i,y.WrappedComponent=t,z()(y,t)}return z()(h,t)}}function et(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function tt(e,t){if(et(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!Object.prototype.hasOwnProperty.call(t,n[o])||!et(e[n[o]],t[n[o]]))return!1;return!0}var nt=n(13),rt=function(){return Math.random().toString(36).substring(7).split("").join(".")},ot={INIT:"@@redux/INIT"+rt(),REPLACE:"@@redux/REPLACE"+rt(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+rt()}};function it(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function at(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(at)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var o=e,i=t,a=[],l=a,u=!1;function c(){l===a&&(l=a.slice())}function s(){if(u)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return i}function f(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(u)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return c(),l.push(e),function(){if(t){if(u)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,c();var n=l.indexOf(e);l.splice(n,1),a=null}}}function d(e){if(!it(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(u)throw new Error("Reducers may not dispatch actions.");try{u=!0,i=o(i,e)}finally{u=!1}for(var t=a=l,n=0;n<t.length;n++){(0,t[n])()}return e}function p(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");o=e,d({type:ot.REPLACE})}function m(){var e,t=f;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(s())}return n(),{unsubscribe:t(n)}}})[nt.a]=function(){return this},e}return d({type:ot.INIT}),(r={dispatch:d,subscribe:f,getState:s,replaceReducer:p})[nt.a]=m,r}function lt(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function ut(e,t){return function(){return t(e.apply(this,arguments))}}function ct(e,t){if("function"==typeof e)return ut(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=ut(o,t))}return n}function st(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function ft(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function dt(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=ft(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=ft(o),o=r(t,n)),o},r}}var pt=[function(e){return"function"==typeof e?dt(e):void 0},function(e){return e?void 0:st((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?st((function(t){return ct(e,t)})):void 0}];var mt=[function(e){return"function"==typeof e?dt(e):void 0},function(e){return e?void 0:st((function(){return{}}))}];function ht(e,t,n){return Be({},n,e,t)}var vt=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,a=!1;return function(t,n,l){var u=e(t,n,l);return a?o&&i(u,r)||(r=u):(a=!0,r=u),r}}}(e):void 0},function(e){return e?void 0:function(){return ht}}];function yt(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function gt(e,t,n,r,o){var i,a,l,u,c,s=o.areStatesEqual,f=o.areOwnPropsEqual,d=o.areStatePropsEqual,p=!1;function m(o,p){var m,h,v=!f(p,a),y=!s(o,i);return i=o,a=p,v&&y?(l=e(i,a),t.dependsOnOwnProps&&(u=t(r,a)),c=n(l,u,a)):v?(e.dependsOnOwnProps&&(l=e(i,a)),t.dependsOnOwnProps&&(u=t(r,a)),c=n(l,u,a)):y?(m=e(i,a),h=!d(m,l),l=m,h&&(c=n(l,u,a)),c):c}return function(o,s){return p?m(o,s):(l=e(i=o,a=s),u=t(r,a),c=n(l,u,a),p=!0,c)}}function bt(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=Ue(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),l=r(e,i),u=o(e,i);return(i.pure?gt:yt)(a,l,u,e,i)}function wt(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function Et(e,t){return e===t}function xt(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?Xe:n,o=t.mapStateToPropsFactories,i=void 0===o?mt:o,a=t.mapDispatchToPropsFactories,l=void 0===a?pt:a,u=t.mergePropsFactories,c=void 0===u?vt:u,s=t.selectorFactory,f=void 0===s?bt:s;return function(e,t,n,o){void 0===o&&(o={});var a=o,u=a.pure,s=void 0===u||u,d=a.areStatesEqual,p=void 0===d?Et:d,m=a.areOwnPropsEqual,h=void 0===m?tt:m,v=a.areStatePropsEqual,y=void 0===v?tt:v,g=a.areMergedPropsEqual,b=void 0===g?tt:g,w=Ue(a,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),E=wt(e,i,"mapStateToProps"),x=wt(t,l,"mapDispatchToProps"),k=wt(n,c,"mergeProps");return r(f,Be({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:E,initMapDispatchToProps:x,initMergeProps:k,pure:s,areStatesEqual:p,areOwnPropsEqual:h,areStatePropsEqual:y,areMergedPropsEqual:b},w))}}var kt=xt();var St;St=i.unstable_batchedUpdates,Le=St;var Ot=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var r="function"!=typeof t[t.length-1]&&t.pop(),o=t;if(void 0===r)throw new TypeError("The initial state may not be undefined. If you do not want to set a value for this reducer, you can use null instead of undefined.");return function(e,t){for(var n=arguments.length,i=Array(n>2?n-2:0),a=2;a<n;a++)i[a-2]=arguments[a];var l=void 0===e,u=void 0===t;return l&&u&&r?r:o.reduce((function(e,n){return n.apply(void 0,[e,t].concat(i))}),l&&!u&&r?r:e)}};var Tt=xe((function(e){return(ue(e)||be(e))&&(t=we(e),n=t.every((function(e){return"next"===e||"throw"===e})),!(t.length&&t.length<=2&&n));var t,n})),Pt=function(e){return e.toString()};var _t,Ct={name:"Заглавнова Ольга Петровна",birthdate:"15 января 1979г.",wishJob:{name:"Frontend-разработчик",expirience:"до 1 года",workday:"Частичная занятость, полная занятость",schedule:"Удаленная работа, гибкий график, полный день"},aboutMe:{city:"г.Чебоксары",citizen:"РФ",gender:"женский",selfInformation:"Ответственная, исполнительная, целеустремленная."},mainEducation:{year:"1996-2001",institute:"Чувашский государственный университет им. И.Н. Ульянова,Чебоксары",faculty:"Факультет Информатики и вычислительной техники, Программное обеспечение вычислительной техники и информационных систем"},additionalEducation:{1:{year:"2013",institute:"Школа технологий бизнеса",courseName:"Тренинг. Школа технологий бизнеса, Развитие управленческих компетенций. Инструменты эффективного руководителя."},2:{year:"август 2019-июнь 2020",institute:"GeekBrains",courseName:"Frontend-разработчик"}},qualification:[{year:"ноябрь 2019 - настоящее время",company:"РТСофт, АО",city:"Чебоксары",companyLink:"http://rtsoft.ru",job:"Главный специалист отдела системной интеграции",duty:"Подготовка технико-коммерческих предложений."},{year:"Сентябрь 2016 — ноябрь 2019, 3 года 2 месяца",company:"РТСофт, АО",city:"Чебоксары",companyLink:"http://rtsoft.ru",job:"Декретный отпуск и отпуск по уходу за ребенком",duty:"Уход, кормление, пеленание, стирка, глажка, готовка, уборка, снова уход, кормление... И много-много счастья"},{year:"Апрель 2015 — Сентябрь 2016, 1 год 6 месяцев",company:"РТСофт, АО",city:"Чебоксары",companyLink:"http://rtsoft.ru",job:"Главный специалист отдела системной интеграции",duty:"Подготовка технико-коммерческих предложений, подготовка технической, конкурсной документации для ТКП, конфигурирование SCADA-системы SPRECON, разработка эксплуатационной документации на шкафы и систему АСУ ТП, разработка разделов рабочей документации."},{year:"Ноябрь 2013 — Апрель 2015, 1 год 6 месяцев",company:"РТСофт, ЗАО",city:"Чебоксары",companyLink:"http://rtsoft.ru",job:"Руководитель группы предпроектной подготовки",duty:"Организация работы группы предпроектной подготовки, постановка задач, контроль выполнения поставленных задач, подготовка и проверка технико-коммерческих предложений, подготовка и проверка технической, конкурсной документации для ТКП."},{year:"Июль 2008 — Ноябрь 2013, 5 лет 5 месяцев",company:"РТСофт, ЗАО",city:"Чебоксары",companyLink:"http://rtsoft.ru",job:"Старший инженер отдела системной интеграции",duty:"Разработка экранов процесса, форм отчетов для SCADA-системы SPRECON, разработка эксплуатационной документации на шкафы и систему АСУ ТП, разработка разделов рабочей документации, разработка приложений для SCADA-системы SPRECON, MS Office на языках программирования VB, VBA, C#."},{year:"Сентябрь 2005 — Июль 2008, 2 года 11 месяцев",company:"РТСофт, ЗАО",city:"Чебоксары",companyLink:"http://rtsoft.ru",job:"Инженер",duty:"Подготовка технико-коммерческих предложений (ТКП) на АСУ ТП для энергообъектов, подготовка технической, конкурсной документации для ТКП"},{year:"Январь 2005 — Сентябрь 2005, 9 месяцев",company:"ООО «АББ-Автоматизация»",companyLink:"http://new.abb.com/ru",city:"Чебоксары",job:"Инженер по АСУ Центра инжиниринга и НИОКР",duty:"Разработка экранов процесса, экранных форм для SCADA-системы MicroSCADA; разработка приложений для SCADA-системы MicroSCADA, MS Office на встроенном языке программирования SCIL, языках программирования VB, VBA."},{year:"Январь 2003 — Декабрь 2004, 2 года",company:"ООО «Компания МКН»",companyLink:"",city:"Чебоксары",job:"Инженер",duty:"разработка экранов процесса, экранных форм для SCADA-системы MicroSCADA, разработка приложений для SCADA-системы MicroSCADA, MS Office на встроенном языке программирования SCIL, языках программирования VB, VBA."},{year:"Август 2002 — Декабрь 2002, 5 месяцев",company:"ООО «АББ-Автоматизация»",companyLink:"http://new.abb.com/ru",city:"Чебоксары",job:"Инженер по АСУ Центра инжиниринга и НИОКР",duty:"Разработка экранов процесса, экранных форм для SCADA-системы MicroSCADA, разработка приложений для SCADA-системы MicroSCADA, MS Office на встроенном языке программирования SCIL, языках программирования VB, VBA."}],mainScills:["Опыт программирования на C#, VB, VBA","HTML5","CSS3","JavaScript","VueJS","ReactJS","REDUX","Bootstrap","LESS, SASS, SCSS","Git","SQL","Gulp, Webpack по документации и примерам"],languages:{russian:"Русский (родной)",english:"Английский (pre-intermidiate)"},car:"Права категории B, опыт вождения с 2008 года, личный автомобиль.",contacts:{phone:"+7 (905) 346-52-75",icq:"195036360",skype:"smirnova.olga.1979",email:"olga.zaglavnova@mail.ru",vk:"@OlgaZaglavnova"},tests:[],sertificates:[{school:"Институт систем качества, г.Екатеринбург",fullName:"Основы СМК и процессный подход в соответствии с ИСО 9001-2008",date:"24 февраля 2011г.",description:[],src:"./Resume/img/sertificates/ISO9001.jpg"},{school:"Школа технологий бизнеса",fullName:"Развитие управленческих компетенций. Инструменты эффективного руководителя",date:"13-14 декабря 2013г.",description:[],src:"./Resume/img/sertificates/EffectiveLeader.webp"},{school:"GeekBrains",fullName:"PHP. Личный блог",date:"17 ноября 2015г.",description:[],src:"./Resume/img/sertificates/Php_blog.webp"},{school:"GeekBrains",fullName:"Git. Быстрый старт",date:"23 ноября 2015г.",description:[],src:"./Resume/img/sertificates/Git_quickStart.webp"},{school:"GeekBrains",fullName:"Основы ООП",date:"27 ноября 2015г.",description:[],src:"./Resume/img/sertificates/Oop_base.webp"},{school:"GeekBrains",fullName:"С#. Мини-программы",date:"1 декабря 2015г.",description:[],src:"./Resume/img/sertificates/Csharp_mini.webp"},{school:"GeekBrains",fullName:"Основы программирования",date:"8 декабря 2015г.",description:[],src:"./Resume/img/sertificates/ProgrammingBase.webp"},{school:"GeekBrains",fullName:"C#",description:["Коллекции","Платформа microsoft .net framework и среда visual studio .net","Работа с файловой системой и организация файлового ввода-вывода данных","Основные понятия и операторы языка с#","Классы и объекты","Массивы символы и строки"],date:"25 января 2016г.",src:"./Resume/img/tests/test_Csharp.webp"},{school:"GeekBrains",fullName:"Основы программирования",description:["Основы программирования","Операторы и функции","Постановка задачи и алгоритмирование","Базовые понятия"],date:"25 января 2016г.",src:"./Resume/img/tests/test_ProgrammingBase.webp"},{school:"GeekBrains",fullName:'C#. Викторина "Угадай мелодию"',date:"26 января 2016г.",description:[],src:"./Resume/img/sertificates/Csharp_vict.webp"},{school:"GeekBrains",fullName:"Android. Быстрый старт",date:"17 февраля 2016г.",description:[],src:"./Resume/img/sertificates/Android.webp"},{school:"GeekBrains",fullName:'Как создать личный блог: курс "Создание блога на Wordpress"',date:"26 февраля 2016г.",description:[],src:"./Resume/img/sertificates/Wordpress.webp"},{school:"GeekBrains",fullName:"Веб-разработка. Быстрый старт",date:"16 августа 2018г.",description:[],src:"./Resume/img/sertificates/WebDev_quickStart.webp"},{school:"GeekBrains",fullName:"HTML/CSS. Интерактивный курс",date:"2 сентября 2019г.",description:[],src:"./Resume/img/sertificates/HTML_CSS_1.webp"},{school:"GeekBrains",fullName:"HTML&CSS",description:["Работа с блоками","Формы html","Теги и атрибуты html","Основы html и css","Селекторы css","Работа с текстом и таблицами"],date:"3 сентября 2019г.",src:"./Resume/img/tests/test_HTML_CSS.webp"},{school:"GeekBrains",fullName:"HTML5 и CSS3",date:"19 октября 2019г.",description:[],src:"./Resume/img/sertificates/HTML_CSS_2.webp"},{school:"GeekBrains",fullName:"Как стать программистом",date:"22 октября 2019г.",description:[],src:"./Resume/img/sertificates/ToBeProgrammer.webp"},{school:"GeekBrains",fullName:"JavaScript. Уровень 1",date:"18 ноября 2019г.",description:[],src:"./Resume/img/sertificates/JavaScript1.webp"},{school:"GeekBrains",fullName:"Английский для IT-специалистов",date:"2 декабря 2019г.",description:[],src:"./Resume/img/sertificates/EnglishForIT.webp"},{school:"GeekBrains",fullName:"Основы баз данных",date:"12 декабря 2019г.",description:[],src:"./Resume/img/sertificates/DB_base.webp"},{school:"GeekBrains",fullName:"JavaScript. Уровень 2",date:"10 января 2020г.",description:[],src:"./Resume/img/sertificates/JavaScript2.webp"},{school:"GeekBrains",fullName:"Вёрстка сайтов на примере Landing Page",date:"13 января 2020г.",description:[],src:"./Resume/img/sertificates/LandingPage.webp"},{school:"GeekBrains",fullName:"Автоматизация с помощью Gulp",date:"14 января 2020г.",description:[],src:"./Resume/img/sertificates/Gulp.webp"},{school:"GeekBrains",fullName:"Верстаем landing page на HTML5",date:"10 февраля 2020г.",description:[],src:"./Resume/img/sertificates/LandingPage_HTML5.webp"},{school:"GeekBrains",fullName:"ReactJS",date:"4 марта 2020г.",description:[],src:"./Resume/img/sertificates/ReactJS.webp"},{school:"GeekBrains",fullName:"Занимательные элементы интерфейса в HTML/CSS",date:"20 марта 2020г.",description:[],src:"./Resume/img/sertificates/InterfaceElementsHTMLCSS.webp"},{school:"GeekBrains",fullName:"Git. Базовый курс",date:"26 марта 2020г.",description:[],src:"./Resume/img/sertificates/GitBase.webp"},{school:"GeekBrains",fullName:"Frontend developer. Сертификат",date:"30 мая 2020г.",description:[],src:"./Resume/img/sertificates/FrontendDeveloper_OlgaZaglavnova.webp"}],portfolio_geekbrains:[{school:"GeekBrains",course:"HTML/CSS. Интерактивный курс",workName:"Верстка страницы",demolink:"https://olgazaglavnova.github.io/OZaglavnova_HTMLCSS1_lesson8",codelink:"https://github.com/OlgaZaglavnova/OlgaZaglavnova.github.io/tree/master/OZaglavnova_HTMLCSS1_lesson8",src:"./Resume/img/portfolio/HTMLCSS1_ht8.webp",comment:"Работают пункты меню Home, Products и Products/Home"},{school:"GeekBrains",course:"HTML5 и CSS3",workName:"Верстка страницы",demolink:"https://olgazaglavnova.github.io/OZaglavnova_HTMLCSS2_lesson3/",codelink:"https://github.com/OlgaZaglavnova/OlgaZaglavnova.github.io/tree/master/OZaglavnova_HTMLCSS2_lesson3",src:"./Resume/img/portfolio/HTMLCSS2_ht3.webp",comment:"В подвале страницы работают ссылки на модальное окно и страницу с фоновым видео"},{school:"GeekBrains",course:"HTML5 и CSS3",workName:"Верстка страницы",demolink:"https://olgazaglavnova.github.io/OZaglavnova_HTMLCSS2_lesson6/",codelink:"https://github.com/OlgaZaglavnova/OlgaZaglavnova.github.io/tree/master/OZaglavnova_HTMLCSS2_lesson6",src:"./Resume/img/portfolio/HTMLCSS2_ht6.webp",comment:"При наведении на элементы выполняются эффекты трансформации"},{school:"GeekBrains",course:"HTML5 и CSS3",workName:"Верстка страницы",demolink:"https://olgazaglavnova.github.io/OZaglavnova_HTMLCSS2_lesson8/",codelink:"https://github.com/OlgaZaglavnova/OlgaZaglavnova.github.io/tree/master/OZaglavnova_HTMLCSS2_lesson8",src:"./Resume/img/portfolio/HTMLCSS2_ht8.webp",comment:""},{school:"GeekBrains",course:"JavaScript. Уровень 1",workName:"Анимированное модальное окно",demolink:"https://olgazaglavnova.github.io/hometask5task3/",codelink:"https://github.com/OlgaZaglavnova/OlgaZaglavnova.github.io/tree/master/hometask5task3",src:"./Resume/img/portfolio/JS1_ht5t3_new.webp",comment:'Нажмите на кнопку "Открыть модальное окно"'},{school:"GeekBrains",course:"JavaScript. Уровень 1",workName:"Карточки товара",demolink:"https://olgazaglavnova.github.io/hometask5task4/",codelink:"https://github.com/OlgaZaglavnova/OlgaZaglavnova.github.io/tree/master/hometask5task4",src:"./Resume/img/portfolio/JS1_ht5t4.webp",comment:'При нажатии на кнопку "Подробнее" выводится текстовая информация о товаре, при нажатии на кнопку "Отмена" возвращается изображение товара '},{school:"GeekBrains",course:"JavaScript. Уровень 1",workName:"Шахматная доска",demolink:"https://olgazaglavnova.github.io/hometask5task5_6/",codelink:"https://github.com/OlgaZaglavnova/OlgaZaglavnova.github.io/tree/master/hometask5task5_6",src:"./Resume/img/portfolio/JS1_ht5t6.webp",comment:'При нажатии на кнопку "Расставить фигуры" на доске расставляются шахматные фигуры '},{school:"",course:"Тестовое задание к одной из вакансий",workName:"Тестовое приложение для Android, написано на React Native",demolink:"https://yadi.sk/d/tsg7XvOzdtlmrw",codelink:"https://github.com/OlgaZaglavnova/Bokus-Test2",src:"./Resume/img/portfolio/bokus2.webp",comment:'Для просмотра необходимо скачать файл "olgazaglavnova-testTwo.apk" на android-телефон и установить приложение.'},{school:"",course:"Тестовое задание к одной из вакансий",workName:"Тестовое задание, написано на React+Redux+Ant Design",demolink:"https://olgazaglavnova.github.io/Test17092020/",codelink:"https://github.com/OlgaZaglavnova/Test17092020_code",src:"./Resume/img/portfolio/Test_17092020.webp",comment:""},{school:"",course:"Тестовое задание к одной из вакансий",workName:"Тестовое задание, написано на React+Redux",demolink:"https://olgazaglavnova.github.io/FunBox_demo/",codelink:"https://github.com/OlgaZaglavnova/FunBox_test",src:"./Resume/img/portfolio/FunBox_test.webp",comment:""}]};function jt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Nt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?jt(Object(n),!0).forEach((function(t){Rt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):jt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Rt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Mt=function(e,t,n){void 0===n&&(n={}),le()(ue(e)||be(e),"Expected handlers to be a plain object.");var r=Tt(e,n),o=we(r).map((function(e){return function(e,t,n){void 0===t&&(t=se);var r=Pt(e).split("||");le()(!(void 0===n),"defaultState for reducer handling "+r.join(", ")+" should be defined"),le()(ce(t)||ue(t),"Expected reducer to be a function or object with next and throw reducers");var o=ce(t)?[t,t]:[t.next,t.throw].map((function(e){return pe(e)?se:e})),i=o[0],a=o[1];return function(e,t){void 0===e&&(e=n);var o=t.type;return o&&-1!==r.indexOf(Pt(o))?(!0===t.error?a:i)(e,t):e}}(e,Ee(e,r),t)})),i=Ot.apply(void 0,o.concat([t]));return function(e,n){return void 0===e&&(e=t),i(e,n)}}((Rt(_t={},Me,(function(e){return Nt(Nt({},e),{},{isOpen:!1,navIsHidden:!1,myData:Ct})})),Rt(_t,Ae,(function(e,t){var n=t.payload.isOpenVal;return Nt(Nt({},e),{},{isOpen:n,myData:Nt({},e.myData)})})),Rt(_t,Ie,(function(e,t){var n=t.payload.navIsHiddenVal;return Nt(Nt({},e),{},{navIsHidden:n,myData:Nt({},e.myData)})})),_t),{myData:{}}),At="@@router/LOCATION_CHANGE",It=function(e){return function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return{type:"@@router/CALL_HISTORY_METHOD",payload:{method:e,args:n}}}};It("push"),It("replace"),It("go"),It("goBack"),It("goForward");function zt(e){return(zt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var Lt=function(e){var t=e.getIn,n=e.toJS,r=function(e){var r,o=n(t(e,["router"]));if(null==(r=o)||"object"!==zt(r)||!t(r,["location"])||!t(r,["action"]))throw'Could not find router reducer in state tree, it must be mounted under "router"';return o},o=function(e){return n(t(r(e),["location"]))};return{getLocation:o,getAction:function(e){return n(t(r(e),["action"]))},getRouter:r,getSearch:function(e){return n(t(r(e),["location","search"]))},getHash:function(e){return n(t(r(e),["location","hash"]))},createMatchSelector:function(e){var t=null,n=null;return function(r){var i=(o(r)||{}).pathname;if(i===t)return n;t=i;var a=B(i,e);return a&&n&&a.url===n.url&&a.isExact===n.isExact||(n=a),n}}}};function Dt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e))&&"[object Arguments]"!==Object.prototype.toString.call(e))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function Ft(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function $t(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ft(Object(n),!0).forEach((function(t){Ht(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ft(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ht(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Bt=function(e){if(e&&e.query)return e;var t=e&&e.search;if("string"!=typeof t||0===t.length)return $t({},e,{query:{}});var n=t.substring(1).split("&").reduce((function(e,t){var n=Dt(t.split("="),2);return $t({},e,Ht({},n[0],n[1]))}),{});return $t({},e,{query:n})},Ut=function(e){var t=e.fromJS,n=e.merge;return function(e){var r=t({location:Bt(e.location),action:e.action});return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:r,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=o.type,a=o.payload;if(i===At){var l=a.location,u=a.action,c=a.isFirstRendering;return c?e:n(e,{location:t(Bt(l)),action:u})}return e}}};function Vt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Wt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var qt={fromJS:function(e){return e},getIn:function(e,t){if(!e)return e;var n=t.length;if(n){for(var r=e,o=0;o<n&&r;++o)r=r[t[o]];return r}},merge:function(e,t){return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Vt(Object(n),!0).forEach((function(t){Wt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Vt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e,{},t)},toJS:function(e){return e}},Qt=Ut(qt),Gt=Lt(qt),Kt=(Gt.getLocation,Gt.getAction,Gt.getHash,Gt.getSearch,Gt.createMatchSelector,function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var i,a=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:ot.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:ot.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+ot.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},l=0;l<a.length;l++){var u=a[l],c=n[u],s=e[u],f=c(s,t);if(void 0===f){var d=lt(u,t);throw new Error(d)}o[u]=f,r=r||f!==s}return(r=r||a.length!==Object.keys(e).length)?o:e}}({myReducer:Mt,router:Qt(k())}));n(47);function Jt(e){return(Jt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Zt(e){return function(e){if(Array.isArray(e))return Yt(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return Yt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Yt(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Yt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Xt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function en(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Xt(Object(n),!0).forEach((function(t){tn(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Xt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function tn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function nn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function rn(e,t){return(rn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function on(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=ln(e);if(t){var o=ln(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return an(this,n)}}function an(e,t){return!t||"object"!==Jt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ln(e){return(ln=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}o.a.Component;var un=n(23),cn=n(24),sn=n.n(cn),fn=n(25),dn=n.n(fn),pn=n(27),mn=n.n(pn),hn=n(26),vn=n.n(hn),yn=n(28),gn=n.n(yn),bn=n(29),wn=n.n(bn),En=n(30),xn=n.n(En),kn=n(31),Sn=n.n(kn),On=(n(48),kt((function(e,t){var n=e.myReducer;return{myData:n.myData,isOpen:n.isOpen,navIsHidden:n.navIsHidden}}),(function(e){return ct({setIsOpen:Ae},e)}))((function(e){e.myData;var t=e.isOpen,n=e.setIsOpen,r=e.navIsHidden,i="header",a="header__nav";Object(un.useMediaQuery)({query:"(max-width: 600px)"})&&(r?(i="header header--uphidden",a="header__nav header--hidden"):t?(i="header header--hamburger",a="header__nav"):(i="header header--hamburger",a="header__nav header--hidden"));var l=function(e){n(!t)};return o.a.createElement("div",{className:i},o.a.createElement("div",{className:"header__hideBtn",onClick:l},o.a.createElement("i",{className:"fa fa-bars","aria-hidden":"true"})),o.a.createElement("nav",{className:a},o.a.createElement("ul",{className:"header__nav--firstlevel"},o.a.createElement("li",{onClick:l},o.a.createElement(ie,{to:"/aboutMe",className:"header__nav__link"},o.a.createElement(sn.a,{className:"header__icon"}),o.a.createElement("div",{className:"header__navitem"}," Обо мне"),o.a.createElement("br",null))),o.a.createElement("li",{onClick:l},o.a.createElement(ie,{to:"/education",className:"header__nav__link"},o.a.createElement(dn.a,{className:"header__icon"})," ",o.a.createElement("div",{className:"header__navitem"},"Образование:"))),o.a.createElement("li",{onClick:l},o.a.createElement(ie,{to:"/qualification",className:"header__nav__link"},o.a.createElement(vn.a,{className:"header__icon"})," ",o.a.createElement("div",{className:"header__navitem"},"Опыт работы"))),o.a.createElement("li",{onClick:l},o.a.createElement(ie,{to:"/scills",className:"header__nav__link"},o.a.createElement(mn.a,{className:"header__icon"})," ",o.a.createElement("div",{className:"header__navitem"},"Навыки"))),o.a.createElement("li",{onClick:l},o.a.createElement(ie,{to:"/portfolio",className:"header__nav__link"},o.a.createElement(gn.a,{className:"header__icon"})," ",o.a.createElement("div",{className:"header__navitem"},"Портфолио"))),o.a.createElement("li",{onClick:l},o.a.createElement(ie,{to:"/sertificates",className:"header__nav__link"},o.a.createElement(wn.a,{className:"header__icon"})," ",o.a.createElement("div",{className:"header__navitem"},"Сертификаты"))),o.a.createElement("li",{onClick:l},o.a.createElement(ie,{to:"/contacts",className:"header__nav__link"},o.a.createElement(xn.a,{className:"header__icon"})," ",o.a.createElement("div",{className:"header__navitem"},"Контакты"))),o.a.createElement("li",{onClick:l},o.a.createElement("a",{className:"header__nav__link",href:"./Resume/PrintVersion_OlgaZaglavnova_Resume.pdf",target:"_blank"},o.a.createElement(Sn.a,{className:"header__icon"}),o.a.createElement("div",{className:"header__navitem"},"Версия для печати"))))))}))),Tn=(n(50),kt((function(e,t){var n=e.myReducer;return{name:n.myData.name,birthdate:n.myData.birthdate,wishJob:n.myData.wishJob,isOpen:n.isOpen}}),(function(e){return ct({loadData:Me},e)}))((function(e){var t=e.name,n=e.birthdate,r=e.wishJob;e.isOpen;return o.a.createElement("div",{className:"rightTitle"},o.a.createElement("div",{className:"rightTitle__photo"}),o.a.createElement("div",{className:"rightTitle__personal"},o.a.createElement("div",{className:"rightTitle__name"},t),o.a.createElement("div",{className:"rightTitle__age"},o.a.createElement("span",{className:"rightTitle__age--title"},"дата рождения: "),o.a.createElement("br",null),n),o.a.createElement("div",{className:"rightTitle__info"},o.a.createElement("table",null,o.a.createElement("tbody",null,o.a.createElement("tr",null,o.a.createElement("td",{className:"rightTitle--smallFont rightTitle--tableLeft"},"Желаемая должность:"),o.a.createElement("td",{className:"rightTitle--bigFont"},r.name)),o.a.createElement("tr",null,o.a.createElement("td",{className:"rightTitle--smallFont rightTitle--tableLeft"},"Опыт работы:"),o.a.createElement("td",{className:"rightTitle--bigFont"},r.expirience)),o.a.createElement("tr",null,o.a.createElement("td",{className:"rightTitle--smallFont rightTitle--tableLeft"},"Занятость:"),o.a.createElement("td",{className:"rightTitle--bigFont"},r.workday)),o.a.createElement("tr",null,o.a.createElement("td",{className:"rightTitle--smallFont rightTitle--tableLeft"},"График работы:"),o.a.createElement("td",{className:"rightTitle--bigFont"},r.schedule)))))))}))),Pn=function(e){var t=e.sertificateItem,n="/sertificates/"+e.idx;return o.a.createElement("div",{className:"sertificates__item"},o.a.createElement(ie,{to:n},o.a.createElement("div",{className:"sertificates__img"},o.a.createElement("img",{src:t.src,alt:"sertificate",className:"sertificates__img--size"})),o.a.createElement("div",null,t.school),o.a.createElement("div",{className:"sertificates__item--date"},t.date),o.a.createElement("div",{className:"sertificates__item--name"},t.fullName)))};function _n(){return(_n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var Cn=kt((function(e,t){var n=e.myReducer;return{sertificates:n.myData.sertificates,isOpen:n.isOpen}}),(function(e){return ct({loadData:Me},e)}))((function(e){var t=e.sertificates;e.isOpen;return o.a.createElement("div",{className:"infoPage scroll-y"},o.a.createElement("div",null,"Здравствуйте, дорогие товарищи! Добро пожаловать в мое резюме =)"),o.a.createElement("div",null,"Hello, Mr or Mrs! You are welcome to my CV"),o.a.createElement("br",null),o.a.createElement("div",null,"Новости: ",o.a.createElement("b",null,"я закончила курсы Frontend-разрабочик на GeekBrains.ru и получила сертификат:"),o.a.createElement(Pn,_n({sertificateItem:t[t.length-1]},{idx:t.length-1}))))})),jn=(n(51),kt((function(e,t){var n=e.myReducer;return{aboutMe:n.myData.aboutMe,languages:n.myData.languages,car:n.myData.car,isOpen:n.isOpen}}),(function(e){return ct({loadData:Me},e)}))((function(e){var t=e.aboutMe,n=e.languages,r=e.car;e.isOpen;return o.a.createElement("div",{className:"infoPage"},o.a.createElement("div",{className:"infoPage__header"},"Обо мне"),o.a.createElement("div",{className:"AboutMe scroll-y"},o.a.createElement("table",null,o.a.createElement("tbody",null,o.a.createElement("tr",null,o.a.createElement("td",{className:"AboutMe--label"},"Место жительства: "),o.a.createElement("td",null,t.city)),o.a.createElement("tr",null,o.a.createElement("td",{className:"AboutMe--label"},"Гражданство:"),o.a.createElement("td",null,t.citizen)),o.a.createElement("tr",null,o.a.createElement("td",{className:"AboutMe--label"},"Пол:"),o.a.createElement("td",null,t.gender)),o.a.createElement("tr",null,o.a.createElement("td",{className:"AboutMe--label"},"О себе:"),o.a.createElement("td",null,t.selfInformation)),o.a.createElement("tr",null,o.a.createElement("td",{className:"AboutMe--label"},"Языки:"),o.a.createElement("td",null,n.russian,o.a.createElement("br",null),n.english)),o.a.createElement("tr",null,o.a.createElement("td",{className:"AboutMe--label"},"Авто:"),o.a.createElement("td",null,r))))))}))),Nn=(n(52),function(e){var t=e.mainEducation;return o.a.createElement("div",{className:"EducationItem scroll-y"},o.a.createElement("div",{className:"EducationItem__title"},"Высшее"),o.a.createElement("div",{className:"EducationItem--itemborder"},o.a.createElement("div",{className:"EducationItem__item"},t.year),o.a.createElement("div",{className:"EducationItem__item"},t.institute),o.a.createElement("div",{className:"EducationItem__item"},t.faculty)))}),Rn=function(e){var t=e.additionalEducationItem;return o.a.createElement("div",{className:"EducationItem--itemborder"},o.a.createElement("div",{className:"EducationItem__item"},t.year),o.a.createElement("div",{className:"EducationItem__item"},t.institute),o.a.createElement("div",{className:"EducationItem__item"},t.courseName))};function Mn(){return(Mn=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var An=kt((function(e,t){var n=e.myReducer;return{mainEducation:n.myData.mainEducation,additionalEducation:n.myData.additionalEducation,isOpen:n.isOpen}}),(function(e){return ct({loadData:Me},e)}))((function(e){var t=e.mainEducation,n=e.additionalEducation;e.isOpen;return o.a.createElement("div",{className:"infoPage"},o.a.createElement("div",{className:"infoPage__header"},"Образование"),o.a.createElement("div",{className:"Education scroll-y"},o.a.createElement(Nn,{mainEducation:t}),o.a.createElement("div",{className:"EducationItem"},o.a.createElement("div",{className:"EducationItem__title"},"Дополнительное:"),Object.keys(n).map((function(e,t){return o.a.createElement(Rn,Mn({additionalEducationItem:n[e]},{idx:t,key:t}))})))))})),In=kt((function(e,t){var n=e.myReducer;return{mainEducation:n.myData.mainEducation,isOpen:n.isOpen}}),(function(e){return ct({loadData:Me},e)}))((function(e){var t=e.mainEducation;e.isOpen;return o.a.createElement("div",{className:"infoPage"},o.a.createElement("div",{className:"infoPage__header"},"Базовое образование"),o.a.createElement(Nn,{mainEducation:t}))}));function zn(){return(zn=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var Ln=kt((function(e,t){var n=e.myReducer;return{additionalEducation:n.myData.additionalEducation,isOpen:n.isOpen}}),(function(e){return ct({loadData:Me},e)}))((function(e){var t=e.additionalEducation;e.isOpen;return o.a.createElement("div",{className:"infoPage"},o.a.createElement("div",{className:"infoPage__header"},"Дополнительное образование"),o.a.createElement("div",{className:"scroll-y"},Object.keys(t).map((function(e,n){return o.a.createElement(Rn,zn({additionalEducationItem:t[e]},{idx:n,key:n}))}))))})),Dn=function(e){var t=e.qualificationItem;return o.a.createElement("div",{className:"EducationItem--itemborder"},o.a.createElement("div",{className:"EducationItem__item"},t.year),o.a.createElement("div",{className:"EducationItem__item"},o.a.createElement("strong",null,t.company)),o.a.createElement("div",{className:"EducationItem__item"},o.a.createElement("a",{href:t.companyLink,target:"_blank"},t.companyLink)),o.a.createElement("div",{className:"EducationItem__item"},t.city),o.a.createElement("div",{className:"EducationItem__item"},o.a.createElement("span",{className:"Qualifications--smallFont"},"должность: "),t.job),o.a.createElement("div",{className:"EducationItem__item"},o.a.createElement("span",{className:"Qualifications--smallFont"},"обязанности: "),t.duty))};n(53);function Fn(){return(Fn=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var $n=kt((function(e,t){var n=e.myReducer;return{qualification:n.myData.qualification,isOpen:n.isOpen}}),(function(e){return ct({loadData:Me},e)}))((function(e){var t=e.qualification;e.isOpen;return o.a.createElement("div",{className:"infoPage"},o.a.createElement("div",{className:"infoPage__header"},"Опыт работы:"),o.a.createElement("div",{className:"Qualifications scroll-y"},Object.keys(t).map((function(e,n){return o.a.createElement(Dn,Fn({qualificationItem:t[e]},{idx:n,key:n}))}))))})),Hn=function(e){var t=e.scillsItem;return o.a.createElement("div",{className:"EducationItem--itemborder"},o.a.createElement("div",{className:"EducationItem__item"},t))};function Bn(){return(Bn=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var Un=kt((function(e,t){var n=e.myReducer;return{scills:n.myData.mainScills,isOpen:n.isOpen}}),(function(e){return ct({loadData:Me},e)}))((function(e){var t=e.scills;e.isOpen;return o.a.createElement("div",{className:"infoPage"},o.a.createElement("div",{className:"infoPage__header"},"Навыки:"),o.a.createElement("div",{className:"scroll-y scroll"},Object.keys(t).map((function(e,n){return o.a.createElement(Hn,Bn({scillsItem:t[e]},{idx:n,key:n}))}))))}));n(20);function Vn(){return(Vn=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var Wn=kt((function(e,t){var n=e.myReducer;return{sertificates:n.myData.sertificates,isOpen:n.isOpen}}),(function(e){return ct({loadData:Me},e)}))((function(e){var t=e.sertificates;e.isOpen;return o.a.createElement("div",{className:"infoPage"},o.a.createElement("div",{className:"infoPage__header"},"Сертификаты:"),o.a.createElement("div",{className:"sertificates scroll"},t.map((function(e,t){return o.a.createElement(Pn,Vn({sertificateItem:e},{idx:t,key:t}))}))))})),qn=kt((function(e,t){var n=e.myReducer,r=t.match.params.id;return{sertificate:n.myData.sertificates[r],isOpen:n.isOpen}}),(function(e){return ct({loadData:Me},e)}))((function(e){var t=e.sertificate;e.isOpen;return o.a.createElement("div",{className:"infoPage"},o.a.createElement(ie,{to:"/sertificates",className:"sertificates__link"},o.a.createElement("div",{className:"sertificates__close"},o.a.createElement("i",{className:"fa fa-times","aria-hidden":"true"}))),o.a.createElement("div",{className:"infoPage__header"},t.fullName),o.a.createElement("div",{className:"sertificates__image scroll"},o.a.createElement("a",{href:t.src,target:"_blank"},o.a.createElement("img",{src:t.src,alt:"Sertificate",className:"sertificates__large"}))),o.a.createElement("div",{className:"sertificates__description"},o.a.createElement("ul",null,t.description.map((function(e,t){return o.a.createElement("li",{key:t},e)})))))})),Qn=(n(54),kt((function(e,t){var n=e.myReducer;return{contacts:n.myData.contacts,isOpen:n.isOpen}}),(function(e){return ct({loadData:Me},e)}))((function(e){var t=e.contacts;e.isOpen;return o.a.createElement("div",{className:"infoPage"},o.a.createElement("div",{className:"infoPage__header"},"Контакты:"),o.a.createElement("div",{className:"scroll-y"},o.a.createElement("div",{className:"contacts__item"},o.a.createElement("img",{className:"contacts_icon",src:"./Resume/img/phone.webp",alt:"phone"}),o.a.createElement("img",{className:"contacts_icon",src:"./Resume/img/viber.webp",alt:"viber"}),o.a.createElement("img",{className:"contacts_icon",src:"./Resume/img/Whatsapp.webp",alt:"wattsapp"}),o.a.createElement("img",{className:"contacts_icon",src:"./Resume/img/telegram.webp",alt:"telegram"}),t.phone),o.a.createElement("div",{className:"contacts__item"},o.a.createElement("img",{className:"contacts_icon",src:"./Resume/img/email.webp",alt:"email"}),t.email),o.a.createElement("div",{className:"contacts__item"},o.a.createElement("img",{className:"contacts_icon",src:"./Resume/img/skype.webp",alt:"skype"}),t.skype)))}))),Gn=function(e){var t=e.portfolioItem;e.idx;return o.a.createElement("div",{className:"portfolio__item"},o.a.createElement("a",{href:t.demolink,target:"_blank"},o.a.createElement("div",{className:"portfolio__img"},o.a.createElement("img",{src:t.src,alt:"portfolio-work",className:"portfolio__img--size"}))),o.a.createElement("div",null,t.school),o.a.createElement("div",{className:"portfolio__item--date"},t.course),o.a.createElement("div",{className:"portfolio__item--name"},t.workName),o.a.createElement("div",{className:"portfolio__item--link"},o.a.createElement("a",{href:t.demolink,target:"_blank"},"Демонстрация")),o.a.createElement("div",{className:"portfolio__item--link"},o.a.createElement("a",{href:t.codelink,target:"_blank"},"Исходный код")),o.a.createElement("div",{className:"portfolio__item--comment"},t.comment))};n(55);function Kn(){return(Kn=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var Jn=kt((function(e,t){var n=e.myReducer;return{portfolio_geekbrains:n.myData.portfolio_geekbrains,isOpen:n.isOpen}}),(function(e){return ct({loadData:Me},e)}))((function(e){var t=e.portfolio_geekbrains;e.isOpen;return o.a.createElement("div",{className:"infoPage"},o.a.createElement("div",{className:"infoPage__header"},"Портфолио:"),o.a.createElement("div",{className:"portfolio scroll"},o.a.createElement("div",{className:"portfolio__header"},"Учебные работы:"),t.map((function(e,t){return o.a.createElement(Gn,Kn({portfolioItem:e},{idx:t,key:t}))}))))}));function Zn(e){return(Zn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Yn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Xn(e,t){return(Xn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function er(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=nr(e);if(t){var o=nr(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return tr(this,n)}}function tr(e,t){return!t||"object"!==Zn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function nr(e){return(nr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var rr=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return at(Kt,e)}();k();rr.dispatch(Me());var or=function(){window.scrollTo(0,0)},ir=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Xn(e,t)}(a,e);var t,n,r,i=er(a);function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e)).windowPos=0,t.scrolledDown=!1,t}return t=a,(n=[{key:"scrollHandler",value:function(e){var t=this.scrolledDown;t=window.pageYOffset>this.windowPos,this.windowPos=window.pageYOffset,t!=this.scrolledDown&&(this.scrolledDown=t,rr.dispatch(Ie(this.scrolledDown)))}},{key:"componentDidMount",value:function(){window.addEventListener("scroll",this.scrollHandler)}},{key:"render",value:function(){return o.a.createElement("div",null,o.a.createElement("div",{className:"main"},o.a.createElement("div",{className:"goTop",onClick:or},o.a.createElement("i",{className:"fa fa-hand-pointer-o","aria-hidden":"true"})),o.a.createElement(Tn,{name:"top"}),!this.scrolledDown&&o.a.createElement(On,{isScrolledDown:this.scrolledDown}),o.a.createElement(K,null,o.a.createElement(U,{exact:!0,path:"/",component:Cn}),o.a.createElement(U,{exact:!0,path:"/aboutMe",component:jn}),o.a.createElement(U,{exact:!0,path:"/education",component:An}),o.a.createElement(U,{path:"/education/main",component:In}),o.a.createElement(U,{path:"/education/additional",component:Ln}),o.a.createElement(U,{path:"/qualification",component:$n}),o.a.createElement(U,{path:"/scills",component:Un}),o.a.createElement(U,{path:"/portfolio",component:Jn}),o.a.createElement(U,{exact:!0,path:"/sertificates",component:Wn}),o.a.createElement(U,{path:"/sertificates/:id",component:qn}),o.a.createElement(U,{path:"/contacts",component:Qn}))))}}])&&Yn(t.prototype,n),r&&Yn(t,r),a}(o.a.Component);a.a.render(o.a.createElement(He,{store:rr},o.a.createElement(J,null,o.a.createElement(ir,null))),document.getElementById("root"))},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return wr}));var r=n(1),o=n(4);function i(e,t){if(null==e)return{};var n,r,i=Object(o.a)(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var a=n(0),l=n.n(a);n(2);function u(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=u(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}var c=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=u(e))&&(r&&(r+=" "),r+=t);return r},s=n(11),f=n.n(s),d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},p="object"===("undefined"==typeof window?"undefined":d(window))&&"object"===("undefined"==typeof document?"undefined":d(document))&&9===document.nodeType;n(8);function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function h(e,t,n){return t&&m(e.prototype,t),n&&m(e,n),e}var v=n(3);function y(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var g={}.constructor;function b(e){if(null==e||"object"!=typeof e)return e;if(Array.isArray(e))return e.map(b);if(e.constructor!==g)return e;var t={};for(var n in e)t[n]=b(e[n]);return t}function w(e,t,n){void 0===e&&(e="unnamed");var r=n.jss,o=b(t),i=r.plugins.onCreateRule(e,o,n);return i||(e[0],null)}var E=function(e,t){for(var n="",r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=t),n+=e[r];return n};function x(e,t){if(void 0===t&&(t=!1),!Array.isArray(e))return e;var n="";if(Array.isArray(e[0]))for(var r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=", "),n+=E(e[r]," ");else n=E(e,", ");return t||"!important"!==e[e.length-1]||(n+=" !important"),n}function k(e,t){for(var n="",r=0;r<t;r++)n+="  ";return n+e}function S(e,t,n){void 0===n&&(n={});var r="";if(!t)return r;var o=n.indent,i=void 0===o?0:o,a=t.fallbacks;if(e&&i++,a)if(Array.isArray(a))for(var l=0;l<a.length;l++){var u=a[l];for(var c in u){var s=u[c];null!=s&&(r&&(r+="\n"),r+=""+k(c+": "+x(s)+";",i))}}else for(var f in a){var d=a[f];null!=d&&(r&&(r+="\n"),r+=""+k(f+": "+x(d)+";",i))}for(var p in t){var m=t[p];null!=m&&"fallbacks"!==p&&(r&&(r+="\n"),r+=""+k(p+": "+x(m)+";",i))}return(r||n.allowEmpty)&&e?(r&&(r="\n"+r+"\n"),k(e+" {"+r,--i)+k("}",i)):r}var O=/([[\].#*$><+~=|^:(),"'`\s])/g,T="undefined"!=typeof CSS&&CSS.escape,P=function(e){return T?T(e):e.replace(O,"\\$1")},_=function(){function e(e,t,n){this.type="style",this.key=void 0,this.isProcessed=!1,this.style=void 0,this.renderer=void 0,this.renderable=void 0,this.options=void 0;var r=n.sheet,o=n.Renderer;this.key=e,this.options=n,this.style=t,r?this.renderer=r.renderer:o&&(this.renderer=new o)}return e.prototype.prop=function(e,t,n){if(void 0===t)return this.style[e];var r=!!n&&n.force;if(!r&&this.style[e]===t)return this;var o=t;n&&!1===n.process||(o=this.options.jss.plugins.onChangeValue(t,e,this));var i=null==o||!1===o,a=e in this.style;if(i&&!a&&!r)return this;var l=i&&a;if(l?delete this.style[e]:this.style[e]=o,this.renderable&&this.renderer)return l?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,o),this;var u=this.options.sheet;return u&&u.attached,this},e}(),C=function(e){function t(t,n,r){var o;(o=e.call(this,t,n,r)||this).selectorText=void 0,o.id=void 0,o.renderable=void 0;var i=r.selector,a=r.scoped,l=r.sheet,u=r.generateId;return i?o.selectorText=i:!1!==a&&(o.id=u(y(y(o)),l),o.selectorText="."+P(o.id)),o}Object(v.a)(t,e);var n=t.prototype;return n.applyTo=function(e){var t=this.renderer;if(t){var n=this.toJSON();for(var r in n)t.setProperty(e,r,n[r])}return this},n.toJSON=function(){var e={};for(var t in this.style){var n=this.style[t];"object"!=typeof n?e[t]=n:Array.isArray(n)&&(e[t]=x(n))}return e},n.toString=function(e){var t=this.options.sheet,n=!!t&&t.options.link?Object(r.a)({},e,{allowEmpty:!0}):e;return S(this.selectorText,this.style,n)},h(t,[{key:"selector",set:function(e){if(e!==this.selectorText){this.selectorText=e;var t=this.renderer,n=this.renderable;if(n&&t)t.setSelector(n,e)||t.replaceRule(n,this)}},get:function(){return this.selectorText}}]),t}(_),j={onCreateRule:function(e,t,n){return"@"===e[0]||n.parent&&"keyframes"===n.parent.type?null:new C(e,t,n)}},N={indent:1,children:!0},R=/@([\w-]+)/,M=function(){function e(e,t,n){this.type="conditional",this.at=void 0,this.key=void 0,this.query=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.query=n.name;var o=e.match(R);for(var i in this.at=o?o[1]:"unknown",this.options=n,this.rules=new ne(Object(r.a)({},n,{parent:this})),t)this.rules.add(i,t[i]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.indexOf=function(e){return this.rules.indexOf(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r?(this.options.jss.plugins.onProcessRule(r),r):null},t.toString=function(e){if(void 0===e&&(e=N),null==e.indent&&(e.indent=N.indent),null==e.children&&(e.children=N.children),!1===e.children)return this.query+" {}";var t=this.rules.toString(e);return t?this.query+" {\n"+t+"\n}":""},e}(),A=/@media|@supports\s+/,I={onCreateRule:function(e,t,n){return A.test(e)?new M(e,t,n):null}},z={indent:1,children:!0},L=/@keyframes\s+([\w-]+)/,D=function(){function e(e,t,n){this.type="keyframes",this.at="@keyframes",this.key=void 0,this.name=void 0,this.id=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0;var o=e.match(L);o&&o[1]?this.name=o[1]:this.name="noname",this.key=this.type+"-"+this.name,this.options=n;var i=n.scoped,a=n.sheet,l=n.generateId;for(var u in this.id=!1===i?this.name:P(l(this,a)),this.rules=new ne(Object(r.a)({},n,{parent:this})),t)this.rules.add(u,t[u],Object(r.a)({},n,{parent:this}));this.rules.process()}return e.prototype.toString=function(e){if(void 0===e&&(e=z),null==e.indent&&(e.indent=z.indent),null==e.children&&(e.children=z.children),!1===e.children)return this.at+" "+this.id+" {}";var t=this.rules.toString(e);return t&&(t="\n"+t+"\n"),this.at+" "+this.id+" {"+t+"}"},e}(),F=/@keyframes\s+/,$=/\$([\w-]+)/g,H=function(e,t){return"string"==typeof e?e.replace($,(function(e,n){return n in t?t[n]:e})):e},B=function(e,t,n){var r=e[t],o=H(r,n);o!==r&&(e[t]=o)},U={onCreateRule:function(e,t,n){return"string"==typeof e&&F.test(e)?new D(e,t,n):null},onProcessStyle:function(e,t,n){return"style"===t.type&&n?("animation-name"in e&&B(e,"animation-name",n.keyframes),"animation"in e&&B(e,"animation",n.keyframes),e):e},onChangeValue:function(e,t,n){var r=n.options.sheet;if(!r)return e;switch(t){case"animation":case"animation-name":return H(e,r.keyframes);default:return e}}},V=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).renderable=void 0,t}return Object(v.a)(t,e),t.prototype.toString=function(e){var t=this.options.sheet,n=!!t&&t.options.link?Object(r.a)({},e,{allowEmpty:!0}):e;return S(this.key,this.style,n)},t}(_),W={onCreateRule:function(e,t,n){return n.parent&&"keyframes"===n.parent.type?new V(e,t,n):null}},q=function(){function e(e,t,n){this.type="font-face",this.at="@font-face",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.style)){for(var t="",n=0;n<this.style.length;n++)t+=S(this.at,this.style[n]),this.style[n+1]&&(t+="\n");return t}return S(this.at,this.style,e)},e}(),Q=/@font-face/,G={onCreateRule:function(e,t,n){return Q.test(e)?new q(e,t,n):null}},K=function(){function e(e,t,n){this.type="viewport",this.at="@viewport",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){return S(this.key,this.style,e)},e}(),J={onCreateRule:function(e,t,n){return"@viewport"===e||"@-ms-viewport"===e?new K(e,t,n):null}},Z=function(){function e(e,t,n){this.type="simple",this.key=void 0,this.value=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.value=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.value)){for(var t="",n=0;n<this.value.length;n++)t+=this.key+" "+this.value[n]+";",this.value[n+1]&&(t+="\n");return t}return this.key+" "+this.value+";"},e}(),Y={"@charset":!0,"@import":!0,"@namespace":!0},X=[j,I,U,W,G,J,{onCreateRule:function(e,t,n){return e in Y?new Z(e,t,n):null}}],ee={process:!0},te={force:!0,process:!0},ne=function(){function e(e){this.map={},this.raw={},this.index=[],this.counter=0,this.options=void 0,this.classes=void 0,this.keyframes=void 0,this.options=e,this.classes=e.classes,this.keyframes=e.keyframes}var t=e.prototype;return t.add=function(e,t,n){var o=this.options,i=o.parent,a=o.sheet,l=o.jss,u=o.Renderer,c=o.generateId,s=o.scoped,f=Object(r.a)({classes:this.classes,parent:i,sheet:a,jss:l,Renderer:u,generateId:c,scoped:s,name:e,keyframes:this.keyframes,selector:void 0},n),d=e;e in this.raw&&(d=e+"-d"+this.counter++),this.raw[d]=t,d in this.classes&&(f.selector="."+P(this.classes[d]));var p=w(d,t,f);if(!p)return null;this.register(p);var m=void 0===f.index?this.index.length:f.index;return this.index.splice(m,0,p),p},t.get=function(e){return this.map[e]},t.remove=function(e){this.unregister(e),delete this.raw[e.key],this.index.splice(this.index.indexOf(e),1)},t.indexOf=function(e){return this.index.indexOf(e)},t.process=function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)},t.register=function(e){this.map[e.key]=e,e instanceof C?(this.map[e.selector]=e,e.id&&(this.classes[e.key]=e.id)):e instanceof D&&this.keyframes&&(this.keyframes[e.name]=e.id)},t.unregister=function(e){delete this.map[e.key],e instanceof C?(delete this.map[e.selector],delete this.classes[e.key]):e instanceof D&&delete this.keyframes[e.name]},t.update=function(){var e,t,n;if("string"==typeof(arguments.length<=0?void 0:arguments[0])?(e=arguments.length<=0?void 0:arguments[0],t=arguments.length<=1?void 0:arguments[1],n=arguments.length<=2?void 0:arguments[2]):(t=arguments.length<=0?void 0:arguments[0],n=arguments.length<=1?void 0:arguments[1],e=null),e)this.updateOne(this.map[e],t,n);else for(var r=0;r<this.index.length;r++)this.updateOne(this.index[r],t,n)},t.updateOne=function(t,n,r){void 0===r&&(r=ee);var o=this.options,i=o.jss.plugins,a=o.sheet;if(t.rules instanceof e)t.rules.update(n,r);else{var l=t,u=l.style;if(i.onUpdate(n,t,a,r),r.process&&u&&u!==l.style){for(var c in i.onProcessStyle(l.style,l,a),l.style){var s=l.style[c];s!==u[c]&&l.prop(c,s,te)}for(var f in u){var d=l.style[f],p=u[f];null==d&&d!==p&&l.prop(f,null,te)}}}},t.toString=function(e){for(var t="",n=this.options.sheet,r=!!n&&n.options.link,o=0;o<this.index.length;o++){var i=this.index[o].toString(e);(i||r)&&(t&&(t+="\n"),t+=i)}return t},e}(),re=function(){function e(e,t){for(var n in this.options=void 0,this.deployed=void 0,this.attached=void 0,this.rules=void 0,this.renderer=void 0,this.classes=void 0,this.keyframes=void 0,this.queue=void 0,this.attached=!1,this.deployed=!1,this.classes={},this.keyframes={},this.options=Object(r.a)({},t,{sheet:this,parent:this,classes:this.classes,keyframes:this.keyframes}),t.Renderer&&(this.renderer=new t.Renderer(this)),this.rules=new ne(this.options),e)this.rules.add(n,e[n]);this.rules.process()}var t=e.prototype;return t.attach=function(){return this.attached||(this.renderer&&this.renderer.attach(),this.attached=!0,this.deployed||this.deploy()),this},t.detach=function(){return this.attached?(this.renderer&&this.renderer.detach(),this.attached=!1,this):this},t.addRule=function(e,t,n){var r=this.queue;this.attached&&!r&&(this.queue=[]);var o=this.rules.add(e,t,n);return o?(this.options.jss.plugins.onProcessRule(o),this.attached?this.deployed?(r?r.push(o):(this.insertRule(o),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0)),o):o:(this.deployed=!1,o)):null},t.insertRule=function(e){this.renderer&&this.renderer.insertRule(e)},t.addRules=function(e,t){var n=[];for(var r in e){var o=this.addRule(r,e[r],t);o&&n.push(o)}return n},t.getRule=function(e){return this.rules.get(e)},t.deleteRule=function(e){var t="object"==typeof e?e:this.rules.get(e);return!!t&&(this.rules.remove(t),!(this.attached&&t.renderable&&this.renderer)||this.renderer.deleteRule(t.renderable))},t.indexOf=function(e){return this.rules.indexOf(e)},t.deploy=function(){return this.renderer&&this.renderer.deploy(),this.deployed=!0,this},t.update=function(){var e;return(e=this.rules).update.apply(e,arguments),this},t.updateOne=function(e,t,n){return this.rules.updateOne(e,t,n),this},t.toString=function(e){return this.rules.toString(e)},e}(),oe=function(){function e(){this.plugins={internal:[],external:[]},this.registry=void 0}var t=e.prototype;return t.onCreateRule=function(e,t,n){for(var r=0;r<this.registry.onCreateRule.length;r++){var o=this.registry.onCreateRule[r](e,t,n);if(o)return o}return null},t.onProcessRule=function(e){if(!e.isProcessed){for(var t=e.options.sheet,n=0;n<this.registry.onProcessRule.length;n++)this.registry.onProcessRule[n](e,t);e.style&&this.onProcessStyle(e.style,e,t),e.isProcessed=!0}},t.onProcessStyle=function(e,t,n){for(var r=0;r<this.registry.onProcessStyle.length;r++)t.style=this.registry.onProcessStyle[r](t.style,t,n)},t.onProcessSheet=function(e){for(var t=0;t<this.registry.onProcessSheet.length;t++)this.registry.onProcessSheet[t](e)},t.onUpdate=function(e,t,n,r){for(var o=0;o<this.registry.onUpdate.length;o++)this.registry.onUpdate[o](e,t,n,r)},t.onChangeValue=function(e,t,n){for(var r=e,o=0;o<this.registry.onChangeValue.length;o++)r=this.registry.onChangeValue[o](r,t,n);return r},t.use=function(e,t){void 0===t&&(t={queue:"external"});var n=this.plugins[t.queue];-1===n.indexOf(e)&&(n.push(e),this.registry=[].concat(this.plugins.external,this.plugins.internal).reduce((function(e,t){for(var n in t)n in e&&e[n].push(t[n]);return e}),{onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}))},e}(),ie=new(function(){function e(){this.registry=[]}var t=e.prototype;return t.add=function(e){var t=this.registry,n=e.options.index;if(-1===t.indexOf(e))if(0===t.length||n>=this.index)t.push(e);else for(var r=0;r<t.length;r++)if(t[r].options.index>n)return void t.splice(r,0,e)},t.reset=function(){this.registry=[]},t.remove=function(e){var t=this.registry.indexOf(e);this.registry.splice(t,1)},t.toString=function(e){for(var t=void 0===e?{}:e,n=t.attached,r=Object(o.a)(t,["attached"]),i="",a=0;a<this.registry.length;a++){var l=this.registry[a];null!=n&&l.attached!==n||(i&&(i+="\n"),i+=l.toString(r))}return i},h(e,[{key:"index",get:function(){return 0===this.registry.length?0:this.registry[this.registry.length-1].options.index}}]),e}()),ae="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")(),le="2f1acc6c3a606b082e5eef5e54414ffb";null==ae[le]&&(ae[le]=0);var ue=ae[le]++,ce=function(e){void 0===e&&(e={});var t=0;return function(n,r){t+=1;var o="",i="";return r&&(r.options.classNamePrefix&&(i=r.options.classNamePrefix),null!=r.options.jss.id&&(o=String(r.options.jss.id))),e.minify?""+(i||"c")+ue+o+t:i+n.key+"-"+ue+(o?"-"+o:"")+"-"+t}},se=function(e){var t;return function(){return t||(t=e()),t}};function fe(e,t){try{return e.attributeStyleMap?e.attributeStyleMap.get(t):e.style.getPropertyValue(t)}catch(e){return""}}function de(e,t,n){try{var r=n;if(Array.isArray(n)&&(r=x(n,!0),"!important"===n[n.length-1]))return e.style.setProperty(t,r,"important"),!0;e.attributeStyleMap?e.attributeStyleMap.set(t,r):e.style.setProperty(t,r)}catch(e){return!1}return!0}function pe(e,t){try{e.attributeStyleMap?e.attributeStyleMap.delete(t):e.style.removeProperty(t)}catch(e){}}function me(e,t){return e.selectorText=t,e.selectorText===t}var he=se((function(){return document.querySelector("head")}));function ve(e){var t=ie.registry;if(t.length>0){var n=function(e,t){for(var n=0;n<e.length;n++){var r=e[n];if(r.attached&&r.options.index>t.index&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e);if(n&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element};if((n=function(e,t){for(var n=e.length-1;n>=0;n--){var r=e[n];if(r.attached&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e))&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element.nextSibling}}var r=e.insertionPoint;if(r&&"string"==typeof r){var o=function(e){for(var t=he(),n=0;n<t.childNodes.length;n++){var r=t.childNodes[n];if(8===r.nodeType&&r.nodeValue.trim()===e)return r}return null}(r);if(o)return{parent:o.parentNode,node:o.nextSibling}}return!1}var ye=se((function(){var e=document.querySelector('meta[property="csp-nonce"]');return e?e.getAttribute("content"):null})),ge=function(e,t,n){var r=e.cssRules.length;(void 0===n||n>r)&&(n=r);try{if("insertRule"in e)e.insertRule(t,n);else if("appendRule"in e){e.appendRule(t)}}catch(e){return!1}return e.cssRules[n]},be=function(){function e(e){this.getPropertyValue=fe,this.setProperty=de,this.removeProperty=pe,this.setSelector=me,this.element=void 0,this.sheet=void 0,this.hasInsertedRules=!1,e&&ie.add(e),this.sheet=e;var t=this.sheet?this.sheet.options:{},n=t.media,r=t.meta,o=t.element;this.element=o||function(){var e=document.createElement("style");return e.textContent="\n",e}(),this.element.setAttribute("data-jss",""),n&&this.element.setAttribute("media",n),r&&this.element.setAttribute("data-meta",r);var i=ye();i&&this.element.setAttribute("nonce",i)}var t=e.prototype;return t.attach=function(){if(!this.element.parentNode&&this.sheet){!function(e,t){var n=t.insertionPoint,r=ve(t);if(!1!==r&&r.parent)r.parent.insertBefore(e,r.node);else if(n&&"number"==typeof n.nodeType){var o=n,i=o.parentNode;i&&i.insertBefore(e,o.nextSibling)}else he().appendChild(e)}(this.element,this.sheet.options);var e=Boolean(this.sheet&&this.sheet.deployed);this.hasInsertedRules&&e&&(this.hasInsertedRules=!1,this.deploy())}},t.detach=function(){var e=this.element.parentNode;e&&e.removeChild(this.element)},t.deploy=function(){var e=this.sheet;e&&(e.options.link?this.insertRules(e.rules):this.element.textContent="\n"+e.toString()+"\n")},t.insertRules=function(e,t){for(var n=0;n<e.index.length;n++)this.insertRule(e.index[n],n,t)},t.insertRule=function(e,t,n){if(void 0===n&&(n=this.element.sheet),e.rules){var r=e,o=n;return("conditional"!==e.type&&"keyframes"!==e.type||!1!==(o=ge(n,r.toString({children:!1}),t)))&&(this.insertRules(r.rules,o),o)}if(e.renderable&&e.renderable.parentStyleSheet===this.element.sheet)return e.renderable;var i=e.toString();if(!i)return!1;var a=ge(n,i,t);return!1!==a&&(this.hasInsertedRules=!0,e.renderable=a,a)},t.deleteRule=function(e){var t=this.element.sheet,n=this.indexOf(e);return-1!==n&&(t.deleteRule(n),!0)},t.indexOf=function(e){for(var t=this.element.sheet.cssRules,n=0;n<t.length;n++)if(e===t[n])return n;return-1},t.replaceRule=function(e,t){var n=this.indexOf(e);return-1!==n&&(this.element.sheet.deleteRule(n),this.insertRule(t,n))},t.getRules=function(){return this.element.sheet.cssRules},e}(),we=0,Ee=function(){function e(e){this.id=we++,this.version="10.4.0",this.plugins=new oe,this.options={id:{minify:!1},createGenerateId:ce,Renderer:p?be:null,plugins:[]},this.generateId=ce({minify:!1});for(var t=0;t<X.length;t++)this.plugins.use(X[t],{queue:"internal"});this.setup(e)}var t=e.prototype;return t.setup=function(e){return void 0===e&&(e={}),e.createGenerateId&&(this.options.createGenerateId=e.createGenerateId),e.id&&(this.options.id=Object(r.a)({},this.options.id,e.id)),(e.createGenerateId||e.id)&&(this.generateId=this.options.createGenerateId(this.options.id)),null!=e.insertionPoint&&(this.options.insertionPoint=e.insertionPoint),"Renderer"in e&&(this.options.Renderer=e.Renderer),e.plugins&&this.use.apply(this,e.plugins),this},t.createStyleSheet=function(e,t){void 0===t&&(t={});var n=t.index;"number"!=typeof n&&(n=0===ie.index?0:ie.index+1);var o=new re(e,Object(r.a)({},t,{jss:this,generateId:t.generateId||this.generateId,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:n}));return this.plugins.onProcessSheet(o),o},t.removeStyleSheet=function(e){return e.detach(),ie.remove(e),this},t.createRule=function(e,t,n){if(void 0===t&&(t={}),void 0===n&&(n={}),"object"==typeof e)return this.createRule(void 0,e,t);var o=Object(r.a)({},n,{name:e,jss:this,Renderer:this.options.Renderer});o.generateId||(o.generateId=this.generateId),o.classes||(o.classes={}),o.keyframes||(o.keyframes={});var i=w(e,t,o);return i&&this.plugins.onProcessRule(i),i},t.use=function(){for(var e=this,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach((function(t){e.plugins.use(t)})),this},e}();var xe="undefined"!=typeof CSS&&CSS&&"number"in CSS,ke=function(e){return new Ee(e)};
/**
 * A better abstraction over CSS.
 *
 * @copyright Oleg Isonen (Slobodskoi) / Isonen 2014-present
 * @website https://github.com/cssinjs/jss
 * @license MIT
 */ke();function Se(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.baseClasses,n=e.newClasses;e.Component;if(!n)return t;var o=Object(r.a)({},t);return Object.keys(n).forEach((function(e){n[e]&&(o[e]="".concat(t[e]," ").concat(n[e]))})),o}var Oe={set:function(e,t,n,r){var o=e.get(t);o||(o=new Map,e.set(t,o)),o.set(n,r)},get:function(e,t,n){var r=e.get(t);return r?r.get(n):void 0},delete:function(e,t,n){e.get(t).delete(n)}};var Te=l.a.createContext(null);function Pe(){return l.a.useContext(Te)}var _e="function"==typeof Symbol&&Symbol.for?Symbol.for("mui.nested"):"__THEME_NESTED__",Ce=["checked","disabled","error","focused","focusVisible","required","expanded","selected"];var je=Date.now(),Ne="fnValues"+je,Re="fnStyle"+ ++je;var Me=function(){return{onCreateRule:function(e,t,n){if("function"!=typeof t)return null;var r=w(e,{},n);return r[Re]=t,r},onProcessStyle:function(e,t){if(Ne in t||Re in t)return e;var n={};for(var r in e){var o=e[r];"function"==typeof o&&(delete e[r],n[r]=o)}return t[Ne]=n,e},onUpdate:function(e,t,n,r){var o=t,i=o[Re];i&&(o.style=i(e)||{});var a=o[Ne];if(a)for(var l in a)o.prop(l,a[l](e),r)}}},Ae="@global",Ie=function(){function e(e,t,n){for(var o in this.type="global",this.at=Ae,this.rules=void 0,this.options=void 0,this.key=void 0,this.isProcessed=!1,this.key=e,this.options=n,this.rules=new ne(Object(r.a)({},n,{parent:this})),t)this.rules.add(o,t[o]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return this.options.jss.plugins.onProcessRule(r),r},t.indexOf=function(e){return this.rules.indexOf(e)},t.toString=function(){return this.rules.toString()},e}(),ze=function(){function e(e,t,n){this.type="global",this.at=Ae,this.options=void 0,this.rule=void 0,this.isProcessed=!1,this.key=void 0,this.key=e,this.options=n;var o=e.substr("@global ".length);this.rule=n.jss.createRule(o,t,Object(r.a)({},n,{parent:this}))}return e.prototype.toString=function(e){return this.rule?this.rule.toString(e):""},e}(),Le=/\s*,\s*/g;function De(e,t){for(var n=e.split(Le),r="",o=0;o<n.length;o++)r+=t+" "+n[o].trim(),n[o+1]&&(r+=", ");return r}var Fe=function(){return{onCreateRule:function(e,t,n){if(!e)return null;if(e===Ae)return new Ie(e,t,n);if("@"===e[0]&&"@global "===e.substr(0,"@global ".length))return new ze(e,t,n);var r=n.parent;return r&&("global"===r.type||r.options.parent&&"global"===r.options.parent.type)&&(n.scoped=!1),!1===n.scoped&&(n.selector=e),null},onProcessRule:function(e){"style"===e.type&&(function(e){var t=e.options,n=e.style,o=n?n[Ae]:null;if(o){for(var i in o)t.sheet.addRule(i,o[i],Object(r.a)({},t,{selector:De(i,e.selector)}));delete n[Ae]}}(e),function(e){var t=e.options,n=e.style;for(var o in n)if("@"===o[0]&&o.substr(0,Ae.length)===Ae){var i=De(o.substr(Ae.length),e.selector);t.sheet.addRule(i,n[o],Object(r.a)({},t,{selector:i})),delete n[o]}}(e))}}},$e=/\s*,\s*/g,He=/&/g,Be=/\$([\w-]+)/g;var Ue=function(){function e(e,t){return function(n,r){var o=e.getRule(r)||t&&t.getRule(r);return o?(o=o).selector:r}}function t(e,t){for(var n=t.split($e),r=e.split($e),o="",i=0;i<n.length;i++)for(var a=n[i],l=0;l<r.length;l++){var u=r[l];o&&(o+=", "),o+=-1!==u.indexOf("&")?u.replace(He,a):a+" "+u}return o}function n(e,t,n){if(n)return Object(r.a)({},n,{index:n.index+1});var o=e.options.nestingLevel;o=void 0===o?1:o+1;var i=Object(r.a)({},e.options,{nestingLevel:o,index:t.indexOf(e)+1});return delete i.name,i}return{onProcessStyle:function(o,i,a){if("style"!==i.type)return o;var l,u,c=i,s=c.options.parent;for(var f in o){var d=-1!==f.indexOf("&"),p="@"===f[0];if(d||p){if(l=n(c,s,l),d){var m=t(f,c.selector);u||(u=e(s,a)),m=m.replace(Be,u),s.addRule(m,o[f],Object(r.a)({},l,{selector:m}))}else p&&s.addRule(f,{},l).addRule(c.key,o[f],{selector:c.selector});delete o[f]}}return o}}},Ve=/[A-Z]/g,We=/^ms-/,qe={};function Qe(e){return"-"+e.toLowerCase()}var Ge=function(e){if(qe.hasOwnProperty(e))return qe[e];var t=e.replace(Ve,Qe);return qe[e]=We.test(t)?"-"+t:t};function Ke(e){var t={};for(var n in e){t[0===n.indexOf("--")?n:Ge(n)]=e[n]}return e.fallbacks&&(Array.isArray(e.fallbacks)?t.fallbacks=e.fallbacks.map(Ke):t.fallbacks=Ke(e.fallbacks)),t}var Je=function(){return{onProcessStyle:function(e){if(Array.isArray(e)){for(var t=0;t<e.length;t++)e[t]=Ke(e[t]);return e}return Ke(e)},onChangeValue:function(e,t,n){if(0===t.indexOf("--"))return e;var r=Ge(t);return t===r?e:(n.prop(r,e),null)}}},Ze=xe&&CSS?CSS.px:"px",Ye=xe&&CSS?CSS.ms:"ms",Xe=xe&&CSS?CSS.percent:"%";function et(e){var t=/(-[a-z])/g,n=function(e){return e[1].toUpperCase()},r={};for(var o in e)r[o]=e[o],r[o.replace(t,n)]=e[o];return r}var tt=et({"animation-delay":Ye,"animation-duration":Ye,"background-position":Ze,"background-position-x":Ze,"background-position-y":Ze,"background-size":Ze,border:Ze,"border-bottom":Ze,"border-bottom-left-radius":Ze,"border-bottom-right-radius":Ze,"border-bottom-width":Ze,"border-left":Ze,"border-left-width":Ze,"border-radius":Ze,"border-right":Ze,"border-right-width":Ze,"border-top":Ze,"border-top-left-radius":Ze,"border-top-right-radius":Ze,"border-top-width":Ze,"border-width":Ze,margin:Ze,"margin-bottom":Ze,"margin-left":Ze,"margin-right":Ze,"margin-top":Ze,padding:Ze,"padding-bottom":Ze,"padding-left":Ze,"padding-right":Ze,"padding-top":Ze,"mask-position-x":Ze,"mask-position-y":Ze,"mask-size":Ze,height:Ze,width:Ze,"min-height":Ze,"max-height":Ze,"min-width":Ze,"max-width":Ze,bottom:Ze,left:Ze,top:Ze,right:Ze,"box-shadow":Ze,"text-shadow":Ze,"column-gap":Ze,"column-rule":Ze,"column-rule-width":Ze,"column-width":Ze,"font-size":Ze,"font-size-delta":Ze,"letter-spacing":Ze,"text-indent":Ze,"text-stroke":Ze,"text-stroke-width":Ze,"word-spacing":Ze,motion:Ze,"motion-offset":Ze,outline:Ze,"outline-offset":Ze,"outline-width":Ze,perspective:Ze,"perspective-origin-x":Xe,"perspective-origin-y":Xe,"transform-origin":Xe,"transform-origin-x":Xe,"transform-origin-y":Xe,"transform-origin-z":Xe,"transition-delay":Ye,"transition-duration":Ye,"vertical-align":Ze,"flex-basis":Ze,"shape-margin":Ze,size:Ze,grid:Ze,"grid-gap":Ze,"grid-row-gap":Ze,"grid-column-gap":Ze,"grid-template-rows":Ze,"grid-template-columns":Ze,"grid-auto-rows":Ze,"grid-auto-columns":Ze,"box-shadow-x":Ze,"box-shadow-y":Ze,"box-shadow-blur":Ze,"box-shadow-spread":Ze,"font-line-height":Ze,"text-shadow-x":Ze,"text-shadow-y":Ze,"text-shadow-blur":Ze});function nt(e,t,n){if(!t)return t;if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]=nt(e,t[r],n);else if("object"==typeof t)if("fallbacks"===e)for(var o in t)t[o]=nt(o,t[o],n);else for(var i in t)t[i]=nt(e+"-"+i,t[i],n);else if("number"==typeof t){var a=n[e]||tt[e];return a?"function"==typeof a?a(t).toString():""+t+a:t.toString()}return t}var rt=function(e){void 0===e&&(e={});var t=et(e);return{onProcessStyle:function(e,n){if("style"!==n.type)return e;for(var r in e)e[r]=nt(r,e[r],t);return e},onChangeValue:function(e,n){return nt(n,e,t)}}};function ot(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var it="",at="",lt="",ut="",ct=p&&"ontouchstart"in document.documentElement;if(p){var st={Moz:"-moz-",ms:"-ms-",O:"-o-",Webkit:"-webkit-"},ft=document.createElement("p").style;for(var dt in st)if(dt+"Transform"in ft){it=dt,at=st[dt];break}"Webkit"===it&&"msHyphens"in ft&&(it="ms",at=st.ms,ut="edge"),"Webkit"===it&&"-apple-trailing-word"in ft&&(lt="apple")}var pt=it,mt=at,ht=lt,vt=ut,yt=ct;var gt={noPrefill:["appearance"],supportedProperty:function(e){return"appearance"===e&&("ms"===pt?"-webkit-"+e:mt+e)}},bt={noPrefill:["color-adjust"],supportedProperty:function(e){return"color-adjust"===e&&("Webkit"===pt?mt+"print-"+e:e)}},wt=/[-\s]+(.)?/g;function Et(e,t){return t?t.toUpperCase():""}function xt(e){return e.replace(wt,Et)}function kt(e){return xt("-"+e)}var St,Ot={noPrefill:["mask"],supportedProperty:function(e,t){if(!/^mask/.test(e))return!1;if("Webkit"===pt){if(xt("mask-image")in t)return e;if(pt+kt("mask-image")in t)return mt+e}return e}},Tt={noPrefill:["text-orientation"],supportedProperty:function(e){return"text-orientation"===e&&("apple"!==ht||yt?e:mt+e)}},Pt={noPrefill:["transform"],supportedProperty:function(e,t,n){return"transform"===e&&(n.transform?e:mt+e)}},_t={noPrefill:["transition"],supportedProperty:function(e,t,n){return"transition"===e&&(n.transition?e:mt+e)}},Ct={noPrefill:["writing-mode"],supportedProperty:function(e){return"writing-mode"===e&&("Webkit"===pt||"ms"===pt&&"edge"!==vt?mt+e:e)}},jt={noPrefill:["user-select"],supportedProperty:function(e){return"user-select"===e&&("Moz"===pt||"ms"===pt||"apple"===ht?mt+e:e)}},Nt={supportedProperty:function(e,t){return!!/^break-/.test(e)&&("Webkit"===pt?"WebkitColumn"+kt(e)in t&&mt+"column-"+e:"Moz"===pt&&("page"+kt(e)in t&&"page-"+e))}},Rt={supportedProperty:function(e,t){if(!/^(border|margin|padding)-inline/.test(e))return!1;if("Moz"===pt)return e;var n=e.replace("-inline","");return pt+kt(n)in t&&mt+n}},Mt={supportedProperty:function(e,t){return xt(e)in t&&e}},At={supportedProperty:function(e,t){var n=kt(e);return"-"===e[0]||"-"===e[0]&&"-"===e[1]?e:pt+n in t?mt+e:"Webkit"!==pt&&"Webkit"+n in t&&"-webkit-"+e}},It={supportedProperty:function(e){return"scroll-snap"===e.substring(0,11)&&("ms"===pt?""+mt+e:e)}},zt={supportedProperty:function(e){return"overscroll-behavior"===e&&("ms"===pt?mt+"scroll-chaining":e)}},Lt={"flex-grow":"flex-positive","flex-shrink":"flex-negative","flex-basis":"flex-preferred-size","justify-content":"flex-pack",order:"flex-order","align-items":"flex-align","align-content":"flex-line-pack"},Dt={supportedProperty:function(e,t){var n=Lt[e];return!!n&&(pt+kt(n)in t&&mt+n)}},Ft={flex:"box-flex","flex-grow":"box-flex","flex-direction":["box-orient","box-direction"],order:"box-ordinal-group","align-items":"box-align","flex-flow":["box-orient","box-direction"],"justify-content":"box-pack"},$t=Object.keys(Ft),Ht=function(e){return mt+e},Bt=[gt,bt,Ot,Tt,Pt,_t,Ct,jt,Nt,Rt,Mt,At,It,zt,Dt,{supportedProperty:function(e,t,n){var r=n.multiple;if($t.indexOf(e)>-1){var o=Ft[e];if(!Array.isArray(o))return pt+kt(o)in t&&mt+o;if(!r)return!1;for(var i=0;i<o.length;i++)if(!(pt+kt(o[0])in t))return!1;return o.map(Ht)}return!1}}],Ut=Bt.filter((function(e){return e.supportedProperty})).map((function(e){return e.supportedProperty})),Vt=Bt.filter((function(e){return e.noPrefill})).reduce((function(e,t){return e.push.apply(e,ot(t.noPrefill)),e}),[]),Wt={};if(p){St=document.createElement("p");var qt=window.getComputedStyle(document.documentElement,"");for(var Qt in qt)isNaN(Qt)||(Wt[qt[Qt]]=qt[Qt]);Vt.forEach((function(e){return delete Wt[e]}))}function Gt(e,t){if(void 0===t&&(t={}),!St)return e;if(null!=Wt[e])return Wt[e];"transition"!==e&&"transform"!==e||(t[e]=e in St.style);for(var n=0;n<Ut.length&&(Wt[e]=Ut[n](e,St.style,t),!Wt[e]);n++);try{St.style[e]=""}catch(e){return!1}return Wt[e]}var Kt,Jt={},Zt={transition:1,"transition-property":1,"-webkit-transition":1,"-webkit-transition-property":1},Yt=/(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;function Xt(e,t,n){if("var"===t)return"var";if("all"===t)return"all";if("all"===n)return", all";var r=t?Gt(t):", "+Gt(n);return r||(t||n)}function en(e,t){var n=t;if(!Kt||"content"===e)return t;if("string"!=typeof n||!isNaN(parseInt(n,10)))return n;var r=e+n;if(null!=Jt[r])return Jt[r];try{Kt.style[e]=n}catch(e){return Jt[r]=!1,!1}if(Zt[e])n=n.replace(Yt,Xt);else if(""===Kt.style[e]&&("-ms-flex"===(n=mt+n)&&(Kt.style[e]="-ms-flexbox"),Kt.style[e]=n,""===Kt.style[e]))return Jt[r]=!1,!1;return Kt.style[e]="",Jt[r]=n,Jt[r]}p&&(Kt=document.createElement("p"));var tn=function(){function e(t){for(var n in t){var r=t[n];if("fallbacks"===n&&Array.isArray(r))t[n]=r.map(e);else{var o=!1,i=Gt(n);i&&i!==n&&(o=!0);var a=!1,l=en(i,x(r));l&&l!==r&&(a=!0),(o||a)&&(o&&delete t[n],t[i||n]=l||r)}}return t}return{onProcessRule:function(e){if("keyframes"===e.type){var t=e;t.at="-"===(n=t.at)[1]||"ms"===pt?n:"@"+mt+"keyframes"+n.substr(10)}var n},onProcessStyle:function(t,n){return"style"!==n.type?t:e(t)},onChangeValue:function(e,t){return en(t,x(e))||e}}};var nn=function(){var e=function(e,t){return e.length===t.length?e>t?1:-1:e.length-t.length};return{onProcessStyle:function(t,n){if("style"!==n.type)return t;for(var r={},o=Object.keys(t).sort(e),i=0;i<o.length;i++)r[o[i]]=t[o[i]];return r}}};function rn(){return{plugins:[Me(),Fe(),Ue(),Je(),rt(),"undefined"==typeof window?null:tn(),nn()]}}var on=ke(rn()),an={disableGeneration:!1,generateClassName:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.disableGlobal,n=void 0!==t&&t,r=e.productionPrefix,o=void 0===r?"jss":r,i=e.seed,a=void 0===i?"":i,l=""===a?"":"".concat(a,"-"),u=0,c=function(){return u+=1};return function(e,t){var r=t.options.name;if(r&&0===r.indexOf("Mui")&&!t.options.link&&!n){if(-1!==Ce.indexOf(e.key))return"Mui-".concat(e.key);var i="".concat(l).concat(r,"-").concat(e.key);return t.options.theme[_e]&&""===a?"".concat(i,"-").concat(c()):i}return"".concat(l).concat(o).concat(c())}}(),jss:on,sheetsCache:null,sheetsManager:new Map,sheetsRegistry:null},ln=l.a.createContext(an);var un=-1e9;function cn(){return un+=1}function sn(e){return(sn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function fn(e){return e&&"object"===sn(e)&&e.constructor===Object}function dn(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{clone:!0},o=n.clone?Object(r.a)({},e):e;return fn(e)&&fn(t)&&Object.keys(t).forEach((function(r){"__proto__"!==r&&(fn(t[r])&&r in e?o[r]=dn(e[r],t[r],n):o[r]=t[r])})),o}function pn(e){var t="function"==typeof e;return{create:function(n,o){var i;try{i=t?e(n):e}catch(e){throw e}if(!o||!n.overrides||!n.overrides[o])return i;var a=n.overrides[o],l=Object(r.a)({},i);return Object.keys(a).forEach((function(e){l[e]=dn(l[e],a[e])})),l},options:{}}}var mn={};function hn(e,t,n){var r=e.state;if(e.stylesOptions.disableGeneration)return t||{};r.cacheClasses||(r.cacheClasses={value:null,lastProp:null,lastJSS:{}});var o=!1;return r.classes!==r.cacheClasses.lastJSS&&(r.cacheClasses.lastJSS=r.classes,o=!0),t!==r.cacheClasses.lastProp&&(r.cacheClasses.lastProp=t,o=!0),o&&(r.cacheClasses.value=Se({baseClasses:r.cacheClasses.lastJSS,newClasses:t,Component:n})),r.cacheClasses.value}function vn(e,t){var n=e.state,o=e.theme,i=e.stylesOptions,a=e.stylesCreator,l=e.name;if(!i.disableGeneration){var u=Oe.get(i.sheetsManager,a,o);u||(u={refs:0,staticSheet:null,dynamicStyles:null},Oe.set(i.sheetsManager,a,o,u));var c=Object(r.a)(Object(r.a)(Object(r.a)({},a.options),i),{},{theme:o,flip:"boolean"==typeof i.flip?i.flip:"rtl"===o.direction});c.generateId=c.serverGenerateClassName||c.generateClassName;var s=i.sheetsRegistry;if(0===u.refs){var f;i.sheetsCache&&(f=Oe.get(i.sheetsCache,a,o));var d=a.create(o,l);f||((f=i.jss.createStyleSheet(d,Object(r.a)({link:!1},c))).attach(),i.sheetsCache&&Oe.set(i.sheetsCache,a,o,f)),s&&s.add(f),u.staticSheet=f,u.dynamicStyles=function e(t){var n=null;for(var r in t){var o=t[r],i=typeof o;if("function"===i)n||(n={}),n[r]=o;else if("object"===i&&null!==o&&!Array.isArray(o)){var a=e(o);a&&(n||(n={}),n[r]=a)}}return n}(d)}if(u.dynamicStyles){var p=i.jss.createStyleSheet(u.dynamicStyles,Object(r.a)({link:!0},c));p.update(t),p.attach(),n.dynamicSheet=p,n.classes=Se({baseClasses:u.staticSheet.classes,newClasses:p.classes}),s&&s.add(p)}else n.classes=u.staticSheet.classes;u.refs+=1}}function yn(e,t){var n=e.state;n.dynamicSheet&&n.dynamicSheet.update(t)}function gn(e){var t=e.state,n=e.theme,r=e.stylesOptions,o=e.stylesCreator;if(!r.disableGeneration){var i=Oe.get(r.sheetsManager,o,n);i.refs-=1;var a=r.sheetsRegistry;0===i.refs&&(Oe.delete(r.sheetsManager,o,n),r.jss.removeStyleSheet(i.staticSheet),a&&a.remove(i.staticSheet)),t.dynamicSheet&&(r.jss.removeStyleSheet(t.dynamicSheet),a&&a.remove(t.dynamicSheet))}}function bn(e,t){var n,r=l.a.useRef([]),o=l.a.useMemo((function(){return{}}),t);r.current!==o&&(r.current=o,n=e()),l.a.useEffect((function(){return function(){n&&n()}}),[o])}function wn(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.name,o=t.classNamePrefix,a=t.Component,u=t.defaultTheme,c=void 0===u?mn:u,s=i(t,["name","classNamePrefix","Component","defaultTheme"]),f=pn(e),d=n||o||"makeStyles";f.options={index:cn(),name:n,meta:d,classNamePrefix:d};var p=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Pe()||c,o=Object(r.a)(Object(r.a)({},l.a.useContext(ln)),s),i=l.a.useRef(),u=l.a.useRef();bn((function(){var r={name:n,state:{},stylesCreator:f,stylesOptions:o,theme:t};return vn(r,e),u.current=!1,i.current=r,function(){gn(r)}}),[t,f]),l.a.useEffect((function(){u.current&&yn(i.current,e),u.current=!0}));var d=hn(i.current,e.classes,a);return d};return p}function En(e){var t=e.theme,n=e.name,r=e.props;if(!t||!t.props||!t.props[n])return r;var o,i=t.props[n];for(o in i)void 0===r[o]&&(r[o]=i[o]);return r}var xn=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return function(n){var o=t.defaultTheme,a=t.withTheme,u=void 0!==a&&a,c=t.name,s=i(t,["defaultTheme","withTheme","name"]);var d=c,p=wn(e,Object(r.a)({defaultTheme:o,Component:n,name:c||n.displayName,classNamePrefix:d},s)),m=l.a.forwardRef((function(e,t){e.classes;var a,s=e.innerRef,f=i(e,["classes","innerRef"]),d=p(Object(r.a)(Object(r.a)({},n.defaultProps),e)),m=f;return("string"==typeof c||u)&&(a=Pe()||o,c&&(m=En({theme:a,name:c,props:f})),u&&!m.theme&&(m.theme=a)),l.a.createElement(n,Object(r.a)({ref:s||t,classes:d},m))}));return f()(m,n),m}};function kn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Sn=["xs","sm","md","lg","xl"];function On(e){var t=e.values,n=void 0===t?{xs:0,sm:600,md:960,lg:1280,xl:1920}:t,o=e.unit,a=void 0===o?"px":o,l=e.step,u=void 0===l?5:l,c=i(e,["values","unit","step"]);function s(e){var t="number"==typeof n[e]?n[e]:e;return"@media (min-width:".concat(t).concat(a,")")}function f(e,t){var r=Sn.indexOf(t);return r===Sn.length-1?s(e):"@media (min-width:".concat("number"==typeof n[e]?n[e]:e).concat(a,") and ")+"(max-width:".concat((-1!==r&&"number"==typeof n[Sn[r+1]]?n[Sn[r+1]]:t)-u/100).concat(a,")")}return Object(r.a)({keys:Sn,values:n,up:s,down:function(e){var t=Sn.indexOf(e)+1,r=n[Sn[t]];return t===Sn.length?s("xs"):"@media (max-width:".concat(("number"==typeof r&&t>0?r:e)-u/100).concat(a,")")},between:f,only:function(e){return f(e,e)},width:function(e){return n[e]}},c)}function Tn(e,t,n){var o;return Object(r.a)({gutters:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object(r.a)({paddingLeft:t(2),paddingRight:t(2)},n,kn({},e.up("sm"),Object(r.a)({paddingLeft:t(3),paddingRight:t(3)},n[e.up("sm")])))},toolbar:(o={minHeight:56},kn(o,"".concat(e.up("xs")," and (orientation: landscape)"),{minHeight:48}),kn(o,e.up("sm"),{minHeight:64}),o)},n)}function Pn(e){for(var t="https://material-ui.com/production-error/?code="+e,n=1;n<arguments.length;n+=1)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified Material-UI error #"+e+"; visit "+t+" for the full message."}var _n={black:"#000",white:"#fff"},Cn={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#d5d5d5",A200:"#aaaaaa",A400:"#303030",A700:"#616161"},jn={50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",A100:"#8c9eff",A200:"#536dfe",A400:"#3d5afe",A700:"#304ffe"},Nn={50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",A100:"#ff80ab",A200:"#ff4081",A400:"#f50057",A700:"#c51162"},Rn={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"},Mn={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"},An={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"},In={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"};function zn(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return Math.min(Math.max(t,e),n)}function Ln(e){if(e.type)return e;if("#"===e.charAt(0))return Ln(function(e){e=e.substr(1);var t=new RegExp(".{1,".concat(e.length>=6?2:1,"}"),"g"),n=e.match(t);return n&&1===n[0].length&&(n=n.map((function(e){return e+e}))),n?"rgb".concat(4===n.length?"a":"","(").concat(n.map((function(e,t){return t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3})).join(", "),")"):""}(e));var t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla"].indexOf(n))throw new Error(Pn(3,e));var r=e.substring(t+1,e.length-1).split(",");return{type:n,values:r=r.map((function(e){return parseFloat(e)}))}}function Dn(e){var t=e.type,n=e.values;return-1!==t.indexOf("rgb")?n=n.map((function(e,t){return t<3?parseInt(e,10):e})):-1!==t.indexOf("hsl")&&(n[1]="".concat(n[1],"%"),n[2]="".concat(n[2],"%")),"".concat(t,"(").concat(n.join(", "),")")}function Fn(e){var t="hsl"===(e=Ln(e)).type?Ln(function(e){var t=(e=Ln(e)).values,n=t[0],r=t[1]/100,o=t[2]/100,i=r*Math.min(o,1-o),a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:(e+n/30)%12;return o-i*Math.max(Math.min(t-3,9-t,1),-1)},l="rgb",u=[Math.round(255*a(0)),Math.round(255*a(8)),Math.round(255*a(4))];return"hsla"===e.type&&(l+="a",u.push(t[3])),Dn({type:l,values:u})}(e)).values:e.values;return t=t.map((function(e){return(e/=255)<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)})),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function $n(e,t){if(e=Ln(e),t=zn(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]*=1-t;return Dn(e)}function Hn(e,t){if(e=Ln(e),t=zn(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;return Dn(e)}var Bn={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",hint:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:_n.white,default:Cn[50]},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},Un={text:{primary:_n.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",hint:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:Cn[800],default:"#303030"},action:{active:_n.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function Vn(e,t,n,r){var o=r.light||r,i=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=Hn(e.main,o):"dark"===t&&(e.dark=$n(e.main,i)))}function Wn(e){var t=e.primary,n=void 0===t?{light:jn[300],main:jn[500],dark:jn[700]}:t,o=e.secondary,a=void 0===o?{light:Nn.A200,main:Nn.A400,dark:Nn.A700}:o,l=e.error,u=void 0===l?{light:Rn[300],main:Rn[500],dark:Rn[700]}:l,c=e.warning,s=void 0===c?{light:Mn[300],main:Mn[500],dark:Mn[700]}:c,f=e.info,d=void 0===f?{light:An[300],main:An[500],dark:An[700]}:f,p=e.success,m=void 0===p?{light:In[300],main:In[500],dark:In[700]}:p,h=e.type,v=void 0===h?"light":h,y=e.contrastThreshold,g=void 0===y?3:y,b=e.tonalOffset,w=void 0===b?.2:b,E=i(e,["primary","secondary","error","warning","info","success","type","contrastThreshold","tonalOffset"]);function x(e){return function(e,t){var n=Fn(e),r=Fn(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}(e,Un.text.primary)>=g?Un.text.primary:Bn.text.primary}var k=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:300,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:700;if(!(e=Object(r.a)({},e)).main&&e[t]&&(e.main=e[t]),!e.main)throw new Error(Pn(4,t));if("string"!=typeof e.main)throw new Error(Pn(5,JSON.stringify(e.main)));return Vn(e,"light",n,w),Vn(e,"dark",o,w),e.contrastText||(e.contrastText=x(e.main)),e},S={dark:Un,light:Bn};return dn(Object(r.a)({common:_n,type:v,primary:k(n),secondary:k(a,"A400","A200","A700"),error:k(u),warning:k(s),info:k(d),success:k(m),grey:Cn,contrastThreshold:g,getContrastText:x,augmentColor:k,tonalOffset:w},S[v]),E)}function qn(e){return Math.round(1e5*e)/1e5}var Qn={textTransform:"uppercase"};function Gn(e,t){var n="function"==typeof t?t(e):t,o=n.fontFamily,a=void 0===o?'"Roboto", "Helvetica", "Arial", sans-serif':o,l=n.fontSize,u=void 0===l?14:l,c=n.fontWeightLight,s=void 0===c?300:c,f=n.fontWeightRegular,d=void 0===f?400:f,p=n.fontWeightMedium,m=void 0===p?500:p,h=n.fontWeightBold,v=void 0===h?700:h,y=n.htmlFontSize,g=void 0===y?16:y,b=n.allVariants,w=n.pxToRem,E=i(n,["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"]);var x=u/14,k=w||function(e){return"".concat(e/g*x,"rem")},S=function(e,t,n,o,i){return Object(r.a)({fontFamily:a,fontWeight:e,fontSize:k(t),lineHeight:n},'"Roboto", "Helvetica", "Arial", sans-serif'===a?{letterSpacing:"".concat(qn(o/t),"em")}:{},i,b)},O={h1:S(s,96,1.167,-1.5),h2:S(s,60,1.2,-.5),h3:S(d,48,1.167,0),h4:S(d,34,1.235,.25),h5:S(d,24,1.334,0),h6:S(m,20,1.6,.15),subtitle1:S(d,16,1.75,.15),subtitle2:S(m,14,1.57,.1),body1:S(d,16,1.5,.15),body2:S(d,14,1.43,.15),button:S(m,14,1.75,.4,Qn),caption:S(d,12,1.66,.4),overline:S(d,12,2.66,1,Qn)};return dn(Object(r.a)({htmlFontSize:g,pxToRem:k,round:qn,fontFamily:a,fontSize:u,fontWeightLight:s,fontWeightRegular:d,fontWeightMedium:m,fontWeightBold:v},O),E,{clone:!1})}function Kn(){return["".concat(arguments.length<=0?void 0:arguments[0],"px ").concat(arguments.length<=1?void 0:arguments[1],"px ").concat(arguments.length<=2?void 0:arguments[2],"px ").concat(arguments.length<=3?void 0:arguments[3],"px rgba(0,0,0,").concat(.2,")"),"".concat(arguments.length<=4?void 0:arguments[4],"px ").concat(arguments.length<=5?void 0:arguments[5],"px ").concat(arguments.length<=6?void 0:arguments[6],"px ").concat(arguments.length<=7?void 0:arguments[7],"px rgba(0,0,0,").concat(.14,")"),"".concat(arguments.length<=8?void 0:arguments[8],"px ").concat(arguments.length<=9?void 0:arguments[9],"px ").concat(arguments.length<=10?void 0:arguments[10],"px ").concat(arguments.length<=11?void 0:arguments[11],"px rgba(0,0,0,").concat(.12,")")].join(",")}var Jn=["none",Kn(0,2,1,-1,0,1,1,0,0,1,3,0),Kn(0,3,1,-2,0,2,2,0,0,1,5,0),Kn(0,3,3,-2,0,3,4,0,0,1,8,0),Kn(0,2,4,-1,0,4,5,0,0,1,10,0),Kn(0,3,5,-1,0,5,8,0,0,1,14,0),Kn(0,3,5,-1,0,6,10,0,0,1,18,0),Kn(0,4,5,-2,0,7,10,1,0,2,16,1),Kn(0,5,5,-3,0,8,10,1,0,3,14,2),Kn(0,5,6,-3,0,9,12,1,0,3,16,2),Kn(0,6,6,-3,0,10,14,1,0,4,18,3),Kn(0,6,7,-4,0,11,15,1,0,4,20,3),Kn(0,7,8,-4,0,12,17,2,0,5,22,4),Kn(0,7,8,-4,0,13,19,2,0,5,24,4),Kn(0,7,9,-4,0,14,21,2,0,5,26,4),Kn(0,8,9,-5,0,15,22,2,0,6,28,5),Kn(0,8,10,-5,0,16,24,2,0,6,30,5),Kn(0,8,11,-5,0,17,26,2,0,6,32,5),Kn(0,9,11,-5,0,18,28,2,0,7,34,6),Kn(0,9,12,-6,0,19,29,2,0,7,36,6),Kn(0,10,13,-6,0,20,31,3,0,8,38,7),Kn(0,10,13,-6,0,21,33,3,0,8,40,7),Kn(0,10,14,-6,0,22,35,3,0,8,42,7),Kn(0,11,14,-7,0,23,36,3,0,9,44,8),Kn(0,11,15,-7,0,24,38,3,0,9,46,8)],Zn={borderRadius:4};function Yn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw i}}return n}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var Xn=function(e,t){return t?dn(e,t,{clone:!1}):e},er={xs:0,sm:600,md:960,lg:1280,xl:1920},tr={keys:["xs","sm","md","lg","xl"],up:function(e){return"@media (min-width:".concat(er[e],"px)")}};var nr={m:"margin",p:"padding"},rr={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},or={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},ir=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}((function(e){if(e.length>2){if(!or[e])return[e];e=or[e]}var t=Yn(e.split(""),2),n=t[0],r=t[1],o=nr[n],i=rr[r]||"";return Array.isArray(i)?i.map((function(e){return o+e})):[o+i]})),ar=["m","mt","mr","mb","ml","mx","my","p","pt","pr","pb","pl","px","py","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY"];function lr(e){var t=e.spacing||8;return"number"==typeof t?function(e){return t*e}:Array.isArray(t)?function(e){return t[e]}:"function"==typeof t?t:function(){}}function ur(e,t){return function(n){return e.reduce((function(e,r){return e[r]=function(e,t){if("string"==typeof t)return t;var n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:"-".concat(n)}(t,n),e}),{})}}function cr(e){var t=lr(e.theme);return Object.keys(e).map((function(n){if(-1===ar.indexOf(n))return null;var r=ur(ir(n),t),o=e[n];return function(e,t,n){if(Array.isArray(t)){var r=e.theme.breakpoints||tr;return t.reduce((function(e,o,i){return e[r.up(r.keys[i])]=n(t[i]),e}),{})}if("object"===sn(t)){var o=e.theme.breakpoints||tr;return Object.keys(t).reduce((function(e,r){return e[o.up(r)]=n(t[r]),e}),{})}return n(t)}(e,o,r)})).reduce(Xn,{})}cr.propTypes={},cr.filterProps=ar;function sr(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:8;if(e.mui)return e;var t=lr({spacing:e}),n=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return 0===n.length?t(1):1===n.length?t(n[0]):n.map((function(e){if("string"==typeof e)return e;var n=t(e);return"number"==typeof n?"".concat(n,"px"):n})).join(" ")};return Object.defineProperty(n,"unit",{get:function(){return e}}),n.mui=!0,n}var fr={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},dr={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function pr(e){return"".concat(Math.round(e),"ms")}var mr={easing:fr,duration:dr,create:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["all"],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.duration,r=void 0===n?dr.standard:n,o=t.easing,a=void 0===o?fr.easeInOut:o,l=t.delay,u=void 0===l?0:l;i(t,["duration","easing","delay"]);return(Array.isArray(e)?e:[e]).map((function(e){return"".concat(e," ").concat("string"==typeof r?r:pr(r)," ").concat(a," ").concat("string"==typeof u?u:pr(u))})).join(",")},getAutoHeightDuration:function(e){if(!e)return 0;var t=e/36;return Math.round(10*(4+15*Math.pow(t,.25)+t/5))}},hr={mobileStepper:1e3,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500};var vr=function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.breakpoints,n=void 0===t?{}:t,r=e.mixins,o=void 0===r?{}:r,a=e.palette,l=void 0===a?{}:a,u=e.spacing,c=e.typography,s=void 0===c?{}:c,f=i(e,["breakpoints","mixins","palette","spacing","typography"]),d=Wn(l),p=On(n),m=sr(u),h=dn({breakpoints:p,direction:"ltr",mixins:Tn(p,m,o),overrides:{},palette:d,props:{},shadows:Jn,typography:Gn(d,s),spacing:m,shape:Zn,transitions:mr,zIndex:hr},f),v=arguments.length,y=new Array(v>1?v-1:0),g=1;g<v;g++)y[g-1]=arguments[g];return h=y.reduce((function(e,t){return dn(e,t)}),h)}();var yr=function(e,t){return xn(e,Object(r.a)({defaultTheme:vr},t))};function gr(e){if("string"!=typeof e)throw new Error(Pn(7));return e.charAt(0).toUpperCase()+e.slice(1)}var br=a.forwardRef((function(e,t){var n=e.children,o=e.classes,l=e.className,u=e.color,s=void 0===u?"inherit":u,f=e.component,d=void 0===f?"svg":f,p=e.fontSize,m=void 0===p?"default":p,h=e.htmlColor,v=e.titleAccess,y=e.viewBox,g=void 0===y?"0 0 24 24":y,b=i(e,["children","classes","className","color","component","fontSize","htmlColor","titleAccess","viewBox"]);return a.createElement(d,Object(r.a)({className:c(o.root,l,"inherit"!==s&&o["color".concat(gr(s))],"default"!==m&&o["fontSize".concat(gr(m))]),focusable:"false",viewBox:g,color:h,"aria-hidden":!v||void 0,role:v?"img":void 0,ref:t},b),n,v?a.createElement("title",null,v):null)}));br.muiName="SvgIcon";var wr=yr((function(e){return{root:{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:"currentColor",flexShrink:0,fontSize:e.typography.pxToRem(24),transition:e.transitions.create("fill",{duration:e.transitions.duration.shorter})},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorAction:{color:e.palette.action.active},colorError:{color:e.palette.error.main},colorDisabled:{color:e.palette.action.disabled},fontSizeInherit:{fontSize:"inherit"},fontSizeSmall:{fontSize:e.typography.pxToRem(20)},fontSizeLarge:{fontSize:e.typography.pxToRem(35)}}}),{name:"MuiSvgIcon"})(br)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnZhcmlhbnQvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Rpbnktd2FybmluZy9kaXN0L3Rpbnktd2FybmluZy5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy91dGlscy9jcmVhdGVTdmdJY29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90by1jYW1lbC1jYXNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dC9kaXN0L2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGF0aC10by1yZWdleHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvcG9ueWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlc3BvbnNpdmUvZGlzdC9yZWFjdC1yZXNwb25zaXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvRm9sZGVyU2hhcmVkVHdvVG9uZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL01lbnVCb29rVHdvVG9uZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL1RpbWVsYXBzZVR3b1RvbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9CdWlsZFR3b1RvbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9Xb3JrVHdvVG9uZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL1JlY2VpcHRUd29Ub25lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvU3BlYWtlclBob25lVHdvVG9uZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL1ByaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90by1zcGFjZS1jYXNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90by1uby1jYXNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vaGFybW9ueS1tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtcGF0aG5hbWUvZXNtL3Jlc29sdmUtcGF0aG5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RpbnktaW52YXJpYW50L2Rpc3QvdGlueS1pbnZhcmlhbnQuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzbS9oaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXNtL3JlYWN0LXJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lc20vcmVhY3Qtcm91dGVyLWRvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtYWN0aW9ucy9lcy91dGlscy9pc1BsYWluT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1hY3Rpb25zL2VzL3V0aWxzL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LWFjdGlvbnMvZXMvdXRpbHMvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LWFjdGlvbnMvZXMvdXRpbHMvaXNBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtYWN0aW9ucy9lcy91dGlscy9pc1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtYWN0aW9ucy9lcy91dGlscy9pc05pbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtYWN0aW9ucy9lcy91dGlscy9nZXRMYXN0RWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtYWN0aW9ucy9lcy91dGlscy9jYW1lbENhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LWFjdGlvbnMvZXMvdXRpbHMvYXJyYXlUb09iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtYWN0aW9ucy9lcy91dGlscy9pc01hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtYWN0aW9ucy9lcy91dGlscy9vd25LZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1hY3Rpb25zL2VzL3V0aWxzL2dldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtYWN0aW9ucy9lcy91dGlscy9mbGF0dGVuV2hlbk5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LWFjdGlvbnMvZXMvY29uc3RhbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1hY3Rpb25zL2VzL3V0aWxzL2ZsYXR0ZW5BY3Rpb25NYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LWFjdGlvbnMvZXMvdXRpbHMvdW5mbGF0dGVuQWN0aW9uQ3JlYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LWFjdGlvbnMvZXMvdXRpbHMvaXNFbXB0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtYWN0aW9ucy9lcy91dGlscy9pc051bGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LWFjdGlvbnMvZXMvY3JlYXRlQWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1hY3Rpb25zL2VzL2NyZWF0ZUFjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL215QWN0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Db250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9iYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL1Byb3ZpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4L2VzL3JlZHV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3dyYXBNYXBUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcERpc3BhdGNoVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBTdGF0ZVRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWVyZ2VQcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9zZWxlY3RvckZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvY29ubmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1Y2UtcmVkdWNlcnMvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LWFjdGlvbnMvZXMvdXRpbHMvZmxhdHRlblJlZHVjZXJNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LWFjdGlvbnMvZXMvdXRpbHMvaGFzR2VuZXJhdG9ySW50ZXJmYWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1hY3Rpb25zL2VzL3V0aWxzL3RvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS9teURhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL215UmVkdWNlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtYWN0aW9ucy9lcy9oYW5kbGVBY3Rpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1hY3Rpb25zL2VzL2hhbmRsZUFjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtYWN0aW9ucy9lcy91dGlscy9pc1VuZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29ubmVjdGVkLXJlYWN0LXJvdXRlci9lc20vYWN0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29ubmVjdGVkLXJlYWN0LXJvdXRlci9lc20vc2VsZWN0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb25uZWN0ZWQtcmVhY3Qtcm91dGVyL2VzbS9yZWR1Y2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb25uZWN0ZWQtcmVhY3Qtcm91dGVyL2VzbS9zdHJ1Y3R1cmUvcGxhaW4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nvbm5lY3RlZC1yZWFjdC1yb3V0ZXIvZXNtL3N0cnVjdHVyZS9wbGFpbi9nZXRJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29ubmVjdGVkLXJlYWN0LXJvdXRlci9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL3N0b3JlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1Jlc2l6YWJsZVBhbmVsL1Jlc2l6YWJsZVBhbmVsLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGFpbmVycy9MZWZ0TmF2QmFyQ29udGFpbmVyLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9MZWZ0TmF2QmFyL0xlZnROYXZCYXIuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb250YWluZXJzL1JpZ2h0VGl0bGVDb250YWluZXIuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1JpZ2h0VGl0bGUvUmlnaHRUaXRsZS5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VydGlmaWNhdGVzUGFnZS9TZXJ0aWZpY2F0ZUl0ZW0uanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1N0YXJ0UGFnZS9TdGFydFBhZ2UuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb250YWluZXJzL1N0YXJ0UGFnZUNvbnRhaW5lci5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRhaW5lcnMvQWJvdXRNZUNvbnRhaW5lci5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQWJvdXRNZS9BYm91dE1lLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9FZHVjYXRpb25QYWdlL01haW5FZHVjYXRpb25JdGVtLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9FZHVjYXRpb25QYWdlL0FkZGl0aW9uYWxFZHVjYXRpb25JdGVtLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9FZHVjYXRpb25QYWdlL0VkdWNhdGlvblBhZ2UuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb250YWluZXJzL0VkdWNhdGlvblBhZ2VDb250YWluZXIuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb250YWluZXJzL01haW5FZHVjYXRpb25QYWdlQ29udGFpbmVyLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9FZHVjYXRpb25QYWdlL01haW5FZHVjYXRpb25QYWdlLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9FZHVjYXRpb25QYWdlL0FkZGl0aW9uYWxFZHVjYXRpb25QYWdlLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGFpbmVycy9BZGRpdGlvbmFsRWR1Y2F0aW9uUGFnZUNvbnRhaW5lci5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUXVhbGlmaWNhdGlvblBhZ2UvUXVhbGlmaWNhdGlvbkl0ZW0uanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1F1YWxpZmljYXRpb25QYWdlL1F1YWxpZmljYXRpb25QYWdlLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGFpbmVycy9RdWFsaWZpY2F0aW9uUGFnZUNvbnRhaW5lci5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2NpbGxzUGFnZS9TY2lsbHNJdGVtLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TY2lsbHNQYWdlL1NjaWxsc1BhZ2UuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb250YWluZXJzL1NjaWxsc1BhZ2VDb250YWluZXIuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NlcnRpZmljYXRlc1BhZ2UvU2VydGlmaWNhdGVzUGFnZS5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRhaW5lcnMvU2VydGlmaWNhdGVzUGFnZUNvbnRhaW5lci5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRhaW5lcnMvU2VydGlmaWNhdGVQYWdlQ29udGFpbmVyLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZXJ0aWZpY2F0ZXNQYWdlL1NlcnRpZmljYXRlUGFnZS5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRhaW5lcnMvQ29udGFjdHNQYWdlQ29udGFpbmVyLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Db250YWN0c1BhZ2UvQ29udGFjdHNQYWdlLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Qb3J0Zm9saW9QYWdlL1BvcnRmb2xpb0l0ZW0uanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1BvcnRmb2xpb1BhZ2UvUG9ydGZvbGlvUGFnZS5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRhaW5lcnMvUG9ydGZvbGlvUGFnZUNvbnRhaW5lci5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2xzeC9kaXN0L2Nsc3gubS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtaW4tYnJvd3Nlci9kaXN0L21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2Rpc3QvanNzLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vbWVyZ2VDbGFzc2VzL21lcmdlQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vbWFrZVN0eWxlcy9tdWx0aUtleVN0b3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS91c2VUaGVtZS9UaGVtZUNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL3VzZVRoZW1lL3VzZVRoZW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9UaGVtZVByb3ZpZGVyL25lc3RlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUvY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tcnVsZS12YWx1ZS1mdW5jdGlvbi9kaXN0L2pzcy1wbHVnaW4tcnVsZS12YWx1ZS1mdW5jdGlvbi5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tZ2xvYmFsL2Rpc3QvanNzLXBsdWdpbi1nbG9iYWwuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLW5lc3RlZC9kaXN0L2pzcy1wbHVnaW4tbmVzdGVkLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHlwaGVuYXRlLXN0eWxlLW5hbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tY2FtZWwtY2FzZS9kaXN0L2pzcy1wbHVnaW4tY2FtZWwtY2FzZS5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tZGVmYXVsdC11bml0L2Rpc3QvanNzLXBsdWdpbi1kZWZhdWx0LXVuaXQuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRob3V0SG9sZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVTcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy12ZW5kb3IvZGlzdC9jc3MtdmVuZG9yLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi12ZW5kb3ItcHJlZml4ZXIvZGlzdC9qc3MtcGx1Z2luLXZlbmRvci1wcmVmaXhlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tcHJvcHMtc29ydC9kaXN0L2pzcy1wbHVnaW4tcHJvcHMtc29ydC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL2pzc1ByZXNldC9qc3NQcmVzZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL1N0eWxlc1Byb3ZpZGVyL1N0eWxlc1Byb3ZpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9tYWtlU3R5bGVzL2luZGV4Q291bnRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvdXRpbHMvZXNtL2RlZXBtZXJnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vZ2V0U3R5bGVzQ3JlYXRvci9nZXRTdHlsZXNDcmVhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9nZXRTdHlsZXNDcmVhdG9yL25vb3BUaGVtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vbWFrZVN0eWxlcy9tYWtlU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9nZXRUaGVtZVByb3BzL2dldFRoZW1lUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL3dpdGhTdHlsZXMvd2l0aFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY3JlYXRlQnJlYWtwb2ludHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY3JlYXRlTWl4aW5zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvdXRpbHMvZXNtL2Zvcm1hdE11aUVycm9yTWVzc2FnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9jb21tb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvZ3JleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9pbmRpZ28uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvcGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9yZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvb3JhbmdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL2JsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvZ3JlZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY29sb3JNYW5pcHVsYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jcmVhdGVQYWxldHRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2NyZWF0ZVR5cG9ncmFwaHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvc2hhZG93cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9zaGFwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRoSG9sZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVJlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZXNtL21lcmdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2VzbS9icmVha3BvaW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vc3BhY2luZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vbWVtb2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jcmVhdGVTcGFjaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3RyYW5zaXRpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3pJbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jcmVhdGVNdWlUaGVtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9kZWZhdWx0VGhlbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvd2l0aFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL2NhcGl0YWxpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9TdmdJY29uL1N2Z0ljb24uanMiXSwibmFtZXMiOlsid2VicGFja0pzb25wQ2FsbGJhY2siLCJkYXRhIiwibW9kdWxlSWQiLCJjaHVua0lkIiwiY2h1bmtJZHMiLCJtb3JlTW9kdWxlcyIsImV4ZWN1dGVNb2R1bGVzIiwiaSIsInJlc29sdmVzIiwibGVuZ3RoIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5zdGFsbGVkQ2h1bmtzIiwicHVzaCIsIm1vZHVsZXMiLCJwYXJlbnRKc29ucEZ1bmN0aW9uIiwic2hpZnQiLCJkZWZlcnJlZE1vZHVsZXMiLCJhcHBseSIsImNoZWNrRGVmZXJyZWRNb2R1bGVzIiwicmVzdWx0IiwiZGVmZXJyZWRNb2R1bGUiLCJmdWxmaWxsZWQiLCJqIiwiZGVwSWQiLCJzcGxpY2UiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwicyIsImluc3RhbGxlZE1vZHVsZXMiLCIwIiwiZXhwb3J0cyIsIm1vZHVsZSIsImwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicCIsImpzb25wQXJyYXkiLCJ3aW5kb3ciLCJvbGRKc29ucEZ1bmN0aW9uIiwic2xpY2UiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInRhcmdldCIsImFyZ3VtZW50cyIsInNvdXJjZSIsInRoaXMiLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNvbnN0cnVjdG9yIiwiX19wcm90b19fIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJrZXlzIiwiaW5kZXhPZiIsImNvbmRpdGlvbiIsImZvcm1hdCIsImEiLCJiIiwiZSIsImYiLCJlcnJvciIsInVuZGVmaW5lZCIsIkVycm9yIiwiYXJncyIsImFyZ0luZGV4IiwicmVwbGFjZSIsImZyYW1lc1RvUG9wIiwib2JqIiwibWVzc2FnZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJkZWZhdWx0IiwicGF0aCIsImRpc3BsYXlOYW1lIiwiQ29tcG9uZW50IiwiX3JlYWN0IiwibWVtbyIsImZvcndhcmRSZWYiLCJwcm9wcyIsInJlZiIsImNyZWF0ZUVsZW1lbnQiLCJfU3ZnSWNvbiIsIl9leHRlbmRzMiIsIm11aU5hbWUiLCJjaGVja0RDRSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImVyciIsImNvbnNvbGUiLCJyZWFjdElzIiwiUkVBQ1RfU1RBVElDUyIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29udGV4dFR5cGUiLCJjb250ZXh0VHlwZXMiLCJkZWZhdWx0UHJvcHMiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJ0eXBlIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJjb21wb25lbnQiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwicmVuZGVyIiwiTWVtbyIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRQcm90b3R5cGVPZiIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwiY29uY2F0IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJkZXNjcmlwdG9yIiwic3BhY2UiLCJzdHJpbmciLCJtYXRjaGVzIiwibGV0dGVyIiwidG9VcHBlckNhc2UiLCJyb290Iiwic2VsZiIsImdsb2JhbCIsImNvbW1vbmpzR2xvYmFsIiwiZ2xvYmFsVGhpcyIsImNyZWF0ZUV2ZW50RW1pdHRlciIsImhhbmRsZXJzIiwib24iLCJoYW5kbGVyIiwib2ZmIiwiZmlsdGVyIiwiaCIsInNldCIsIm5ld1ZhbHVlIiwiY2hhbmdlZEJpdHMiLCJmb3JFYWNoIiwiaW5kZXgiLCJjcmVhdGVDb250ZXh0IiwiZGVmYXVsdFZhbHVlIiwiY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfUHJvdmlkZXIkY2hpbGRDb250ZXgiLCJfQ29uc3VtZXIkY29udGV4dFR5cGUiLCJjb250ZXh0UHJvcCIsIlByb3ZpZGVyIiwiX0NvbXBvbmVudCIsIl90aGlzIiwiZW1pdHRlciIsIl9wcm90byIsImdldENoaWxkQ29udGV4dCIsIl9yZWYiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dFByb3BzIiwib2xkVmFsdWUiLCJ4IiwieSIsImNoaWxkcmVuIiwiaXNSZXF1aXJlZCIsIkNvbnN1bWVyIiwiX0NvbXBvbmVudDIiLCJfdGhpczIiLCJzdGF0ZSIsImdldFZhbHVlIiwib25VcGRhdGUiLCJvYnNlcnZlZEJpdHMiLCJzZXRTdGF0ZSIsIl9wcm90bzIiLCJjb21wb25lbnREaWRNb3VudCIsImNvbnRleHQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIkFycmF5IiwiaXNBcnJheSIsImlzYXJyYXkiLCJwYXRoVG9SZWdleHAiLCJwYXJzZSIsImNvbXBpbGUiLCJzdHIiLCJvcHRpb25zIiwidG9rZW5zVG9GdW5jdGlvbiIsInRva2Vuc1RvUmVnRXhwIiwiUEFUSF9SRUdFWFAiLCJSZWdFeHAiLCJqb2luIiwicmVzIiwidG9rZW5zIiwiZGVmYXVsdERlbGltaXRlciIsImRlbGltaXRlciIsImV4ZWMiLCJlc2NhcGVkIiwib2Zmc2V0IiwibmV4dCIsInByZWZpeCIsImNhcHR1cmUiLCJncm91cCIsIm1vZGlmaWVyIiwiYXN0ZXJpc2siLCJwYXJ0aWFsIiwicmVwZWF0Iiwib3B0aW9uYWwiLCJwYXR0ZXJuIiwiZXNjYXBlR3JvdXAiLCJlc2NhcGVTdHJpbmciLCJzdWJzdHIiLCJlbmNvZGVVUklDb21wb25lbnRQcmV0dHkiLCJlbmNvZGVVUkkiLCJjaGFyQ29kZUF0IiwidG9TdHJpbmciLCJmbGFncyIsIm9wdHMiLCJlbmNvZGUiLCJwcmV0dHkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ0b2tlbiIsInNlZ21lbnQiLCJUeXBlRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwidGVzdCIsImF0dGFjaEtleXMiLCJyZSIsInNlbnNpdGl2ZSIsInN0cmljdCIsImVuZCIsInJvdXRlIiwiZW5kc1dpdGhEZWxpbWl0ZXIiLCJncm91cHMiLCJtYXRjaCIsInJlZ2V4cFRvUmVnZXhwIiwicGFydHMiLCJhcnJheVRvUmVnZXhwIiwic3RyaW5nVG9SZWdleHAiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsInZhbCIsInRlc3QxIiwiU3RyaW5nIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJtYXAiLCJ0ZXN0MyIsInNwbGl0Iiwic2hvdWxkVXNlTmF0aXZlIiwiZnJvbSIsInN5bWJvbHMiLCJ0byIsImciLCJGdW5jdGlvbiIsInN5bWJvbE9ic2VydmFibGVQb255ZmlsbCIsIm9ic2VydmFibGUiLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzFfXyIsImNvbmZpZ3VyYWJsZSIsIl9fd2VicGFja19leHBvcnRzX18iLCJfc2xpY2VkVG9BcnJheSIsImFyciIsIl9hcnJheVdpdGhIb2xlcyIsIml0ZXJhdG9yIiwiX2FyciIsIl9uIiwiX2QiLCJfZSIsIl9zIiwiX2kiLCJkb25lIiwicmV0dXJuIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwibWluTGVuIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVSZXN0IiwibGVuIiwiYXJyMiIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9tYXRjaG1lZGlhcXVlcnlfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9tYXRjaG1lZGlhcXVlcnlfX19kZWZhdWx0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2h5cGhlbmF0ZV9zdHlsZV9uYW1lX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfc2hhbGxvd19lcXVhbF9vYmplY3RzX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfc2hhbGxvd19lcXVhbF9vYmplY3RzX19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fdG9RdWVyeV9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19Db250ZXh0X18iLCJoeXBoZW5hdGVLZXlzIiwicmVkdWNlIiwidXNlSXNVcGRhdGUiLCJ1c2VSZWYiLCJ1c2VFZmZlY3QiLCJjdXJyZW50IiwidXNlUXVlcnkiLCJzZXR0aW5ncyIsImdldFF1ZXJ5IiwicXVlcnkiLCJtYWtlUXVlcnkiLCJfUmVhY3QkdXNlU3RhdGU0IiwidXNlU3RhdGUiLCJzZXRRdWVyeSIsIm5ld1F1ZXJ5IiwiZGV2aWNlIiwib25DaGFuZ2UiLCJkZXZpY2VTZXR0aW5ncyIsImRldmljZUZyb21Qcm9wcyIsImRldmljZUZyb21Db250ZXh0IiwidXNlQ29udGV4dCIsImdldERldmljZSIsIl9SZWFjdCR1c2VTdGF0ZTIiLCJzZXREZXZpY2UiLCJuZXdEZXZpY2UiLCJ1c2VEZXZpY2UiLCJtZWRpYVF1ZXJ5IiwiX1JlYWN0JHVzZVN0YXRlOCIsInNldE1hdGNoZXMiLCJ1cGRhdGVNYXRjaGVzIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsInVzZU1hdGNoZXMiLCJnZXRNYXRjaE1lZGlhIiwiX1JlYWN0JHVzZVN0YXRlNiIsIm1xIiwic2V0TXEiLCJpc1VwZGF0ZSIsImRpc3Bvc2UiLCJ1c2VNYXRjaE1lZGlhIiwidG9IeXBoZW5Mb3dlciIsInRvTG93ZXJDYXNlIiwidXBwZXJjYXNlUGF0dGVybiIsIm1zUGF0dGVybiIsImNhY2hlIiwiaE5hbWUiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfaHlwaGVuYXRlX3N0eWxlX25hbWVfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fbWVkaWFRdWVyeV9fIiwicnVsZXMiLCJhbGwiLCJrIiwidiIsInJlYWxLZXkiLCJrZXlWYWwiLCJDb250ZXh0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX191c2VNZWRpYVF1ZXJ5X18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX0NvbXBvbmVudF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX190b1F1ZXJ5X18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX0NvbnRleHRfXyIsIk1xbCIsInZhbHVlcyIsImZvcmNlU3RhdGljIiwidXBkYXRlIiwiZXZ0IiwibWVkaWEiLCJkeW5hbWljTWF0Y2giLCJtcWwiLCJzdGF0aWNNYXRjaCIsImxpc3RlbmVyIiwibWF0Y2hNZWRpYSIsInBhcnNlUXVlcnkiLCJjYXB0dXJlcyIsInRyaW0iLCJSRV9NRURJQV9RVUVSWSIsImV4cHJlc3Npb25zIiwicGFyc2VkIiwiaW52ZXJzZSIsImV4cHJlc3Npb24iLCJSRV9NUV9FWFBSRVNTSU9OIiwiZmVhdHVyZSIsIlJFX01RX0ZFQVRVUkUiLCJ0b0RlY2ltYWwiLCJyYXRpbyIsIm51bWJlcnMiLCJkZWNpbWFsIiwiTnVtYmVyIiwidG9EcGkiLCJyZXNvbHV0aW9uIiwicGFyc2VGbG9hdCIsIlJFX1JFU09MVVRJT05fVU5JVCIsInRvUHgiLCJSRV9MRU5HVEhfVU5JVCIsInNvbWUiLCJ0eXBlTWF0Y2giLCJleHByZXNzaW9uc01hdGNoIiwiZXZlcnkiLCJleHBWYWx1ZSIsInBhcnNlSW50Iiwib2JqQSIsIm9iakIiLCJhS2V5cyIsImJLZXlzIiwib3duS2V5cyIsImVudW1lcmFibGVPbmx5Iiwic3ltIiwiX29iamVjdFNwcmVhZCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwid3JpdGFibGUiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0Iiwic3RyaW5nT3JOdW1iZXIiLCJvbmVPZlR5cGUiLCJudW1iZXIiLCJtYXRjaGVycyIsIm9yaWVudGF0aW9uIiwib25lT2YiLCJzY2FuIiwiYXNwZWN0UmF0aW8iLCJkZXZpY2VBc3BlY3RSYXRpbyIsImhlaWdodCIsImRldmljZUhlaWdodCIsIndpZHRoIiwiZGV2aWNlV2lkdGgiLCJjb2xvciIsImJvb2wiLCJjb2xvckluZGV4IiwibW9ub2Nocm9tZSIsImZlYXR1cmVzIiwibWluQXNwZWN0UmF0aW8iLCJtYXhBc3BlY3RSYXRpbyIsIm1pbkRldmljZUFzcGVjdFJhdGlvIiwibWF4RGV2aWNlQXNwZWN0UmF0aW8iLCJtaW5IZWlnaHQiLCJtYXhIZWlnaHQiLCJtaW5EZXZpY2VIZWlnaHQiLCJtYXhEZXZpY2VIZWlnaHQiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwibWluRGV2aWNlV2lkdGgiLCJtYXhEZXZpY2VXaWR0aCIsIm1pbkNvbG9yIiwibWF4Q29sb3IiLCJtaW5Db2xvckluZGV4IiwibWF4Q29sb3JJbmRleCIsIm1pbk1vbm9jaHJvbWUiLCJtYXhNb25vY2hyb21lIiwibWluUmVzb2x1dGlvbiIsIm1heFJlc29sdXRpb24iLCJ0eXBlcyIsImdyaWQiLCJhdXJhbCIsImJyYWlsbGUiLCJoYW5kaGVsZCIsInByaW50IiwicHJvamVjdGlvbiIsInNjcmVlbiIsInR0eSIsInR2IiwiZW1ib3NzZWQiLCJSZWFjdElzIiwiaXNFbGVtZW50IiwidHlwZU9mIiwiJCR0eXBlb2YiLCJSRUFDVF9FTEVNRU5UX1RZUEUiLCJSRUFDVF9BU1lOQ19NT0RFX1RZUEUiLCJSRUFDVF9DT05DVVJSRU5UX01PREVfVFlQRSIsIlJFQUNUX0ZSQUdNRU5UX1RZUEUiLCJSRUFDVF9QUk9GSUxFUl9UWVBFIiwiUkVBQ1RfU1RSSUNUX01PREVfVFlQRSIsIlJFQUNUX1NVU1BFTlNFX1RZUEUiLCIkJHR5cGVvZlR5cGUiLCJSRUFDVF9DT05URVhUX1RZUEUiLCJSRUFDVF9GT1JXQVJEX1JFRl9UWVBFIiwiUkVBQ1RfTEFaWV9UWVBFIiwiUkVBQ1RfTUVNT19UWVBFIiwiUkVBQ1RfUFJPVklERVJfVFlQRSIsIlJFQUNUX1BPUlRBTF9UWVBFIiwiaXNDb25jdXJyZW50TW9kZSIsImhhc1N5bWJvbCIsImZvciIsIlJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSIsIlJFQUNUX0JMT0NLX1RZUEUiLCJSRUFDVF9GVU5EQU1FTlRBTF9UWVBFIiwiUkVBQ1RfUkVTUE9OREVSX1RZUEUiLCJSRUFDVF9TQ09QRV9UWVBFIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJFbGVtZW50IiwiRnJhZ21lbnQiLCJMYXp5IiwiUG9ydGFsIiwiUHJvZmlsZXIiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRJc0FzeW5jTW9kZSIsImlzQXN5bmNNb2RlIiwid2FybiIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsImlzVmFsaWRFbGVtZW50VHlwZSIsImVtcHR5RnVuY3Rpb25UaGF0UmV0dXJuc051bGwiLCJwcmludFdhcm5pbmciLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImNoZWNrUHJvcFR5cGVzIiwiaGFzIiwidGV4dCIsImlzVmFsaWRFbGVtZW50IiwidGhyb3dPbkRpcmVjdEFjY2VzcyIsImlzIiwiUHJvcFR5cGVFcnJvciIsInN0YWNrIiwiY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIiLCJ2YWxpZGF0ZSIsImNoZWNrVHlwZSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsImxvY2F0aW9uIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiQU5PTllNT1VTIiwiY2FjaGVLZXkiLCJtYW51YWxQcm9wVHlwZUNhbGxDYWNoZSIsIm1hbnVhbFByb3BUeXBlV2FybmluZ0NvdW50IiwiY2hhaW5lZENoZWNrVHlwZSIsImNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyIiwiZXhwZWN0ZWRUeXBlIiwicHJvcFZhbHVlIiwiZ2V0UHJvcFR5cGUiLCJnZXRQcmVjaXNlVHlwZSIsImlzTm9kZSIsIml0ZXJhdG9yRm4iLCJtYXliZUl0ZXJhYmxlIiwiSVRFUkFUT1JfU1lNQk9MIiwiRkFVWF9JVEVSQVRPUl9TWU1CT0wiLCJnZXRJdGVyYXRvckZuIiwic3RlcCIsImVudHJpZXMiLCJlbnRyeSIsInByb3BUeXBlIiwiaXNTeW1ib2wiLCJEYXRlIiwiZ2V0UG9zdGZpeEZvclR5cGVXYXJuaW5nIiwiUmVhY3RQcm9wVHlwZXMiLCJhcnJheSIsImZ1bmMiLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwidHlwZUNoZWNrZXIiLCJlbGVtZW50IiwiZWxlbWVudFR5cGUiLCJpbnN0YW5jZU9mIiwiZXhwZWN0ZWRDbGFzcyIsImV4cGVjdGVkQ2xhc3NOYW1lIiwibm9kZSIsIm9iamVjdE9mIiwiZXhwZWN0ZWRWYWx1ZXMiLCJ2YWx1ZXNTdHJpbmciLCJhcnJheU9mVHlwZUNoZWNrZXJzIiwiY2hlY2tlciIsInNoYXBlIiwic2hhcGVUeXBlcyIsImV4YWN0IiwiYWxsS2V5cyIsInJlc2V0V2FybmluZ0NhY2hlIiwiUHJvcFR5cGVzIiwidHlwZVNwZWNzIiwiZ2V0U3RhY2siLCJ0eXBlU3BlY05hbWUiLCJleCIsImxvZ2dlZFR5cGVGYWlsdXJlcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsInNvdXJjZVN5bWJvbEtleXMiLCJfZGVmYXVsdCIsIm9wYWNpdHkiLCJxIiwidSIsInciLCJ6IiwiQSIsIkIiLCJDIiwiRCIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJFIiwiRiIsInJlZnMiLCJ1cGRhdGVyIiwiRyIsIkgiLCJpc1JlYWN0Q29tcG9uZW50IiwiZm9yY2VVcGRhdGUiLCJJIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJKIiwiSyIsIkwiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIk0iLCJfb3duZXIiLCJPIiwiUCIsIlEiLCJSIiwicG9wIiwia2V5UHJlZml4IiwiY291bnQiLCJTIiwiViIsIlQiLCJVIiwiZXNjYXBlIiwiVyIsImFhIiwiWCIsIk4iLCJZIiwiWiIsImJhIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwic3VzcGVuc2UiLCJSZWFjdEN1cnJlbnRPd25lciIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwiQ2hpbGRyZW4iLCJ0b0FycmF5Iiwib25seSIsIlB1cmVDb21wb25lbnQiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsImNsb25lRWxlbWVudCIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9jdXJyZW50VmFsdWUiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIl9jb250ZXh0IiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImxhenkiLCJfY3RvciIsIl9zdGF0dXMiLCJfcmVzdWx0IiwidXNlQ2FsbGJhY2siLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidmVyc2lvbiIsIm9uRXJyb3IiLCJkYSIsImVhIiwiZmEiLCJoYSIsImlhIiwiamEiLCJsYSIsIm1hIiwibmEiLCJvYSIsImN1cnJlbnRUYXJnZXQiLCJrYSIsInBhIiwicWEiLCJyYSIsInNhIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJ0YSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwidWEiLCJyZWdpc3RyYXRpb25OYW1lIiwidmEiLCJ3YSIsImRlcGVuZGVuY2llcyIsInhhIiwieWEiLCJkb2N1bWVudCIsInphIiwiQWEiLCJCYSIsIkNhIiwic3RhdGVOb2RlIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJLYSIsIkxhIiwiTWEiLCJOYSIsIk9hIiwiUGEiLCJRYSIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsIlVhIiwiVmEiLCJ4bGlua0hyZWYiLCJXYSIsIlhhIiwiU2EiLCJpc05hTiIsIlRhIiwiUmEiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsIllhIiwiWmEiLCIkYSIsImFiIiwiYmIiLCJjYiIsImRiIiwiZWIiLCJmYiIsImdiIiwiaGIiLCJpYiIsImpiIiwia2IiLCJsYiIsIm1iIiwibmIiLCJwYiIsInFiIiwidGFnIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJyYiIsInNiIiwibm9kZU5hbWUiLCJ4YiIsIl92YWx1ZVRyYWNrZXIiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsInRiIiwieWIiLCJjaGVja2VkIiwiemIiLCJkZWZhdWx0Q2hlY2tlZCIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIkFiIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIkJiIiwiQ2IiLCJEYiIsIkViIiwib3duZXJEb2N1bWVudCIsImFjdGl2ZUVsZW1lbnQiLCJHYiIsIkZiIiwiSGIiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsImRpc2FibGVkIiwiSWIiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIkpiIiwiS2IiLCJMYiIsInRleHRDb250ZW50IiwiTWIiLCJOYiIsIk9iIiwiUGIiLCJRYiIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJ2YWx1ZU9mIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJSYiIsImxhc3RDaGlsZCIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwiU2IiLCJUYiIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIlViIiwiVmIiLCJXYiIsInN0eWxlIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsIlhiIiwiWWIiLCJaYiIsIiRiIiwiYWMiLCJiYyIsIldlYWtNYXAiLCJNYXAiLCJjYyIsImRjIiwiYWx0ZXJuYXRlIiwiZWZmZWN0VGFnIiwiZWMiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsImZjIiwiaGMiLCJjaGlsZCIsInNpYmxpbmciLCJnYyIsImljIiwiamMiLCJrYyIsImxjIiwiX2Rpc3BhdGNoTGlzdGVuZXJzIiwiX2Rpc3BhdGNoSW5zdGFuY2VzIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc1BlcnNpc3RlbnQiLCJyZWxlYXNlIiwibWMiLCJuYyIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsInBhcmVudE5vZGUiLCJvYyIsInBjIiwicWMiLCJ0b3BMZXZlbFR5cGUiLCJuYXRpdmVFdmVudCIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJyYyIsImV2ZW50U3lzdGVtRmxhZ3MiLCJzYyIsImNvbnRhaW5lckluZm8iLCJ0YyIsInVjIiwidmMiLCJ3YyIsInhjIiwieWMiLCJ6YyIsIkFjIiwiQmMiLCJDYyIsIkRjIiwiRWMiLCJGYyIsIkdjIiwiSGMiLCJJYyIsIktjIiwiYmxvY2tlZE9uIiwiY29udGFpbmVyIiwiTGMiLCJkZWxldGUiLCJwb2ludGVySWQiLCJNYyIsIk5jIiwiUGMiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJwcmlvcml0eSIsImh5ZHJhdGUiLCJRYyIsIlJjIiwiU2MiLCJUYyIsIlVjIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiVmMiLCJXYyIsIlljIiwiWmMiLCIkYyIsImFkIiwiYnViYmxlZCIsImNhcHR1cmVkIiwiZXZlbnRQcmlvcml0eSIsImJkIiwiY2QiLCJkZCIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiZWQiLCJmZCIsImdkIiwiaGQiLCJpZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJPYyIsImpkIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsImtkIiwibGQiLCJtZCIsInNldFByb3BlcnR5IiwiY2hhckF0Iiwic3Vic3RyaW5nIiwibmQiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJvZCIsInBkIiwicWQiLCJyZCIsInNkIiwidGQiLCJib2R5IiwidWQiLCJ2ZCIsIm5leHRTaWJsaW5nIiwieGQiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJocmVmIiwieWQiLCJjb250ZW50RWRpdGFibGUiLCJEZCIsIkVkIiwiRmQiLCJhdXRvRm9jdXMiLCJHZCIsIl9faHRtbCIsIkhkIiwic2V0VGltZW91dCIsIklkIiwiY2xlYXJUaW1lb3V0IiwiSmQiLCJLZCIsInByZXZpb3VzU2libGluZyIsIkxkIiwiTWF0aCIsInJhbmRvbSIsIk1kIiwiTmQiLCJPZCIsIlBkIiwiUWQiLCJSZCIsIlNkIiwiVGQiLCJkaXNwYXRjaENvbmZpZyIsIlVkIiwiX3RhcmdldEluc3QiLCJWZCIsIldkIiwiWGQiLCJZZCIsIlpkIiwiJGQiLCJhZSIsImJlIiwiY2UiLCJJbnRlcmZhY2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJlZSIsImV2ZW50UG9vbCIsImZlIiwiZGVzdHJ1Y3RvciIsImRlIiwiZ2V0UG9vbGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwibm93IiwiaXNUcnVzdGVkIiwiZXh0ZW5kIiwiZ2UiLCJoZSIsImllIiwiamUiLCJrZSIsImRvY3VtZW50TW9kZSIsImxlIiwibWUiLCJuZSIsIm9lIiwiYmVmb3JlSW5wdXQiLCJjb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpdGlvblVwZGF0ZSIsInBlIiwicWUiLCJrZXlDb2RlIiwiZGV0YWlsIiwic2UiLCJ2ZSIsImxvY2FsZSIsIndoaWNoIiwidGUiLCJjdHJsS2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImNoYXIiLCJ1ZSIsIndlIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsInBhc3N3b3JkIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0aW1lIiwidXJsIiwid2VlayIsInhlIiwieWUiLCJjaGFuZ2UiLCJ6ZSIsIkFlIiwiQmUiLCJDZSIsIkRlIiwiRWUiLCJGZSIsIkdlIiwiZGV0YWNoRXZlbnQiLCJIZSIsIkllIiwiYXR0YWNoRXZlbnQiLCJKZSIsIktlIiwiTGUiLCJNZSIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJOZSIsInZpZXciLCJPZSIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJQZSIsImdldE1vZGlmaWVyU3RhdGUiLCJRZSIsIlJlIiwiU2UiLCJUZSIsIlVlIiwiVmUiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIldlIiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlhlIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJwb2ludGVyRW50ZXIiLCJwb2ludGVyTGVhdmUiLCJZZSIsImRlZmF1bHRWaWV3IiwicGFyZW50V2luZG93IiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsInNlbGVjdCIsImVmIiwiZmYiLCJnZiIsImhmIiwiamYiLCJzdGFydCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiYW5jaG9yTm9kZSIsImdldFNlbGVjdGlvbiIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0Iiwia2YiLCJvblNlbGVjdCIsImxmIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIm1mIiwiY2xpcGJvYXJkRGF0YSIsIm5mIiwib2YiLCJjaGFyQ29kZSIsInBmIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsInFmIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsInJmIiwic2YiLCJkYXRhVHJhbnNmZXIiLCJ0ZiIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJ1ZiIsInZmIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJ3ZiIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkNmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiRGYiLCJFZiIsIkZmIiwiR2YiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIkhmIiwiSWYiLCJKZiIsIktmIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJMZiIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIk1mIiwidW5zdGFibGVfbm93IiwiTmYiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsIk9mIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJQZiIsIlFmIiwiUmYiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsIlNmIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiVGYiLCJVZiIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiVmYiLCJXZiIsIlhmIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJiZyIsImNnIiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJjaGlsZEV4cGlyYXRpb25UaW1lIiwicWciLCJmaXJzdENvbnRleHQiLCJleHBpcmF0aW9uVGltZSIsInJnIiwic2ciLCJyZXNwb25kZXJzIiwidGciLCJ1ZyIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiYmFzZVF1ZXVlIiwic2hhcmVkIiwicGVuZGluZyIsImVmZmVjdHMiLCJ2ZyIsIndnIiwic3VzcGVuc2VDb25maWciLCJwYXlsb2FkIiwiY2FsbGJhY2siLCJ4ZyIsInlnIiwiemciLCJjYSIsIkFnIiwiQmciLCJDZyIsIkRnIiwiRWciLCJGZyIsIkpnIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsIkdnIiwiSGciLCJJZyIsIktnIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiTGciLCJNZyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiTmciLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJPZyIsIlBnIiwiX3N0cmluZ1JlZiIsIlFnIiwiUmciLCJsYXN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImZpcnN0RWZmZWN0IiwiU2ciLCJUZyIsIlVnIiwiaW1wbGVtZW50YXRpb24iLCJWZyIsIldnIiwiWGciLCJZZyIsIlpnIiwiJGciLCJhaCIsImJoIiwiY2giLCJkaCIsImRvY3VtZW50RWxlbWVudCIsInRhZ05hbWUiLCJlaCIsImZoIiwiZ2giLCJoaCIsIm1lbW9pemVkUHJvcHMiLCJyZXZlYWxPcmRlciIsImloIiwicmVzcG9uZGVyIiwiamgiLCJraCIsImxoIiwibWgiLCJuaCIsIm9oIiwicGgiLCJxaCIsInJoIiwic2giLCJ0aCIsInF1ZXVlIiwidWgiLCJ2aCIsIndoIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImFjdGlvbiIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwieGgiLCJ5aCIsInpoIiwiQWgiLCJkZXN0cm95IiwiZGVwcyIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJNaCIsIk5oIiwicmVhZENvbnRleHQiLCJ1c2VSZXNwb25kZXIiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsIk9oIiwiUGgiLCJRaCIsIlJoIiwiU2giLCJUaCIsInBlbmRpbmdQcm9wcyIsIlVoIiwiVmgiLCJXaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiYWkiLCJiaSIsImNpIiwiZGkiLCJlaSIsImZpIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiZ2kiLCJoaSIsInBlbmRpbmdDb250ZXh0IiwibmkiLCJwaSIsInFpIiwiaWkiLCJyZXRyeVRpbWUiLCJqaSIsImZhbGxiYWNrIiwidW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2siLCJraSIsImxpIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJsYXN0IiwidGFpbCIsInRhaWxFeHBpcmF0aW9uIiwidGFpbE1vZGUiLCJtaSIsInJpIiwic2kiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwib25DbGljayIsIm9uY2xpY2siLCJzaXplIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlVGV4dE5vZGUiLCJ0aSIsInVpIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsIkFpIiwiQmkiLCJXZWFrU2V0IiwiU2V0IiwiQ2kiLCJGaSIsIkVpIiwiR2kiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIkhpIiwiSWkiLCJKaSIsImZvY3VzIiwiS2kiLCJMaSIsIkRpIiwiTWkiLCJOaSIsIk9pIiwiUGkiLCJRaSIsImluc3RhbmNlIiwiaW5zZXJ0QmVmb3JlIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIlJpIiwiU2kiLCJUaSIsImRpc3BsYXkiLCJVaSIsIlZpIiwiYWRkIiwidGhlbiIsIldpIiwiWGkiLCJZaSIsIlppIiwiJGkiLCJjb21wb25lbnREaWRDYXRjaCIsImFqIiwiY29tcG9uZW50U3RhY2siLCJSaiIsImJqIiwiY2VpbCIsImNqIiwiZGoiLCJraiIsImxqIiwibWoiLCJuaiIsIm9qIiwicWoiLCJyaiIsInNqIiwidGoiLCJ1aiIsInZqIiwid2oiLCJ0aW1lb3V0TXMiLCJ4aiIsInlqIiwiemoiLCJsYXN0RXhwaXJlZFRpbWUiLCJBaiIsImZpcnN0UGVuZGluZ1RpbWUiLCJsYXN0UGluZ2VkVGltZSIsIm5leHRLbm93blBlbmRpbmdMZXZlbCIsImNhbGxiYWNrRXhwaXJhdGlvblRpbWUiLCJjYWxsYmFja1ByaW9yaXR5IiwiY2FsbGJhY2tOb2RlIiwiQmoiLCJ0aW1lb3V0IiwiQ2oiLCJEaiIsIkVqIiwiRmoiLCJHaiIsIkhqIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRFeHBpcmF0aW9uVGltZSIsImxhc3RTdXNwZW5kZWRUaW1lIiwiSWoiLCJ0aW1lb3V0SGFuZGxlIiwiSmoiLCJidXN5TWluRHVyYXRpb25NcyIsImJ1c3lEZWxheU1zIiwiS2oiLCJNaiIsIk5qIiwicGluZ0NhY2hlIiwiT2oiLCJ1YiIsIlBqIiwiWGMiLCJRaiIsIlNqIiwiZmlyc3RTdXNwZW5kZWRUaW1lIiwicmFuZ2VDb3VudCIsIndiIiwiYWN0aXZlRWxlbWVudERldGFjaGVkIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsIlRqIiwid2QiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwibWluIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJ2YiIsIlVqIiwiVmoiLCJXaiIsImhpZGRlbiIsIm9iIiwiWGoiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJaaiIsInBlbmRpbmdDaGlsZHJlbiIsImFrIiwiYmsiLCJjayIsImRrIiwiZWsiLCJmayIsIkpjIiwiX2ludGVybmFsUm9vdCIsImdrIiwiaWsiLCJoYXNBdHRyaWJ1dGUiLCJoayIsImprIiwia2siLCJ1bm1vdW50IiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJMaiIsImxrIiwiRXZlbnRzIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0Iiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsIllqIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZVByb3BzIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJjcmVhdGVQb3J0YWwiLCJmaW5kRE9NTm9kZSIsImZsdXNoU3luYyIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiTWVzc2FnZUNoYW5uZWwiLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsInBlcmZvcm1hbmNlIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJmbG9vciIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInNvcnRJbmRleCIsInN0YXJ0VGltZSIsInByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJjbGVhbiIsImhhc1NwYWNlIiwiaGFzU2VwYXJhdG9yIiwic2VwYXJhdG9yU3BsaXR0ZXIiLCJ1bnNlcGFyYXRlIiwiaGFzQ2FtZWwiLCJjYW1lbFNwbGl0dGVyIiwicHJldmlvdXMiLCJ1cHBlcnMiLCJ1bmNhbWVsaXplIiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJzaGltIiwiZ2V0U2hpbSIsIm9yaWdpbmFsTW9kdWxlIiwid2VicGFja1BvbHlmaWxsIiwiaXNBYnNvbHV0ZSIsInBhdGhuYW1lIiwic3BsaWNlT25lIiwibGlzdCIsImhhc1RyYWlsaW5nU2xhc2giLCJ0b1BhcnRzIiwiZnJvbVBhcnRzIiwiaXNUb0FicyIsImlzRnJvbUFicyIsIm11c3RFbmRBYnMiLCJ1cCIsInBhcnQiLCJ1bnNoaWZ0IiwiYWRkTGVhZGluZ1NsYXNoIiwic3RyaXBMZWFkaW5nU2xhc2giLCJzdHJpcEJhc2VuYW1lIiwiaGFzQmFzZW5hbWUiLCJzdHJpcFRyYWlsaW5nU2xhc2giLCJjcmVhdGVQYXRoIiwiaGFzaCIsImNyZWF0ZUxvY2F0aW9uIiwiY3VycmVudExvY2F0aW9uIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJwYXJzZVBhdGgiLCJkZWNvZGVVUkkiLCJVUklFcnJvciIsImNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIiwicHJvbXB0IiwibGlzdGVuZXJzIiwic2V0UHJvbXB0IiwibmV4dFByb21wdCIsImNvbmZpcm1UcmFuc2l0aW9uVG8iLCJnZXRVc2VyQ29uZmlybWF0aW9uIiwiYXBwZW5kTGlzdGVuZXIiLCJmbiIsImlzQWN0aXZlIiwiaXRlbSIsIm5vdGlmeUxpc3RlbmVycyIsIl9sZW4iLCJfa2V5IiwiY2FuVXNlRE9NIiwiZ2V0Q29uZmlybWF0aW9uIiwiY29uZmlybSIsImdldEhpc3RvcnlTdGF0ZSIsImhpc3RvcnkiLCJjcmVhdGVCcm93c2VySGlzdG9yeSIsImdsb2JhbEhpc3RvcnkiLCJjYW5Vc2VIaXN0b3J5IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwibmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIiLCJfcHJvcHMiLCJfcHJvcHMkZm9yY2VSZWZyZXNoIiwiZm9yY2VSZWZyZXNoIiwiX3Byb3BzJGdldFVzZXJDb25maXJtIiwiX3Byb3BzJGtleUxlbmd0aCIsImtleUxlbmd0aCIsImJhc2VuYW1lIiwiZ2V0RE9NTG9jYXRpb24iLCJoaXN0b3J5U3RhdGUiLCJfd2luZG93JGxvY2F0aW9uIiwiY3JlYXRlS2V5IiwidHJhbnNpdGlvbk1hbmFnZXIiLCJuZXh0U3RhdGUiLCJoYW5kbGVQb3BTdGF0ZSIsImV2ZW50IiwiaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCIsImhhbmRsZVBvcCIsImhhbmRsZUhhc2hDaGFuZ2UiLCJmb3JjZU5leHRQb3AiLCJvayIsImZyb21Mb2NhdGlvbiIsInRvTG9jYXRpb24iLCJ0b0luZGV4IiwiZnJvbUluZGV4IiwiZGVsdGEiLCJnbyIsInJldmVydFBvcCIsImluaXRpYWxMb2NhdGlvbiIsImNyZWF0ZUhyZWYiLCJsaXN0ZW5lckNvdW50IiwiY2hlY2tET01MaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaXNCbG9ja2VkIiwicHVzaFN0YXRlIiwicHJldkluZGV4IiwibmV4dEtleXMiLCJyZXBsYWNlU3RhdGUiLCJnb0JhY2siLCJnb0ZvcndhcmQiLCJibG9jayIsInVuYmxvY2siLCJsaXN0ZW4iLCJ1bmxpc3RlbiIsIkhhc2hQYXRoQ29kZXJzIiwiaGFzaGJhbmciLCJlbmNvZGVQYXRoIiwiZGVjb2RlUGF0aCIsIm5vc2xhc2giLCJzbGFzaCIsInN0cmlwSGFzaCIsImdldEhhc2hQYXRoIiwicmVwbGFjZUhhc2hQYXRoIiwiY3JlYXRlSGFzaEhpc3RvcnkiLCJfcHJvcHMkaGFzaFR5cGUiLCJoYXNoVHlwZSIsIl9IYXNoUGF0aENvZGVycyRoYXNoVCIsImlnbm9yZVBhdGgiLCJlbmNvZGVkUGF0aCIsInByZXZMb2NhdGlvbiIsImFsbFBhdGhzIiwibGFzdEluZGV4T2YiLCJiYXNlVGFnIiwicXVlcnlTZWxlY3RvciIsImdldEF0dHJpYnV0ZSIsInB1c2hIYXNoUGF0aCIsIm5leHRQYXRocyIsImNsYW1wIiwibG93ZXJCb3VuZCIsInVwcGVyQm91bmQiLCJtYXgiLCJjcmVhdGVNZW1vcnlIaXN0b3J5IiwiX3Byb3BzJGluaXRpYWxFbnRyaWVzIiwiaW5pdGlhbEVudHJpZXMiLCJfcHJvcHMkaW5pdGlhbEluZGV4IiwiaW5pdGlhbEluZGV4IiwibmV4dEluZGV4IiwibmV4dEVudHJpZXMiLCJjYW5HbyIsImhpc3RvcnlDb250ZXh0IiwiY3JlYXRlTmFtZWRDb250ZXh0JDEiLCJfUmVhY3QkQ29tcG9uZW50IiwiUm91dGVyIiwiX2lzTW91bnRlZCIsIl9wZW5kaW5nTG9jYXRpb24iLCJzdGF0aWNDb250ZXh0IiwiY29tcHV0ZVJvb3RNYXRjaCIsInBhcmFtcyIsImlzRXhhY3QiLCJjYWNoZSQxIiwiY2FjaGVDb3VudCQxIiwibWF0Y2hQYXRoIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRleGFjdCIsIl9vcHRpb25zJHN0cmljdCIsIl9vcHRpb25zJHNlbnNpdGl2ZSIsIm1hdGNoZWQiLCJfY29tcGlsZVBhdGgiLCJwYXRoQ2FjaGUiLCJyZWdleHAiLCJjb21waWxlUGF0aCQxIiwiUm91dGUiLCJjb250ZXh0JDEiLCJjb21wdXRlZE1hdGNoIiwiX3RoaXMkcHJvcHMiLCJjcmVhdGVVUkwiLCJzdGF0aWNIYW5kbGVyIiwibWV0aG9kTmFtZSIsIm5vb3AiLCJTd2l0Y2giLCJIYXNoUm91dGVyIiwicmVzb2x2ZVRvTG9jYXRpb24iLCJmb3J3YXJkUmVmU2hpbSIsIkxpbmtBbmNob3IiLCJmb3J3YXJkZWRSZWYiLCJpbm5lclJlZiIsIm5hdmlnYXRlIiwiX29uQ2xpY2siLCJyZXN0IiwiaXNNb2RpZmllZEV2ZW50IiwiTGluayIsIl9yZWYyIiwiX3JlZjIkY29tcG9uZW50IiwiZm9yd2FyZFJlZlNoaW0kMSIsImZvcndhcmRSZWYkMSIsIk5hdkxpbmsiLCJfcmVmJGFyaWFDdXJyZW50IiwiYXJpYUN1cnJlbnQiLCJfcmVmJGFjdGl2ZUNsYXNzTmFtZSIsImFjdGl2ZUNsYXNzTmFtZSIsImFjdGl2ZVN0eWxlIiwiY2xhc3NOYW1lUHJvcCIsImNsYXNzTmFtZSIsImlzQWN0aXZlUHJvcCIsImxvY2F0aW9uUHJvcCIsInN0eWxlUHJvcCIsImVzY2FwZWRQYXRoIiwiY2xhc3NuYW1lcyIsImpvaW5DbGFzc25hbWVzIiwicHJvdG8iLCJwYXJ0aWFsT2JqZWN0IiwiaXNNYXAiLCJSZWZsZWN0IiwiZmxhdHRlbiIsIl90ZW1wIiwicGFydGlhbEZsYXRNYXAiLCJwYXJ0aWFsRmxhdEFjdGlvblR5cGUiLCJfcmVmJG5hbWVzcGFjZSIsIm5hbWVzcGFjZSIsIm5leHROYW1lc3BhY2UiLCJjb25uZWN0UHJlZml4IiwicGFydGlhbHMiLCJjb25uZWN0TmFtZXNwYWNlIiwibWFwVmFsdWUiLCJwcmVkaWNhdGUiLCJmbGF0dGVuV2hlbk5vZGUiLCJpc1BsYWluT2JqZWN0IiwidW5mbGF0dGVuQWN0aW9uQ3JlYXRvcnMiLCJmbGF0QWN0aW9uQ3JlYXRvcnMiLCJuZXN0ZWRBY3Rpb25DcmVhdG9ycyIsInVucHJlZml4ZWRUeXBlIiwidW5mbGF0dGVuIiwiZmxhdEFjdGlvblR5cGUiLCJwYXJ0aWFsTmVzdGVkQWN0aW9uQ3JlYXRvcnMiLCJwYXJ0aWFsRmxhdEFjdGlvblR5cGVQYXRoIiwiY2FtZWxDYXNlIiwiY3JlYXRlQWN0aW9uIiwicGF5bG9hZENyZWF0b3IiLCJtZXRhQ3JlYXRvciIsImlkZW50aXR5IiwiaXNGdW5jdGlvbiIsImlzTnVsbCIsImZpbmFsUGF5bG9hZENyZWF0b3IiLCJoZWFkIiwiaGFzTWV0YSIsInR5cGVTdHJpbmciLCJhY3Rpb25DcmVhdG9yIiwiYWN0aW9uQ3JlYXRvcnNGcm9tQWN0aW9uTWFwIiwiYWN0aW9uTWFwIiwiYWN0aW9uTWFwVG9BY3Rpb25DcmVhdG9ycyIsImZsYXR0ZW5BY3Rpb25NYXAiLCJhcnJheVRvT2JqZWN0IiwicGFydGlhbEFjdGlvbkNyZWF0b3JzIiwiX29iamVjdFNwcmVhZDIiLCJhY3Rpb25NYXBWYWx1ZSIsImlzTmlsIiwiX2FjdGlvbk1hcFZhbHVlJCIsImlzVmFsaWRBY3Rpb25NYXBWYWx1ZSIsInByZWZpeGVkVHlwZSIsImFjdGlvbkNyZWF0b3JzRnJvbUlkZW50aXR5QWN0aW9ucyIsImlkZW50aXR5QWN0aW9ucyIsImFjdGlvbkNyZWF0b3JzIiwicGFydGlhbEFjdGlvbk1hcCIsIl9vYmplY3RTcHJlYWQzIiwiX29iamVjdFNwcmVhZDQiLCJnZXRMYXN0RWxlbWVudCIsImlzU3RyaW5nIiwiY3JlYXRlQWN0aW9ucyIsIkxPQURfREFUQSIsIlNFVF9JU19PUEVOIiwiaXNPcGVuVmFsIiwiU0VUX05BVl9JU19ISURERU4iLCJuYXZJc0hpZGRlblZhbCIsImxvYWREYXRhIiwic2V0SXNPcGVuIiwic2V0TmF2SXNIaWRkZW4iLCJSZWFjdFJlZHV4Q29udGV4dCIsIm51bGxMaXN0ZW5lcnMiLCJub3RpZnkiLCJjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24iLCJiYXRjaCIsImZpcnN0IiwiY2xlYXIiLCJzdWJzY3JpYmUiLCJpc1N1YnNjcmliZWQiLCJwcmV2IiwiU3Vic2NyaXB0aW9uIiwic3RvcmUiLCJwYXJlbnRTdWIiLCJ1bnN1YnNjcmliZSIsImhhbmRsZUNoYW5nZVdyYXBwZXIiLCJhZGROZXN0ZWRTdWIiLCJ0cnlTdWJzY3JpYmUiLCJub3RpZnlOZXN0ZWRTdWJzIiwib25TdGF0ZUNoYW5nZSIsIkJvb2xlYW4iLCJ0cnlVbnN1YnNjcmliZSIsImNvbnRleHRWYWx1ZSIsInN1YnNjcmlwdGlvbiIsInByZXZpb3VzU3RhdGUiLCJnZXRTdGF0ZSIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QiLCJFTVBUWV9BUlJBWSIsIk5PX1NVQlNDUklQVElPTl9BUlJBWSIsInN0b3JlU3RhdGVVcGRhdGVzUmVkdWNlciIsInVwZGF0ZUNvdW50IiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFdpdGhBcmdzIiwiZWZmZWN0RnVuYyIsImVmZmVjdEFyZ3MiLCJjYXB0dXJlV3JhcHBlclByb3BzIiwibGFzdFdyYXBwZXJQcm9wcyIsImxhc3RDaGlsZFByb3BzIiwicmVuZGVySXNTY2hlZHVsZWQiLCJ3cmFwcGVyUHJvcHMiLCJhY3R1YWxDaGlsZFByb3BzIiwiY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSIsInN1YnNjcmliZVVwZGF0ZXMiLCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMiLCJjaGlsZFByb3BzU2VsZWN0b3IiLCJmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoIiwiZGlkVW5zdWJzY3JpYmUiLCJsYXN0VGhyb3duRXJyb3IiLCJjaGVja0ZvclVwZGF0ZXMiLCJuZXdDaGlsZFByb3BzIiwibGF0ZXN0U3RvcmVTdGF0ZSIsImluaXRTdGF0ZVVwZGF0ZXMiLCJjb25uZWN0QWR2YW5jZWQiLCJzZWxlY3RvckZhY3RvcnkiLCJfcmVmMiRnZXREaXNwbGF5TmFtZSIsImdldERpc3BsYXlOYW1lIiwiX3JlZjIkbWV0aG9kTmFtZSIsIl9yZWYyJHJlbmRlckNvdW50UHJvcCIsInJlbmRlckNvdW50UHJvcCIsIl9yZWYyJHNob3VsZEhhbmRsZVN0YSIsIl9yZWYyJHN0b3JlS2V5Iiwic3RvcmVLZXkiLCJfcmVmMiRmb3J3YXJkUmVmIiwid2l0aFJlZiIsIl9yZWYyJGNvbnRleHQiLCJjb25uZWN0T3B0aW9ucyIsIldyYXBwZWRDb21wb25lbnQiLCJ3cmFwcGVkQ29tcG9uZW50TmFtZSIsInNlbGVjdG9yRmFjdG9yeU9wdGlvbnMiLCJwdXJlIiwidXNlUHVyZU9ubHlNZW1vIiwiQ29ubmVjdEZ1bmN0aW9uIiwiX3VzZU1lbW8iLCJyZWFjdFJlZHV4Rm9yd2FyZGVkUmVmIiwicHJvcHNDb250ZXh0IiwiQ29udGV4dFRvVXNlIiwiZGlkU3RvcmVDb21lRnJvbVByb3BzIiwiY3JlYXRlQ2hpbGRTZWxlY3RvciIsIl91c2VNZW1vMiIsIm92ZXJyaWRkZW5Db250ZXh0VmFsdWUiLCJfdXNlUmVkdWNlciIsInByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQiLCJyZW5kZXJlZFdyYXBwZWRDb21wb25lbnQiLCJDb25uZWN0IiwiZm9yd2FyZGVkIiwic2hhbGxvd0VxdWFsIiwia2V5c0EiLCJrZXlzQiIsInJhbmRvbVN0cmluZyIsIkFjdGlvblR5cGVzIiwiSU5JVCIsIlJFUExBQ0UiLCJQUk9CRV9VTktOT1dOX0FDVElPTiIsImNyZWF0ZVN0b3JlIiwicmVkdWNlciIsInByZWxvYWRlZFN0YXRlIiwiZW5oYW5jZXIiLCJjdXJyZW50UmVkdWNlciIsImN1cnJlbnRTdGF0ZSIsImN1cnJlbnRMaXN0ZW5lcnMiLCJuZXh0TGlzdGVuZXJzIiwiaXNEaXNwYXRjaGluZyIsImVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMiLCJyZXBsYWNlUmVkdWNlciIsIm5leHRSZWR1Y2VyIiwib3V0ZXJTdWJzY3JpYmUiLCJvYnNlcnZlciIsIm9ic2VydmVTdGF0ZSIsImdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlIiwiYWN0aW9uVHlwZSIsImJpbmRBY3Rpb25DcmVhdG9yIiwiYmluZEFjdGlvbkNyZWF0b3JzIiwiYm91bmRBY3Rpb25DcmVhdG9ycyIsIndyYXBNYXBUb1Byb3BzQ29uc3RhbnQiLCJnZXRDb25zdGFudCIsImNvbnN0YW50IiwiY29uc3RhbnRTZWxlY3RvciIsImRlcGVuZHNPbk93blByb3BzIiwiZ2V0RGVwZW5kc09uT3duUHJvcHMiLCJtYXBUb1Byb3BzIiwid3JhcE1hcFRvUHJvcHNGdW5jIiwicHJveHkiLCJzdGF0ZU9yRGlzcGF0Y2giLCJvd25Qcm9wcyIsIm1hcERpc3BhdGNoVG9Qcm9wcyIsIm1hcFN0YXRlVG9Qcm9wcyIsImRlZmF1bHRNZXJnZVByb3BzIiwic3RhdGVQcm9wcyIsImRpc3BhdGNoUHJvcHMiLCJtZXJnZVByb3BzIiwibWVyZ2VkUHJvcHMiLCJhcmVNZXJnZWRQcm9wc0VxdWFsIiwiaGFzUnVuT25jZSIsIm5leHRNZXJnZWRQcm9wcyIsIndyYXBNZXJnZVByb3BzRnVuYyIsImltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImFyZVN0YXRlc0VxdWFsIiwiYXJlT3duUHJvcHNFcXVhbCIsImFyZVN0YXRlUHJvcHNFcXVhbCIsImhhc1J1bkF0TGVhc3RPbmNlIiwiaGFuZGxlU3Vic2VxdWVudENhbGxzIiwibmV4dE93blByb3BzIiwibmV4dFN0YXRlUHJvcHMiLCJzdGF0ZVByb3BzQ2hhbmdlZCIsInByb3BzQ2hhbmdlZCIsInN0YXRlQ2hhbmdlZCIsImZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJpbml0TWFwU3RhdGVUb1Byb3BzIiwiaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyIsImluaXRNZXJnZVByb3BzIiwiYXJnIiwiZmFjdG9yaWVzIiwic3RyaWN0RXF1YWwiLCJjcmVhdGVDb25uZWN0IiwiX3JlZiRjb25uZWN0SE9DIiwiY29ubmVjdEhPQyIsIl9yZWYkbWFwU3RhdGVUb1Byb3BzRiIsIm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWFwRGlzcGF0Y2hUb1BybyIsIm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWVyZ2VQcm9wc0ZhY3RvciIsIm1lcmdlUHJvcHNGYWN0b3JpZXMiLCJfcmVmJHNlbGVjdG9yRmFjdG9yeSIsIl9yZWYzIiwiX3JlZjMkcHVyZSIsIl9yZWYzJGFyZVN0YXRlc0VxdWFsIiwiX3JlZjMkYXJlT3duUHJvcHNFcXVhIiwiX3JlZjMkYXJlU3RhdGVQcm9wc0VxIiwiX3JlZjMkYXJlTWVyZ2VkUHJvcHNFIiwiZXh0cmFPcHRpb25zIiwibmV3QmF0Y2giLCJpbml0aWFsU3RhdGUiLCJyZWR1Y2VycyIsInByZXZTdGF0ZSIsIl9sZW4yIiwiX2tleTIiLCJwcmV2U3RhdGVJc1VuZGVmaW5lZCIsInZhbHVlSXNVbmRlZmluZWQiLCJuZXdTdGF0ZSIsImhhc09ubHlJbnRlcmZhY2VOYW1lcyIsIm93bktleSIsIm15RGF0YSIsImJpcnRoZGF0ZSIsIndpc2hKb2IiLCJleHBpcmllbmNlIiwid29ya2RheSIsInNjaGVkdWxlIiwiYWJvdXRNZSIsImNpdHkiLCJjaXRpemVuIiwiZ2VuZGVyIiwic2VsZkluZm9ybWF0aW9uIiwibWFpbkVkdWNhdGlvbiIsInllYXIiLCJpbnN0aXR1dGUiLCJmYWN1bHR5IiwiYWRkaXRpb25hbEVkdWNhdGlvbiIsIjEiLCJjb3Vyc2VOYW1lIiwiMiIsInF1YWxpZmljYXRpb24iLCJjb21wYW55IiwiY29tcGFueUxpbmsiLCJqb2IiLCJkdXR5IiwibWFpblNjaWxscyIsImxhbmd1YWdlcyIsInJ1c3NpYW4iLCJlbmdsaXNoIiwiY2FyIiwiY29udGFjdHMiLCJwaG9uZSIsImljcSIsInNreXBlIiwidmsiLCJ0ZXN0cyIsInNlcnRpZmljYXRlcyIsInNjaG9vbCIsImZ1bGxOYW1lIiwiZGVzY3JpcHRpb24iLCJzcmMiLCJwb3J0Zm9saW9fZ2Vla2JyYWlucyIsImNvdXJzZSIsIndvcmtOYW1lIiwiZGVtb2xpbmsiLCJjb2RlbGluayIsImNvbW1lbnQiLCJoYW5kbGVBY3Rpb25zIiwiZGVmYXVsdFN0YXRlIiwiZmxhdHRlbmVkUmVkdWNlck1hcCIsImZsYXR0ZW5SZWR1Y2VyTWFwIiwidGhyb3ciLCJhUmVkdWNlciIsInRocm93UmVkdWNlciIsImhhbmRsZUFjdGlvbiIsImlzT3BlbiIsIm5hdklzSGlkZGVuIiwiTE9DQVRJT05fQ0hBTkdFIiwidXBkYXRlTG9jYXRpb24iLCJtZXRob2QiLCJfdHlwZW9mIiwic3RydWN0dXJlIiwiZ2V0SW4iLCJ0b0pTIiwiZ2V0Um91dGVyIiwicm91dGVyIiwiZ2V0TG9jYXRpb24iLCJnZXRBY3Rpb24iLCJnZXRTZWFyY2giLCJnZXRIYXNoIiwiY3JlYXRlTWF0Y2hTZWxlY3RvciIsImxhc3RQYXRobmFtZSIsImxhc3RNYXRjaCIsImluamVjdFF1ZXJ5Iiwic2VhcmNoUXVlcnkiLCJhY2MiLCJjdXJyZW50UXVlcnkiLCJfY3VycmVudFF1ZXJ5JHNwbGl0MiIsImZyb21KUyIsIm1lcmdlIiwiaW5pdGlhbFJvdXRlclN0YXRlIiwiaXNGaXJzdFJlbmRlcmluZyIsImNvbm5lY3RSb3V0ZXIiLCJwbGFpbiIsInJlZHVjZXJLZXlzIiwiZmluYWxSZWR1Y2VycyIsInNoYXBlQXNzZXJ0aW9uRXJyb3IiLCJmaW5hbFJlZHVjZXJLZXlzIiwiYXNzZXJ0UmVkdWNlclNoYXBlIiwiaGFzQ2hhbmdlZCIsInByZXZpb3VzU3RhdGVGb3JLZXkiLCJuZXh0U3RhdGVGb3JLZXkiLCJlcnJvck1lc3NhZ2UiLCJjb21iaW5lUmVkdWNlcnMiLCJteVJlZHVjZXIiLCJSZWFjdCIsImNvbm5lY3QiLCJoZWFkZXJDbGFzc05hbWUiLCJoZWFkZXJOYXZDbGFzc05hbWUiLCJ1c2VNZWRpYVF1ZXJ5Iiwib25DbGlja0hhbmRsZXIiLCJhcmlhLWhpZGRlbiIsIlNlcnRpZmljYXRlSXRlbSIsInNlcnRpZmljYXRlSXRlbSIsInNlcnRpZmljYXRlUGF0aCIsImlkeCIsImFsdCIsIk1haW5FZHVjYXRpb25JdGVtIiwiQWRkaXRpb25hbEVkdWNhdGlvbkl0ZW0iLCJhZGRpdGlvbmFsRWR1Y2F0aW9uSXRlbSIsIkl0ZW1JZCIsIlF1YWxpZmljYXRpb25JdGVtIiwicXVhbGlmaWNhdGlvbkl0ZW0iLCJTY2lsbHNJdGVtIiwic2NpbGxzSXRlbSIsInNjaWxscyIsInNlcnRpZmljYXRlIiwiUG9ydGZvbGlvSXRlbSIsInBvcnRmb2xpb0l0ZW0iLCJpbml0U3RvcmUiLCJnb1RvcENsaWNrSGFuZGxlciIsInNjcm9sbFRvIiwiTWFpbiIsIndpbmRvd1BvcyIsInNjcm9sbGVkRG93biIsInRtcFNjcm9sbGVkRG93biIsInBhZ2VZT2Zmc2V0Iiwic2Nyb2xsSGFuZGxlciIsIlJpZ2h0VGl0bGVDb250YWluZXIiLCJMZWZ0TmF2QmFyQ29udGFpbmVyIiwiaXNTY3JvbGxlZERvd24iLCJTdGFydFBhZ2VDb250YWluZXIiLCJBYm91dE1lQ29udGFpbmVyIiwiRWR1Y2F0aW9uUGFnZUNvbnRhaW5lciIsIk1haW5FZHVjYXRpb25QYWdlQ29udGFpbmVyIiwiQWRkaXRpb25hbEVkdWNhdGlvblBhZ2VDb250YWluZXIiLCJRdWFsaWZpY2F0aW9uUGFnZUNvbnRhaW5lciIsIlNjaWxsc1BhZ2VDb250YWluZXIiLCJQb3J0Zm9saW9QYWdlQ29udGFpbmVyIiwiU2VydGlmaWNhdGVzUGFnZUNvbnRhaW5lciIsIlNlcnRpZmljYXRlUGFnZUNvbnRhaW5lciIsIkNvbnRhY3RzUGFnZUNvbnRhaW5lciIsIlJlYWN0RG9tIiwiZ2V0RWxlbWVudEJ5SWQiLCJvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwidG9WYWwiLCJtaXgiLCJ0bXAiLCJfZGVmaW5lUHJvcGVydGllcyIsIl9jcmVhdGVDbGFzcyIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIlJlZmVyZW5jZUVycm9yIiwicGxhaW5PYmplY3RDb25zdHJ1cmN0b3IiLCJjbG9uZVN0eWxlIiwibmV3U3R5bGUiLCJjcmVhdGVSdWxlIiwiZGVjbCIsImpzcyIsImRlY2xDb3B5IiwicnVsZSIsInBsdWdpbnMiLCJvbkNyZWF0ZVJ1bGUiLCJieSIsInRvQ3NzVmFsdWUiLCJpZ25vcmVJbXBvcnRhbnQiLCJjc3NWYWx1ZSIsImluZGVudFN0ciIsImluZGVudCIsInRvQ3NzIiwic2VsZWN0b3IiLCJfb3B0aW9ucyRpbmRlbnQiLCJmYWxsYmFja3MiLCJwcm9wIiwiX3Byb3AiLCJfdmFsdWUiLCJfcHJvcDIiLCJfdmFsdWUyIiwiYWxsb3dFbXB0eSIsImVzY2FwZVJlZ2V4IiwibmF0aXZlRXNjYXBlIiwiQ1NTIiwiQmFzZVN0eWxlUnVsZSIsImlzUHJvY2Vzc2VkIiwicmVuZGVyZXIiLCJyZW5kZXJhYmxlIiwic2hlZXQiLCJSZW5kZXJlciIsImZvcmNlIiwicHJvY2VzcyIsIm9uQ2hhbmdlVmFsdWUiLCJpc0VtcHR5IiwiaXNEZWZpbmVkIiwicmVtb3ZlIiwicmVtb3ZlUHJvcGVydHkiLCJhdHRhY2hlZCIsIl9CYXNlU3R5bGVSdWxlIiwiU3R5bGVSdWxlIiwic2VsZWN0b3JUZXh0Iiwic2NvcGVkIiwiZ2VuZXJhdGVJZCIsImFwcGx5VG8iLCJqc29uIiwidG9KU09OIiwic2V0U2VsZWN0b3IiLCJyZXBsYWNlUnVsZSIsInBsdWdpblN0eWxlUnVsZSIsInBhcmVudCIsImRlZmF1bHRUb1N0cmluZ09wdGlvbnMiLCJhdFJlZ0V4cCIsIkNvbmRpdGlvbmFsUnVsZSIsInN0eWxlcyIsImF0IiwiYXRNYXRjaCIsImdldFJ1bGUiLCJhZGRSdWxlIiwib25Qcm9jZXNzUnVsZSIsImtleVJlZ0V4cCIsInBsdWdpbkNvbmRpdGlvbmFsUnVsZSIsImRlZmF1bHRUb1N0cmluZ09wdGlvbnMkMSIsIm5hbWVSZWdFeHAiLCJLZXlmcmFtZXNSdWxlIiwiZnJhbWVzIiwibmFtZU1hdGNoIiwia2V5UmVnRXhwJDEiLCJyZWZSZWdFeHAiLCJmaW5kUmVmZXJlbmNlZEtleWZyYW1lIiwia2V5ZnJhbWVzIiwicmVmS2V5ZnJhbWUiLCJvblByb2Nlc3NTdHlsZSIsIktleWZyYW1lUnVsZSIsInBsdWdpbktleWZyYW1lUnVsZSIsIkZvbnRGYWNlUnVsZSIsImtleVJlZ0V4cCQyIiwicGx1Z2luRm9udEZhY2VSdWxlIiwiVmlld3BvcnRSdWxlIiwicGx1Z2luVmlld3BvcnRSdWxlIiwiU2ltcGxlUnVsZSIsImtleXNNYXAiLCJkZWZhdWx0VXBkYXRlT3B0aW9ucyIsImZvcmNlVXBkYXRlT3B0aW9ucyIsIlJ1bGVMaXN0IiwicmF3IiwiY291bnRlciIsImNsYXNzZXMiLCJydWxlT3B0aW9ucyIsIl90aGlzJG9wdGlvbnMiLCJyZWdpc3RlciIsInVucmVnaXN0ZXIiLCJ1cGRhdGVPbmUiLCJfdGhpcyRvcHRpb25zMiIsInN0eWxlUnVsZSIsIm5leHRWYWx1ZSIsIl9uZXh0VmFsdWUiLCJfcHJldlZhbHVlIiwiY3NzIiwiU3R5bGVTaGVldCIsImRlcGxveWVkIiwiYXR0YWNoIiwiZGVwbG95IiwiZGV0YWNoIiwiaW5zZXJ0UnVsZSIsImFkZFJ1bGVzIiwiYWRkZWQiLCJkZWxldGVSdWxlIiwiX3RoaXMkcnVsZXMiLCJQbHVnaW5zUmVnaXN0cnkiLCJpbnRlcm5hbCIsImV4dGVybmFsIiwicmVnaXN0cnkiLCJvblByb2Nlc3NTaGVldCIsInByb2Nlc3NlZFZhbHVlIiwidXNlIiwibmV3UGx1Z2luIiwicGx1Z2luIiwic2hlZXRzIiwiU2hlZXRzUmVnaXN0cnkiLCJyZXNldCIsImNyZWF0ZUdlbmVyYXRlSWQiLCJydWxlQ291bnRlciIsImpzc0lkIiwiY2xhc3NOYW1lUHJlZml4IiwibWluaWZ5IiwibWVtb2l6ZSIsImdldFByb3BlcnR5VmFsdWUiLCJjc3NSdWxlIiwiYXR0cmlidXRlU3R5bGVNYXAiLCJnZXRIZWFkIiwiZmluZFByZXZOb2RlIiwiaW5zZXJ0aW9uUG9pbnQiLCJmaW5kSGlnaGVyU2hlZXQiLCJmaW5kSGlnaGVzdFNoZWV0IiwiY2hpbGROb2RlcyIsImZpbmRDb21tZW50Tm9kZSIsImdldE5vbmNlIiwiX2luc2VydFJ1bGUiLCJtYXhJbmRleCIsImNzc1J1bGVzIiwiYXBwZW5kUnVsZSIsIkRvbVJlbmRlcmVyIiwiaGFzSW5zZXJ0ZWRSdWxlcyIsImVsIiwiY3JlYXRlU3R5bGUiLCJub25jZSIsIm5leHROb2RlIiwiaW5zZXJ0aW9uUG9pbnRFbGVtZW50IiwiaW5zZXJ0U3R5bGUiLCJpbnNlcnRSdWxlcyIsIm5hdGl2ZVBhcmVudCIsImxhdGVzdE5hdGl2ZVBhcmVudCIsInBhcmVudFN0eWxlU2hlZXQiLCJydWxlU3RyIiwibmF0aXZlUnVsZSIsImdldFJ1bGVzIiwiaW5zdGFuY2VDb3VudGVyIiwiSnNzIiwic2V0dXAiLCJjcmVhdGVTdHlsZVNoZWV0IiwicmVtb3ZlU3R5bGVTaGVldCIsImhhc0NTU1RPTVN1cHBvcnQiLCJtZXJnZUNsYXNzZXMiLCJiYXNlQ2xhc3NlcyIsIm5ld0NsYXNzZXMiLCJuZXh0Q2xhc3NlcyIsImtleTEiLCJrZXkyIiwic3ViQ2FjaGUiLCJ1c2VUaGVtZSIsImZuVmFsdWVzTnMiLCJmblJ1bGVOcyIsImZuVmFsdWVzIiwiZm5SdWxlIiwiR2xvYmFsQ29udGFpbmVyUnVsZSIsIkdsb2JhbFByZWZpeGVkUnVsZSIsInNlcGFyYXRvclJlZ0V4cCIsImFkZFNjb3BlIiwic2NvcGUiLCJoYW5kbGVOZXN0ZWRHbG9iYWxDb250YWluZXJSdWxlIiwiaGFuZGxlUHJlZml4ZWRHbG9iYWxSdWxlIiwicGFyZW50UmVnRXhwIiwiZ2V0UmVwbGFjZVJlZiIsInJlcGxhY2VQYXJlbnRSZWZzIiwibmVzdGVkUHJvcCIsInBhcmVudFByb3AiLCJwYXJlbnRTZWxlY3RvcnMiLCJuZXN0ZWRTZWxlY3RvcnMiLCJuZXN0ZWQiLCJnZXRPcHRpb25zIiwicHJldk9wdGlvbnMiLCJuZXN0aW5nTGV2ZWwiLCJyZXBsYWNlUmVmIiwiaXNOZXN0ZWQiLCJpc05lc3RlZENvbmRpdGlvbmFsIiwiY29udmVydENhc2UiLCJjb252ZXJ0ZWQiLCJoeXBoZW5hdGVkUHJvcCIsInB4IiwibXMiLCJwZXJjZW50IiwiYWRkQ2FtZWxDYXNlZFZlcnNpb24iLCJyZWdFeHAiLCJuZXdPYmoiLCJ1bml0cyIsImJvcmRlciIsIm1hcmdpbiIsInBhZGRpbmciLCJib3R0b20iLCJyaWdodCIsIm1vdGlvbiIsIm91dGxpbmUiLCJwZXJzcGVjdGl2ZSIsIml0ZXJhdGUiLCJpbm5lclByb3AiLCJfaW5uZXJQcm9wIiwidW5pdCIsImNhbWVsQ2FzZWRPcHRpb25zIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiaXRlciIsImpzIiwidmVuZG9yIiwiYnJvd3NlciIsImlzVG91Y2giLCJqc0Nzc01hcCIsIk1veiIsIldlYmtpdCIsImFwcGVhcmVuY2UiLCJub1ByZWZpbGwiLCJzdXBwb3J0ZWRQcm9wZXJ0eSIsImNvbG9yQWRqdXN0IiwidG9VcHBlciIsImNhbWVsaXplIiwicGFzY2FsaXplIiwibWFzayIsInRleHRPcmllbnRhdGlvbiIsInRyYW5zZm9ybSIsIndyaXRpbmdNb2RlIiwidXNlclNlbGVjdCIsImJyZWFrUHJvcHNPbGQiLCJpbmxpbmVMb2dpY2FsT2xkIiwibmV3UHJvcCIsInVucHJlZml4ZWQiLCJwcmVmaXhlZCIsInBhc2NhbGl6ZWQiLCJzY3JvbGxTbmFwIiwib3ZlcnNjcm9sbEJlaGF2aW9yIiwicHJvcE1hcCIsImZsZXgyMDEyIiwicHJvcE1hcCQxIiwicHJvcEtleXMiLCJwcmVmaXhDc3MiLCJwcm9wZXJ0eURldGVjdG9ycyIsImNvbXB1dGVkIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImtleSQxIiwiZWwkMSIsInRyYW5zaXRpb25Qcm9wZXJ0aWVzIiwidHJhbnNQcm9wc1JlZ0V4cCIsInByZWZpeFRyYW5zaXRpb25DYWxsYmFjayIsInAxIiwicDIiLCJwcmVmaXhlZFZhbHVlIiwic3VwcG9ydGVkVmFsdWUiLCJwcmVmaXhTdHlsZSIsImNoYW5nZVByb3AiLCJzdXBwb3J0ZWRQcm9wIiwiY2hhbmdlVmFsdWUiLCJzdXBwb3J0ZWRWYWx1ZSQxIiwiYXRSdWxlIiwic29ydCIsInByb3AwIiwicHJvcDEiLCJqc3NQcmVzZXQiLCJkZWZhdWx0T3B0aW9ucyIsImRpc2FibGVHZW5lcmF0aW9uIiwiZ2VuZXJhdGVDbGFzc05hbWUiLCJfb3B0aW9ucyRkaXNhYmxlR2xvYmEiLCJkaXNhYmxlR2xvYmFsIiwiX29wdGlvbnMkcHJvZHVjdGlvblByIiwicHJvZHVjdGlvblByZWZpeCIsIl9vcHRpb25zJHNlZWQiLCJzZWVkIiwic2VlZFByZWZpeCIsImdldE5leHRDb3VudGVySWQiLCJzdHlsZVNoZWV0IiwidGhlbWUiLCJjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSIsInNoZWV0c0NhY2hlIiwic2hlZXRzTWFuYWdlciIsInNoZWV0c1JlZ2lzdHJ5IiwiU3R5bGVzQ29udGV4dCIsImluZGV4Q291bnRlciIsImluY3JlbWVudCIsImRlZXBtZXJnZSIsImNsb25lIiwib3V0cHV0IiwiZ2V0U3R5bGVzQ3JlYXRvciIsInN0eWxlc09yQ3JlYXRvciIsInRoZW1pbmdFbmFibGVkIiwib3ZlcnJpZGVzIiwic3R5bGVzV2l0aE92ZXJyaWRlcyIsImdldENsYXNzZXMiLCJzdHlsZXNPcHRpb25zIiwiY2FjaGVDbGFzc2VzIiwibGFzdFByb3AiLCJsYXN0SlNTIiwiZ2VuZXJhdGUiLCJzdHlsZXNDcmVhdG9yIiwic2hlZXRNYW5hZ2VyIiwic3RhdGljU2hlZXQiLCJkeW5hbWljU3R5bGVzIiwiZmxpcCIsImRpcmVjdGlvbiIsInNlcnZlckdlbmVyYXRlQ2xhc3NOYW1lIiwiZ2V0RHluYW1pY1N0eWxlcyIsImV4dHJhY3RlZCIsImR5bmFtaWNTaGVldCIsIl9yZWY0IiwidXNlU3luY2hyb25vdXNFZmZlY3QiLCJjdXJyZW50S2V5IiwibWFrZVN0eWxlcyIsImNsYXNzTmFtZVByZWZpeE9wdGlvbiIsIl9vcHRpb25zJGRlZmF1bHRUaGVtZSIsImRlZmF1bHRUaGVtZSIsInN0eWxlc09wdGlvbnMyIiwidXNlU3R5bGVzIiwic2hvdWxkVXBkYXRlIiwiZ2V0VGhlbWVQcm9wcyIsIl9vcHRpb25zJHdpdGhUaGVtZSIsIndpdGhUaGVtZSIsIldpdGhTdHlsZXMiLCJvdGhlciIsIm1vcmUiLCJjcmVhdGVCcmVha3BvaW50cyIsImJyZWFrcG9pbnRzIiwiX2JyZWFrcG9pbnRzJHZhbHVlcyIsInhzIiwic20iLCJ4bCIsIl9icmVha3BvaW50cyR1bml0IiwiX2JyZWFrcG9pbnRzJHN0ZXAiLCJiZXR3ZWVuIiwiZW5kSW5kZXgiLCJkb3duIiwidXBwZXJib3VuZCIsImNyZWF0ZU1peGlucyIsInNwYWNpbmciLCJfdG9vbGJhciIsImd1dHRlcnMiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsInRvb2xiYXIiLCJmb3JtYXRNdWlFcnJvck1lc3NhZ2UiLCJjb2RlIiwiYmxhY2siLCJ3aGl0ZSIsIjUwIiwiMTAwIiwiMjAwIiwiMzAwIiwiNDAwIiwiNTAwIiwiNjAwIiwiNzAwIiwiODAwIiwiOTAwIiwiQTEwMCIsIkEyMDAiLCJBNDAwIiwiQTcwMCIsImRlY29tcG9zZUNvbG9yIiwiY29sb3JzIiwicm91bmQiLCJoZXhUb1JnYiIsIm1hcmtlciIsInJlY29tcG9zZUNvbG9yIiwiZ2V0THVtaW5hbmNlIiwicmdiIiwiaHNsVG9SZ2IiLCJwb3ciLCJ0b0ZpeGVkIiwiZGFya2VuIiwiY29lZmZpY2llbnQiLCJsaWdodGVuIiwibGlnaHQiLCJwcmltYXJ5Iiwic2Vjb25kYXJ5IiwiaGludCIsImRpdmlkZXIiLCJiYWNrZ3JvdW5kIiwicGFwZXIiLCJhY3RpdmUiLCJob3ZlciIsImhvdmVyT3BhY2l0eSIsInNlbGVjdGVkT3BhY2l0eSIsImRpc2FibGVkQmFja2dyb3VuZCIsImRpc2FibGVkT3BhY2l0eSIsImZvY3VzT3BhY2l0eSIsImFjdGl2YXRlZE9wYWNpdHkiLCJkYXJrIiwiaWNvbiIsImFkZExpZ2h0T3JEYXJrIiwiaW50ZW50Iiwic2hhZGUiLCJ0b25hbE9mZnNldCIsInRvbmFsT2Zmc2V0TGlnaHQiLCJ0b25hbE9mZnNldERhcmsiLCJtYWluIiwiY3JlYXRlUGFsZXR0ZSIsInBhbGV0dGUiLCJfcGFsZXR0ZSRwcmltYXJ5IiwiX3BhbGV0dGUkc2Vjb25kYXJ5IiwiX3BhbGV0dGUkZXJyb3IiLCJfcGFsZXR0ZSR3YXJuaW5nIiwid2FybmluZyIsIl9wYWxldHRlJGluZm8iLCJpbmZvIiwiX3BhbGV0dGUkc3VjY2VzcyIsInN1Y2Nlc3MiLCJfcGFsZXR0ZSR0eXBlIiwiX3BhbGV0dGUkY29udHJhc3RUaHJlIiwiY29udHJhc3RUaHJlc2hvbGQiLCJfcGFsZXR0ZSR0b25hbE9mZnNldCIsImdldENvbnRyYXN0VGV4dCIsImZvcmVncm91bmQiLCJsdW1BIiwibHVtQiIsImdldENvbnRyYXN0UmF0aW8iLCJhdWdtZW50Q29sb3IiLCJtYWluU2hhZGUiLCJsaWdodFNoYWRlIiwiZGFya1NoYWRlIiwiY29udHJhc3RUZXh0IiwiY29tbW9uIiwiZ3JleSIsImNhc2VBbGxDYXBzIiwidGV4dFRyYW5zZm9ybSIsImNyZWF0ZVR5cG9ncmFwaHkiLCJ0eXBvZ3JhcGh5IiwiX3JlZiRmb250RmFtaWx5IiwiZm9udEZhbWlseSIsIl9yZWYkZm9udFNpemUiLCJmb250U2l6ZSIsIl9yZWYkZm9udFdlaWdodExpZ2h0IiwiZm9udFdlaWdodExpZ2h0IiwiX3JlZiRmb250V2VpZ2h0UmVndWxhIiwiZm9udFdlaWdodFJlZ3VsYXIiLCJfcmVmJGZvbnRXZWlnaHRNZWRpdW0iLCJmb250V2VpZ2h0TWVkaXVtIiwiX3JlZiRmb250V2VpZ2h0Qm9sZCIsImZvbnRXZWlnaHRCb2xkIiwiX3JlZiRodG1sRm9udFNpemUiLCJodG1sRm9udFNpemUiLCJhbGxWYXJpYW50cyIsInB4VG9SZW0yIiwicHhUb1JlbSIsImNvZWYiLCJidWlsZFZhcmlhbnQiLCJsZXR0ZXJTcGFjaW5nIiwiY2FzaW5nIiwidmFyaWFudHMiLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiaDYiLCJzdWJ0aXRsZTEiLCJzdWJ0aXRsZTIiLCJib2R5MSIsImJvZHkyIiwiY2FwdGlvbiIsIm92ZXJsaW5lIiwiY3JlYXRlU2hhZG93IiwiYm9yZGVyUmFkaXVzIiwiZGVmYXVsdEJyZWFrcG9pbnRzIiwicHJvcGVydGllcyIsImRpcmVjdGlvbnMiLCJhbGlhc2VzIiwibWFyZ2luWCIsIm1hcmdpblkiLCJwYWRkaW5nWCIsInBhZGRpbmdZIiwiZ2V0Q3NzUHJvcGVydGllcyIsIl9wcm9wJHNwbGl0MiIsImRpciIsInNwYWNpbmdLZXlzIiwiY3JlYXRlVW5hcnlTcGFjaW5nIiwidGhlbWVTcGFjaW5nIiwiYWJzIiwiZ2V0U3R5bGVGcm9tUHJvcFZhbHVlIiwiY3NzUHJvcGVydGllcyIsInRyYW5zZm9ybWVyIiwiY3NzUHJvcGVydHkiLCJ0cmFuc2Zvcm1lZCIsInN0eWxlRnJvbVByb3BWYWx1ZSIsInRoZW1lQnJlYWtwb2ludHMiLCJfdGhlbWVCcmVha3BvaW50cyIsImJyZWFrcG9pbnQiLCJoYW5kbGVCcmVha3BvaW50cyIsImZpbHRlclByb3BzIiwiY3JlYXRlU3BhY2luZyIsInNwYWNpbmdJbnB1dCIsIm11aSIsImFyZ3VtZW50IiwiZWFzaW5nIiwiZWFzZUluT3V0IiwiZWFzZU91dCIsImVhc2VJbiIsInNoYXJwIiwiZHVyYXRpb24iLCJzaG9ydGVzdCIsInNob3J0ZXIiLCJzaG9ydCIsInN0YW5kYXJkIiwiY29tcGxleCIsImVudGVyaW5nU2NyZWVuIiwibGVhdmluZ1NjcmVlbiIsImZvcm1hdE1zIiwibWlsbGlzZWNvbmRzIiwiX29wdGlvbnMkZHVyYXRpb24iLCJkdXJhdGlvbk9wdGlvbiIsIl9vcHRpb25zJGVhc2luZyIsImVhc2luZ09wdGlvbiIsIl9vcHRpb25zJGRlbGF5IiwiYW5pbWF0ZWRQcm9wIiwiZ2V0QXV0b0hlaWdodER1cmF0aW9uIiwibW9iaWxlU3RlcHBlciIsInNwZWVkRGlhbCIsImFwcEJhciIsImRyYXdlciIsIm1vZGFsIiwic25hY2tiYXIiLCJ0b29sdGlwIiwiX29wdGlvbnMkYnJlYWtwb2ludHMiLCJicmVha3BvaW50c0lucHV0IiwiX29wdGlvbnMkbWl4aW5zIiwibWl4aW5zSW5wdXQiLCJfb3B0aW9ucyRwYWxldHRlIiwicGFsZXR0ZUlucHV0IiwiX29wdGlvbnMkdHlwb2dyYXBoeSIsInR5cG9ncmFwaHlJbnB1dCIsIm11aVRoZW1lIiwic2hhZG93cyIsInRyYW5zaXRpb25zIiwiY2FwaXRhbGl6ZSIsIl9wcm9wcyRjb2xvciIsIl9wcm9wcyRjb21wb25lbnQiLCJfcHJvcHMkZm9udFNpemUiLCJodG1sQ29sb3IiLCJ0aXRsZUFjY2VzcyIsIl9wcm9wcyR2aWV3Qm94Iiwidmlld0JveCIsImZvY3VzYWJsZSIsInJvbGUiLCJmaWxsIiwiY29sb3JQcmltYXJ5IiwiY29sb3JTZWNvbmRhcnkiLCJjb2xvckFjdGlvbiIsImNvbG9yRXJyb3IiLCJjb2xvckRpc2FibGVkIiwiZm9udFNpemVJbmhlcml0IiwiZm9udFNpemVTbWFsbCIsImZvbnRTaXplTGFyZ2UiXSwibWFwcGluZ3MiOiJhQUNFLFNBQVNBLEVBQXFCQyxHQVE3QixJQVBBLElBTUlDLEVBQVVDLEVBTlZDLEVBQVdILEVBQUssR0FDaEJJLEVBQWNKLEVBQUssR0FDbkJLLEVBQWlCTCxFQUFLLEdBSUhNLEVBQUksRUFBR0MsRUFBVyxHQUNwQ0QsRUFBSUgsRUFBU0ssT0FBUUYsSUFDekJKLEVBQVVDLEVBQVNHLEdBQ2hCRyxPQUFPQyxVQUFVQyxlQUFlQyxLQUFLQyxFQUFpQlgsSUFBWVcsRUFBZ0JYLElBQ3BGSyxFQUFTTyxLQUFLRCxFQUFnQlgsR0FBUyxJQUV4Q1csRUFBZ0JYLEdBQVcsRUFFNUIsSUFBSUQsS0FBWUcsRUFDWkssT0FBT0MsVUFBVUMsZUFBZUMsS0FBS1IsRUFBYUgsS0FDcERjLEVBQVFkLEdB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QVlwQixVQUFVLElBQUssa0JBQWtCaUYsT0FIbDJCLElBR3E0QixNQUFNc0UsS0FBSyxLQUlqN0IsSUFDZSxHQURELENBQUMsT0FBUThnRixHQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJQSxHQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJQSxHQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJQSxHQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFB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RyxNQUMzSytHLFVBQVcsUUFDWEQsUUFBU0EsRUFDVDczRSxNQUFPMDNFLEVBQ1AsZUFBZUMsUUFBYzl0RixFQUM3Qmt1RixLQUFNSixFQUFjLFdBQVE5dEYsRUFDNUJpQixJQUFLQSxHQUNKay9FLEdBQVExNUUsRUFBVXFuRixFQUEyQixnQkFBb0IsUUFBUyxLQUFNQSxHQUFlLFNBc0VwRyxHQUFRenNGLFFBQVUsVUFDSCxXQXhKSyxTQUFnQmc4RSxHQUNsQyxNQUFPLENBRUwvNEUsS0FBTSxDQUNKKzFFLFdBQVksT0FDWnBrRSxNQUFPLE1BQ1BGLE9BQVEsTUFDUitrQyxRQUFTLGVBQ1RxekMsS0FBTSxlQUNOdjRELFdBQVksRUFDWnN4RCxTQUFVN0osRUFBTXlKLFdBQVdpQixRQUFRLElBQ25DcjVELFdBQVkydUQsRUFBTW1RLFlBQVkxdkYsT0FBTyxPQUFRLENBQzNDd3RGLFNBQVVqTyxFQUFNbVEsWUFBWWxDLFNBQVNFLFdBS3pDNEMsYUFBYyxDQUNaajRFLE1BQU9rbkUsRUFBTTRILFFBQVF4QixRQUFRc0IsTUFJL0JzSixlQUFnQixDQUNkbDRFLE1BQU9rbkUsRUFBTTRILFFBQVF2QixVQUFVcUIsTUFJakN1SixZQUFhLENBQ1huNEUsTUFBT2tuRSxFQUFNNEgsUUFBUXR4QyxPQUFPb3dDLFFBSTlCd0ssV0FBWSxDQUNWcDRFLE1BQU9rbkUsRUFBTTRILFFBQVFsbEYsTUFBTWdsRixNQUk3QnlKLGNBQWUsQ0FDYnI0RSxNQUFPa25FLEVBQU00SCxRQUFRdHhDLE9BQU9wbkIsVUFJOUJraUUsZ0JBQWlCLENBQ2Z2SCxTQUFVLFdBSVp3SCxjQUFlLENBQ2J4SCxTQUFVN0osRUFBTXlKLFdBQVdpQixRQUFRLEtBSXJDNEcsY0FBZSxDQUNiekgsU0FBVTdKLEVBQU15SixXQUFXaUIsUUFBUSxRQW1HUCxDQUNoQy9xRixLQUFNLGNBRE8sQ0FFWiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xuIFx0ZnVuY3Rpb24gd2VicGFja0pzb25wQ2FsbGJhY2soZGF0YSkge1xuIFx0XHR2YXIgY2h1bmtJZHMgPSBkYXRhWzBdO1xuIFx0XHR2YXIgbW9yZU1vZHVsZXMgPSBkYXRhWzFdO1xuIFx0XHR2YXIgZXhlY3V0ZU1vZHVsZXMgPSBkYXRhWzJdO1xuXG4gXHRcdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuIFx0XHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcbiBcdFx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMCwgcmVzb2x2ZXMgPSBbXTtcbiBcdFx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiYgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG4gXHRcdFx0XHRyZXNvbHZlcy5wdXNoKGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSk7XG4gXHRcdFx0fVxuIFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG4gXHRcdH1cbiBcdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRpZihwYXJlbnRKc29ucEZ1bmN0aW9uKSBwYXJlbnRKc29ucEZ1bmN0aW9uKGRhdGEpO1xuXG4gXHRcdHdoaWxlKHJlc29sdmVzLmxlbmd0aCkge1xuIFx0XHRcdHJlc29sdmVzLnNoaWZ0KCkoKTtcbiBcdFx0fVxuXG4gXHRcdC8vIGFkZCBlbnRyeSBtb2R1bGVzIGZyb20gbG9hZGVkIGNodW5rIHRvIGRlZmVycmVkIGxpc3RcbiBcdFx0ZGVmZXJyZWRNb2R1bGVzLnB1c2guYXBwbHkoZGVmZXJyZWRNb2R1bGVzLCBleGVjdXRlTW9kdWxlcyB8fCBbXSk7XG5cbiBcdFx0Ly8gcnVuIGRlZmVycmVkIG1vZHVsZXMgd2hlbiBhbGwgY2h1bmtzIHJlYWR5XG4gXHRcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIFx0fTtcbiBcdGZ1bmN0aW9uIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCkge1xuIFx0XHR2YXIgcmVzdWx0O1xuIFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZGVmZXJyZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0dmFyIGRlZmVycmVkTW9kdWxlID0gZGVmZXJyZWRNb2R1bGVzW2ldO1xuIFx0XHRcdHZhciBmdWxmaWxsZWQgPSB0cnVlO1xuIFx0XHRcdGZvcih2YXIgaiA9IDE7IGogPCBkZWZlcnJlZE1vZHVsZS5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0dmFyIGRlcElkID0gZGVmZXJyZWRNb2R1bGVbal07XG4gXHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua3NbZGVwSWRdICE9PSAwKSBmdWxmaWxsZWQgPSBmYWxzZTtcbiBcdFx0XHR9XG4gXHRcdFx0aWYoZnVsZmlsbGVkKSB7XG4gXHRcdFx0XHRkZWZlcnJlZE1vZHVsZXMuc3BsaWNlKGktLSwgMSk7XG4gXHRcdFx0XHRyZXN1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IGRlZmVycmVkTW9kdWxlWzBdKTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHRyZXR1cm4gcmVzdWx0O1xuIFx0fVxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuIFx0Ly8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4gXHQvLyBQcm9taXNlID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxuIFx0dmFyIGluc3RhbGxlZENodW5rcyA9IHtcbiBcdFx0MDogMFxuIFx0fTtcblxuIFx0dmFyIGRlZmVycmVkTW9kdWxlcyA9IFtdO1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9cIjtcblxuIFx0dmFyIGpzb25wQXJyYXkgPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gfHwgW107XG4gXHR2YXIgb2xkSnNvbnBGdW5jdGlvbiA9IGpzb25wQXJyYXkucHVzaC5iaW5kKGpzb25wQXJyYXkpO1xuIFx0anNvbnBBcnJheS5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2s7XG4gXHRqc29ucEFycmF5ID0ganNvbnBBcnJheS5zbGljZSgpO1xuIFx0Zm9yKHZhciBpID0gMDsgaSA8IGpzb25wQXJyYXkubGVuZ3RoOyBpKyspIHdlYnBhY2tKc29ucENhbGxiYWNrKGpzb25wQXJyYXlbaV0pO1xuIFx0dmFyIHBhcmVudEpzb25wRnVuY3Rpb24gPSBvbGRKc29ucEZ1bmN0aW9uO1xuXG5cbiBcdC8vIGFkZCBlbnRyeSBtb2R1bGUgdG8gZGVmZXJyZWQgbGlzdFxuIFx0ZGVmZXJyZWRNb2R1bGVzLnB1c2goWzU2LDFdKTtcbiBcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gcmVhZHlcbiBcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIGludmFyaWFudCA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgK1xuICAgICAgICAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJnc1thcmdJbmRleCsrXTsgfSlcbiAgICAgICk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG4iLCJmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgIFwiZGVmYXVsdFwiOiBvYmpcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0OyIsInZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xuZnVuY3Rpb24gd2FybmluZyhjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgaWYgKCFpc1Byb2R1Y3Rpb24pIHtcbiAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHRleHQgPSBcIldhcm5pbmc6IFwiICsgbWVzc2FnZTtcblxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUud2Fybih0ZXh0KTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgdGhyb3cgRXJyb3IodGV4dCk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB3YXJuaW5nO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlU3ZnSWNvbjtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBtYXRlcmlhbC11aS9jb3JlL1N2Z0ljb25cIikpO1xuXG5mdW5jdGlvbiBjcmVhdGVTdmdJY29uKHBhdGgsIGRpc3BsYXlOYW1lKSB7XG4gIHZhciBDb21wb25lbnQgPSBfcmVhY3QuZGVmYXVsdC5tZW1vKF9yZWFjdC5kZWZhdWx0LmZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU3ZnSWNvbi5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgIHJlZjogcmVmXG4gICAgfSwgcHJvcHMpLCBwYXRoKTtcbiAgfSkpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gXCJcIi5jb25jYXQoZGlzcGxheU5hbWUsIFwiSWNvblwiKTtcbiAgfVxuXG4gIENvbXBvbmVudC5tdWlOYW1lID0gX1N2Z0ljb24uZGVmYXVsdC5tdWlOYW1lO1xuICByZXR1cm4gQ29tcG9uZW50O1xufSIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlOiB0cnVlLFxuICBjb250ZXh0VHlwZXM6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIG1peGluczogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICByZW5kZXI6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZVxufTtcbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIGNvbXBhcmU6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tyZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblRZUEVfU1RBVElDU1tyZWFjdElzLk1lbW9dID0gTUVNT19TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAvLyBSZWFjdCB2MTYuMTEgYW5kIGJlbG93XG4gIGlmIChyZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgfSAvLyBSZWFjdCB2MTYuMTIgYW5kIGFib3ZlXG5cblxuICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiXG52YXIgc3BhY2UgPSByZXF1aXJlKCd0by1zcGFjZS1jYXNlJylcblxuLyoqXG4gKiBFeHBvcnQuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB0b0NhbWVsQ2FzZVxuXG4vKipcbiAqIENvbnZlcnQgYSBgc3RyaW5nYCB0byBjYW1lbCBjYXNlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuXG5mdW5jdGlvbiB0b0NhbWVsQ2FzZShzdHJpbmcpIHtcbiAgcmV0dXJuIHNwYWNlKHN0cmluZykucmVwbGFjZSgvXFxzKFxcdykvZywgZnVuY3Rpb24gKG1hdGNoZXMsIGxldHRlcikge1xuICAgIHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKVxuICB9KVxufVxuIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHBvbnlmaWxsIGZyb20gJy4vcG9ueWZpbGwuanMnO1xuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IG1vZHVsZTtcbn0gZWxzZSB7XG4gIHJvb3QgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuXG52YXIgcmVzdWx0ID0gcG9ueWZpbGwocm9vdCk7XG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5cbnZhciBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgPSAxMDczNzQxODIzO1xudmFyIGNvbW1vbmpzR2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB7fTtcblxuZnVuY3Rpb24gZ2V0VW5pcXVlSWQoKSB7XG4gIHZhciBrZXkgPSAnX19nbG9iYWxfdW5pcXVlX2lkX18nO1xuICByZXR1cm4gY29tbW9uanNHbG9iYWxba2V5XSA9IChjb21tb25qc0dsb2JhbFtrZXldIHx8IDApICsgMTtcbn1cblxuZnVuY3Rpb24gb2JqZWN0SXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50RW1pdHRlcih2YWx1ZSkge1xuICB2YXIgaGFuZGxlcnMgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBvbjogZnVuY3Rpb24gb24oaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICB9LFxuICAgIG9mZjogZnVuY3Rpb24gb2ZmKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzID0gaGFuZGxlcnMuZmlsdGVyKGZ1bmN0aW9uIChoKSB7XG4gICAgICAgIHJldHVybiBoICE9PSBoYW5kbGVyO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXIodmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gb25seUNoaWxkKGNoaWxkcmVuKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuWzBdIDogY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0Q29udGV4dChkZWZhdWx0VmFsdWUsIGNhbGN1bGF0ZUNoYW5nZWRCaXRzKSB7XG4gIHZhciBfUHJvdmlkZXIkY2hpbGRDb250ZXgsIF9Db25zdW1lciRjb250ZXh0VHlwZTtcblxuICB2YXIgY29udGV4dFByb3AgPSAnX19jcmVhdGUtcmVhY3QtY29udGV4dC0nICsgZ2V0VW5pcXVlSWQoKSArICdfXyc7XG5cbiAgdmFyIFByb3ZpZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzTG9vc2UoUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gUHJvdmlkZXIoKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF90aGlzID0gX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpcy5lbWl0dGVyID0gY3JlYXRlRXZlbnRFbWl0dGVyKF90aGlzLnByb3BzLnZhbHVlKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gUHJvdmlkZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW2NvbnRleHRQcm9wXSA9IHRoaXMuZW1pdHRlciwgX3JlZjtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXMucHJvcHMudmFsdWUgIT09IG5leHRQcm9wcy52YWx1ZSkge1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSBuZXh0UHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBjaGFuZ2VkQml0cztcblxuICAgICAgICBpZiAob2JqZWN0SXMob2xkVmFsdWUsIG5ld1ZhbHVlKSkge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IHR5cGVvZiBjYWxjdWxhdGVDaGFuZ2VkQml0cyA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGN1bGF0ZUNoYW5nZWRCaXRzKG9sZFZhbHVlLCBuZXdWYWx1ZSkgOiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQ7XG5cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgd2FybmluZygoY2hhbmdlZEJpdHMgJiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQpID09PSBjaGFuZ2VkQml0cywgJ2NhbGN1bGF0ZUNoYW5nZWRCaXRzOiBFeHBlY3RlZCB0aGUgcmV0dXJuIHZhbHVlIHRvIGJlIGEgJyArICczMS1iaXQgaW50ZWdlci4gSW5zdGVhZCByZWNlaXZlZDogJyArIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGFuZ2VkQml0cyB8PSAwO1xuXG4gICAgICAgICAgaWYgKGNoYW5nZWRCaXRzICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuc2V0KG5leHRQcm9wcy52YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfTtcblxuICAgIHJldHVybiBQcm92aWRlcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIFByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0gKF9Qcm92aWRlciRjaGlsZENvbnRleCA9IHt9LCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLCBfUHJvdmlkZXIkY2hpbGRDb250ZXgpO1xuXG4gIHZhciBDb25zdW1lciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudDIpIHtcbiAgICBfaW5oZXJpdHNMb29zZShDb25zdW1lciwgX0NvbXBvbmVudDIpO1xuXG4gICAgZnVuY3Rpb24gQ29uc3VtZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyO1xuXG4gICAgICBfdGhpczIgPSBfQ29tcG9uZW50Mi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpczIuc3RhdGUgPSB7XG4gICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgfTtcblxuICAgICAgX3RoaXMyLm9uVXBkYXRlID0gZnVuY3Rpb24gKG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gX3RoaXMyLm9ic2VydmVkQml0cyB8IDA7XG5cbiAgICAgICAgaWYgKChvYnNlcnZlZEJpdHMgJiBjaGFuZ2VkQml0cykgIT09IDApIHtcbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBfdGhpczI7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90bzIgPSBDb25zdW1lci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IG5leHRQcm9wcy5vYnNlcnZlZEJpdHM7XG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vbih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IHRoaXMucHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub2ZmKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5nZXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90bzIucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIG9ubHlDaGlsZCh0aGlzLnByb3BzLmNoaWxkcmVuKSh0aGlzLnN0YXRlLnZhbHVlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIENvbnN1bWVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgQ29uc3VtZXIuY29udGV4dFR5cGVzID0gKF9Db25zdW1lciRjb250ZXh0VHlwZSA9IHt9LCBfQ29uc3VtZXIkY29udGV4dFR5cGVbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlKTtcbiAgcmV0dXJuIHtcbiAgICBQcm92aWRlcjogUHJvdmlkZXIsXG4gICAgQ29uc3VtZXI6IENvbnN1bWVyXG4gIH07XG59XG5cbnZhciBpbmRleCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQgfHwgY3JlYXRlUmVhY3RDb250ZXh0O1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn0iLCJ2YXIgaXNhcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG4vKipcbiAqIEV4cG9zZSBgcGF0aFRvUmVnZXhwYC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBwYXRoVG9SZWdleHBcbm1vZHVsZS5leHBvcnRzLnBhcnNlID0gcGFyc2Vcbm1vZHVsZS5leHBvcnRzLmNvbXBpbGUgPSBjb21waWxlXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb0Z1bmN0aW9uID0gdG9rZW5zVG9GdW5jdGlvblxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9SZWdFeHAgPSB0b2tlbnNUb1JlZ0V4cFxuXG4vKipcbiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xudmFyIFBBVEhfUkVHRVhQID0gbmV3IFJlZ0V4cChbXG4gIC8vIE1hdGNoIGVzY2FwZWQgY2hhcmFjdGVycyB0aGF0IHdvdWxkIG90aGVyd2lzZSBhcHBlYXIgaW4gZnV0dXJlIG1hdGNoZXMuXG4gIC8vIFRoaXMgYWxsb3dzIHRoZSB1c2VyIHRvIGVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgdGhhdCB3b24ndCB0cmFuc2Zvcm0uXG4gICcoXFxcXFxcXFwuKScsXG4gIC8vIE1hdGNoIEV4cHJlc3Mtc3R5bGUgcGFyYW1ldGVycyBhbmQgdW4tbmFtZWQgcGFyYW1ldGVycyB3aXRoIGEgcHJlZml4XG4gIC8vIGFuZCBvcHRpb25hbCBzdWZmaXhlcy4gTWF0Y2hlcyBhcHBlYXIgYXM6XG4gIC8vXG4gIC8vIFwiLzp0ZXN0KFxcXFxkKyk/XCIgPT4gW1wiL1wiLCBcInRlc3RcIiwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgXCI/XCIsIHVuZGVmaW5lZF1cbiAgLy8gXCIvcm91dGUoXFxcXGQrKVwiICA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAvLyBcIi8qXCIgICAgICAgICAgICA9PiBbXCIvXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCIqXCJdXG4gICcoW1xcXFwvLl0pPyg/Oig/OlxcXFw6KFxcXFx3KykoPzpcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKT98XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSkoWysqP10pP3woXFxcXCopKSdcbl0uam9pbignfCcpLCAnZycpXG5cbi8qKlxuICogUGFyc2UgYSBzdHJpbmcgZm9yIHRoZSByYXcgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IUFycmF5fVxuICovXG5mdW5jdGlvbiBwYXJzZSAoc3RyLCBvcHRpb25zKSB7XG4gIHZhciB0b2tlbnMgPSBbXVxuICB2YXIga2V5ID0gMFxuICB2YXIgaW5kZXggPSAwXG4gIHZhciBwYXRoID0gJydcbiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJ1xuICB2YXIgcmVzXG5cbiAgd2hpbGUgKChyZXMgPSBQQVRIX1JFR0VYUC5leGVjKHN0cikpICE9IG51bGwpIHtcbiAgICB2YXIgbSA9IHJlc1swXVxuICAgIHZhciBlc2NhcGVkID0gcmVzWzFdXG4gICAgdmFyIG9mZnNldCA9IHJlcy5pbmRleFxuICAgIHBhdGggKz0gc3RyLnNsaWNlKGluZGV4LCBvZmZzZXQpXG4gICAgaW5kZXggPSBvZmZzZXQgKyBtLmxlbmd0aFxuXG4gICAgLy8gSWdub3JlIGFscmVhZHkgZXNjYXBlZCBzZXF1ZW5jZXMuXG4gICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgIHBhdGggKz0gZXNjYXBlZFsxXVxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHN0cltpbmRleF1cbiAgICB2YXIgcHJlZml4ID0gcmVzWzJdXG4gICAgdmFyIG5hbWUgPSByZXNbM11cbiAgICB2YXIgY2FwdHVyZSA9IHJlc1s0XVxuICAgIHZhciBncm91cCA9IHJlc1s1XVxuICAgIHZhciBtb2RpZmllciA9IHJlc1s2XVxuICAgIHZhciBhc3RlcmlzayA9IHJlc1s3XVxuXG4gICAgLy8gUHVzaCB0aGUgY3VycmVudCBwYXRoIG9udG8gdGhlIHRva2Vucy5cbiAgICBpZiAocGF0aCkge1xuICAgICAgdG9rZW5zLnB1c2gocGF0aClcbiAgICAgIHBhdGggPSAnJ1xuICAgIH1cblxuICAgIHZhciBwYXJ0aWFsID0gcHJlZml4ICE9IG51bGwgJiYgbmV4dCAhPSBudWxsICYmIG5leHQgIT09IHByZWZpeFxuICAgIHZhciByZXBlYXQgPSBtb2RpZmllciA9PT0gJysnIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgb3B0aW9uYWwgPSBtb2RpZmllciA9PT0gJz8nIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgZGVsaW1pdGVyID0gcmVzWzJdIHx8IGRlZmF1bHREZWxpbWl0ZXJcbiAgICB2YXIgcGF0dGVybiA9IGNhcHR1cmUgfHwgZ3JvdXBcblxuICAgIHRva2Vucy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUgfHwga2V5KyssXG4gICAgICBwcmVmaXg6IHByZWZpeCB8fCAnJyxcbiAgICAgIGRlbGltaXRlcjogZGVsaW1pdGVyLFxuICAgICAgb3B0aW9uYWw6IG9wdGlvbmFsLFxuICAgICAgcmVwZWF0OiByZXBlYXQsXG4gICAgICBwYXJ0aWFsOiBwYXJ0aWFsLFxuICAgICAgYXN0ZXJpc2s6ICEhYXN0ZXJpc2ssXG4gICAgICBwYXR0ZXJuOiBwYXR0ZXJuID8gZXNjYXBlR3JvdXAocGF0dGVybikgOiAoYXN0ZXJpc2sgPyAnLionIDogJ1teJyArIGVzY2FwZVN0cmluZyhkZWxpbWl0ZXIpICsgJ10rPycpXG4gICAgfSlcbiAgfVxuXG4gIC8vIE1hdGNoIGFueSBjaGFyYWN0ZXJzIHN0aWxsIHJlbWFpbmluZy5cbiAgaWYgKGluZGV4IDwgc3RyLmxlbmd0aCkge1xuICAgIHBhdGggKz0gc3RyLnN1YnN0cihpbmRleClcbiAgfVxuXG4gIC8vIElmIHRoZSBwYXRoIGV4aXN0cywgcHVzaCBpdCBvbnRvIHRoZSBlbmQuXG4gIGlmIChwYXRoKSB7XG4gICAgdG9rZW5zLnB1c2gocGF0aClcbiAgfVxuXG4gIHJldHVybiB0b2tlbnNcbn1cblxuLyoqXG4gKiBDb21waWxlIGEgc3RyaW5nIHRvIGEgdGVtcGxhdGUgZnVuY3Rpb24gZm9yIHRoZSBwYXRoLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFmdW5jdGlvbihPYmplY3Q9LCBPYmplY3Q9KX1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZSAoc3RyLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb0Z1bmN0aW9uKHBhcnNlKHN0ciwgb3B0aW9ucyksIG9wdGlvbnMpXG59XG5cbi8qKlxuICogUHJldHRpZXIgZW5jb2Rpbmcgb2YgVVJJIHBhdGggc2VnbWVudHMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvW1xcLz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFbmNvZGUgdGhlIGFzdGVyaXNrIHBhcmFtZXRlci4gU2ltaWxhciB0byBgcHJldHR5YCwgYnV0IGFsbG93cyBzbGFzaGVzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlQXN0ZXJpc2sgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBtZXRob2QgZm9yIHRyYW5zZm9ybWluZyB0b2tlbnMgaW50byB0aGUgcGF0aCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9GdW5jdGlvbiAodG9rZW5zLCBvcHRpb25zKSB7XG4gIC8vIENvbXBpbGUgYWxsIHRoZSB0b2tlbnMgaW50byByZWdleHBzLlxuICB2YXIgbWF0Y2hlcyA9IG5ldyBBcnJheSh0b2tlbnMubGVuZ3RoKVxuXG4gIC8vIENvbXBpbGUgYWxsIHRoZSBwYXR0ZXJucyBiZWZvcmUgY29tcGlsYXRpb24uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHR5cGVvZiB0b2tlbnNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICBtYXRjaGVzW2ldID0gbmV3IFJlZ0V4cCgnXig/OicgKyB0b2tlbnNbaV0ucGF0dGVybiArICcpJCcsIGZsYWdzKG9wdGlvbnMpKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJ1xuICAgIHZhciBkYXRhID0gb2JqIHx8IHt9XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW5cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdXG4gICAgICB2YXIgc2VnbWVudFxuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pXG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpXG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnRcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18XFwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhdHRhY2hLZXlzIChyZSwga2V5cykge1xuICByZS5rZXlzID0ga2V5c1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucyAmJiBvcHRpb25zLnNlbnNpdGl2ZSA/ICcnIDogJ2knXG59XG5cbi8qKlxuICogUHVsbCBvdXQga2V5cyBmcm9tIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHJlZ2V4cFRvUmVnZXhwIChwYXRoLCBrZXlzKSB7XG4gIC8vIFVzZSBhIG5lZ2F0aXZlIGxvb2thaGVhZCB0byBtYXRjaCBvbmx5IGNhcHR1cmluZyBncm91cHMuXG4gIHZhciBncm91cHMgPSBwYXRoLnNvdXJjZS5tYXRjaCgvXFwoKD8hXFw/KS9nKVxuXG4gIGlmIChncm91cHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgbmFtZTogaSxcbiAgICAgICAgcHJlZml4OiBudWxsLFxuICAgICAgICBkZWxpbWl0ZXI6IG51bGwsXG4gICAgICAgIG9wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgcmVwZWF0OiBmYWxzZSxcbiAgICAgICAgcGFydGlhbDogZmFsc2UsXG4gICAgICAgIGFzdGVyaXNrOiBmYWxzZSxcbiAgICAgICAgcGF0dGVybjogbnVsbFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhwYXRoLCBrZXlzKVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBhcnJheSBpbnRvIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gIHBhdGhcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnRzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0cy5wdXNoKHBhdGhUb1JlZ2V4cChwYXRoW2ldLCBrZXlzLCBvcHRpb25zKS5zb3VyY2UpXG4gIH1cblxuICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKD86JyArIHBhcnRzLmpvaW4oJ3wnKSArICcpJywgZmxhZ3Mob3B0aW9ucykpXG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocmVnZXhwLCBrZXlzKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIHBhdGggcmVnZXhwIGZyb20gc3RyaW5nIGlucHV0LlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb1JlZ0V4cChwYXJzZShwYXRoLCBvcHRpb25zKSwga2V5cywgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBmdW5jdGlvbiBmb3IgdGFraW5nIHRva2VucyBhbmQgcmV0dXJuaW5nIGEgUmVnRXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gICAgICAgICAgdG9rZW5zXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19IGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9SZWdFeHAgKHRva2Vucywga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICB2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3RcbiAgdmFyIGVuZCA9IG9wdGlvbnMuZW5kICE9PSBmYWxzZVxuICB2YXIgcm91dGUgPSAnJ1xuXG4gIC8vIEl0ZXJhdGUgb3ZlciB0aGUgdG9rZW5zIGFuZCBjcmVhdGUgb3VyIHJlZ2V4cCBzdHJpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKHRva2VuKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcHJlZml4ID0gZXNjYXBlU3RyaW5nKHRva2VuLnByZWZpeClcbiAgICAgIHZhciBjYXB0dXJlID0gJyg/OicgKyB0b2tlbi5wYXR0ZXJuICsgJyknXG5cbiAgICAgIGtleXMucHVzaCh0b2tlbilcblxuICAgICAgaWYgKHRva2VuLnJlcGVhdCkge1xuICAgICAgICBjYXB0dXJlICs9ICcoPzonICsgcHJlZml4ICsgY2FwdHVyZSArICcpKidcbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgIGlmICghdG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgIGNhcHR1cmUgPSAnKD86JyArIHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSk/J1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyk/J1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpJ1xuICAgICAgfVxuXG4gICAgICByb3V0ZSArPSBjYXB0dXJlXG4gICAgfVxuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGVzY2FwZVN0cmluZyhvcHRpb25zLmRlbGltaXRlciB8fCAnLycpXG4gIHZhciBlbmRzV2l0aERlbGltaXRlciA9IHJvdXRlLnNsaWNlKC1kZWxpbWl0ZXIubGVuZ3RoKSA9PT0gZGVsaW1pdGVyXG5cbiAgLy8gSW4gbm9uLXN0cmljdCBtb2RlIHdlIGFsbG93IGEgc2xhc2ggYXQgdGhlIGVuZCBvZiBtYXRjaC4gSWYgdGhlIHBhdGggdG9cbiAgLy8gbWF0Y2ggYWxyZWFkeSBlbmRzIHdpdGggYSBzbGFzaCwgd2UgcmVtb3ZlIGl0IGZvciBjb25zaXN0ZW5jeS4gVGhlIHNsYXNoXG4gIC8vIGlzIHZhbGlkIGF0IHRoZSBlbmQgb2YgYSBwYXRoIG1hdGNoLCBub3QgaW4gdGhlIG1pZGRsZS4gVGhpcyBpcyBpbXBvcnRhbnRcbiAgLy8gaW4gbm9uLWVuZGluZyBtb2RlLCB3aGVyZSBcIi90ZXN0L1wiIHNob3VsZG4ndCBtYXRjaCBcIi90ZXN0Ly9yb3V0ZVwiLlxuICBpZiAoIXN0cmljdCkge1xuICAgIHJvdXRlID0gKGVuZHNXaXRoRGVsaW1pdGVyID8gcm91dGUuc2xpY2UoMCwgLWRlbGltaXRlci5sZW5ndGgpIDogcm91dGUpICsgJyg/OicgKyBkZWxpbWl0ZXIgKyAnKD89JCkpPydcbiAgfVxuXG4gIGlmIChlbmQpIHtcbiAgICByb3V0ZSArPSAnJCdcbiAgfSBlbHNlIHtcbiAgICAvLyBJbiBub24tZW5kaW5nIG1vZGUsIHdlIG5lZWQgdGhlIGNhcHR1cmluZyBncm91cHMgdG8gbWF0Y2ggYXMgbXVjaCBhc1xuICAgIC8vIHBvc3NpYmxlIGJ5IHVzaW5nIGEgcG9zaXRpdmUgbG9va2FoZWFkIHRvIHRoZSBlbmQgb3IgbmV4dCBwYXRoIHNlZ21lbnQuXG4gICAgcm91dGUgKz0gc3RyaWN0ICYmIGVuZHNXaXRoRGVsaW1pdGVyID8gJycgOiAnKD89JyArIGRlbGltaXRlciArICd8JCknXG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhuZXcgUmVnRXhwKCdeJyArIHJvdXRlLCBmbGFncyhvcHRpb25zKSksIGtleXMpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIHRoZSBnaXZlbiBwYXRoIHN0cmluZywgcmV0dXJuaW5nIGEgcmVndWxhciBleHByZXNzaW9uLlxuICpcbiAqIEFuIGVtcHR5IGFycmF5IGNhbiBiZSBwYXNzZWQgaW4gZm9yIHRoZSBrZXlzLCB3aGljaCB3aWxsIGhvbGQgdGhlXG4gKiBwbGFjZWhvbGRlciBrZXkgZGVzY3JpcHRpb25zLiBGb3IgZXhhbXBsZSwgdXNpbmcgYC91c2VyLzppZGAsIGBrZXlzYCB3aWxsXG4gKiBjb250YWluIGBbeyBuYW1lOiAnaWQnLCBkZWxpbWl0ZXI6ICcvJywgb3B0aW9uYWw6IGZhbHNlLCByZXBlYXQ6IGZhbHNlIH1dYC5cbiAqXG4gKiBAcGFyYW0gIHsoc3RyaW5nfFJlZ0V4cHxBcnJheSl9IHBhdGhcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0gICAgICAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBwYXRoVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgaWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gcmVnZXhwVG9SZWdleHAocGF0aCwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSlcbiAgfVxuXG4gIGlmIChpc2FycmF5KHBhdGgpKSB7XG4gICAgcmV0dXJuIGFycmF5VG9SZWdleHAoLyoqIEB0eXBlIHshQXJyYXl9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBzdHJpbmdUb1JlZ2V4cCgvKiogQHR5cGUge3N0cmluZ30gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxufVxuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiIWZ1bmN0aW9uKHJvb3QsIGZhY3RvcnkpIHtcbiAgICBcIm9iamVjdFwiID09IHR5cGVvZiBleHBvcnRzICYmIFwib2JqZWN0XCIgPT0gdHlwZW9mIG1vZHVsZSA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwicmVhY3RcIikpIDogXCJmdW5jdGlvblwiID09IHR5cGVvZiBkZWZpbmUgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbIFwicmVhY3RcIiBdLCBmYWN0b3J5KSA6IFwib2JqZWN0XCIgPT0gdHlwZW9mIGV4cG9ydHMgPyBleHBvcnRzLk1lZGlhUXVlcnkgPSBmYWN0b3J5KHJlcXVpcmUoXCJyZWFjdFwiKSkgOiByb290Lk1lZGlhUXVlcnkgPSBmYWN0b3J5KHJvb3QuUmVhY3QpO1xufShcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBzZWxmID8gc2VsZiA6IHRoaXMsIGZ1bmN0aW9uKF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMV9fKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG1vZHVsZXMpIHtcbiAgICAgICAgZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuICAgICAgICAgICAgaWYgKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSByZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiAgICAgICAgICAgIHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiAgICAgICAgICAgICAgICBpOiBtb2R1bGVJZCxcbiAgICAgICAgICAgICAgICBsOiAhMSxcbiAgICAgICAgICAgICAgICBleHBvcnRzOiB7fVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSwgXG4gICAgICAgICAgICBtb2R1bGUubCA9ICEwLCBtb2R1bGUuZXhwb3J0cztcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuICAgICAgICByZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcywgX193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcywgXG4gICAgICAgIF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuICAgICAgICAgICAgX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpIHx8IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiAhMSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiAhMCxcbiAgICAgICAgICAgICAgICBnZXQ6IGdldHRlclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuICAgICAgICAgICAgdmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb2R1bGUuZGVmYXVsdDtcbiAgICAgICAgICAgIH0gOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9kdWxlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCBcImFcIiwgZ2V0dGVyKSwgZ2V0dGVyO1xuICAgICAgICB9LCBfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpO1xuICAgICAgICB9LCBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiLCBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDcpO1xuICAgIH0oWyBmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgIGZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICAgICAgICAgICAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gICAgICAgICAgICBpZiAobykge1xuICAgICAgICAgICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiBvKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgICAgICAgICAgICAgICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiT2JqZWN0XCIgPT09IG4gJiYgby5jb25zdHJ1Y3RvciAmJiAobiA9IG8uY29uc3RydWN0b3IubmFtZSksIFwiTWFwXCIgPT09IG4gfHwgXCJTZXRcIiA9PT0gbiA/IEFycmF5LmZyb20obykgOiBcIkFyZ3VtZW50c1wiID09PSBuIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pID8gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKSA6IHZvaWQgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICAgICAgICAgICAgKG51bGwgPT0gbGVuIHx8IGxlbiA+IGFyci5sZW5ndGgpICYmIChsZW4gPSBhcnIubGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgYXJyMltpXSA9IGFycltpXTtcbiAgICAgICAgICAgIHJldHVybiBhcnIyO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHtcbiAgICAgICAgICAgIGlmIChcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBTeW1ib2wgJiYgU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hcnIgPSBbXSwgX24gPSAhMCwgX2QgPSAhMSwgX2UgPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX3MsIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSkgJiYgKF9hcnIucHVzaChfcy52YWx1ZSksIFxuICAgICAgICAgICAgICAgICAgICAhaSB8fCBfYXJyLmxlbmd0aCAhPT0gaSk7IF9uID0gITApIDtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgX2QgPSAhMCwgX2UgPSBlcnI7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9uIHx8IG51bGwgPT0gX2kucmV0dXJuIHx8IF9pLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gX2FycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSksIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X18pLCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfbWF0Y2htZWRpYXF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpLCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfbWF0Y2htZWRpYXF1ZXJ5X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfbWF0Y2htZWRpYXF1ZXJ5X18pLCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfaHlwaGVuYXRlX3N0eWxlX25hbWVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMiksIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19zaGFsbG93X2VxdWFsX29iamVjdHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMTApLCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfc2hhbGxvd19lcXVhbF9vYmplY3RzX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfc2hhbGxvd19lcXVhbF9vYmplY3RzX18pLCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX3RvUXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMyksIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fQ29udGV4dF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KSwgbWFrZVF1ZXJ5ID0gZnVuY3Rpb24oc2V0dGluZ3MpIHtcbiAgICAgICAgICAgIHJldHVybiBzZXR0aW5ncy5xdWVyeSB8fCBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X190b1F1ZXJ5X18uYSkoc2V0dGluZ3MpO1xuICAgICAgICB9LCBoeXBoZW5hdGVLZXlzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgICAgICBpZiAoIW9iaikgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgICAgICAgICByZXR1cm4gMCA9PT0ga2V5cy5sZW5ndGggPyBudWxsIDoga2V5cy5yZWR1Y2UoZnVuY3Rpb24ocmVzdWx0LCBrZXkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0W09iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfaHlwaGVuYXRlX3N0eWxlX25hbWVfXy5hKShrZXkpXSA9IG9ialtrZXldLCBcbiAgICAgICAgICAgICAgICByZXN1bHQ7XG4gICAgICAgICAgICB9LCB7fSk7XG4gICAgICAgIH0sIHVzZUlzVXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgcmVmID0gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLnVzZVJlZighMSk7XG4gICAgICAgICAgICByZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLnVzZUVmZmVjdChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZWYuY3VycmVudCA9ICEwO1xuICAgICAgICAgICAgfSwgW10pLCByZWYuY3VycmVudDtcbiAgICAgICAgfSwgdXNlRGV2aWNlID0gZnVuY3Rpb24oZGV2aWNlRnJvbVByb3BzKSB7XG4gICAgICAgICAgICB2YXIgZGV2aWNlRnJvbUNvbnRleHQgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEudXNlQ29udGV4dChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX0NvbnRleHRfXy5hKSwgZ2V0RGV2aWNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGh5cGhlbmF0ZUtleXMoZGV2aWNlRnJvbVByb3BzKSB8fCBoeXBoZW5hdGVLZXlzKGRldmljZUZyb21Db250ZXh0KTtcbiAgICAgICAgICAgIH0sIF9SZWFjdCR1c2VTdGF0ZSA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQuYS51c2VTdGF0ZShnZXREZXZpY2UpLCBfUmVhY3QkdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlLCAyKSwgZGV2aWNlID0gX1JlYWN0JHVzZVN0YXRlMlswXSwgc2V0RGV2aWNlID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcbiAgICAgICAgICAgIHJldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEudXNlRWZmZWN0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBuZXdEZXZpY2UgPSBnZXREZXZpY2UoKTtcbiAgICAgICAgICAgICAgICBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfc2hhbGxvd19lcXVhbF9vYmplY3RzX19fZGVmYXVsdCgpKGRldmljZSwgbmV3RGV2aWNlKSB8fCBzZXREZXZpY2UobmV3RGV2aWNlKTtcbiAgICAgICAgICAgIH0sIFsgZGV2aWNlRnJvbVByb3BzLCBkZXZpY2VGcm9tQ29udGV4dCBdKSwgZGV2aWNlO1xuICAgICAgICB9LCB1c2VRdWVyeSA9IGZ1bmN0aW9uKHNldHRpbmdzKSB7XG4gICAgICAgICAgICB2YXIgZ2V0UXVlcnkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFrZVF1ZXJ5KHNldHRpbmdzKTtcbiAgICAgICAgICAgIH0sIF9SZWFjdCR1c2VTdGF0ZTMgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEudXNlU3RhdGUoZ2V0UXVlcnkpLCBfUmVhY3QkdXNlU3RhdGU0ID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlMywgMiksIHF1ZXJ5ID0gX1JlYWN0JHVzZVN0YXRlNFswXSwgc2V0UXVlcnkgPSBfUmVhY3QkdXNlU3RhdGU0WzFdO1xuICAgICAgICAgICAgcmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQuYS51c2VFZmZlY3QoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5ld1F1ZXJ5ID0gZ2V0UXVlcnkoKTtcbiAgICAgICAgICAgICAgICBxdWVyeSAhPT0gbmV3UXVlcnkgJiYgc2V0UXVlcnkobmV3UXVlcnkpO1xuICAgICAgICAgICAgfSwgWyBzZXR0aW5ncyBdKSwgcXVlcnk7XG4gICAgICAgIH0sIHVzZU1hdGNoTWVkaWEgPSBmdW5jdGlvbihxdWVyeSwgZGV2aWNlKSB7XG4gICAgICAgICAgICB2YXIgZ2V0TWF0Y2hNZWRpYSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfbWF0Y2htZWRpYXF1ZXJ5X19fZGVmYXVsdCgpKHF1ZXJ5LCBkZXZpY2UgfHwge30sICEhZGV2aWNlKTtcbiAgICAgICAgICAgIH0sIF9SZWFjdCR1c2VTdGF0ZTUgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEudXNlU3RhdGUoZ2V0TWF0Y2hNZWRpYSksIF9SZWFjdCR1c2VTdGF0ZTYgPSBfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGU1LCAyKSwgbXEgPSBfUmVhY3QkdXNlU3RhdGU2WzBdLCBzZXRNcSA9IF9SZWFjdCR1c2VTdGF0ZTZbMV0sIGlzVXBkYXRlID0gdXNlSXNVcGRhdGUoKTtcbiAgICAgICAgICAgIHJldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEudXNlRWZmZWN0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc1VwZGF0ZSAmJiBzZXRNcShnZXRNYXRjaE1lZGlhKCkpLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgbXEuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LCBbIHF1ZXJ5LCBkZXZpY2UgXSksIG1xO1xuICAgICAgICB9LCB1c2VNYXRjaGVzID0gZnVuY3Rpb24obWVkaWFRdWVyeSkge1xuICAgICAgICAgICAgdmFyIF9SZWFjdCR1c2VTdGF0ZTcgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0LmEudXNlU3RhdGUobWVkaWFRdWVyeS5tYXRjaGVzKSwgX1JlYWN0JHVzZVN0YXRlOCA9IF9zbGljZWRUb0FycmF5KF9SZWFjdCR1c2VTdGF0ZTcsIDIpLCBtYXRjaGVzID0gX1JlYWN0JHVzZVN0YXRlOFswXSwgc2V0TWF0Y2hlcyA9IF9SZWFjdCR1c2VTdGF0ZThbMV07XG4gICAgICAgICAgICByZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLnVzZUVmZmVjdChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdXBkYXRlTWF0Y2hlcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBzZXRNYXRjaGVzKG1lZGlhUXVlcnkubWF0Y2hlcyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWVkaWFRdWVyeS5hZGRMaXN0ZW5lcih1cGRhdGVNYXRjaGVzKSwgdXBkYXRlTWF0Y2hlcygpLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgbWVkaWFRdWVyeS5yZW1vdmVMaXN0ZW5lcih1cGRhdGVNYXRjaGVzKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSwgWyBtZWRpYVF1ZXJ5IF0pLCBtYXRjaGVzO1xuICAgICAgICB9LCB1c2VNZWRpYVF1ZXJ5ID0gZnVuY3Rpb24oc2V0dGluZ3MsIGRldmljZSwgb25DaGFuZ2UpIHtcbiAgICAgICAgICAgIHZhciBkZXZpY2VTZXR0aW5ncyA9IHVzZURldmljZShkZXZpY2UpLCBxdWVyeSA9IHVzZVF1ZXJ5KHNldHRpbmdzKTtcbiAgICAgICAgICAgIGlmICghcXVlcnkpIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgb3IgbWlzc2luZyBNZWRpYVF1ZXJ5IVwiKTtcbiAgICAgICAgICAgIHZhciBtcSA9IHVzZU1hdGNoTWVkaWEocXVlcnksIGRldmljZVNldHRpbmdzKSwgbWF0Y2hlcyA9IHVzZU1hdGNoZXMobXEpLCBpc1VwZGF0ZSA9IHVzZUlzVXBkYXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X19fZGVmYXVsdC5hLnVzZUVmZmVjdChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpc1VwZGF0ZSAmJiBvbkNoYW5nZSAmJiBvbkNoYW5nZShtYXRjaGVzKTtcbiAgICAgICAgICAgIH0sIFsgbWF0Y2hlcyBdKSwgbWF0Y2hlcztcbiAgICAgICAgfTtcbiAgICAgICAgX193ZWJwYWNrX2V4cG9ydHNfXy5hID0gdXNlTWVkaWFRdWVyeTtcbiAgICB9LCBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzFfXztcbiAgICB9LCBmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgIGZ1bmN0aW9uIHRvSHlwaGVuTG93ZXIobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBcIi1cIiArIG1hdGNoLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKG5hbWUpIHtcbiAgICAgICAgICAgIGlmIChjYWNoZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgcmV0dXJuIGNhY2hlW25hbWVdO1xuICAgICAgICAgICAgdmFyIGhOYW1lID0gbmFtZS5yZXBsYWNlKHVwcGVyY2FzZVBhdHRlcm4sIHRvSHlwaGVuTG93ZXIpO1xuICAgICAgICAgICAgcmV0dXJuIGNhY2hlW25hbWVdID0gbXNQYXR0ZXJuLnRlc3QoaE5hbWUpID8gXCItXCIgKyBoTmFtZSA6IGhOYW1lO1xuICAgICAgICB9XG4gICAgICAgIHZhciB1cHBlcmNhc2VQYXR0ZXJuID0gL1tBLVpdL2csIG1zUGF0dGVybiA9IC9ebXMtLywgY2FjaGUgPSB7fTtcbiAgICAgICAgX193ZWJwYWNrX2V4cG9ydHNfXy5hID0gaHlwaGVuYXRlU3R5bGVOYW1lO1xuICAgIH0sIGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9oeXBoZW5hdGVfc3R5bGVfbmFtZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKSwgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19tZWRpYVF1ZXJ5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKSwgbmVnYXRlID0gZnVuY3Rpb24oY29uZCkge1xuICAgICAgICAgICAgcmV0dXJuIFwibm90IFwiLmNvbmNhdChjb25kKTtcbiAgICAgICAgfSwga2V5VmFsID0gZnVuY3Rpb24oaywgdikge1xuICAgICAgICAgICAgdmFyIHJlYWxLZXkgPSBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2h5cGhlbmF0ZV9zdHlsZV9uYW1lX18uYSkoayk7XG4gICAgICAgICAgICByZXR1cm4gXCJudW1iZXJcIiA9PSB0eXBlb2YgdiAmJiAodiA9IFwiXCIuY29uY2F0KHYsIFwicHhcIikpLCAhMCA9PT0gdiA/IHJlYWxLZXkgOiAhMSA9PT0gdiA/IG5lZ2F0ZShyZWFsS2V5KSA6IFwiKFwiLmNvbmNhdChyZWFsS2V5LCBcIjogXCIpLmNvbmNhdCh2LCBcIilcIik7XG4gICAgICAgIH0sIGpvaW4gPSBmdW5jdGlvbihjb25kcykge1xuICAgICAgICAgICAgcmV0dXJuIGNvbmRzLmpvaW4oXCIgYW5kIFwiKTtcbiAgICAgICAgfSwgdG9RdWVyeSA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAgICAgdmFyIHJ1bGVzID0gW107XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19tZWRpYVF1ZXJ5X18uYS5hbGwpLmZvckVhY2goZnVuY3Rpb24oaykge1xuICAgICAgICAgICAgICAgIHZhciB2ID0gb2JqW2tdO1xuICAgICAgICAgICAgICAgIG51bGwgIT0gdiAmJiBydWxlcy5wdXNoKGtleVZhbChrLCB2KSk7XG4gICAgICAgICAgICB9KSwgam9pbihydWxlcyk7XG4gICAgICAgIH07XG4gICAgICAgIF9fd2VicGFja19leHBvcnRzX18uYSA9IHRvUXVlcnk7XG4gICAgfSwgZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpO1xuICAgIH0sIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBcIlNFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEXCI7XG4gICAgfSwgZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3JlYWN0X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpLCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcmVhY3RfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fKSwgQ29udGV4dCA9IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9yZWFjdF9fX2RlZmF1bHQuYS5jcmVhdGVDb250ZXh0KCk7XG4gICAgICAgIF9fd2VicGFja19leHBvcnRzX18uYSA9IENvbnRleHQ7XG4gICAgfSwgZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICAgICAgICAgIHZhbHVlOiAhMFxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fdXNlTWVkaWFRdWVyeV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKSwgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19Db21wb25lbnRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpLCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX3RvUXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMyksIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fQ29udGV4dF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcbiAgICAgICAgX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiZGVmYXVsdFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX0NvbXBvbmVudF9fLmE7XG4gICAgICAgIH0pLCBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJ1c2VNZWRpYVF1ZXJ5XCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fdXNlTWVkaWFRdWVyeV9fLmE7XG4gICAgICAgIH0pLCBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJ0b1F1ZXJ5XCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fdG9RdWVyeV9fLmE7XG4gICAgICAgIH0pLCBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJDb250ZXh0XCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fQ29udGV4dF9fLmE7XG4gICAgICAgIH0pO1xuICAgIH0sIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgZnVuY3Rpb24gTXFsKHF1ZXJ5LCB2YWx1ZXMsIGZvcmNlU3RhdGljKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBhZGRMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgIG1xbCAmJiBtcWwuYWRkTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICBtcWwgJiYgbXFsLnJlbW92ZUxpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZShldnQpIHtcbiAgICAgICAgICAgICAgICBzZWxmLm1hdGNoZXMgPSBldnQubWF0Y2hlcywgc2VsZi5tZWRpYSA9IGV2dC5tZWRpYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAgICAgICAgICAgbXFsICYmIG1xbC5yZW1vdmVMaXN0ZW5lcih1cGRhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgaWYgKGR5bmFtaWNNYXRjaCAmJiAhZm9yY2VTdGF0aWMpIHtcbiAgICAgICAgICAgICAgICB2YXIgbXFsID0gZHluYW1pY01hdGNoLmNhbGwod2luZG93LCBxdWVyeSk7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXRjaGVzID0gbXFsLm1hdGNoZXMsIHRoaXMubWVkaWEgPSBtcWwubWVkaWEsIG1xbC5hZGRMaXN0ZW5lcih1cGRhdGUpO1xuICAgICAgICAgICAgfSBlbHNlIHRoaXMubWF0Y2hlcyA9IHN0YXRpY01hdGNoKHF1ZXJ5LCB2YWx1ZXMpLCB0aGlzLm1lZGlhID0gcXVlcnk7XG4gICAgICAgICAgICB0aGlzLmFkZExpc3RlbmVyID0gYWRkTGlzdGVuZXIsIHRoaXMucmVtb3ZlTGlzdGVuZXIgPSByZW1vdmVMaXN0ZW5lciwgdGhpcy5kaXNwb3NlID0gZGlzcG9zZTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBtYXRjaE1lZGlhKHF1ZXJ5LCB2YWx1ZXMsIGZvcmNlU3RhdGljKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IE1xbChxdWVyeSwgdmFsdWVzLCBmb3JjZVN0YXRpYyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0YXRpY01hdGNoID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KS5tYXRjaCwgZHluYW1pY01hdGNoID0gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2Ygd2luZG93ID8gd2luZG93Lm1hdGNoTWVkaWEgOiBudWxsO1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IG1hdGNoTWVkaWE7XG4gICAgfSwgZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICBmdW5jdGlvbiBtYXRjaFF1ZXJ5KG1lZGlhUXVlcnksIHZhbHVlcykge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlUXVlcnkobWVkaWFRdWVyeSkuc29tZShmdW5jdGlvbihxdWVyeSkge1xuICAgICAgICAgICAgICAgIHZhciBpbnZlcnNlID0gcXVlcnkuaW52ZXJzZSwgdHlwZU1hdGNoID0gXCJhbGxcIiA9PT0gcXVlcnkudHlwZSB8fCB2YWx1ZXMudHlwZSA9PT0gcXVlcnkudHlwZTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZU1hdGNoICYmIGludmVyc2UgfHwgIXR5cGVNYXRjaCAmJiAhaW52ZXJzZSkgcmV0dXJuICExO1xuICAgICAgICAgICAgICAgIHZhciBleHByZXNzaW9uc01hdGNoID0gcXVlcnkuZXhwcmVzc2lvbnMuZXZlcnkoZnVuY3Rpb24oZXhwcmVzc2lvbikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZmVhdHVyZSA9IGV4cHJlc3Npb24uZmVhdHVyZSwgbW9kaWZpZXIgPSBleHByZXNzaW9uLm1vZGlmaWVyLCBleHBWYWx1ZSA9IGV4cHJlc3Npb24udmFsdWUsIHZhbHVlID0gdmFsdWVzW2ZlYXR1cmVdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbHVlKSByZXR1cm4gITE7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZmVhdHVyZSkge1xuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJvcmllbnRhdGlvblwiOlxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzY2FuXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gZXhwVmFsdWUudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ3aWR0aFwiOlxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJoZWlnaHRcIjpcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZGV2aWNlLXdpZHRoXCI6XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImRldmljZS1oZWlnaHRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cFZhbHVlID0gdG9QeChleHBWYWx1ZSksIHZhbHVlID0gdG9QeCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJyZXNvbHV0aW9uXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBleHBWYWx1ZSA9IHRvRHBpKGV4cFZhbHVlKSwgdmFsdWUgPSB0b0RwaSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhc3BlY3QtcmF0aW9cIjpcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZGV2aWNlLWFzcGVjdC1yYXRpb1wiOlxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkZXZpY2UtcGl4ZWwtcmF0aW9cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cFZhbHVlID0gdG9EZWNpbWFsKGV4cFZhbHVlKSwgdmFsdWUgPSB0b0RlY2ltYWwodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZ3JpZFwiOlxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJjb2xvclwiOlxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJjb2xvci1pbmRleFwiOlxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtb25vY2hyb21lXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBleHBWYWx1ZSA9IHBhcnNlSW50KGV4cFZhbHVlLCAxMCkgfHwgMSwgdmFsdWUgPSBwYXJzZUludCh2YWx1ZSwgMTApIHx8IDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChtb2RpZmllcikge1xuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtaW5cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSA+PSBleHBWYWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtYXhcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSA8PSBleHBWYWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgPT09IGV4cFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGV4cHJlc3Npb25zTWF0Y2ggJiYgIWludmVyc2UgfHwgIWV4cHJlc3Npb25zTWF0Y2ggJiYgaW52ZXJzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHBhcnNlUXVlcnkobWVkaWFRdWVyeSkge1xuICAgICAgICAgICAgcmV0dXJuIG1lZGlhUXVlcnkuc3BsaXQoXCIsXCIpLm1hcChmdW5jdGlvbihxdWVyeSkge1xuICAgICAgICAgICAgICAgIHF1ZXJ5ID0gcXVlcnkudHJpbSgpO1xuICAgICAgICAgICAgICAgIHZhciBjYXB0dXJlcyA9IHF1ZXJ5Lm1hdGNoKFJFX01FRElBX1FVRVJZKSwgbW9kaWZpZXIgPSBjYXB0dXJlc1sxXSwgdHlwZSA9IGNhcHR1cmVzWzJdLCBleHByZXNzaW9ucyA9IGNhcHR1cmVzWzNdIHx8IFwiXCIsIHBhcnNlZCA9IHt9O1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZWQuaW52ZXJzZSA9ICEhbW9kaWZpZXIgJiYgXCJub3RcIiA9PT0gbW9kaWZpZXIudG9Mb3dlckNhc2UoKSwgcGFyc2VkLnR5cGUgPSB0eXBlID8gdHlwZS50b0xvd2VyQ2FzZSgpIDogXCJhbGxcIiwgXG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvbnMgPSBleHByZXNzaW9ucy5tYXRjaCgvXFwoW15cXCldK1xcKS9nKSB8fCBbXSwgcGFyc2VkLmV4cHJlc3Npb25zID0gZXhwcmVzc2lvbnMubWFwKGZ1bmN0aW9uKGV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhcHR1cmVzID0gZXhwcmVzc2lvbi5tYXRjaChSRV9NUV9FWFBSRVNTSU9OKSwgZmVhdHVyZSA9IGNhcHR1cmVzWzFdLnRvTG93ZXJDYXNlKCkubWF0Y2goUkVfTVFfRkVBVFVSRSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllcjogZmVhdHVyZVsxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmU6IGZlYXR1cmVbMl0sXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY2FwdHVyZXNbMl1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KSwgcGFyc2VkO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdG9EZWNpbWFsKHJhdGlvKSB7XG4gICAgICAgICAgICB2YXIgbnVtYmVycywgZGVjaW1hbCA9IE51bWJlcihyYXRpbyk7XG4gICAgICAgICAgICByZXR1cm4gZGVjaW1hbCB8fCAobnVtYmVycyA9IHJhdGlvLm1hdGNoKC9eKFxcZCspXFxzKlxcL1xccyooXFxkKykkLyksIGRlY2ltYWwgPSBudW1iZXJzWzFdIC8gbnVtYmVyc1syXSksIFxuICAgICAgICAgICAgZGVjaW1hbDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB0b0RwaShyZXNvbHV0aW9uKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBwYXJzZUZsb2F0KHJlc29sdXRpb24pO1xuICAgICAgICAgICAgc3dpdGNoIChTdHJpbmcocmVzb2x1dGlvbikubWF0Y2goUkVfUkVTT0xVVElPTl9VTklUKVsxXSkge1xuICAgICAgICAgICAgICBjYXNlIFwiZHBjbVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSAvIDIuNTQ7XG5cbiAgICAgICAgICAgICAgY2FzZSBcImRwcHhcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gOTYgKiB2YWx1ZTtcblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB0b1B4KGxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gcGFyc2VGbG9hdChsZW5ndGgpO1xuICAgICAgICAgICAgc3dpdGNoIChTdHJpbmcobGVuZ3RoKS5tYXRjaChSRV9MRU5HVEhfVU5JVClbMV0pIHtcbiAgICAgICAgICAgICAgY2FzZSBcImVtXCI6XG4gICAgICAgICAgICAgIGNhc2UgXCJyZW1cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gMTYgKiB2YWx1ZTtcblxuICAgICAgICAgICAgICBjYXNlIFwiY21cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gOTYgKiB2YWx1ZSAvIDIuNTQ7XG5cbiAgICAgICAgICAgICAgY2FzZSBcIm1tXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDk2ICogdmFsdWUgLyAyLjU0IC8gMTA7XG5cbiAgICAgICAgICAgICAgY2FzZSBcImluXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDk2ICogdmFsdWU7XG5cbiAgICAgICAgICAgICAgY2FzZSBcInB0XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDcyICogdmFsdWU7XG5cbiAgICAgICAgICAgICAgY2FzZSBcInBjXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDcyICogdmFsdWUgLyAxMjtcblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBleHBvcnRzLm1hdGNoID0gbWF0Y2hRdWVyeSwgZXhwb3J0cy5wYXJzZSA9IHBhcnNlUXVlcnk7XG4gICAgICAgIHZhciBSRV9NRURJQV9RVUVSWSA9IC8oPzoob25seXxub3QpP1xccyooW15cXHNcXChcXCldKykoPzpcXHMqYW5kKT9cXHMqKT8oLispPy9pLCBSRV9NUV9FWFBSRVNTSU9OID0gL1xcKFxccyooW15cXHNcXDpcXCldKylcXHMqKD86XFw6XFxzKihbXlxcc1xcKV0rKSk/XFxzKlxcKS8sIFJFX01RX0ZFQVRVUkUgPSAvXig/OihtaW58bWF4KS0pPyguKykvLCBSRV9MRU5HVEhfVU5JVCA9IC8oZW18cmVtfHB4fGNtfG1tfGlufHB0fHBjKT8kLywgUkVfUkVTT0xVVElPTl9VTklUID0gLyhkcGl8ZHBjbXxkcHB4KT8kLztcbiAgICB9LCBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgIGZ1bmN0aW9uIHNoYWxsb3dFcXVhbE9iamVjdHMob2JqQSwgb2JqQikge1xuICAgICAgICAgICAgaWYgKG9iakEgPT09IG9iakIpIHJldHVybiAhMDtcbiAgICAgICAgICAgIGlmICghb2JqQSB8fCAhb2JqQikgcmV0dXJuICExO1xuICAgICAgICAgICAgdmFyIGFLZXlzID0gT2JqZWN0LmtleXMob2JqQSksIGJLZXlzID0gT2JqZWN0LmtleXMob2JqQiksIGxlbiA9IGFLZXlzLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChiS2V5cy5sZW5ndGggIT09IGxlbikgcmV0dXJuICExO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBhS2V5c1tpXTtcbiAgICAgICAgICAgICAgICBpZiAob2JqQVtrZXldICE9PSBvYmpCW2tleV0gfHwgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBrZXkpKSByZXR1cm4gITE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gITA7XG4gICAgICAgIH1cbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBzaGFsbG93RXF1YWxPYmplY3RzO1xuICAgIH0sIGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gICAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAgICAgICAgICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpO1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGVPbmx5ICYmIChzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24oc3ltKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgICAgICAgICAgICAgIH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGtleXM7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307XG4gICAgICAgICAgICAgICAgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICAgICAgICAgICAgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGtleSBpbiBvYmogPyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiAhMCxcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogITBcbiAgICAgICAgICAgIH0pIDogb2JqW2tleV0gPSB2YWx1ZSwgb2JqO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMiksIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fKSwgc3RyaW5nT3JOdW1iZXIgPSBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5vbmVPZlR5cGUoWyBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5zdHJpbmcsIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLm51bWJlciBdKSwgbWF0Y2hlcnMgPSB7XG4gICAgICAgICAgICBvcmllbnRhdGlvbjogX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEub25lT2YoWyBcInBvcnRyYWl0XCIsIFwibGFuZHNjYXBlXCIgXSksXG4gICAgICAgICAgICBzY2FuOiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5vbmVPZihbIFwicHJvZ3Jlc3NpdmVcIiwgXCJpbnRlcmxhY2VcIiBdKSxcbiAgICAgICAgICAgIGFzcGVjdFJhdGlvOiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5zdHJpbmcsXG4gICAgICAgICAgICBkZXZpY2VBc3BlY3RSYXRpbzogX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuc3RyaW5nLFxuICAgICAgICAgICAgaGVpZ2h0OiBzdHJpbmdPck51bWJlcixcbiAgICAgICAgICAgIGRldmljZUhlaWdodDogc3RyaW5nT3JOdW1iZXIsXG4gICAgICAgICAgICB3aWR0aDogc3RyaW5nT3JOdW1iZXIsXG4gICAgICAgICAgICBkZXZpY2VXaWR0aDogc3RyaW5nT3JOdW1iZXIsXG4gICAgICAgICAgICBjb2xvcjogX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuYm9vbCxcbiAgICAgICAgICAgIGNvbG9ySW5kZXg6IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmJvb2wsXG4gICAgICAgICAgICBtb25vY2hyb21lOiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5ib29sLFxuICAgICAgICAgICAgcmVzb2x1dGlvbjogc3RyaW5nT3JOdW1iZXJcbiAgICAgICAgfSwgZmVhdHVyZXMgPSBfb2JqZWN0U3ByZWFkKHtcbiAgICAgICAgICAgIG1pbkFzcGVjdFJhdGlvOiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5zdHJpbmcsXG4gICAgICAgICAgICBtYXhBc3BlY3RSYXRpbzogX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuc3RyaW5nLFxuICAgICAgICAgICAgbWluRGV2aWNlQXNwZWN0UmF0aW86IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLnN0cmluZyxcbiAgICAgICAgICAgIG1heERldmljZUFzcGVjdFJhdGlvOiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5zdHJpbmcsXG4gICAgICAgICAgICBtaW5IZWlnaHQ6IHN0cmluZ09yTnVtYmVyLFxuICAgICAgICAgICAgbWF4SGVpZ2h0OiBzdHJpbmdPck51bWJlcixcbiAgICAgICAgICAgIG1pbkRldmljZUhlaWdodDogc3RyaW5nT3JOdW1iZXIsXG4gICAgICAgICAgICBtYXhEZXZpY2VIZWlnaHQ6IHN0cmluZ09yTnVtYmVyLFxuICAgICAgICAgICAgbWluV2lkdGg6IHN0cmluZ09yTnVtYmVyLFxuICAgICAgICAgICAgbWF4V2lkdGg6IHN0cmluZ09yTnVtYmVyLFxuICAgICAgICAgICAgbWluRGV2aWNlV2lkdGg6IHN0cmluZ09yTnVtYmVyLFxuICAgICAgICAgICAgbWF4RGV2aWNlV2lkdGg6IHN0cmluZ09yTnVtYmVyLFxuICAgICAgICAgICAgbWluQ29sb3I6IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLm51bWJlcixcbiAgICAgICAgICAgIG1heENvbG9yOiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5udW1iZXIsXG4gICAgICAgICAgICBtaW5Db2xvckluZGV4OiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5udW1iZXIsXG4gICAgICAgICAgICBtYXhDb2xvckluZGV4OiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5udW1iZXIsXG4gICAgICAgICAgICBtaW5Nb25vY2hyb21lOiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5udW1iZXIsXG4gICAgICAgICAgICBtYXhNb25vY2hyb21lOiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5udW1iZXIsXG4gICAgICAgICAgICBtaW5SZXNvbHV0aW9uOiBzdHJpbmdPck51bWJlcixcbiAgICAgICAgICAgIG1heFJlc29sdXRpb246IHN0cmluZ09yTnVtYmVyXG4gICAgICAgIH0sIG1hdGNoZXJzKSwgdHlwZXMgPSB7XG4gICAgICAgICAgICBhbGw6IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmJvb2wsXG4gICAgICAgICAgICBncmlkOiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5ib29sLFxuICAgICAgICAgICAgYXVyYWw6IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmJvb2wsXG4gICAgICAgICAgICBicmFpbGxlOiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5ib29sLFxuICAgICAgICAgICAgaGFuZGhlbGQ6IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmJvb2wsXG4gICAgICAgICAgICBwcmludDogX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuYm9vbCxcbiAgICAgICAgICAgIHByb2plY3Rpb246IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmJvb2wsXG4gICAgICAgICAgICBzY3JlZW46IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmJvb2wsXG4gICAgICAgICAgICB0dHk6IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmJvb2wsXG4gICAgICAgICAgICB0djogX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuYm9vbCxcbiAgICAgICAgICAgIGVtYm9zc2VkOiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5ib29sXG4gICAgICAgIH0sIGFsbCA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgdHlwZXMpLCBmZWF0dXJlcyk7XG4gICAgICAgIG1hdGNoZXJzLnR5cGUgPSBPYmplY3Qua2V5cyh0eXBlcyksIF9fd2VicGFja19leHBvcnRzX18uYSA9IHtcbiAgICAgICAgICAgIGFsbDogYWxsLFxuICAgICAgICAgICAgdHlwZXM6IHR5cGVzLFxuICAgICAgICAgICAgbWF0Y2hlcnM6IG1hdGNoZXJzLFxuICAgICAgICAgICAgZmVhdHVyZXM6IGZlYXR1cmVzXG4gICAgICAgIH07XG4gICAgfSwgZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG4gICAgICAgIHZhciBSZWFjdElzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KShSZWFjdElzLmlzRWxlbWVudCwgITApO1xuICAgIH0sIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgIWZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gaXNWYWxpZEVsZW1lbnRUeXBlKHR5cGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJzdHJpbmdcIiA9PSB0eXBlb2YgdHlwZSB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHR5cGUgfHwgdHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9DT05DVVJSRU5UX01PREVfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9QUk9GSUxFUl9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfU1VTUEVOU0VfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUgfHwgXCJvYmplY3RcIiA9PSB0eXBlb2YgdHlwZSAmJiBudWxsICE9PSB0eXBlICYmICh0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9MQVpZX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfTUVNT19UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX1BST1ZJREVSX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfRlVOREFNRU5UQUxfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9SRVNQT05ERVJfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9TQ09QRV9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0JMT0NLX1RZUEUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gdHlwZU9mKG9iamVjdCkge1xuICAgICAgICAgICAgICAgIGlmIChcIm9iamVjdFwiID09IHR5cGVvZiBvYmplY3QgJiYgbnVsbCAhPT0gb2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciAkJHR5cGVvZiA9IG9iamVjdC4kJHR5cGVvZjtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICgkJHR5cGVvZikge1xuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBvYmplY3QudHlwZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFJFQUNUX0FTWU5DX01PREVfVFlQRTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBSRUFDVF9DT05DVVJSRU5UX01PREVfVFlQRTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBSRUFDVF9GUkFHTUVOVF9UWVBFOlxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFJFQUNUX1BST0ZJTEVSX1RZUEU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgUkVBQ1RfU1RSSUNUX01PREVfVFlQRTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9UWVBFOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0eXBlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICQkdHlwZW9mVHlwZSA9IHR5cGUgJiYgdHlwZS4kJHR5cGVvZjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCQkdHlwZW9mVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBSRUFDVF9DT05URVhUX1RZUEU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgUkVBQ1RfTUVNT19UWVBFOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBSRUFDVF9QUk9WSURFUl9UWVBFOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCR0eXBlb2ZUeXBlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCR0eXBlb2Y7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkJHR5cGVvZjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzQXN5bmNNb2RlKG9iamVjdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRJc0FzeW5jTW9kZSB8fCAoaGFzV2FybmVkQWJvdXREZXByZWNhdGVkSXNBc3luY01vZGUgPSAhMCwgXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiVGhlIFJlYWN0SXMuaXNBc3luY01vZGUoKSBhbGlhcyBoYXMgYmVlbiBkZXByZWNhdGVkLCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIFJlYWN0IDE3Ky4gVXBkYXRlIHlvdXIgY29kZSB0byB1c2UgUmVhY3RJcy5pc0NvbmN1cnJlbnRNb2RlKCkgaW5zdGVhZC4gSXQgaGFzIHRoZSBleGFjdCBzYW1lIEFQSS5cIikpLCBcbiAgICAgICAgICAgICAgICBpc0NvbmN1cnJlbnRNb2RlKG9iamVjdCkgfHwgdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0FTWU5DX01PREVfVFlQRTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzQ29uY3VycmVudE1vZGUob2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9DT05DVVJSRU5UX01PREVfVFlQRTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzQ29udGV4dENvbnN1bWVyKG9iamVjdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaXNDb250ZXh0UHJvdmlkZXIob2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9QUk9WSURFUl9UWVBFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaXNFbGVtZW50KG9iamVjdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIm9iamVjdFwiID09IHR5cGVvZiBvYmplY3QgJiYgbnVsbCAhPT0gb2JqZWN0ICYmIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaXNGb3J3YXJkUmVmKG9iamVjdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzRnJhZ21lbnQob2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaXNMYXp5KG9iamVjdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfTEFaWV9UWVBFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaXNNZW1vKG9iamVjdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfTUVNT19UWVBFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaXNQb3J0YWwob2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9QT1JUQUxfVFlQRTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzUHJvZmlsZXIob2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9QUk9GSUxFUl9UWVBFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaXNTdHJpY3RNb2RlKG9iamVjdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfU1RSSUNUX01PREVfVFlQRTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzU3VzcGVuc2Uob2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9TVVNQRU5TRV9UWVBFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGhhc1N5bWJvbCA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFN5bWJvbC5mb3IsIFJFQUNUX0VMRU1FTlRfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpIDogNjAxMDMsIFJFQUNUX1BPUlRBTF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSA6IDYwMTA2LCBSRUFDVF9GUkFHTUVOVF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpIDogNjAxMDcsIFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIikgOiA2MDEwOCwgUkVBQ1RfUFJPRklMRVJfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSA6IDYwMTE0LCBSRUFDVF9QUk9WSURFUl9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpIDogNjAxMDksIFJFQUNUX0NPTlRFWFRfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpIDogNjAxMTAsIFJFQUNUX0FTWU5DX01PREVfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpIDogNjAxMTEsIFJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKSA6IDYwMTExLCBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpIDogNjAxMTIsIFJFQUNUX1NVU1BFTlNFX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIikgOiA2MDExMywgUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIikgOiA2MDEyMCwgUkVBQ1RfTUVNT19UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIikgOiA2MDExNSwgUkVBQ1RfTEFaWV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcihcInJlYWN0LmxhenlcIikgOiA2MDExNiwgUkVBQ1RfQkxPQ0tfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoXCJyZWFjdC5ibG9ja1wiKSA6IDYwMTIxLCBSRUFDVF9GVU5EQU1FTlRBTF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpIDogNjAxMTcsIFJFQUNUX1JFU1BPTkRFUl9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKSA6IDYwMTE4LCBSRUFDVF9TQ09QRV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpIDogNjAxMTksIEFzeW5jTW9kZSA9IFJFQUNUX0FTWU5DX01PREVfVFlQRSwgQ29uY3VycmVudE1vZGUgPSBSRUFDVF9DT05DVVJSRU5UX01PREVfVFlQRSwgQ29udGV4dENvbnN1bWVyID0gUkVBQ1RfQ09OVEVYVF9UWVBFLCBDb250ZXh0UHJvdmlkZXIgPSBSRUFDVF9QUk9WSURFUl9UWVBFLCBFbGVtZW50ID0gUkVBQ1RfRUxFTUVOVF9UWVBFLCBGb3J3YXJkUmVmID0gUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSwgRnJhZ21lbnQgPSBSRUFDVF9GUkFHTUVOVF9UWVBFLCBMYXp5ID0gUkVBQ1RfTEFaWV9UWVBFLCBNZW1vID0gUkVBQ1RfTUVNT19UWVBFLCBQb3J0YWwgPSBSRUFDVF9QT1JUQUxfVFlQRSwgUHJvZmlsZXIgPSBSRUFDVF9QUk9GSUxFUl9UWVBFLCBTdHJpY3RNb2RlID0gUkVBQ1RfU1RSSUNUX01PREVfVFlQRSwgU3VzcGVuc2UgPSBSRUFDVF9TVVNQRU5TRV9UWVBFLCBoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRJc0FzeW5jTW9kZSA9ICExO1xuICAgICAgICAgICAgZXhwb3J0cy5Bc3luY01vZGUgPSBBc3luY01vZGUsIGV4cG9ydHMuQ29uY3VycmVudE1vZGUgPSBDb25jdXJyZW50TW9kZSwgZXhwb3J0cy5Db250ZXh0Q29uc3VtZXIgPSBDb250ZXh0Q29uc3VtZXIsIFxuICAgICAgICAgICAgZXhwb3J0cy5Db250ZXh0UHJvdmlkZXIgPSBDb250ZXh0UHJvdmlkZXIsIGV4cG9ydHMuRWxlbWVudCA9IEVsZW1lbnQsIGV4cG9ydHMuRm9yd2FyZFJlZiA9IEZvcndhcmRSZWYsIFxuICAgICAgICAgICAgZXhwb3J0cy5GcmFnbWVudCA9IEZyYWdtZW50LCBleHBvcnRzLkxhenkgPSBMYXp5LCBleHBvcnRzLk1lbW8gPSBNZW1vLCBleHBvcnRzLlBvcnRhbCA9IFBvcnRhbCwgXG4gICAgICAgICAgICBleHBvcnRzLlByb2ZpbGVyID0gUHJvZmlsZXIsIGV4cG9ydHMuU3RyaWN0TW9kZSA9IFN0cmljdE1vZGUsIGV4cG9ydHMuU3VzcGVuc2UgPSBTdXNwZW5zZSwgXG4gICAgICAgICAgICBleHBvcnRzLmlzQXN5bmNNb2RlID0gaXNBc3luY01vZGUsIGV4cG9ydHMuaXNDb25jdXJyZW50TW9kZSA9IGlzQ29uY3VycmVudE1vZGUsIFxuICAgICAgICAgICAgZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lciA9IGlzQ29udGV4dENvbnN1bWVyLCBleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyID0gaXNDb250ZXh0UHJvdmlkZXIsIFxuICAgICAgICAgICAgZXhwb3J0cy5pc0VsZW1lbnQgPSBpc0VsZW1lbnQsIGV4cG9ydHMuaXNGb3J3YXJkUmVmID0gaXNGb3J3YXJkUmVmLCBleHBvcnRzLmlzRnJhZ21lbnQgPSBpc0ZyYWdtZW50LCBcbiAgICAgICAgICAgIGV4cG9ydHMuaXNMYXp5ID0gaXNMYXp5LCBleHBvcnRzLmlzTWVtbyA9IGlzTWVtbywgZXhwb3J0cy5pc1BvcnRhbCA9IGlzUG9ydGFsLCBleHBvcnRzLmlzUHJvZmlsZXIgPSBpc1Byb2ZpbGVyLCBcbiAgICAgICAgICAgIGV4cG9ydHMuaXNTdHJpY3RNb2RlID0gaXNTdHJpY3RNb2RlLCBleHBvcnRzLmlzU3VzcGVuc2UgPSBpc1N1c3BlbnNlLCBleHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZSA9IGlzVmFsaWRFbGVtZW50VHlwZSwgXG4gICAgICAgICAgICBleHBvcnRzLnR5cGVPZiA9IHR5cGVPZjtcbiAgICAgICAgfSgpO1xuICAgIH0sIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgZnVuY3Rpb24gZW1wdHlGdW5jdGlvblRoYXRSZXR1cm5zTnVsbCgpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHZhciBSZWFjdElzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KSwgYXNzaWduID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSksIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KSwgY2hlY2tQcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KSwgaGFzID0gRnVuY3Rpb24uY2FsbC5iaW5kKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkpLCBwcmludFdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuICAgICAgICBwcmludFdhcm5pbmcgPSBmdW5jdGlvbih0ZXh0KSB7XG4gICAgICAgICAgICB2YXIgbWVzc2FnZSA9IFwiV2FybmluZzogXCIgKyB0ZXh0O1xuICAgICAgICAgICAgXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgY29uc29sZSAmJiBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAgICAgICB9IGNhdGNoICh4KSB7fVxuICAgICAgICB9LCBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGlzVmFsaWRFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRJdGVyYXRvckZuKG1heWJlSXRlcmFibGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgaXRlcmF0b3JGbiA9IG1heWJlSXRlcmFibGUgJiYgKElURVJBVE9SX1NZTUJPTCAmJiBtYXliZUl0ZXJhYmxlW0lURVJBVE9SX1NZTUJPTF0gfHwgbWF5YmVJdGVyYWJsZVtGQVVYX0lURVJBVE9SX1NZTUJPTF0pO1xuICAgICAgICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGl0ZXJhdG9yRm4pIHJldHVybiBpdGVyYXRvckZuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB4ID09PSB5ID8gMCAhPT0geCB8fCAxIC8geCA9PSAxIC8geSA6IHggIT09IHggJiYgeSAhPT0geTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIFByb3BUeXBlRXJyb3IobWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2UsIHRoaXMuc3RhY2sgPSBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjaGVja1R5cGUoaXNSZXF1aXJlZCwgcHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnROYW1lIHx8IEFOT05ZTU9VUywgcHJvcEZ1bGxOYW1lID0gcHJvcEZ1bGxOYW1lIHx8IHByb3BOYW1lLCBcbiAgICAgICAgICAgICAgICAgICAgc2VjcmV0ICE9PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRocm93T25EaXJlY3RBY2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKFwiQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gVXNlIGBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKWAgdG8gY2FsbCB0aGVtLiBSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGVyci5uYW1lID0gXCJJbnZhcmlhbnQgVmlvbGF0aW9uXCIsIGVycjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBjb25zb2xlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhY2hlS2V5ID0gY29tcG9uZW50TmFtZSArIFwiOlwiICsgcHJvcE5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIW1hbnVhbFByb3BUeXBlQ2FsbENhY2hlW2NhY2hlS2V5XSAmJiBtYW51YWxQcm9wVHlwZVdhcm5pbmdDb3VudCA8IDMgJiYgKHByaW50V2FybmluZyhcIllvdSBhcmUgbWFudWFsbHkgY2FsbGluZyBhIFJlYWN0LlByb3BUeXBlcyB2YWxpZGF0aW9uIGZ1bmN0aW9uIGZvciB0aGUgYFwiICsgcHJvcEZ1bGxOYW1lICsgXCJgIHByb3Agb24gYFwiICsgY29tcG9uZW50TmFtZSArIFwiYC4gVGhpcyBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIHRocm93IGluIHRoZSBzdGFuZGFsb25lIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiBZb3UgbWF5IGJlIHNlZWluZyB0aGlzIHdhcm5pbmcgZHVlIHRvIGEgdGhpcmQtcGFydHkgUHJvcFR5cGVzIGxpYnJhcnkuIFNlZSBodHRwczovL2ZiLm1lL3JlYWN0LXdhcm5pbmctZG9udC1jYWxsLXByb3B0eXBlcyBmb3IgZGV0YWlscy5cIiksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbnVhbFByb3BUeXBlQ2FsbENhY2hlW2NhY2hlS2V5XSA9ICEwLCBtYW51YWxQcm9wVHlwZVdhcm5pbmdDb3VudCsrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbCA9PSBwcm9wc1twcm9wTmFtZV0gPyBpc1JlcXVpcmVkID8gbmV3IFByb3BUeXBlRXJyb3IobnVsbCA9PT0gcHJvcHNbcHJvcE5hbWVdID8gXCJUaGUgXCIgKyBsb2NhdGlvbiArIFwiIGBcIiArIHByb3BGdWxsTmFtZSArIFwiYCBpcyBtYXJrZWQgYXMgcmVxdWlyZWQgaW4gYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgYnV0IGl0cyB2YWx1ZSBpcyBgbnVsbGAuXCIgOiBcIlRoZSBcIiArIGxvY2F0aW9uICsgXCIgYFwiICsgcHJvcEZ1bGxOYW1lICsgXCJgIGlzIG1hcmtlZCBhcyByZXF1aXJlZCBpbiBgXCIgKyBjb21wb25lbnROYW1lICsgXCJgLCBidXQgaXRzIHZhbHVlIGlzIGB1bmRlZmluZWRgLlwiKSA6IG51bGwgOiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbWFudWFsUHJvcFR5cGVDYWxsQ2FjaGUgPSB7fSwgbWFudWFsUHJvcFR5cGVXYXJuaW5nQ291bnQgPSAwLCBjaGFpbmVkQ2hlY2tUeXBlID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgITEpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjaGFpbmVkQ2hlY2tUeXBlLmlzUmVxdWlyZWQgPSBjaGVja1R5cGUuYmluZChudWxsLCAhMCksIGNoYWluZWRDaGVja1R5cGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcihleHBlY3RlZFR5cGUpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0UHJvcFR5cGUocHJvcFZhbHVlKSAhPT0gZXhwZWN0ZWRUeXBlKSByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoXCJJbnZhbGlkIFwiICsgbG9jYXRpb24gKyBcIiBgXCIgKyBwcm9wRnVsbE5hbWUgKyBcImAgb2YgdHlwZSBgXCIgKyBnZXRQcmVjaXNlVHlwZShwcm9wVmFsdWUpICsgXCJgIHN1cHBsaWVkIHRvIGBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAsIGV4cGVjdGVkIGBcIiArIGV4cGVjdGVkVHlwZSArIFwiYC5cIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlQXJyYXlPZlR5cGVDaGVja2VyKHR5cGVDaGVja2VyKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIHR5cGVDaGVja2VyKSByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoXCJQcm9wZXJ0eSBgXCIgKyBwcm9wRnVsbE5hbWUgKyBcImAgb2YgY29tcG9uZW50IGBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAgaGFzIGludmFsaWQgUHJvcFR5cGUgbm90YXRpb24gaW5zaWRlIGFycmF5T2YuXCIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKFwiSW52YWxpZCBcIiArIGxvY2F0aW9uICsgXCIgYFwiICsgcHJvcEZ1bGxOYW1lICsgXCJgIG9mIHR5cGUgYFwiICsgZ2V0UHJvcFR5cGUocHJvcFZhbHVlKSArIFwiYCBzdXBwbGllZCB0byBgXCIgKyBjb21wb25lbnROYW1lICsgXCJgLCBleHBlY3RlZCBhbiBhcnJheS5cIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wVmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IHR5cGVDaGVja2VyKHByb3BWYWx1ZSwgaSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArIFwiW1wiICsgaSArIFwiXVwiLCBSZWFjdFByb3BUeXBlc1NlY3JldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikgcmV0dXJuIGVycm9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VUeXBlQ2hlY2tlcihleHBlY3RlZENsYXNzKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHByb3BzW3Byb3BOYW1lXSBpbnN0YW5jZW9mIGV4cGVjdGVkQ2xhc3MpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhwZWN0ZWRDbGFzc05hbWUgPSBleHBlY3RlZENsYXNzLm5hbWUgfHwgQU5PTllNT1VTO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKFwiSW52YWxpZCBcIiArIGxvY2F0aW9uICsgXCIgYFwiICsgcHJvcEZ1bGxOYW1lICsgXCJgIG9mIHR5cGUgYFwiICsgZ2V0Q2xhc3NOYW1lKHByb3BzW3Byb3BOYW1lXSkgKyBcImAgc3VwcGxpZWQgdG8gYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgZXhwZWN0ZWQgaW5zdGFuY2Ugb2YgYFwiICsgZXhwZWN0ZWRDbGFzc05hbWUgKyBcImAuXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlRW51bVR5cGVDaGVja2VyKGV4cGVjdGVkVmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXSwgaSA9IDA7IGkgPCBleHBlY3RlZFZhbHVlcy5sZW5ndGg7IGkrKykgaWYgKGlzKHByb3BWYWx1ZSwgZXhwZWN0ZWRWYWx1ZXNbaV0pKSByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlc1N0cmluZyA9IEpTT04uc3RyaW5naWZ5KGV4cGVjdGVkVmFsdWVzLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJzeW1ib2xcIiA9PT0gZ2V0UHJlY2lzZVR5cGUodmFsdWUpID8gU3RyaW5nKHZhbHVlKSA6IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKFwiSW52YWxpZCBcIiArIGxvY2F0aW9uICsgXCIgYFwiICsgcHJvcEZ1bGxOYW1lICsgXCJgIG9mIHZhbHVlIGBcIiArIFN0cmluZyhwcm9wVmFsdWUpICsgXCJgIHN1cHBsaWVkIHRvIGBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAsIGV4cGVjdGVkIG9uZSBvZiBcIiArIHZhbHVlc1N0cmluZyArIFwiLlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZXhwZWN0ZWRWYWx1ZXMpID8gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpIDogKHByaW50V2FybmluZyhhcmd1bWVudHMubGVuZ3RoID4gMSA/IFwiSW52YWxpZCBhcmd1bWVudHMgc3VwcGxpZWQgdG8gb25lT2YsIGV4cGVjdGVkIGFuIGFycmF5LCBnb3QgXCIgKyBhcmd1bWVudHMubGVuZ3RoICsgXCIgYXJndW1lbnRzLiBBIGNvbW1vbiBtaXN0YWtlIGlzIHRvIHdyaXRlIG9uZU9mKHgsIHksIHopIGluc3RlYWQgb2Ygb25lT2YoW3gsIHksIHpdKS5cIiA6IFwiSW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCB0byBvbmVPZiwgZXhwZWN0ZWQgYW4gYXJyYXkuXCIpLCBcbiAgICAgICAgICAgICAgICBlbXB0eUZ1bmN0aW9uVGhhdFJldHVybnNOdWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIodHlwZUNoZWNrZXIpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgdHlwZUNoZWNrZXIpIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcihcIlByb3BlcnR5IGBcIiArIHByb3BGdWxsTmFtZSArIFwiYCBvZiBjb21wb25lbnQgYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCBoYXMgaW52YWxpZCBQcm9wVHlwZSBub3RhdGlvbiBpbnNpZGUgb2JqZWN0T2YuXCIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdLCBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcIm9iamVjdFwiICE9PSBwcm9wVHlwZSkgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKFwiSW52YWxpZCBcIiArIGxvY2F0aW9uICsgXCIgYFwiICsgcHJvcEZ1bGxOYW1lICsgXCJgIG9mIHR5cGUgYFwiICsgcHJvcFR5cGUgKyBcImAgc3VwcGxpZWQgdG8gYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgZXhwZWN0ZWQgYW4gb2JqZWN0LlwiKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHByb3BWYWx1ZSkgaWYgKGhhcyhwcm9wVmFsdWUsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IHR5cGVDaGVja2VyKHByb3BWYWx1ZSwga2V5LCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lICsgXCIuXCIgKyBrZXksIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVVbmlvblR5cGVDaGVja2VyKGFycmF5T2ZUeXBlQ2hlY2tlcnMpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheU9mVHlwZUNoZWNrZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCA9PSAoMCwgYXJyYXlPZlR5cGVDaGVja2Vyc1tpXSkocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBSZWFjdFByb3BUeXBlc1NlY3JldCkpIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcihcIkludmFsaWQgXCIgKyBsb2NhdGlvbiArIFwiIGBcIiArIHByb3BGdWxsTmFtZSArIFwiYCBzdXBwbGllZCB0byBgXCIgKyBjb21wb25lbnROYW1lICsgXCJgLlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5T2ZUeXBlQ2hlY2tlcnMpKSByZXR1cm4gcHJpbnRXYXJuaW5nKFwiSW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCB0byBvbmVPZlR5cGUsIGV4cGVjdGVkIGFuIGluc3RhbmNlIG9mIGFycmF5LlwiKSwgXG4gICAgICAgICAgICAgICAgZW1wdHlGdW5jdGlvblRoYXRSZXR1cm5zTnVsbDtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5T2ZUeXBlQ2hlY2tlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoZWNrZXIgPSBhcnJheU9mVHlwZUNoZWNrZXJzW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBjaGVja2VyKSByZXR1cm4gcHJpbnRXYXJuaW5nKFwiSW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCB0byBvbmVPZlR5cGUuIEV4cGVjdGVkIGFuIGFycmF5IG9mIGNoZWNrIGZ1bmN0aW9ucywgYnV0IHJlY2VpdmVkIFwiICsgZ2V0UG9zdGZpeEZvclR5cGVXYXJuaW5nKGNoZWNrZXIpICsgXCIgYXQgaW5kZXggXCIgKyBpICsgXCIuXCIpLCBcbiAgICAgICAgICAgICAgICAgICAgZW1wdHlGdW5jdGlvblRoYXRSZXR1cm5zTnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVNoYXBlVHlwZUNoZWNrZXIoc2hhcGVUeXBlcykge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdLCBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcIm9iamVjdFwiICE9PSBwcm9wVHlwZSkgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKFwiSW52YWxpZCBcIiArIGxvY2F0aW9uICsgXCIgYFwiICsgcHJvcEZ1bGxOYW1lICsgXCJgIG9mIHR5cGUgYFwiICsgcHJvcFR5cGUgKyBcImAgc3VwcGxpZWQgdG8gYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgZXhwZWN0ZWQgYG9iamVjdGAuXCIpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gc2hhcGVUeXBlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoZWNrZXIgPSBzaGFwZVR5cGVzW2tleV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2tlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IGNoZWNrZXIocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUgKyBcIi5cIiArIGtleSwgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikgcmV0dXJuIGVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlcihzaGFwZVR5cGVzKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV0sIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFwib2JqZWN0XCIgIT09IHByb3BUeXBlKSByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoXCJJbnZhbGlkIFwiICsgbG9jYXRpb24gKyBcIiBgXCIgKyBwcm9wRnVsbE5hbWUgKyBcImAgb2YgdHlwZSBgXCIgKyBwcm9wVHlwZSArIFwiYCBzdXBwbGllZCB0byBgXCIgKyBjb21wb25lbnROYW1lICsgXCJgLCBleHBlY3RlZCBgb2JqZWN0YC5cIik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhbGxLZXlzID0gYXNzaWduKHt9LCBwcm9wc1twcm9wTmFtZV0sIHNoYXBlVHlwZXMpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gYWxsS2V5cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoZWNrZXIgPSBzaGFwZVR5cGVzW2tleV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNoZWNrZXIpIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcihcIkludmFsaWQgXCIgKyBsb2NhdGlvbiArIFwiIGBcIiArIHByb3BGdWxsTmFtZSArIFwiYCBrZXkgYFwiICsga2V5ICsgXCJgIHN1cHBsaWVkIHRvIGBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAuXFxuQmFkIG9iamVjdDogXCIgKyBKU09OLnN0cmluZ2lmeShwcm9wc1twcm9wTmFtZV0sIG51bGwsIFwiICBcIikgKyBcIlxcblZhbGlkIGtleXM6IFwiICsgSlNPTi5zdHJpbmdpZnkoT2JqZWN0LmtleXMoc2hhcGVUeXBlcyksIG51bGwsIFwiICBcIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gY2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArIFwiLlwiICsga2V5LCBSZWFjdFByb3BUeXBlc1NlY3JldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzTm9kZShwcm9wVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHR5cGVvZiBwcm9wVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEwO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIXByb3BWYWx1ZTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSByZXR1cm4gcHJvcFZhbHVlLmV2ZXJ5KGlzTm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChudWxsID09PSBwcm9wVmFsdWUgfHwgaXNWYWxpZEVsZW1lbnQocHJvcFZhbHVlKSkgcmV0dXJuICEwO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4ocHJvcFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpdGVyYXRvckZuKSByZXR1cm4gITE7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGVwLCBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChwcm9wVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlcmF0b3JGbiAhPT0gcHJvcFZhbHVlLmVudHJpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgKSBpZiAoIWlzTm9kZShzdGVwLnZhbHVlKSkgcmV0dXJuICExO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgZm9yICg7IShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW50cnkgJiYgIWlzTm9kZShlbnRyeVsxXSkpIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gITA7XG5cbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBpc1N5bWJvbChwcm9wVHlwZSwgcHJvcFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwic3ltYm9sXCIgPT09IHByb3BUeXBlIHx8ICEhcHJvcFZhbHVlICYmIChcIlN5bWJvbFwiID09PSBwcm9wVmFsdWVbXCJAQHRvU3RyaW5nVGFnXCJdIHx8IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIHByb3BWYWx1ZSBpbnN0YW5jZW9mIFN5bWJvbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRQcm9wVHlwZShwcm9wVmFsdWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvcFR5cGUgPSB0eXBlb2YgcHJvcFZhbHVlO1xuICAgICAgICAgICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkgPyBcImFycmF5XCIgOiBwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHAgPyBcIm9iamVjdFwiIDogaXNTeW1ib2wocHJvcFR5cGUsIHByb3BWYWx1ZSkgPyBcInN5bWJvbFwiIDogcHJvcFR5cGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRQcmVjaXNlVHlwZShwcm9wVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodm9pZCAwID09PSBwcm9wVmFsdWUgfHwgbnVsbCA9PT0gcHJvcFZhbHVlKSByZXR1cm4gXCJcIiArIHByb3BWYWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChcIm9iamVjdFwiID09PSBwcm9wVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgRGF0ZSkgcmV0dXJuIFwiZGF0ZVwiO1xuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgUmVnRXhwKSByZXR1cm4gXCJyZWdleHBcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3BUeXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0UG9zdGZpeEZvclR5cGVXYXJuaW5nKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBnZXRQcmVjaXNlVHlwZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIFwiYXJyYXlcIjpcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiYW4gXCIgKyB0eXBlO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICAgICAgICAgICAgY2FzZSBcImRhdGVcIjpcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJyZWdleHBcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiYSBcIiArIHR5cGU7XG5cbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0eXBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldENsYXNzTmFtZShwcm9wVmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcFZhbHVlLmNvbnN0cnVjdG9yICYmIHByb3BWYWx1ZS5jb25zdHJ1Y3Rvci5uYW1lID8gcHJvcFZhbHVlLmNvbnN0cnVjdG9yLm5hbWUgOiBBTk9OWU1PVVM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgSVRFUkFUT1JfU1lNQk9MID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgU3ltYm9sLml0ZXJhdG9yLCBGQVVYX0lURVJBVE9SX1NZTUJPTCA9IFwiQEBpdGVyYXRvclwiLCBBTk9OWU1PVVMgPSBcIjw8YW5vbnltb3VzPj5cIiwgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgICAgICAgICAgICAgYXJyYXk6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKFwiYXJyYXlcIiksXG4gICAgICAgICAgICAgICAgYm9vbDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoXCJib29sZWFuXCIpLFxuICAgICAgICAgICAgICAgIGZ1bmM6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKFwiZnVuY3Rpb25cIiksXG4gICAgICAgICAgICAgICAgbnVtYmVyOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcihcIm51bWJlclwiKSxcbiAgICAgICAgICAgICAgICBvYmplY3Q6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKFwib2JqZWN0XCIpLFxuICAgICAgICAgICAgICAgIHN0cmluZzogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoXCJzdHJpbmdcIiksXG4gICAgICAgICAgICAgICAgc3ltYm9sOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcihcInN5bWJvbFwiKSxcbiAgICAgICAgICAgICAgICBhbnk6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIoZW1wdHlGdW5jdGlvblRoYXRSZXR1cm5zTnVsbCk7XG4gICAgICAgICAgICAgICAgfSgpLFxuICAgICAgICAgICAgICAgIGFycmF5T2Y6IGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcixcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkRWxlbWVudChwcm9wVmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKFwiSW52YWxpZCBcIiArIGxvY2F0aW9uICsgXCIgYFwiICsgcHJvcEZ1bGxOYW1lICsgXCJgIG9mIHR5cGUgYFwiICsgZ2V0UHJvcFR5cGUocHJvcFZhbHVlKSArIFwiYCBzdXBwbGllZCB0byBgXCIgKyBjb21wb25lbnROYW1lICsgXCJgLCBleHBlY3RlZCBhIHNpbmdsZSBSZWFjdEVsZW1lbnQuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgICAgICAgICAgICAgICB9KCksXG4gICAgICAgICAgICAgICAgZWxlbWVudFR5cGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIVJlYWN0SXMuaXNWYWxpZEVsZW1lbnRUeXBlKHByb3BWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoXCJJbnZhbGlkIFwiICsgbG9jYXRpb24gKyBcIiBgXCIgKyBwcm9wRnVsbE5hbWUgKyBcImAgb2YgdHlwZSBgXCIgKyBnZXRQcm9wVHlwZShwcm9wVmFsdWUpICsgXCJgIHN1cHBsaWVkIHRvIGBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAsIGV4cGVjdGVkIGEgc2luZ2xlIFJlYWN0RWxlbWVudCB0eXBlLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gICAgICAgICAgICAgICAgfSgpLFxuICAgICAgICAgICAgICAgIGluc3RhbmNlT2Y6IGNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIsXG4gICAgICAgICAgICAgICAgbm9kZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzTm9kZShwcm9wc1twcm9wTmFtZV0pID8gbnVsbCA6IG5ldyBQcm9wVHlwZUVycm9yKFwiSW52YWxpZCBcIiArIGxvY2F0aW9uICsgXCIgYFwiICsgcHJvcEZ1bGxOYW1lICsgXCJgIHN1cHBsaWVkIHRvIGBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAsIGV4cGVjdGVkIGEgUmVhY3ROb2RlLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICAgICAgICAgICAgICAgIH0oKSxcbiAgICAgICAgICAgICAgICBvYmplY3RPZjogY3JlYXRlT2JqZWN0T2ZUeXBlQ2hlY2tlcixcbiAgICAgICAgICAgICAgICBvbmVPZjogY3JlYXRlRW51bVR5cGVDaGVja2VyLFxuICAgICAgICAgICAgICAgIG9uZU9mVHlwZTogY3JlYXRlVW5pb25UeXBlQ2hlY2tlcixcbiAgICAgICAgICAgICAgICBzaGFwZTogY3JlYXRlU2hhcGVUeXBlQ2hlY2tlcixcbiAgICAgICAgICAgICAgICBleGFjdDogY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlclxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBQcm9wVHlwZUVycm9yLnByb3RvdHlwZSA9IEVycm9yLnByb3RvdHlwZSwgUmVhY3RQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMgPSBjaGVja1Byb3BUeXBlcywgXG4gICAgICAgICAgICBSZWFjdFByb3BUeXBlcy5yZXNldFdhcm5pbmdDYWNoZSA9IGNoZWNrUHJvcFR5cGVzLnJlc2V0V2FybmluZ0NhY2hlLCBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcywgXG4gICAgICAgICAgICBSZWFjdFByb3BUeXBlcztcbiAgICAgICAgfTtcbiAgICB9LCBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgIGZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuICAgICAgICAgICAgaWYgKG51bGwgPT09IHZhbCB8fCB2b2lkIDAgPT09IHZhbCkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkXCIpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdCh2YWwpO1xuICAgICAgICB9XG4gICAgICAgIC8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuICAgICAgICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scywgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LCBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKCFPYmplY3QuYXNzaWduKSByZXR1cm4gITE7XG4gICAgICAgICAgICAgICAgdmFyIHRlc3QxID0gbmV3IFN0cmluZyhcImFiY1wiKTtcbiAgICAgICAgICAgICAgICBpZiAodGVzdDFbNV0gPSBcImRlXCIsIFwiNVwiID09PSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0pIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciB0ZXN0MiA9IHt9LCBpID0gMDsgaSA8IDEwOyBpKyspIHRlc3QyW1wiX1wiICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuICAgICAgICAgICAgICAgIGlmIChcIjAxMjM0NTY3ODlcIiAhPT0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXN0MltuXTtcbiAgICAgICAgICAgICAgICB9KS5qb2luKFwiXCIpKSByZXR1cm4gITE7XG4gICAgICAgICAgICAgICAgdmFyIHRlc3QzID0ge307XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiYWJjZGVmZ2hpamtsbW5vcHFyc3RcIi5zcGxpdChcIlwiKS5mb3JFYWNoKGZ1bmN0aW9uKGxldHRlcikge1xuICAgICAgICAgICAgICAgICAgICB0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuICAgICAgICAgICAgICAgIH0pLCBcImFiY2RlZmdoaWprbG1ub3BxcnN0XCIgPT09IE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbihcIlwiKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uKHRhcmdldCwgc291cmNlKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBmcm9tLCBzeW1ib2xzLCB0byA9IHRvT2JqZWN0KHRhcmdldCksIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG4gICAgICAgICAgICAgICAgZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBmcm9tKSBoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkgJiYgKHRvW2tleV0gPSBmcm9tW2tleV0pO1xuICAgICAgICAgICAgICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgc3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSBwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkgJiYgKHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRvO1xuICAgICAgICB9O1xuICAgIH0sIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgZnVuY3Rpb24gY2hlY2tQcm9wVHlwZXModHlwZVNwZWNzLCB2YWx1ZXMsIGxvY2F0aW9uLCBjb21wb25lbnROYW1lLCBnZXRTdGFjaykge1xuICAgICAgICAgICAgZm9yICh2YXIgdHlwZVNwZWNOYW1lIGluIHR5cGVTcGVjcykgaWYgKGhhcyh0eXBlU3BlY3MsIHR5cGVTcGVjTmFtZSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXJyb3I7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnIgPSBFcnJvcigoY29tcG9uZW50TmFtZSB8fCBcIlJlYWN0IGNsYXNzXCIpICsgXCI6IFwiICsgbG9jYXRpb24gKyBcIiB0eXBlIGBcIiArIHR5cGVTcGVjTmFtZSArIFwiYCBpcyBpbnZhbGlkOyBpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgZnJvbSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UsIGJ1dCByZWNlaXZlZCBgXCIgKyB0eXBlb2YgdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0gKyBcImAuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyLm5hbWUgPSBcIkludmFyaWFudCBWaW9sYXRpb25cIiwgZXJyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVycm9yID0gdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0odmFsdWVzLCB0eXBlU3BlY05hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBudWxsLCBSZWFjdFByb3BUeXBlc1NlY3JldCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBleDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFlcnJvciB8fCBlcnJvciBpbnN0YW5jZW9mIEVycm9yIHx8IHByaW50V2FybmluZygoY29tcG9uZW50TmFtZSB8fCBcIlJlYWN0IGNsYXNzXCIpICsgXCI6IHR5cGUgc3BlY2lmaWNhdGlvbiBvZiBcIiArIGxvY2F0aW9uICsgXCIgYFwiICsgdHlwZVNwZWNOYW1lICsgXCJgIGlzIGludmFsaWQ7IHRoZSB0eXBlIGNoZWNrZXIgZnVuY3Rpb24gbXVzdCByZXR1cm4gYG51bGxgIG9yIGFuIGBFcnJvcmAgYnV0IHJldHVybmVkIGEgXCIgKyB0eXBlb2YgZXJyb3IgKyBcIi4gWW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBwYXNzIGFuIGFyZ3VtZW50IHRvIHRoZSB0eXBlIGNoZWNrZXIgY3JlYXRvciAoYXJyYXlPZiwgaW5zdGFuY2VPZiwgb2JqZWN0T2YsIG9uZU9mLCBvbmVPZlR5cGUsIGFuZCBzaGFwZSBhbGwgcmVxdWlyZSBhbiBhcmd1bWVudCkuXCIpLCBcbiAgICAgICAgICAgICAgICBlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmICEoZXJyb3IubWVzc2FnZSBpbiBsb2dnZWRUeXBlRmFpbHVyZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlZFR5cGVGYWlsdXJlc1tlcnJvci5tZXNzYWdlXSA9ICEwO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RhY2sgPSBnZXRTdGFjayA/IGdldFN0YWNrKCkgOiBcIlwiO1xuICAgICAgICAgICAgICAgICAgICBwcmludFdhcm5pbmcoXCJGYWlsZWQgXCIgKyBsb2NhdGlvbiArIFwiIHR5cGU6IFwiICsgZXJyb3IubWVzc2FnZSArIChudWxsICE9IHN0YWNrID8gc3RhY2sgOiBcIlwiKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbigpIHt9LCBSZWFjdFByb3BUeXBlc1NlY3JldCA9IF9fd2VicGFja19yZXF1aXJlX18oNSksIGxvZ2dlZFR5cGVGYWlsdXJlcyA9IHt9LCBoYXMgPSBGdW5jdGlvbi5jYWxsLmJpbmQoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSk7XG4gICAgICAgIHByaW50V2FybmluZyA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0gXCJXYXJuaW5nOiBcIiArIHRleHQ7XG4gICAgICAgICAgICBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBjb25zb2xlICYmIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKHgpIHt9XG4gICAgICAgIH0sIGNoZWNrUHJvcFR5cGVzLnJlc2V0V2FybmluZ0NhY2hlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBsb2dnZWRUeXBlRmFpbHVyZXMgPSB7fTtcbiAgICAgICAgfSwgbW9kdWxlLmV4cG9ydHMgPSBjaGVja1Byb3BUeXBlcztcbiAgICB9LCBmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgIGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gICAgICAgICAgICBpZiAobnVsbCA9PSBzb3VyY2UpIHJldHVybiB7fTtcbiAgICAgICAgICAgIHZhciBrZXksIGksIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpO1xuICAgICAgICAgICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXSwgZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDAgfHwgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSAmJiAodGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgICAgICAgICAgIGlmIChudWxsID09IHNvdXJjZSkgcmV0dXJuIHt9O1xuICAgICAgICAgICAgdmFyIGtleSwgaSwgdGFyZ2V0ID0ge30sIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIGtleSA9IHNvdXJjZUtleXNbaV0sIGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwIHx8ICh0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldKTtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gTWVkaWFRdWVyeShfcmVmKSB7XG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLCBkZXZpY2UgPSBfcmVmLmRldmljZSwgb25DaGFuZ2UgPSBfcmVmLm9uQ2hhbmdlLCBzZXR0aW5ncyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbIFwiY2hpbGRyZW5cIiwgXCJkZXZpY2VcIiwgXCJvbkNoYW5nZVwiIF0pLCBtYXRjaGVzID0gT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fdXNlTWVkaWFRdWVyeV9fLmEpKHNldHRpbmdzLCBkZXZpY2UsIG9uQ2hhbmdlKTtcbiAgICAgICAgICAgIHJldHVybiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGNoaWxkcmVuID8gY2hpbGRyZW4obWF0Y2hlcykgOiBtYXRjaGVzID8gY2hpbGRyZW4gOiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIF9fd2VicGFja19leHBvcnRzX18uYSA9IE1lZGlhUXVlcnk7XG4gICAgICAgIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX3VzZU1lZGlhUXVlcnlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4gICAgfSBdKTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3QtcmVzcG9uc2l2ZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTExLjE3IDhsLS41OS0uNTlMOS4xNyA2SDR2MTJoMTZWOGgtOC44M3pNMTkgMTZ2MWgtOHYtMWMwLTEuMzMgMi42Ny0yIDQtMnM0IC42NyA0IDJ6bS00LTdjMS4xIDAgMiAuOSAyIDJzLS45IDItMiAyLTItLjktMi0yIC45LTIgMi0yelwiLFxuICBvcGFjaXR5OiBcIi4zXCJcbn0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTIwIDZoLThsLTItMkg0Yy0xLjEgMC0xLjk5LjktMS45OSAyTDIgMThjMCAxLjEuOSAyIDIgMmgxNmMxLjEgMCAyLS45IDItMlY4YzAtMS4xLS45LTItMi0yem0wIDEySDRWNmg1LjE3bDIgMkgyMHYxMHptLTUtNWMxLjEgMCAyLS45IDItMnMtLjktMi0yLTItMiAuOS0yIDIgLjkgMiAyIDJ6bS00IDN2MWg4di0xYzAtMS4zMy0yLjY3LTItNC0ycy00IC42Ny00IDJ6XCJcbn0pKSwgJ0ZvbGRlclNoYXJlZFR3b1RvbmUnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0yMSA1Yy0xLjExLS4zNS0yLjMzLS41LTMuNS0uNS0xLjk1IDAtNC4wNS40LTUuNSAxLjUtMS40NS0xLjEtMy41NS0xLjUtNS41LTEuNVMyLjQ1IDQuOSAxIDZ2MTQuNjVjMCAuMjUuMjUuNS41LjUuMSAwIC4xNS0uMDUuMjUtLjA1QzMuMSAyMC40NSA1LjA1IDIwIDYuNSAyMGMxLjk1IDAgNC4wNS40IDUuNSAxLjUgMS4zNS0uODUgMy44LTEuNSA1LjUtMS41IDEuNjUgMCAzLjM1LjMgNC43NSAxLjA1LjEuMDUuMTUuMDUuMjUuMDUuMjUgMCAuNS0uMjUuNS0uNVY2Yy0uNi0uNDUtMS4yNS0uNzUtMi0xek0zIDE4LjVWN2MxLjEtLjM1IDIuMy0uNSAzLjUtLjUgMS4zNCAwIDMuMTMuNDEgNC41Ljk5djExLjVDOS42MyAxOC40MSA3Ljg0IDE4IDYuNSAxOGMtMS4yIDAtMi40LjE1LTMuNS41em0xOCAwYy0xLjEtLjM1LTIuMy0uNS0zLjUtLjUtMS4zNCAwLTMuMTMuNDEtNC41Ljk5VjcuNDljMS4zNy0uNTkgMy4xNi0uOTkgNC41LS45OSAxLjIgMCAyLjQuMTUgMy41LjV2MTEuNXpcIlxufSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTEgNy40OWMtMS4zNy0uNTgtMy4xNi0uOTktNC41LS45OS0xLjIgMC0yLjQuMTUtMy41LjV2MTEuNWMxLjEtLjM1IDIuMy0uNSAzLjUtLjUgMS4zNCAwIDMuMTMuNDEgNC41Ljk5VjcuNDl6XCIsXG4gIG9wYWNpdHk6IFwiLjNcIlxufSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTcuNSAxMC41Yy44OCAwIDEuNzMuMDkgMi41LjI2VjkuMjRjLS43OS0uMTUtMS42NC0uMjQtMi41LS4yNC0xLjI4IDAtMi40Ni4xNi0zLjUuNDd2MS41N2MuOTktLjM1IDIuMTgtLjU0IDMuNS0uNTR6TTE3LjUgMTMuMTZjLjg4IDAgMS43My4wOSAyLjUuMjZWMTEuOWMtLjc5LS4xNS0xLjY0LS4yNC0yLjUtLjI0LTEuMjggMC0yLjQ2LjE2LTMuNS40N3YxLjU3Yy45OS0uMzQgMi4xOC0uNTQgMy41LS41NHpNMTcuNSAxNS44M2MuODggMCAxLjczLjA5IDIuNS4yNnYtMS41MmMtLjc5LS4xNS0xLjY0LS4yNC0yLjUtLjI0LTEuMjggMC0yLjQ2LjE2LTMuNS40N3YxLjU3Yy45OS0uMzUgMi4xOC0uNTQgMy41LS41NHpcIlxufSkpKSwgJ01lbnVCb29rVHdvVG9uZScpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTEyIDMuOTljLTQuNDIgMC04IDMuNTgtOCA4czMuNTggOCA4IDggOC0zLjU4IDgtOC0zLjU4LTgtOC04em00LjI1IDEyLjI0Yy0yLjM1IDIuMzQtNi4xNSAyLjM0LTguNDkgMEwxMiAxMS45OXYtNmMxLjU0IDAgMy4wNy41OSA0LjI0IDEuNzYgMi4zNSAyLjM0IDIuMzUgNi4xNC4wMSA4LjQ4elwiLFxuICBvcGFjaXR5OiBcIi4zXCJcbn0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE2LjI0IDcuNzVjLTEuMTctMS4xNy0yLjctMS43Ni00LjI0LTEuNzZ2NmwtNC4yNCA0LjI0YzIuMzQgMi4zNCA2LjE0IDIuMzQgOC40OSAwIDIuMzQtMi4zNCAyLjM0LTYuMTQtLjAxLTguNDh6TTEyIDEuOTljLTUuNTIgMC0xMCA0LjQ4LTEwIDEwczQuNDggMTAgMTAgMTAgMTAtNC40OCAxMC0xMC00LjQ4LTEwLTEwLTEwem0wIDE4Yy00LjQyIDAtOC0zLjU4LTgtOHMzLjU4LTggOC04IDggMy41OCA4IDgtMy41OCA4LTggOHpcIlxufSkpLCAnVGltZWxhcHNlVHdvVG9uZScpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTExLjkyIDguMjhjLjI0LTEuNC0uMTYtMi44OS0xLjI0LTMuOTYtLjk0LS45NS0yLjItMS4zOS0zLjQ0LTEuMzJsMy4wOSAzLjA5LTQuMjQgNC4yNEwzIDcuMjRjLS4wNyAxLjI0LjM3IDIuNDkgMS4zMSAzLjQ0IDEuMDQgMS4wNCAyLjQ3IDEuNDUgMy44MyAxLjI1LjcxLS4xIDEuNC0uMzggMi0uODJsOS40NiA5LjQ2Ljg4LS44OC05LjQ1LTkuNDVjLjQ3LS42Ljc3LTEuMjYuODktMS45NnpcIixcbiAgb3BhY2l0eTogXCIuM1wiXG59KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0yMi42MSAxOC45N0wxMy41NCA5LjljLjkzLTIuMzQuNDUtNS4xLTEuNDQtN0M5LjguNiA2LjIyLjM5IDMuNjcgMi4yNUw3LjUgNi4wOCA2LjA4IDcuNSAyLjI1IDMuNjdDLjM5IDYuMjEuNiA5Ljc5IDIuOSAxMi4wOWMxLjg2IDEuODYgNC41NyAyLjM1IDYuODkgMS40OGw5LjExIDkuMTFjLjM5LjM5IDEuMDIuMzkgMS40MSAwbDIuMy0yLjNjLjQtLjM4LjQtMS4wMiAwLTEuNDF6bS0zIDEuNmwtOS40Ni05LjQ2Yy0uNjEuNDUtMS4yOS43Mi0yIC44Mi0xLjM2LjItMi43OS0uMjEtMy44My0xLjI1LS45NS0uOTQtMS4zOS0yLjItMS4zMi0zLjQ0bDMuMDkgMy4wOSA0LjI0LTQuMjRMNy4yNCAzYzEuMjQtLjA3IDIuNDkuMzcgMy40NCAxLjMxIDEuMDggMS4wOCAxLjQ5IDIuNTcgMS4yNCAzLjk2LS4xMi43LS40MiAxLjM2LS44OCAxLjk1bDkuNDUgOS40NS0uODguOXpcIlxufSkpLCAnQnVpbGRUd29Ub25lJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNNCA4aDE2djExSDR6XCIsXG4gIG9wYWNpdHk6IFwiLjNcIlxufSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMjAgNmgtNFY0YzAtMS4xMS0uODktMi0yLTJoLTRjLTEuMTEgMC0yIC44OS0yIDJ2Mkg0Yy0xLjExIDAtMS45OS44OS0xLjk5IDJMMiAxOWMwIDEuMTEuODkgMiAyIDJoMTZjMS4xMSAwIDItLjg5IDItMlY4YzAtMS4xMS0uODktMi0yLTJ6TTEwIDRoNHYyaC00VjR6bTEwIDE1SDRWOGgxNnYxMXpcIlxufSkpLCAnV29ya1R3b1RvbmUnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk01IDE5LjA5aDE0VjQuOTFINXYxNC4xOHpNNiA3aDEydjJINlY3em0wIDRoMTJ2Mkg2di0yem0wIDRoMTJ2Mkg2di0yelwiLFxuICBvcGFjaXR5OiBcIi4zXCJcbn0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE5LjUgMy41TDE4IDJsLTEuNSAxLjVMMTUgMmwtMS41IDEuNUwxMiAybC0xLjUgMS41TDkgMiA3LjUgMy41IDYgMiA0LjUgMy41IDMgMnYyMGwxLjUtMS41TDYgMjJsMS41LTEuNUw5IDIybDEuNS0xLjVMMTIgMjJsMS41LTEuNUwxNSAyMmwxLjUtMS41TDE4IDIybDEuNS0xLjVMMjEgMjJWMmwtMS41IDEuNXpNMTkgMTkuMDlINVY0LjkxaDE0djE0LjE4ek02IDE1aDEydjJINnptMC00aDEydjJINnptMC00aDEydjJINnpcIlxufSkpLCAnUmVjZWlwdFR3b1RvbmUnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk05IDEyaDZ2OEg5elwiLFxuICBvcGFjaXR5OiBcIi4zXCJcbn0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTEyIDFDOC45OCAxIDYuMjQgMi4yMyA0LjI1IDQuMjFsMS40MSAxLjQxQzcuMjggNCA5LjUzIDMgMTIgM3M0LjcyIDEgNi4zNCAyLjYybDEuNDEtMS40MUMxNy43NiAyLjIzIDE1LjAyIDEgMTIgMXpNNyA3LjA3TDguNDMgOC41Yy45MS0uOTEgMi4xOC0xLjQ4IDMuNTctMS40OHMyLjY2LjU3IDMuNTcgMS40OEwxNyA3LjA3QzE1LjcyIDUuNzkgMTMuOTUgNSAxMiA1cy0zLjcyLjc5LTUgMi4wN3ptNy44NiAyLjk0TDkuMTQgMTBDOC41MSAxMCA4IDEwLjUxIDggMTEuMTR2OS43MWMwIC42My41MSAxLjE0IDEuMTQgMS4xNGg1LjcxYy42MyAwIDEuMTQtLjUxIDEuMTQtMS4xNHYtOS43MWMuMDEtLjYzLS41LTEuMTMtMS4xMy0xLjEzek0xNSAyMEg5di04aDZ2OHpcIlxufSkpLCAnU3BlYWtlclBob25lVHdvVG9uZScpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE5IDhINWMtMS42NiAwLTMgMS4zNC0zIDN2Nmg0djRoMTJ2LTRoNHYtNmMwLTEuNjYtMS4zNC0zLTMtM3ptLTMgMTFIOHYtNWg4djV6bTMtN2MtLjU1IDAtMS0uNDUtMS0xcy40NS0xIDEtMSAxIC40NSAxIDEtLjQ1IDEtMSAxem0tMS05SDZ2NGgxMlYzelwiXG59KSwgJ1ByaW50Jyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTQuMFxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGw9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLHA9bj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxxPW4/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixyPW4/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHQ9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsdT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCx2PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHc9bj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx4PW4/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHk9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsej1uP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LEE9bj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTpcbjYwMTE2LEI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEMoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9XG52YXIgRD17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sRT17fTtmdW5jdGlvbiBGKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUU7dGhpcy51cGRhdGVyPWN8fER9Ri5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtGLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3IoQyg4NSkpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07Ri5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07XG5mdW5jdGlvbiBHKCl7fUcucHJvdG90eXBlPUYucHJvdG90eXBlO2Z1bmN0aW9uIEgoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RTt0aGlzLnVwZGF0ZXI9Y3x8RH12YXIgST1ILnByb3RvdHlwZT1uZXcgRztJLmNvbnN0cnVjdG9yPUg7bChJLEYucHJvdG90eXBlKTtJLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBKPXtjdXJyZW50Om51bGx9LEs9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixjKXt2YXIgZSxkPXt9LGc9bnVsbCxrPW51bGw7aWYobnVsbCE9Yilmb3IoZSBpbiB2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUsuY2FsbChiLGUpJiYhTC5oYXNPd25Qcm9wZXJ0eShlKSYmKGRbZV09YltlXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49YztlbHNlIGlmKDE8Zil7Zm9yKHZhciBoPUFycmF5KGYpLG09MDttPGY7bSsrKWhbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1ofWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihlIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1kW2VdJiYoZFtlXT1mW2VdKTtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEsa2V5OmcscmVmOmsscHJvcHM6ZCxfb3duZXI6Si5jdXJyZW50fX1cbmZ1bmN0aW9uIE4oYSxiKXtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE8oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXB9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgUD0vXFwvKy9nLFE9W107ZnVuY3Rpb24gUihhLGIsYyxlKXtpZihRLmxlbmd0aCl7dmFyIGQ9US5wb3AoKTtkLnJlc3VsdD1hO2Qua2V5UHJlZml4PWI7ZC5mdW5jPWM7ZC5jb250ZXh0PWU7ZC5jb3VudD0wO3JldHVybiBkfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmMsY29udGV4dDplLGNvdW50OjB9fVxuZnVuY3Rpb24gUyhhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPlEubGVuZ3RoJiZRLnB1c2goYSl9XG5mdW5jdGlvbiBUKGEsYixjLGUpe3ZhciBkPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1kfHxcImJvb2xlYW5cIj09PWQpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBwOmNhc2UgcTpnPSEwfX1pZihnKXJldHVybiBjKGUsYSxcIlwiPT09Yj9cIi5cIitVKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBrPTA7azxhLmxlbmd0aDtrKyspe2Q9YVtrXTt2YXIgZj1iK1UoZCxrKTtnKz1UKGQsZixjLGUpfWVsc2UgaWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYT9mPW51bGw6KGY9QiYmYVtCXXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxrPVxuMDshKGQ9YS5uZXh0KCkpLmRvbmU7KWQ9ZC52YWx1ZSxmPWIrVShkLGsrKyksZys9VChkLGYsYyxlKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1kKXRocm93IGM9XCJcIithLEVycm9yKEMoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWM/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YyxcIlwiKSk7cmV0dXJuIGd9ZnVuY3Rpb24gVihhLGIsYyl7cmV0dXJuIG51bGw9PWE/MDpUKGEsXCJcIixiLGMpfWZ1bmN0aW9uIFUoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIFcoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gYWEoYSxiLGMpe3ZhciBlPWEucmVzdWx0LGQ9YS5rZXlQcmVmaXg7YT1hLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspO0FycmF5LmlzQXJyYXkoYSk/WChhLGUsYyxmdW5jdGlvbihhKXtyZXR1cm4gYX0pOm51bGwhPWEmJihPKGEpJiYoYT1OKGEsZCsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIikrYykpLGUucHVzaChhKSl9ZnVuY3Rpb24gWChhLGIsYyxlLGQpe3ZhciBnPVwiXCI7bnVsbCE9YyYmKGc9KFwiXCIrYykucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKTtiPVIoYixnLGUsZCk7VihhLGFhLGIpO1MoYil9dmFyIFk9e2N1cnJlbnQ6bnVsbH07ZnVuY3Rpb24gWigpe3ZhciBhPVkuY3VycmVudDtpZihudWxsPT09YSl0aHJvdyBFcnJvcihDKDMyMSkpO3JldHVybiBhfVxudmFyIGJhPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlksUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6e3N1c3BlbnNlOm51bGx9LFJlYWN0Q3VycmVudE93bmVyOkosSXNTb21lUmVuZGVyZXJBY3Rpbmc6e2N1cnJlbnQ6ITF9LGFzc2lnbjpsfTtleHBvcnRzLkNoaWxkcmVuPXttYXA6ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGU9W107WChhLGUsbnVsbCxiLGMpO3JldHVybiBlfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO2I9UihudWxsLG51bGwsYixjKTtWKGEsVyxiKTtTKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gVihhLGZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1goYSxiLG51bGwsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtpZighTyhhKSl0aHJvdyBFcnJvcihDKDE0MykpO3JldHVybiBhfX07XG5leHBvcnRzLkNvbXBvbmVudD1GO2V4cG9ydHMuRnJhZ21lbnQ9cjtleHBvcnRzLlByb2ZpbGVyPXU7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUg7ZXhwb3J0cy5TdHJpY3RNb2RlPXQ7ZXhwb3J0cy5TdXNwZW5zZT15O2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9YmE7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsYyl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoQygyNjcsYSkpO3ZhciBlPWwoe30sYS5wcm9wcyksZD1hLmtleSxnPWEucmVmLGs9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihnPWIucmVmLGs9Si5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBmPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGggaW4gYilLLmNhbGwoYixoKSYmIUwuaGFzT3duUHJvcGVydHkoaCkmJihlW2hdPXZvaWQgMD09PWJbaF0mJnZvaWQgMCE9PWY/ZltoXTpiW2hdKX12YXIgaD1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWgpZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxoKXtmPUFycmF5KGgpO2Zvcih2YXIgbT0wO208aDttKyspZlttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWZ9cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsXG5rZXk6ZCxyZWY6Zyxwcm9wczplLF9vd25lcjprfX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6dyxfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnYsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PU07ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtleHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOngscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PU87XG5leHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOkEsX2N0b3I6YSxfc3RhdHVzOi0xLF9yZXN1bHQ6bnVsbH19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp6LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VDb250ZXh0KGEsYil9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBaKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsYyl9O1xuZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUxheW91dEVmZmVjdChhLGIpfTtleHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gWigpLnVzZVJlZHVjZXIoYSxiLGMpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gWigpLnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gWigpLnVzZVN0YXRlKGEpfTtleHBvcnRzLnZlcnNpb249XCIxNi4xNC4wXCI7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjE0LjBcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbj1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxyPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24gdShhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1pZighYWEpdGhyb3cgRXJyb3IodSgyMjcpKTtcbmZ1bmN0aW9uIGJhKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fXZhciBkYT0hMSxlYT1udWxsLGZhPSExLGhhPW51bGwsaWE9e29uRXJyb3I6ZnVuY3Rpb24oYSl7ZGE9ITA7ZWE9YX19O2Z1bmN0aW9uIGphKGEsYixjLGQsZSxmLGcsaCxrKXtkYT0hMTtlYT1udWxsO2JhLmFwcGx5KGlhLGFyZ3VtZW50cyl9ZnVuY3Rpb24ga2EoYSxiLGMsZCxlLGYsZyxoLGspe2phLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihkYSl7aWYoZGEpe3ZhciBsPWVhO2RhPSExO2VhPW51bGx9ZWxzZSB0aHJvdyBFcnJvcih1KDE5OCkpO2ZhfHwoZmE9ITAsaGE9bCl9fXZhciBsYT1udWxsLG1hPW51bGwsbmE9bnVsbDtcbmZ1bmN0aW9uIG9hKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1uYShjKTtrYShkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfXZhciBwYT1udWxsLHFhPXt9O1xuZnVuY3Rpb24gcmEoKXtpZihwYSlmb3IodmFyIGEgaW4gcWEpe3ZhciBiPXFhW2FdLGM9cGEuaW5kZXhPZihhKTtpZighKC0xPGMpKXRocm93IEVycm9yKHUoOTYsYSkpO2lmKCFzYVtjXSl7aWYoIWIuZXh0cmFjdEV2ZW50cyl0aHJvdyBFcnJvcih1KDk3LGEpKTtzYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxnPWIsaD1kO2lmKHRhLmhhc093blByb3BlcnR5KGgpKXRocm93IEVycm9yKHUoOTksaCkpO3RhW2hdPWY7dmFyIGs9Zi5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztpZihrKXtmb3IoZSBpbiBrKWsuaGFzT3duUHJvcGVydHkoZSkmJnVhKGtbZV0sZyxoKTtlPSEwfWVsc2UgZi5yZWdpc3RyYXRpb25OYW1lPyh1YShmLnJlZ2lzdHJhdGlvbk5hbWUsZyxoKSxlPSEwKTplPSExO2lmKCFlKXRocm93IEVycm9yKHUoOTgsZCxhKSk7fX19fVxuZnVuY3Rpb24gdWEoYSxiLGMpe2lmKHZhW2FdKXRocm93IEVycm9yKHUoMTAwLGEpKTt2YVthXT1iO3dhW2FdPWIuZXZlbnRUeXBlc1tjXS5kZXBlbmRlbmNpZXN9dmFyIHNhPVtdLHRhPXt9LHZhPXt9LHdhPXt9O2Z1bmN0aW9uIHhhKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO2lmKCFxYS5oYXNPd25Qcm9wZXJ0eShjKXx8cWFbY10hPT1kKXtpZihxYVtjXSl0aHJvdyBFcnJvcih1KDEwMixjKSk7cWFbY109ZDtiPSEwfX1iJiZyYSgpfXZhciB5YT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksemE9bnVsbCxBYT1udWxsLEJhPW51bGw7XG5mdW5jdGlvbiBDYShhKXtpZihhPW1hKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgemEpdGhyb3cgRXJyb3IodSgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1sYShiKSx6YShhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBEYShhKXtBYT9CYT9CYS5wdXNoKGEpOkJhPVthXTpBYT1hfWZ1bmN0aW9uIEVhKCl7aWYoQWEpe3ZhciBhPUFhLGI9QmE7QmE9QWE9bnVsbDtDYShhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQ2EoYlthXSl9fWZ1bmN0aW9uIEZhKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gR2EoYSxiLGMsZCxlKXtyZXR1cm4gYShiLGMsZCxlKX1mdW5jdGlvbiBIYSgpe312YXIgSWE9RmEsSmE9ITEsS2E9ITE7ZnVuY3Rpb24gTGEoKXtpZihudWxsIT09QWF8fG51bGwhPT1CYSlIYSgpLEVhKCl9XG5mdW5jdGlvbiBNYShhLGIsYyl7aWYoS2EpcmV0dXJuIGEoYixjKTtLYT0hMDt0cnl7cmV0dXJuIElhKGEsYixjKX1maW5hbGx5e0thPSExLExhKCl9fXZhciBOYT0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sT2E9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxQYT17fSxRYT17fTtcbmZ1bmN0aW9uIFJhKGEpe2lmKE9hLmNhbGwoUWEsYSkpcmV0dXJuITA7aWYoT2EuY2FsbChQYSxhKSlyZXR1cm4hMTtpZihOYS50ZXN0KGEpKXJldHVybiBRYVthXT0hMDtQYVthXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBTYShhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIFRhKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fFNhKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gdihhLGIsYyxkLGUsZil7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWZ9dmFyIEM9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwwLCExLGEsbnVsbCwhMSl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07Q1tiXT1uZXcgdihiLDEsITEsYVsxXSxudWxsLCExKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwyLCExLGEsbnVsbCwhMSl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwzLCEwLGEsbnVsbCwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSw0LCExLGEsbnVsbCwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDYsITEsYSxudWxsLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7dmFyIFVhPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gVmEoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoVWEsXG5WYSk7Q1tiXT1uZXcgdihiLDEsITEsYSxudWxsLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFVhLFZhKTtDW2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFVhLFZhKTtDW2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5DLnhsaW5rSHJlZj1uZXcgdihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITApO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITApfSk7dmFyIFdhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1dhLmhhc093blByb3BlcnR5KFwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlclwiKXx8KFdhLlJlYWN0Q3VycmVudERpc3BhdGNoZXI9e2N1cnJlbnQ6bnVsbH0pO1dhLmhhc093blByb3BlcnR5KFwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWdcIil8fChXYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZz17c3VzcGVuc2U6bnVsbH0pO1xuZnVuY3Rpb24gWGEoYSxiLGMsZCl7dmFyIGU9Qy5oYXNPd25Qcm9wZXJ0eShiKT9DW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwoVGEoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP1JhKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG52YXIgWWE9L14oLiopW1xcXFxcXC9dLyxFPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsWmE9RT9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMywkYT1FP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsYWI9RT9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsYmI9RT9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsY2I9RT9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsZGI9RT9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksZWI9RT9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxmYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsZ2I9RT9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIsaGI9RT9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsaWI9RT9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTpcbjYwMTIwLGpiPUU/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsa2I9RT9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNixsYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5ibG9ja1wiKTo2MDEyMSxtYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gbmIoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPW1iJiZhW21iXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfWZ1bmN0aW9uIG9iKGEpe2lmKC0xPT09YS5fc3RhdHVzKXthLl9zdGF0dXM9MDt2YXIgYj1hLl9jdG9yO2I9YigpO2EuX3Jlc3VsdD1iO2IudGhlbihmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYj1iLmRlZmF1bHQsYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWIpfSxmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWIpfSl9fVxuZnVuY3Rpb24gcGIoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSBhYjpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSAkYTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgY2I6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgYmI6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBoYjpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBpYjpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBlYjpyZXR1cm5cIkNvbnRleHQuQ29uc3VtZXJcIjtjYXNlIGRiOnJldHVyblwiQ29udGV4dC5Qcm92aWRlclwiO2Nhc2UgZ2I6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7cmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcblwiRm9yd2FyZFJlZlwiKTtjYXNlIGpiOnJldHVybiBwYihhLnR5cGUpO2Nhc2UgbGI6cmV0dXJuIHBiKGEucmVuZGVyKTtjYXNlIGtiOmlmKGE9MT09PWEuX3N0YXR1cz9hLl9yZXN1bHQ6bnVsbClyZXR1cm4gcGIoYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcWIoYSl7dmFyIGI9XCJcIjtkb3thOnN3aXRjaChhLnRhZyl7Y2FzZSAzOmNhc2UgNDpjYXNlIDY6Y2FzZSA3OmNhc2UgMTA6Y2FzZSA5OnZhciBjPVwiXCI7YnJlYWsgYTtkZWZhdWx0OnZhciBkPWEuX2RlYnVnT3duZXIsZT1hLl9kZWJ1Z1NvdXJjZSxmPXBiKGEudHlwZSk7Yz1udWxsO2QmJihjPXBiKGQudHlwZSkpO2Q9ZjtmPVwiXCI7ZT9mPVwiIChhdCBcIitlLmZpbGVOYW1lLnJlcGxhY2UoWWEsXCJcIikrXCI6XCIrZS5saW5lTnVtYmVyK1wiKVwiOmMmJihmPVwiIChjcmVhdGVkIGJ5IFwiK2MrXCIpXCIpO2M9XCJcXG4gICAgaW4gXCIrKGR8fFwiVW5rbm93blwiKStmfWIrPWM7YT1hLnJldHVybn13aGlsZShhKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIHJiKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1mdW5jdGlvbiBzYihhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gdGIoYSl7dmFyIGI9c2IoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIHhiKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj10YihhKSl9ZnVuY3Rpb24geWIoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPXNiKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9ZnVuY3Rpb24gemIoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIG4oe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfVxuZnVuY3Rpb24gQWIoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9cmIobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBCYihhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJlhhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBDYihhLGIpe0JiKGEsYik7dmFyIGM9cmIoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/RGIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmRGIoYSxiLnR5cGUscmIoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBFYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gRGIoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxhLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfWZ1bmN0aW9uIEZiKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGwhPWEmJihiKz1hKX0pO3JldHVybiBifWZ1bmN0aW9uIEdiKGEsYil7YT1uKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9RmIoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfVxuZnVuY3Rpb24gSGIoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK3JiKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBJYihhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgRXJyb3IodSg5MSkpO3JldHVybiBuKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIEpiKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuY2hpbGRyZW47Yj1iLmRlZmF1bHRWYWx1ZTtpZihudWxsIT1jKXtpZihudWxsIT1iKXRocm93IEVycm9yKHUoOTIpKTtpZihBcnJheS5pc0FycmF5KGMpKXtpZighKDE+PWMubGVuZ3RoKSl0aHJvdyBFcnJvcih1KDkzKSk7Yz1jWzBdfWI9Y31udWxsPT1iJiYoYj1cIlwiKTtjPWJ9YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6cmIoYyl9fVxuZnVuY3Rpb24gS2IoYSxiKXt2YXIgYz1yYihiLnZhbHVlKSxkPXJiKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gTGIoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmXCJcIiE9PWImJm51bGwhPT1iJiYoYS52YWx1ZT1iKX12YXIgTWI9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gTmIoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBPYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/TmIoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgUGIsUWI9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09TWIuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7UGI9UGJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7UGIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9UGIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gUmIoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1mdW5jdGlvbiBTYihhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBUYj17YW5pbWF0aW9uZW5kOlNiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOlNiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6U2IoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6U2IoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxVYj17fSxWYj17fTtcbnlhJiYoVmI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgVGIuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgVGIuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgVGIuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgVGIudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBXYihhKXtpZihVYlthXSlyZXR1cm4gVWJbYV07aWYoIVRiW2FdKXJldHVybiBhO3ZhciBiPVRiW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIFZiKXJldHVybiBVYlthXT1iW2NdO3JldHVybiBhfVxudmFyIFhiPVdiKFwiYW5pbWF0aW9uZW5kXCIpLFliPVdiKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLFpiPVdiKFwiYW5pbWF0aW9uc3RhcnRcIiksJGI9V2IoXCJ0cmFuc2l0aW9uZW5kXCIpLGFjPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxiYz1uZXcgKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwKTtmdW5jdGlvbiBjYyhhKXt2YXIgYj1iYy5nZXQoYSk7dm9pZCAwPT09YiYmKGI9bmV3IE1hcCxiYy5zZXQoYSxiKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBkYyhhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZWZmZWN0VGFnJjEwMjYpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiBlYyhhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIGZjKGEpe2lmKGRjKGEpIT09YSl0aHJvdyBFcnJvcih1KDE4OCkpO31cbmZ1bmN0aW9uIGdjKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPWRjKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHUoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIGZjKGUpLGE7aWYoZj09PWQpcmV0dXJuIGZjKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IodSgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcih1KDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHUoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcih1KDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gaGMoYSl7YT1nYyhhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGljKGEsYil7aWYobnVsbD09Yil0aHJvdyBFcnJvcih1KDMwKSk7aWYobnVsbD09YSlyZXR1cm4gYjtpZihBcnJheS5pc0FycmF5KGEpKXtpZihBcnJheS5pc0FycmF5KGIpKXJldHVybiBhLnB1c2guYXBwbHkoYSxiKSxhO2EucHVzaChiKTtyZXR1cm4gYX1yZXR1cm4gQXJyYXkuaXNBcnJheShiKT9bYV0uY29uY2F0KGIpOlthLGJdfWZ1bmN0aW9uIGpjKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciBrYz1udWxsO1xuZnVuY3Rpb24gbGMoYSl7aWYoYSl7dmFyIGI9YS5fZGlzcGF0Y2hMaXN0ZW5lcnMsYz1hLl9kaXNwYXRjaEluc3RhbmNlcztpZihBcnJheS5pc0FycmF5KGIpKWZvcih2YXIgZD0wO2Q8Yi5sZW5ndGgmJiFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7ZCsrKW9hKGEsYltkXSxjW2RdKTtlbHNlIGImJm9hKGEsYixjKTthLl9kaXNwYXRjaExpc3RlbmVycz1udWxsO2EuX2Rpc3BhdGNoSW5zdGFuY2VzPW51bGw7YS5pc1BlcnNpc3RlbnQoKXx8YS5jb25zdHJ1Y3Rvci5yZWxlYXNlKGEpfX1mdW5jdGlvbiBtYyhhKXtudWxsIT09YSYmKGtjPWljKGtjLGEpKTthPWtjO2tjPW51bGw7aWYoYSl7amMoYSxsYyk7aWYoa2MpdGhyb3cgRXJyb3IodSg5NSkpO2lmKGZhKXRocm93IGE9aGEsZmE9ITEsaGE9bnVsbCxhO319XG5mdW5jdGlvbiBuYyhhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9ZnVuY3Rpb24gb2MoYSl7aWYoIXlhKXJldHVybiExO2E9XCJvblwiK2E7dmFyIGI9YSBpbiBkb2N1bWVudDtifHwoYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGIuc2V0QXR0cmlidXRlKGEsXCJyZXR1cm47XCIpLGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGJbYV0pO3JldHVybiBifXZhciBwYz1bXTtmdW5jdGlvbiBxYyhhKXthLnRvcExldmVsVHlwZT1udWxsO2EubmF0aXZlRXZlbnQ9bnVsbDthLnRhcmdldEluc3Q9bnVsbDthLmFuY2VzdG9ycy5sZW5ndGg9MDsxMD5wYy5sZW5ndGgmJnBjLnB1c2goYSl9XG5mdW5jdGlvbiByYyhhLGIsYyxkKXtpZihwYy5sZW5ndGgpe3ZhciBlPXBjLnBvcCgpO2UudG9wTGV2ZWxUeXBlPWE7ZS5ldmVudFN5c3RlbUZsYWdzPWQ7ZS5uYXRpdmVFdmVudD1iO2UudGFyZ2V0SW5zdD1jO3JldHVybiBlfXJldHVybnt0b3BMZXZlbFR5cGU6YSxldmVudFN5c3RlbUZsYWdzOmQsbmF0aXZlRXZlbnQ6Yix0YXJnZXRJbnN0OmMsYW5jZXN0b3JzOltdfX1cbmZ1bmN0aW9uIHNjKGEpe3ZhciBiPWEudGFyZ2V0SW5zdCxjPWI7ZG97aWYoIWMpe2EuYW5jZXN0b3JzLnB1c2goYyk7YnJlYWt9dmFyIGQ9YztpZigzPT09ZC50YWcpZD1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Vsc2V7Zm9yKDtkLnJldHVybjspZD1kLnJldHVybjtkPTMhPT1kLnRhZz9udWxsOmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm99aWYoIWQpYnJlYWs7Yj1jLnRhZzs1IT09YiYmNiE9PWJ8fGEuYW5jZXN0b3JzLnB1c2goYyk7Yz10YyhkKX13aGlsZShjKTtmb3IoYz0wO2M8YS5hbmNlc3RvcnMubGVuZ3RoO2MrKyl7Yj1hLmFuY2VzdG9yc1tjXTt2YXIgZT1uYyhhLm5hdGl2ZUV2ZW50KTtkPWEudG9wTGV2ZWxUeXBlO3ZhciBmPWEubmF0aXZlRXZlbnQsZz1hLmV2ZW50U3lzdGVtRmxhZ3M7MD09PWMmJihnfD02NCk7Zm9yKHZhciBoPW51bGwsaz0wO2s8c2EubGVuZ3RoO2srKyl7dmFyIGw9c2Fba107bCYmKGw9bC5leHRyYWN0RXZlbnRzKGQsYixmLGUsZykpJiYoaD1cbmljKGgsbCkpfW1jKGgpfX1mdW5jdGlvbiB1YyhhLGIsYyl7aWYoIWMuaGFzKGEpKXtzd2l0Y2goYSl7Y2FzZSBcInNjcm9sbFwiOnZjKGIsXCJzY3JvbGxcIiwhMCk7YnJlYWs7Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImJsdXJcIjp2YyhiLFwiZm9jdXNcIiwhMCk7dmMoYixcImJsdXJcIiwhMCk7Yy5zZXQoXCJibHVyXCIsbnVsbCk7Yy5zZXQoXCJmb2N1c1wiLG51bGwpO2JyZWFrO2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xvc2VcIjpvYyhhKSYmdmMoYixhLCEwKTticmVhaztjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztkZWZhdWx0Oi0xPT09YWMuaW5kZXhPZihhKSYmRihhLGIpfWMuc2V0KGEsbnVsbCl9fVxudmFyIHdjLHhjLHljLHpjPSExLEFjPVtdLEJjPW51bGwsQ2M9bnVsbCxEYz1udWxsLEVjPW5ldyBNYXAsRmM9bmV3IE1hcCxHYz1bXSxIYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNsb3NlIGNhbmNlbCBjb3B5IGN1dCBwYXN0ZSBjbGljayBjaGFuZ2UgY29udGV4dG1lbnUgcmVzZXQgc3VibWl0XCIuc3BsaXQoXCIgXCIpLEljPVwiZm9jdXMgYmx1ciBkcmFnZW50ZXIgZHJhZ2xlYXZlIG1vdXNlb3ZlciBtb3VzZW91dCBwb2ludGVyb3ZlciBwb2ludGVyb3V0IGdvdHBvaW50ZXJjYXB0dXJlIGxvc3Rwb2ludGVyY2FwdHVyZVwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIEpjKGEsYil7dmFyIGM9Y2MoYik7SGMuZm9yRWFjaChmdW5jdGlvbihhKXt1YyhhLGIsYyl9KTtJYy5mb3JFYWNoKGZ1bmN0aW9uKGEpe3VjKGEsYixjKX0pfWZ1bmN0aW9uIEtjKGEsYixjLGQsZSl7cmV0dXJue2Jsb2NrZWRPbjphLHRvcExldmVsVHlwZTpiLGV2ZW50U3lzdGVtRmxhZ3M6Y3wzMixuYXRpdmVFdmVudDplLGNvbnRhaW5lcjpkfX1cbmZ1bmN0aW9uIExjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6QmM9bnVsbDticmVhaztjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdsZWF2ZVwiOkNjPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJtb3VzZW91dFwiOkRjPW51bGw7YnJlYWs7Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpFYy5kZWxldGUoYi5wb2ludGVySWQpO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpGYy5kZWxldGUoYi5wb2ludGVySWQpfX1mdW5jdGlvbiBNYyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPUtjKGIsYyxkLGUsZiksbnVsbCE9PWImJihiPU5jKGIpLG51bGwhPT1iJiZ4YyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBPYyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNcIjpyZXR1cm4gQmM9TWMoQmMsYSxiLGMsZCxlKSwhMDtjYXNlIFwiZHJhZ2VudGVyXCI6cmV0dXJuIENjPU1jKENjLGEsYixjLGQsZSksITA7Y2FzZSBcIm1vdXNlb3ZlclwiOnJldHVybiBEYz1NYyhEYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJwb2ludGVyb3ZlclwiOnZhciBmPWUucG9pbnRlcklkO0VjLnNldChmLE1jKEVjLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKTtyZXR1cm4hMDtjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpyZXR1cm4gZj1lLnBvaW50ZXJJZCxGYy5zZXQoZixNYyhGYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSksITB9cmV0dXJuITF9XG5mdW5jdGlvbiBQYyhhKXt2YXIgYj10YyhhLnRhcmdldCk7aWYobnVsbCE9PWIpe3ZhciBjPWRjKGIpO2lmKG51bGwhPT1jKWlmKGI9Yy50YWcsMTM9PT1iKXtpZihiPWVjKGMpLG51bGwhPT1iKXthLmJsb2NrZWRPbj1iO3IudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KGEucHJpb3JpdHksZnVuY3Rpb24oKXt5YyhjKX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuaHlkcmF0ZSl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9ZnVuY3Rpb24gUWMoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO3ZhciBiPVJjKGEudG9wTGV2ZWxUeXBlLGEuZXZlbnRTeXN0ZW1GbGFncyxhLmNvbnRhaW5lcixhLm5hdGl2ZUV2ZW50KTtpZihudWxsIT09Yil7dmFyIGM9TmMoYik7bnVsbCE9PWMmJnhjKGMpO2EuYmxvY2tlZE9uPWI7cmV0dXJuITF9cmV0dXJuITB9XG5mdW5jdGlvbiBTYyhhLGIsYyl7UWMoYSkmJmMuZGVsZXRlKGIpfWZ1bmN0aW9uIFRjKCl7Zm9yKHpjPSExOzA8QWMubGVuZ3RoOyl7dmFyIGE9QWNbMF07aWYobnVsbCE9PWEuYmxvY2tlZE9uKXthPU5jKGEuYmxvY2tlZE9uKTtudWxsIT09YSYmd2MoYSk7YnJlYWt9dmFyIGI9UmMoYS50b3BMZXZlbFR5cGUsYS5ldmVudFN5c3RlbUZsYWdzLGEuY29udGFpbmVyLGEubmF0aXZlRXZlbnQpO251bGwhPT1iP2EuYmxvY2tlZE9uPWI6QWMuc2hpZnQoKX1udWxsIT09QmMmJlFjKEJjKSYmKEJjPW51bGwpO251bGwhPT1DYyYmUWMoQ2MpJiYoQ2M9bnVsbCk7bnVsbCE9PURjJiZRYyhEYykmJihEYz1udWxsKTtFYy5mb3JFYWNoKFNjKTtGYy5mb3JFYWNoKFNjKX1mdW5jdGlvbiBVYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsemN8fCh6Yz0hMCxyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxUYykpKX1cbmZ1bmN0aW9uIFZjKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIFVjKGIsYSl9aWYoMDxBYy5sZW5ndGgpe1VjKEFjWzBdLGEpO2Zvcih2YXIgYz0xO2M8QWMubGVuZ3RoO2MrKyl7dmFyIGQ9QWNbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1CYyYmVWMoQmMsYSk7bnVsbCE9PUNjJiZVYyhDYyxhKTtudWxsIT09RGMmJlVjKERjLGEpO0VjLmZvckVhY2goYik7RmMuZm9yRWFjaChiKTtmb3IoYz0wO2M8R2MubGVuZ3RoO2MrKylkPUdjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxHYy5sZW5ndGgmJihjPUdjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KVBjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmR2Muc2hpZnQoKX1cbnZhciBXYz17fSxZYz1uZXcgTWFwLFpjPW5ldyBNYXAsJGM9W1wiYWJvcnRcIixcImFib3J0XCIsWGIsXCJhbmltYXRpb25FbmRcIixZYixcImFuaW1hdGlvbkl0ZXJhdGlvblwiLFpiLFwiYW5pbWF0aW9uU3RhcnRcIixcImNhbnBsYXlcIixcImNhblBsYXlcIixcImNhbnBsYXl0aHJvdWdoXCIsXCJjYW5QbGF5VGhyb3VnaFwiLFwiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCIsXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCIsXCJlbmNyeXB0ZWRcIixcImVuY3J5cHRlZFwiLFwiZW5kZWRcIixcImVuZGVkXCIsXCJlcnJvclwiLFwiZXJyb3JcIixcImdvdHBvaW50ZXJjYXB0dXJlXCIsXCJnb3RQb2ludGVyQ2FwdHVyZVwiLFwibG9hZFwiLFwibG9hZFwiLFwibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiLFwibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZE1ldGFkYXRhXCIsXCJsb2Fkc3RhcnRcIixcImxvYWRTdGFydFwiLFwibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIixcInBsYXlpbmdcIixcInBsYXlpbmdcIixcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiLFwic2Vla2luZ1wiLFxuXCJzZWVraW5nXCIsXCJzdGFsbGVkXCIsXCJzdGFsbGVkXCIsXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCIsXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCIsJGIsXCJ0cmFuc2l0aW9uRW5kXCIsXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCJdO2Z1bmN0aW9uIGFkKGEsYil7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKz0yKXt2YXIgZD1hW2NdLGU9YVtjKzFdLGY9XCJvblwiKyhlWzBdLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSk7Zj17cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6ZixjYXB0dXJlZDpmK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W2RdLGV2ZW50UHJpb3JpdHk6Yn07WmMuc2V0KGQsYik7WWMuc2V0KGQsZik7V2NbZV09Zn19XG5hZChcImJsdXIgYmx1ciBjYW5jZWwgY2FuY2VsIGNsaWNrIGNsaWNrIGNsb3NlIGNsb3NlIGNvbnRleHRtZW51IGNvbnRleHRNZW51IGNvcHkgY29weSBjdXQgY3V0IGF1eGNsaWNrIGF1eENsaWNrIGRibGNsaWNrIGRvdWJsZUNsaWNrIGRyYWdlbmQgZHJhZ0VuZCBkcmFnc3RhcnQgZHJhZ1N0YXJ0IGRyb3AgZHJvcCBmb2N1cyBmb2N1cyBpbnB1dCBpbnB1dCBpbnZhbGlkIGludmFsaWQga2V5ZG93biBrZXlEb3duIGtleXByZXNzIGtleVByZXNzIGtleXVwIGtleVVwIG1vdXNlZG93biBtb3VzZURvd24gbW91c2V1cCBtb3VzZVVwIHBhc3RlIHBhc3RlIHBhdXNlIHBhdXNlIHBsYXkgcGxheSBwb2ludGVyY2FuY2VsIHBvaW50ZXJDYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlckRvd24gcG9pbnRlcnVwIHBvaW50ZXJVcCByYXRlY2hhbmdlIHJhdGVDaGFuZ2UgcmVzZXQgcmVzZXQgc2Vla2VkIHNlZWtlZCBzdWJtaXQgc3VibWl0IHRvdWNoY2FuY2VsIHRvdWNoQ2FuY2VsIHRvdWNoZW5kIHRvdWNoRW5kIHRvdWNoc3RhcnQgdG91Y2hTdGFydCB2b2x1bWVjaGFuZ2Ugdm9sdW1lQ2hhbmdlXCIuc3BsaXQoXCIgXCIpLDApO1xuYWQoXCJkcmFnIGRyYWcgZHJhZ2VudGVyIGRyYWdFbnRlciBkcmFnZXhpdCBkcmFnRXhpdCBkcmFnbGVhdmUgZHJhZ0xlYXZlIGRyYWdvdmVyIGRyYWdPdmVyIG1vdXNlbW92ZSBtb3VzZU1vdmUgbW91c2VvdXQgbW91c2VPdXQgbW91c2VvdmVyIG1vdXNlT3ZlciBwb2ludGVybW92ZSBwb2ludGVyTW92ZSBwb2ludGVyb3V0IHBvaW50ZXJPdXQgcG9pbnRlcm92ZXIgcG9pbnRlck92ZXIgc2Nyb2xsIHNjcm9sbCB0b2dnbGUgdG9nZ2xlIHRvdWNobW92ZSB0b3VjaE1vdmUgd2hlZWwgd2hlZWxcIi5zcGxpdChcIiBcIiksMSk7YWQoJGMsMik7Zm9yKHZhciBiZD1cImNoYW5nZSBzZWxlY3Rpb25jaGFuZ2UgdGV4dElucHV0IGNvbXBvc2l0aW9uc3RhcnQgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb251cGRhdGVcIi5zcGxpdChcIiBcIiksY2Q9MDtjZDxiZC5sZW5ndGg7Y2QrKylaYy5zZXQoYmRbY2RdLDApO1xudmFyIGRkPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZWQ9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksZmQ9ITA7ZnVuY3Rpb24gRihhLGIpe3ZjKGIsYSwhMSl9ZnVuY3Rpb24gdmMoYSxiLGMpe3ZhciBkPVpjLmdldChiKTtzd2l0Y2godm9pZCAwPT09ZD8yOmQpe2Nhc2UgMDpkPWdkLmJpbmQobnVsbCxiLDEsYSk7YnJlYWs7Y2FzZSAxOmQ9aGQuYmluZChudWxsLGIsMSxhKTticmVhaztkZWZhdWx0OmQ9aWQuYmluZChudWxsLGIsMSxhKX1jP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGQsITApOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGQsITEpfWZ1bmN0aW9uIGdkKGEsYixjLGQpe0phfHxIYSgpO3ZhciBlPWlkLGY9SmE7SmE9ITA7dHJ5e0dhKGUsYSxiLGMsZCl9ZmluYWxseXsoSmE9Zil8fExhKCl9fWZ1bmN0aW9uIGhkKGEsYixjLGQpe2VkKGRkLGlkLmJpbmQobnVsbCxhLGIsYyxkKSl9XG5mdW5jdGlvbiBpZChhLGIsYyxkKXtpZihmZClpZigwPEFjLmxlbmd0aCYmLTE8SGMuaW5kZXhPZihhKSlhPUtjKG51bGwsYSxiLGMsZCksQWMucHVzaChhKTtlbHNle3ZhciBlPVJjKGEsYixjLGQpO2lmKG51bGw9PT1lKUxjKGEsZCk7ZWxzZSBpZigtMTxIYy5pbmRleE9mKGEpKWE9S2MoZSxhLGIsYyxkKSxBYy5wdXNoKGEpO2Vsc2UgaWYoIU9jKGUsYSxiLGMsZCkpe0xjKGEsZCk7YT1yYyhhLGQsbnVsbCxiKTt0cnl7TWEoc2MsYSl9ZmluYWxseXtxYyhhKX19fX1cbmZ1bmN0aW9uIFJjKGEsYixjLGQpe2M9bmMoZCk7Yz10YyhjKTtpZihudWxsIT09Yyl7dmFyIGU9ZGMoYyk7aWYobnVsbD09PWUpYz1udWxsO2Vsc2V7dmFyIGY9ZS50YWc7aWYoMTM9PT1mKXtjPWVjKGUpO2lmKG51bGwhPT1jKXJldHVybiBjO2M9bnVsbH1lbHNlIGlmKDM9PT1mKXtpZihlLnN0YXRlTm9kZS5oeWRyYXRlKXJldHVybiAzPT09ZS50YWc/ZS5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2M9bnVsbH1lbHNlIGUhPT1jJiYoYz1udWxsKX19YT1yYyhhLGQsYyxiKTt0cnl7TWEoc2MsYSl9ZmluYWxseXtxYyhhKX1yZXR1cm4gbnVsbH1cbnZhciBqZD17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsXG5mbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxrZD1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMoamQpLmZvckVhY2goZnVuY3Rpb24oYSl7a2QuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtqZFtiXT1qZFthXX0pfSk7ZnVuY3Rpb24gbGQoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fGpkLmhhc093blByb3BlcnR5KGEpJiZqZFthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBtZChhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1sZChjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBuZD1uKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gb2QoYSxiKXtpZihiKXtpZihuZFthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHUoMTM3LGEsXCJcIikpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IodSg2MCkpO2lmKCEoXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IodSg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IodSg2MixcIlwiKSk7fX1cbmZ1bmN0aW9uIHBkKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX12YXIgcWQ9TWIuaHRtbDtmdW5jdGlvbiByZChhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1jYyhhKTtiPXdhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXVjKGJbZF0sYSxjKX1mdW5jdGlvbiBzZCgpe31cbmZ1bmN0aW9uIHRkKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1mdW5jdGlvbiB1ZChhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9ZnVuY3Rpb24gdmQoYSxiKXt2YXIgYz11ZChhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz11ZChjKX19XG5mdW5jdGlvbiB3ZChhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP3dkKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1mdW5jdGlvbiB4ZCgpe2Zvcih2YXIgYT13aW5kb3csYj10ZCgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj10ZChhLmRvY3VtZW50KX1yZXR1cm4gYn1cbmZ1bmN0aW9uIHlkKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9dmFyIHpkPVwiJFwiLEFkPVwiLyRcIixCZD1cIiQ/XCIsQ2Q9XCIkIVwiLERkPW51bGwsRWQ9bnVsbDtmdW5jdGlvbiBGZChhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9XG5mdW5jdGlvbiBHZChhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9dmFyIEhkPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLElkPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMDtmdW5jdGlvbiBKZChhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVha31yZXR1cm4gYX1cbmZ1bmN0aW9uIEtkKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoYz09PXpkfHxjPT09Q2R8fGM9PT1CZCl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2UgYz09PUFkJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgTGQ9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksTWQ9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIitMZCxOZD1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK0xkLE9kPVwiX19yZWFjdENvbnRhaW5lcmUkXCIrTGQ7XG5mdW5jdGlvbiB0YyhhKXt2YXIgYj1hW01kXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1tPZF18fGNbTWRdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9S2QoYSk7bnVsbCE9PWE7KXtpZihjPWFbTWRdKXJldHVybiBjO2E9S2QoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIE5jKGEpe2E9YVtNZF18fGFbT2RdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiBQZChhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IodSgzMykpO31mdW5jdGlvbiBRZChhKXtyZXR1cm4gYVtOZF18fG51bGx9XG5mdW5jdGlvbiBSZChhKXtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gU2QoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZighYylyZXR1cm4gbnVsbDt2YXIgZD1sYShjKTtpZighZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VFbnRlclwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMpdGhyb3cgRXJyb3IodSgyMzEsXG5iLHR5cGVvZiBjKSk7cmV0dXJuIGN9ZnVuY3Rpb24gVGQoYSxiLGMpe2lmKGI9U2QoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz1pYyhjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1pYyhjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1mdW5jdGlvbiBVZChhKXtpZihhJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKXtmb3IodmFyIGI9YS5fdGFyZ2V0SW5zdCxjPVtdO2I7KWMucHVzaChiKSxiPVJkKGIpO2ZvcihiPWMubGVuZ3RoOzA8Yi0tOylUZChjW2JdLFwiY2FwdHVyZWRcIixhKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKVRkKGNbYl0sXCJidWJibGVkXCIsYSl9fVxuZnVuY3Rpb24gVmQoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9U2QoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPWljKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPWljKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiBXZChhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJlZkKGEuX3RhcmdldEluc3QsbnVsbCxhKX1mdW5jdGlvbiBYZChhKXtqYyhhLFVkKX12YXIgWWQ9bnVsbCxaZD1udWxsLCRkPW51bGw7XG5mdW5jdGlvbiBhZSgpe2lmKCRkKXJldHVybiAkZDt2YXIgYSxiPVpkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIFlkP1lkLnZhbHVlOllkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuICRkPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gYmUoKXtyZXR1cm4hMH1mdW5jdGlvbiBjZSgpe3JldHVybiExfVxuZnVuY3Rpb24gRyhhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/YmU6Y2U7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1jZTtyZXR1cm4gdGhpc31cbm4oRy5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1iZSl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1iZSl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1iZX0saXNQZXJzaXN0ZW50OmNlLGRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxcbmI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7dGhpcy5uYXRpdmVFdmVudD10aGlzLl90YXJnZXRJbnN0PXRoaXMuZGlzcGF0Y2hDb25maWc9bnVsbDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWNlO3RoaXMuX2Rpc3BhdGNoSW5zdGFuY2VzPXRoaXMuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGx9fSk7Ry5JbnRlcmZhY2U9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG5HLmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjtuKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1uKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO2RlKGMpO3JldHVybiBjfTtkZShHKTtmdW5jdGlvbiBlZShhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1cbmZ1bmN0aW9uIGZlKGEpe2lmKCEoYSBpbnN0YW5jZW9mIHRoaXMpKXRocm93IEVycm9yKHUoMjc5KSk7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfWZ1bmN0aW9uIGRlKGEpe2EuZXZlbnRQb29sPVtdO2EuZ2V0UG9vbGVkPWVlO2EucmVsZWFzZT1mZX12YXIgZ2U9Ry5leHRlbmQoe2RhdGE6bnVsbH0pLGhlPUcuZXh0ZW5kKHtkYXRhOm51bGx9KSxpZT1bOSwxMywyNywzMl0samU9eWEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LGtlPW51bGw7eWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKGtlPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgbGU9eWEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFrZSxtZT15YSYmKCFqZXx8a2UmJjg8a2UmJjExPj1rZSksbmU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksb2U9e2JlZm9yZUlucHV0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQmVmb3JlSW5wdXRcIixjYXB0dXJlZDpcIm9uQmVmb3JlSW5wdXRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl19LGNvbXBvc2l0aW9uRW5kOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25FbmRcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25FbmRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25lbmQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uU3RhcnQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblN0YXJ0XCIsXG5jYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25TdGFydENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblVwZGF0ZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9udXBkYXRlIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfX0scGU9ITE7XG5mdW5jdGlvbiBxZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PWllLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJibHVyXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gcmUoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgc2U9ITE7ZnVuY3Rpb24gdGUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHJlKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtwZT0hMDtyZXR1cm4gbmU7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09bmUmJnBlP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIHVlKGEsYil7aWYoc2UpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IWplJiZxZShhLGIpPyhhPWFlKCksJGQ9WmQ9WWQ9bnVsbCxzZT0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gbWUmJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIHZlPXtldmVudFR5cGVzOm9lLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU7aWYoamUpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6dmFyIGY9b2UuY29tcG9zaXRpb25TdGFydDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmY9b2UuY29tcG9zaXRpb25FbmQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpmPW9lLmNvbXBvc2l0aW9uVXBkYXRlO2JyZWFrIGJ9Zj12b2lkIDB9ZWxzZSBzZT9xZShhLGMpJiYoZj1vZS5jb21wb3NpdGlvbkVuZCk6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihmPW9lLmNvbXBvc2l0aW9uU3RhcnQpO2Y/KG1lJiZcImtvXCIhPT1jLmxvY2FsZSYmKHNlfHxmIT09b2UuY29tcG9zaXRpb25TdGFydD9mPT09b2UuY29tcG9zaXRpb25FbmQmJnNlJiYoZT1hZSgpKTooWWQ9ZCxaZD1cInZhbHVlXCJpbiBZZD9ZZC52YWx1ZTpZZC50ZXh0Q29udGVudCxzZT0hMCkpLGY9Z2UuZ2V0UG9vbGVkKGYsXG5iLGMsZCksZT9mLmRhdGE9ZTooZT1yZShjKSxudWxsIT09ZSYmKGYuZGF0YT1lKSksWGQoZiksZT1mKTplPW51bGw7KGE9bGU/dGUoYSxjKTp1ZShhLGMpKT8oYj1oZS5nZXRQb29sZWQob2UuYmVmb3JlSW5wdXQsYixjLGQpLGIuZGF0YT1hLFhkKGIpKTpiPW51bGw7cmV0dXJuIG51bGw9PT1lP2I6bnVsbD09PWI/ZTpbZSxiXX19LHdlPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIHhlKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhd2VbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfVxudmFyIHllPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNoYW5nZSBjbGljayBmb2N1cyBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19O2Z1bmN0aW9uIHplKGEsYixjKXthPUcuZ2V0UG9vbGVkKHllLmNoYW5nZSxhLGIsYyk7YS50eXBlPVwiY2hhbmdlXCI7RGEoYyk7WGQoYSk7cmV0dXJuIGF9dmFyIEFlPW51bGwsQmU9bnVsbDtmdW5jdGlvbiBDZShhKXttYyhhKX1mdW5jdGlvbiBEZShhKXt2YXIgYj1QZChhKTtpZih5YihiKSlyZXR1cm4gYX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBGZT0hMTt5YSYmKEZlPW9jKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO1xuZnVuY3Rpb24gR2UoKXtBZSYmKEFlLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEhlKSxCZT1BZT1udWxsKX1mdW5jdGlvbiBIZShhKXtpZihcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmRGUoQmUpKWlmKGE9emUoQmUsYSxuYyhhKSksSmEpbWMoYSk7ZWxzZXtKYT0hMDt0cnl7RmEoQ2UsYSl9ZmluYWxseXtKYT0hMSxMYSgpfX19ZnVuY3Rpb24gSWUoYSxiLGMpe1wiZm9jdXNcIj09PWE/KEdlKCksQWU9YixCZT1jLEFlLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEhlKSk6XCJibHVyXCI9PT1hJiZHZSgpfWZ1bmN0aW9uIEplKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIERlKEJlKX1mdW5jdGlvbiBLZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIERlKGIpfWZ1bmN0aW9uIExlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIERlKGIpfVxudmFyIE1lPXtldmVudFR5cGVzOnllLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6RmUsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP1BkKGIpOndpbmRvdyxmPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09Znx8XCJpbnB1dFwiPT09ZiYmXCJmaWxlXCI9PT1lLnR5cGUpdmFyIGc9RWU7ZWxzZSBpZih4ZShlKSlpZihGZSlnPUxlO2Vsc2V7Zz1KZTt2YXIgaD1JZX1lbHNlKGY9ZS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWYudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWUudHlwZXx8XCJyYWRpb1wiPT09ZS50eXBlKSYmKGc9S2UpO2lmKGcmJihnPWcoYSxiKSkpcmV0dXJuIHplKGcsYyxkKTtoJiZoKGEsZSxiKTtcImJsdXJcIj09PWEmJihhPWUuX3dyYXBwZXJTdGF0ZSkmJmEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWUudHlwZSYmRGIoZSxcIm51bWJlclwiLGUudmFsdWUpfX0sTmU9Ry5leHRlbmQoe3ZpZXc6bnVsbCxkZXRhaWw6bnVsbH0pLFxuT2U9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBlKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2VbYV0pPyEhYlthXTohMX1mdW5jdGlvbiBRZSgpe3JldHVybiBQZX1cbnZhciBSZT0wLFNlPTAsVGU9ITEsVWU9ITEsVmU9TmUuZXh0ZW5kKHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOlFlLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluIGEpcmV0dXJuIGEubW92ZW1lbnRYO3ZhciBiPVJlO1JlPWEuc2NyZWVuWDtyZXR1cm4gVGU/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblgtYjowOihUZT0hMCwwKX0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRZXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WTtcbnZhciBiPVNlO1NlPWEuc2NyZWVuWTtyZXR1cm4gVWU/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblktYjowOihVZT0hMCwwKX19KSxXZT1WZS5leHRlbmQoe3BvaW50ZXJJZDpudWxsLHdpZHRoOm51bGwsaGVpZ2h0Om51bGwscHJlc3N1cmU6bnVsbCx0YW5nZW50aWFsUHJlc3N1cmU6bnVsbCx0aWx0WDpudWxsLHRpbHRZOm51bGwsdHdpc3Q6bnVsbCxwb2ludGVyVHlwZTpudWxsLGlzUHJpbWFyeTpudWxsfSksWGU9e21vdXNlRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0sbW91c2VMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxwb2ludGVyRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJFbnRlclwiLGRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX0scG9pbnRlckxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyTGVhdmVcIixcbmRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX19LFllPXtldmVudFR5cGVzOlhlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSxnPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihmJiYwPT09KGUmMzIpJiYoYy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KXx8IWcmJiFmKXJldHVybiBudWxsO2Y9ZC53aW5kb3c9PT1kP2Q6KGY9ZC5vd25lckRvY3VtZW50KT9mLmRlZmF1bHRWaWV3fHxmLnBhcmVudFdpbmRvdzp3aW5kb3c7aWYoZyl7aWYoZz1iLGI9KGI9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCk/dGMoYik6bnVsbCxudWxsIT09Yil7dmFyIGg9ZGMoYik7aWYoYiE9PWh8fDUhPT1iLnRhZyYmNiE9PWIudGFnKWI9bnVsbH19ZWxzZSBnPW51bGw7aWYoZz09PWIpcmV0dXJuIG51bGw7aWYoXCJtb3VzZW91dFwiPT09YXx8XCJtb3VzZW92ZXJcIj09PVxuYSl7dmFyIGs9VmU7dmFyIGw9WGUubW91c2VMZWF2ZTt2YXIgbT1YZS5tb3VzZUVudGVyO3ZhciBwPVwibW91c2VcIn1lbHNlIGlmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSlrPVdlLGw9WGUucG9pbnRlckxlYXZlLG09WGUucG9pbnRlckVudGVyLHA9XCJwb2ludGVyXCI7YT1udWxsPT1nP2Y6UGQoZyk7Zj1udWxsPT1iP2Y6UGQoYik7bD1rLmdldFBvb2xlZChsLGcsYyxkKTtsLnR5cGU9cCtcImxlYXZlXCI7bC50YXJnZXQ9YTtsLnJlbGF0ZWRUYXJnZXQ9ZjtjPWsuZ2V0UG9vbGVkKG0sYixjLGQpO2MudHlwZT1wK1wiZW50ZXJcIjtjLnRhcmdldD1mO2MucmVsYXRlZFRhcmdldD1hO2Q9ZztwPWI7aWYoZCYmcClhOntrPWQ7bT1wO2c9MDtmb3IoYT1rO2E7YT1SZChhKSlnKys7YT0wO2ZvcihiPW07YjtiPVJkKGIpKWErKztmb3IoOzA8Zy1hOylrPVJkKGspLGctLTtmb3IoOzA8YS1nOyltPVJkKG0pLGEtLTtmb3IoO2ctLTspe2lmKGs9PT1tfHxrPT09bS5hbHRlcm5hdGUpYnJlYWsgYTtcbms9UmQoayk7bT1SZChtKX1rPW51bGx9ZWxzZSBrPW51bGw7bT1rO2ZvcihrPVtdO2QmJmQhPT1tOyl7Zz1kLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PW0pYnJlYWs7ay5wdXNoKGQpO2Q9UmQoZCl9Zm9yKGQ9W107cCYmcCE9PW07KXtnPXAuYWx0ZXJuYXRlO2lmKG51bGwhPT1nJiZnPT09bSlicmVhaztkLnB1c2gocCk7cD1SZChwKX1mb3IocD0wO3A8ay5sZW5ndGg7cCsrKVZkKGtbcF0sXCJidWJibGVkXCIsbCk7Zm9yKHA9ZC5sZW5ndGg7MDxwLS07KVZkKGRbcF0sXCJjYXB0dXJlZFwiLGMpO3JldHVybiAwPT09KGUmNjQpP1tsXTpbbCxjXX19O2Z1bmN0aW9uIFplKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgJGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6WmUsYWY9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGJmKGEsYil7aWYoJGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFhZi5jYWxsKGIsY1tkXSl8fCEkZShhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfVxudmFyIGNmPXlhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsZGY9e3NlbGVjdDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvblNlbGVjdFwiLGNhcHR1cmVkOlwib25TZWxlY3RDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1cyBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LGVmPW51bGwsZmY9bnVsbCxnZj1udWxsLGhmPSExO1xuZnVuY3Rpb24gamYoYSxiKXt2YXIgYz1iLndpbmRvdz09PWI/Yi5kb2N1bWVudDo5PT09Yi5ub2RlVHlwZT9iOmIub3duZXJEb2N1bWVudDtpZihoZnx8bnVsbD09ZWZ8fGVmIT09dGQoYykpcmV0dXJuIG51bGw7Yz1lZjtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZ5ZChjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06KGM9KGMub3duZXJEb2N1bWVudCYmYy5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGM9e2FuY2hvck5vZGU6Yy5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpjLmFuY2hvck9mZnNldCxmb2N1c05vZGU6Yy5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6Yy5mb2N1c09mZnNldH0pO3JldHVybiBnZiYmYmYoZ2YsYyk/bnVsbDooZ2Y9YyxhPUcuZ2V0UG9vbGVkKGRmLnNlbGVjdCxmZixhLGIpLGEudHlwZT1cInNlbGVjdFwiLGEudGFyZ2V0PWVmLFhkKGEpLGEpfVxudmFyIGtmPXtldmVudFR5cGVzOmRmLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe2U9Znx8KGQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50KTtpZighKGY9IWUpKXthOntlPWNjKGUpO2Y9d2Eub25TZWxlY3Q7Zm9yKHZhciBnPTA7ZzxmLmxlbmd0aDtnKyspaWYoIWUuaGFzKGZbZ10pKXtlPSExO2JyZWFrIGF9ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP1BkKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6aWYoeGUoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpZWY9ZSxmZj1iLGdmPW51bGw7YnJlYWs7Y2FzZSBcImJsdXJcIjpnZj1mZj1lZj1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpoZj0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6cmV0dXJuIGhmPSExLGpmKGMsZCk7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKGNmKWJyZWFrO1xuY2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpyZXR1cm4gamYoYyxkKX1yZXR1cm4gbnVsbH19LGxmPUcuZXh0ZW5kKHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxtZj1HLmV4dGVuZCh7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLG5mPU5lLmV4dGVuZCh7cmVsYXRlZFRhcmdldDpudWxsfSk7ZnVuY3Rpb24gb2YoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgcGY9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LHFmPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxyZj1OZS5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9cGZbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9b2YoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP3FmW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpRZSxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9vZihhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZihhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLHNmPVZlLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSx0Zj1OZS5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpRZX0pLHVmPUcuZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLHZmPVZlLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSksd2Y9e2V2ZW50VHlwZXM6V2MsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1ZYy5nZXQoYSk7aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZihjKSlyZXR1cm4gbnVsbDtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOmE9cmY7YnJlYWs7Y2FzZSBcImJsdXJcIjpjYXNlIFwiZm9jdXNcIjphPW5mO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmE9XG5WZTticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjphPXNmO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOmE9dGY7YnJlYWs7Y2FzZSBYYjpjYXNlIFliOmNhc2UgWmI6YT1sZjticmVhaztjYXNlICRiOmE9dWY7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOmE9TmU7YnJlYWs7Y2FzZSBcIndoZWVsXCI6YT12ZjticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjphPW1mO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmE9XG5XZTticmVhaztkZWZhdWx0OmE9R31iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO1hkKGIpO3JldHVybiBifX07aWYocGEpdGhyb3cgRXJyb3IodSgxMDEpKTtwYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChcIlJlc3BvbmRlckV2ZW50UGx1Z2luIFNpbXBsZUV2ZW50UGx1Z2luIEVudGVyTGVhdmVFdmVudFBsdWdpbiBDaGFuZ2VFdmVudFBsdWdpbiBTZWxlY3RFdmVudFBsdWdpbiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIuc3BsaXQoXCIgXCIpKTtyYSgpO3ZhciB4Zj1OYztsYT1RZDttYT14ZjtuYT1QZDt4YSh7U2ltcGxlRXZlbnRQbHVnaW46d2YsRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOlllLENoYW5nZUV2ZW50UGx1Z2luOk1lLFNlbGVjdEV2ZW50UGx1Z2luOmtmLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46dmV9KTt2YXIgeWY9W10semY9LTE7ZnVuY3Rpb24gSChhKXswPnpmfHwoYS5jdXJyZW50PXlmW3pmXSx5Zlt6Zl09bnVsbCx6Zi0tKX1cbmZ1bmN0aW9uIEkoYSxiKXt6ZisrO3lmW3pmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIEFmPXt9LEo9e2N1cnJlbnQ6QWZ9LEs9e2N1cnJlbnQ6ITF9LEJmPUFmO2Z1bmN0aW9uIENmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gQWY7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gTChhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfVxuZnVuY3Rpb24gRGYoKXtIKEspO0goSil9ZnVuY3Rpb24gRWYoYSxiLGMpe2lmKEouY3VycmVudCE9PUFmKXRocm93IEVycm9yKHUoMTY4KSk7SShKLGIpO0koSyxjKX1mdW5jdGlvbiBGZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7YT1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGEpKXRocm93IEVycm9yKHUoMTA4LHBiKGIpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIG4oe30sYyx7fSxkKX1mdW5jdGlvbiBHZihhKXthPShhPWEuc3RhdGVOb2RlKSYmYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8QWY7QmY9Si5jdXJyZW50O0koSixhKTtJKEssSy5jdXJyZW50KTtyZXR1cm4hMH1cbmZ1bmN0aW9uIEhmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcih1KDE2OSkpO2M/KGE9RmYoYSxiLEJmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsSChLKSxIKEopLEkoSixhKSk6SChLKTtJKEssYyl9XG52YXIgSWY9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksSmY9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLEtmPXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssTGY9ci51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsTWY9ci51bnN0YWJsZV9ub3csTmY9ci51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxPZj1yLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LFBmPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksUWY9ci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxSZj1yLnVuc3RhYmxlX0xvd1ByaW9yaXR5LFNmPXIudW5zdGFibGVfSWRsZVByaW9yaXR5LFRmPXt9LFVmPXIudW5zdGFibGVfc2hvdWxkWWllbGQsVmY9dm9pZCAwIT09TGY/TGY6ZnVuY3Rpb24oKXt9LFdmPW51bGwsWGY9bnVsbCxZZj0hMSxaZj1NZigpLCRmPTFFND5aZj9NZjpmdW5jdGlvbigpe3JldHVybiBNZigpLVpmfTtcbmZ1bmN0aW9uIGFnKCl7c3dpdGNoKE5mKCkpe2Nhc2UgT2Y6cmV0dXJuIDk5O2Nhc2UgUGY6cmV0dXJuIDk4O2Nhc2UgUWY6cmV0dXJuIDk3O2Nhc2UgUmY6cmV0dXJuIDk2O2Nhc2UgU2Y6cmV0dXJuIDk1O2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMzIpKTt9fWZ1bmN0aW9uIGJnKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiBPZjtjYXNlIDk4OnJldHVybiBQZjtjYXNlIDk3OnJldHVybiBRZjtjYXNlIDk2OnJldHVybiBSZjtjYXNlIDk1OnJldHVybiBTZjtkZWZhdWx0OnRocm93IEVycm9yKHUoMzMyKSk7fX1mdW5jdGlvbiBjZyhhLGIpe2E9YmcoYSk7cmV0dXJuIElmKGEsYil9ZnVuY3Rpb24gZGcoYSxiLGMpe2E9YmcoYSk7cmV0dXJuIEpmKGEsYixjKX1mdW5jdGlvbiBlZyhhKXtudWxsPT09V2Y/KFdmPVthXSxYZj1KZihPZixmZykpOldmLnB1c2goYSk7cmV0dXJuIFRmfWZ1bmN0aW9uIGdnKCl7aWYobnVsbCE9PVhmKXt2YXIgYT1YZjtYZj1udWxsO0tmKGEpfWZnKCl9XG5mdW5jdGlvbiBmZygpe2lmKCFZZiYmbnVsbCE9PVdmKXtZZj0hMDt2YXIgYT0wO3RyeXt2YXIgYj1XZjtjZyg5OSxmdW5jdGlvbigpe2Zvcig7YTxiLmxlbmd0aDthKyspe3ZhciBjPWJbYV07ZG8gYz1jKCEwKTt3aGlsZShudWxsIT09Yyl9fSk7V2Y9bnVsbH1jYXRjaChjKXt0aHJvdyBudWxsIT09V2YmJihXZj1XZi5zbGljZShhKzEpKSxKZihPZixnZyksYzt9ZmluYWxseXtZZj0hMX19fWZ1bmN0aW9uIGhnKGEsYixjKXtjLz0xMDtyZXR1cm4gMTA3Mzc0MTgyMS0oKCgxMDczNzQxODIxLWErYi8xMCkvY3wwKSsxKSpjfWZ1bmN0aW9uIGlnKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9bih7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pfXJldHVybiBifXZhciBqZz17Y3VycmVudDpudWxsfSxrZz1udWxsLGxnPW51bGwsbWc9bnVsbDtmdW5jdGlvbiBuZygpe21nPWxnPWtnPW51bGx9XG5mdW5jdGlvbiBvZyhhKXt2YXIgYj1qZy5jdXJyZW50O0goamcpO2EudHlwZS5fY29udGV4dC5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gcGcoYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5hbHRlcm5hdGU7aWYoYS5jaGlsZEV4cGlyYXRpb25UaW1lPGIpYS5jaGlsZEV4cGlyYXRpb25UaW1lPWIsbnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2Vsc2UgaWYobnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiKWMuY2hpbGRFeHBpcmF0aW9uVGltZT1iO2Vsc2UgYnJlYWs7YT1hLnJldHVybn19ZnVuY3Rpb24gcWcoYSxiKXtrZz1hO21nPWxnPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoYS5leHBpcmF0aW9uVGltZT49YiYmKHJnPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1cbmZ1bmN0aW9uIHNnKGEsYil7aWYobWchPT1hJiYhMSE9PWImJjAhPT1iKXtpZihcIm51bWJlclwiIT09dHlwZW9mIGJ8fDEwNzM3NDE4MjM9PT1iKW1nPWEsYj0xMDczNzQxODIzO2I9e2NvbnRleHQ6YSxvYnNlcnZlZEJpdHM6YixuZXh0Om51bGx9O2lmKG51bGw9PT1sZyl7aWYobnVsbD09PWtnKXRocm93IEVycm9yKHUoMzA4KSk7bGc9YjtrZy5kZXBlbmRlbmNpZXM9e2V4cGlyYXRpb25UaW1lOjAsZmlyc3RDb250ZXh0OmIscmVzcG9uZGVyczpudWxsfX1lbHNlIGxnPWxnLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciB0Zz0hMTtmdW5jdGlvbiB1ZyhhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGJhc2VRdWV1ZTpudWxsLHNoYXJlZDp7cGVuZGluZzpudWxsfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24gdmcoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsYmFzZVF1ZXVlOmEuYmFzZVF1ZXVlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIHdnKGEsYil7YT17ZXhwaXJhdGlvblRpbWU6YSxzdXNwZW5zZUNvbmZpZzpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH07cmV0dXJuIGEubmV4dD1hfWZ1bmN0aW9uIHhnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hKXthPWEuc2hhcmVkO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9fVxuZnVuY3Rpb24geWcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmdmcoYyxhKTthPWEudXBkYXRlUXVldWU7Yz1hLmJhc2VRdWV1ZTtudWxsPT09Yz8oYS5iYXNlUXVldWU9Yi5uZXh0PWIsYi5uZXh0PWIpOihiLm5leHQ9Yy5uZXh0LGMubmV4dD1iKX1cbmZ1bmN0aW9uIHpnKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7dGc9ITE7dmFyIGY9ZS5iYXNlUXVldWUsZz1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1nKXtpZihudWxsIT09Zil7dmFyIGg9Zi5uZXh0O2YubmV4dD1nLm5leHQ7Zy5uZXh0PWh9Zj1nO2Uuc2hhcmVkLnBlbmRpbmc9bnVsbDtoPWEuYWx0ZXJuYXRlO251bGwhPT1oJiYoaD1oLnVwZGF0ZVF1ZXVlLG51bGwhPT1oJiYoaC5iYXNlUXVldWU9ZykpfWlmKG51bGwhPT1mKXtoPWYubmV4dDt2YXIgaz1lLmJhc2VTdGF0ZSxsPTAsbT1udWxsLHA9bnVsbCx4PW51bGw7aWYobnVsbCE9PWgpe3ZhciB6PWg7ZG97Zz16LmV4cGlyYXRpb25UaW1lO2lmKGc8ZCl7dmFyIGNhPXtleHBpcmF0aW9uVGltZTp6LmV4cGlyYXRpb25UaW1lLHN1c3BlbnNlQ29uZmlnOnouc3VzcGVuc2VDb25maWcsdGFnOnoudGFnLHBheWxvYWQ6ei5wYXlsb2FkLGNhbGxiYWNrOnouY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09eD8ocD14PVxuY2EsbT1rKTp4PXgubmV4dD1jYTtnPmwmJihsPWcpfWVsc2V7bnVsbCE9PXgmJih4PXgubmV4dD17ZXhwaXJhdGlvblRpbWU6MTA3Mzc0MTgyMyxzdXNwZW5zZUNvbmZpZzp6LnN1c3BlbnNlQ29uZmlnLHRhZzp6LnRhZyxwYXlsb2FkOnoucGF5bG9hZCxjYWxsYmFjazp6LmNhbGxiYWNrLG5leHQ6bnVsbH0pO0FnKGcsei5zdXNwZW5zZUNvbmZpZyk7YTp7dmFyIEQ9YSx0PXo7Zz1iO2NhPWM7c3dpdGNoKHQudGFnKXtjYXNlIDE6RD10LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEQpe2s9RC5jYWxsKGNhLGssZyk7YnJlYWsgYX1rPUQ7YnJlYWsgYTtjYXNlIDM6RC5lZmZlY3RUYWc9RC5lZmZlY3RUYWcmLTQwOTd8NjQ7Y2FzZSAwOkQ9dC5wYXlsb2FkO2c9XCJmdW5jdGlvblwiPT09dHlwZW9mIEQ/RC5jYWxsKGNhLGssZyk6RDtpZihudWxsPT09Z3x8dm9pZCAwPT09ZylicmVhayBhO2s9bih7fSxrLGcpO2JyZWFrIGE7Y2FzZSAyOnRnPSEwfX1udWxsIT09ei5jYWxsYmFjayYmXG4oYS5lZmZlY3RUYWd8PTMyLGc9ZS5lZmZlY3RzLG51bGw9PT1nP2UuZWZmZWN0cz1bel06Zy5wdXNoKHopKX16PXoubmV4dDtpZihudWxsPT09enx8ej09PWgpaWYoZz1lLnNoYXJlZC5wZW5kaW5nLG51bGw9PT1nKWJyZWFrO2Vsc2Ugej1mLm5leHQ9Zy5uZXh0LGcubmV4dD1oLGUuYmFzZVF1ZXVlPWY9ZyxlLnNoYXJlZC5wZW5kaW5nPW51bGx9d2hpbGUoMSl9bnVsbD09PXg/bT1rOngubmV4dD1wO2UuYmFzZVN0YXRlPW07ZS5iYXNlUXVldWU9eDtCZyhsKTthLmV4cGlyYXRpb25UaW1lPWw7YS5tZW1vaXplZFN0YXRlPWt9fVxuZnVuY3Rpb24gQ2coYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1lO2U9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCl0aHJvdyBFcnJvcih1KDE5MSxkKSk7ZC5jYWxsKGUpfX19dmFyIERnPVdhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLEVnPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO2Z1bmN0aW9uIEZnKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpuKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEuZXhwaXJhdGlvblRpbWUmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBKZz17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/ZGMoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPUdnKCksZT1EZy5zdXNwZW5zZTtkPUhnKGQsYSxlKTtlPXdnKGQsZSk7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO3hnKGEsZSk7SWcoYSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9R2coKSxlPURnLnN1c3BlbnNlO2Q9SGcoZCxhLGUpO2U9d2coZCxlKTtlLnRhZz0xO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTt4ZyhhLGUpO0lnKGEsZCl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBjPUdnKCksZD1EZy5zdXNwZW5zZTtcbmM9SGcoYyxhLGQpO2Q9d2coYyxkKTtkLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZC5jYWxsYmFjaz1iKTt4ZyhhLGQpO0lnKGEsYyl9fTtmdW5jdGlvbiBLZyhhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFiZihjLGQpfHwhYmYoZSxmKTohMH1cbmZ1bmN0aW9uIExnKGEsYixjKXt2YXIgZD0hMSxlPUFmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPXNnKGYpOihlPUwoYik/QmY6Si5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/Q2YoYSxlKTpBZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPUpnO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbEZpYmVyPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIE1nKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZKZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIE5nKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9RWc7dWcoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD1zZyhmKTooZj1MKGIpP0JmOkouY3VycmVudCxlLmNvbnRleHQ9Q2YoYSxmKSk7emcoYSxjLGUsZCk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKEZnKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fFxuKGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJkpnLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLHpnKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KX12YXIgT2c9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFBnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IodSgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcih1KDE0NyxhKSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1FZyYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcih1KDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcih1KDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gUWcoYSxiKXtpZihcInRleHRhcmVhXCIhPT1hLnR5cGUpdGhyb3cgRXJyb3IodSgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIikpO31cbmZ1bmN0aW9uIFJnKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZWZmZWN0VGFnPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPVNnKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmVmZmVjdFRhZz1cbjIsYyk6ZDtiLmVmZmVjdFRhZz0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5lZmZlY3RUYWc9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPVRnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPVBnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1VZyhjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1QZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09XG5jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPVZnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBtKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1XZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHAoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPVRnKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIFphOnJldHVybiBjPVVnKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPVBnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSAkYTpyZXR1cm4gYj1WZyhiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoT2coYil8fFxubmIoYikpcmV0dXJuIGI9V2coYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7UWcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB4KGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIFphOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09YWI/bShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlICRhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKE9nKGMpfHxuYihjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7UWcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB6KGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9XG5hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgWmE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PWFiP20oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlICRhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKE9nKGQpfHxuYihkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7UWcoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBjYShlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCx0PW51bGwsbT1nLHk9Zz0wLEE9bnVsbDtudWxsIT09bSYmeTxoLmxlbmd0aDt5Kyspe20uaW5kZXg+eT8oQT1tLG09bnVsbCk6QT1tLnNpYmxpbmc7dmFyIHE9eChlLG0saFt5XSxrKTtpZihudWxsPT09cSl7bnVsbD09PW0mJihtPUEpO2JyZWFrfWEmJlxubSYmbnVsbD09PXEuYWx0ZXJuYXRlJiZiKGUsbSk7Zz1mKHEsZyx5KTtudWxsPT09dD9sPXE6dC5zaWJsaW5nPXE7dD1xO209QX1pZih5PT09aC5sZW5ndGgpcmV0dXJuIGMoZSxtKSxsO2lmKG51bGw9PT1tKXtmb3IoO3k8aC5sZW5ndGg7eSsrKW09cChlLGhbeV0sayksbnVsbCE9PW0mJihnPWYobSxnLHkpLG51bGw9PT10P2w9bTp0LnNpYmxpbmc9bSx0PW0pO3JldHVybiBsfWZvcihtPWQoZSxtKTt5PGgubGVuZ3RoO3krKylBPXoobSxlLHksaFt5XSxrKSxudWxsIT09QSYmKGEmJm51bGwhPT1BLmFsdGVybmF0ZSYmbS5kZWxldGUobnVsbD09PUEua2V5P3k6QS5rZXkpLGc9ZihBLGcseSksbnVsbD09PXQ/bD1BOnQuc2libGluZz1BLHQ9QSk7YSYmbS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1mdW5jdGlvbiBEKGUsZyxoLGwpe3ZhciBrPW5iKGgpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBrKXRocm93IEVycm9yKHUoMTUwKSk7aD1rLmNhbGwoaCk7XG5pZihudWxsPT1oKXRocm93IEVycm9yKHUoMTUxKSk7Zm9yKHZhciBtPWs9bnVsbCx0PWcseT1nPTAsQT1udWxsLHE9aC5uZXh0KCk7bnVsbCE9PXQmJiFxLmRvbmU7eSsrLHE9aC5uZXh0KCkpe3QuaW5kZXg+eT8oQT10LHQ9bnVsbCk6QT10LnNpYmxpbmc7dmFyIEQ9eChlLHQscS52YWx1ZSxsKTtpZihudWxsPT09RCl7bnVsbD09PXQmJih0PUEpO2JyZWFrfWEmJnQmJm51bGw9PT1ELmFsdGVybmF0ZSYmYihlLHQpO2c9ZihELGcseSk7bnVsbD09PW0/az1EOm0uc2libGluZz1EO209RDt0PUF9aWYocS5kb25lKXJldHVybiBjKGUsdCksaztpZihudWxsPT09dCl7Zm9yKDshcS5kb25lO3krKyxxPWgubmV4dCgpKXE9cChlLHEudmFsdWUsbCksbnVsbCE9PXEmJihnPWYocSxnLHkpLG51bGw9PT1tP2s9cTptLnNpYmxpbmc9cSxtPXEpO3JldHVybiBrfWZvcih0PWQoZSx0KTshcS5kb25lO3krKyxxPWgubmV4dCgpKXE9eih0LGUseSxxLnZhbHVlLGwpLG51bGwhPT1xJiYoYSYmbnVsbCE9PVxucS5hbHRlcm5hdGUmJnQuZGVsZXRlKG51bGw9PT1xLmtleT95OnEua2V5KSxnPWYocSxnLHkpLG51bGw9PT1tP2s9cTptLnNpYmxpbmc9cSxtPXEpO2EmJnQuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGt9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PWFiJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIFphOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bCl7c3dpdGNoKGsudGFnKXtjYXNlIDc6aWYoZi50eXBlPT09YWIpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9YnJlYWs7ZGVmYXVsdDppZihrLmVsZW1lbnRUeXBlPT09Zi50eXBlKXtjKGEsXG5rLnNpYmxpbmcpO2Q9ZShrLGYucHJvcHMpO2QucmVmPVBnKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfX1jKGEsayk7YnJlYWt9ZWxzZSBiKGEsayk7az1rLnNpYmxpbmd9Zi50eXBlPT09YWI/KGQ9V2coZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPVVnKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPVBnKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSAkYTphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1cbmQuc2libGluZ31kPVZnKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmKSxkLnJldHVybj1hLGE9ZCk6KGMoYSxkKSxkPVRnKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpO2lmKE9nKGYpKXJldHVybiBjYShhLGQsZixoKTtpZihuYihmKSlyZXR1cm4gRChhLGQsZixoKTtsJiZRZyhhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDE6Y2FzZSAwOnRocm93IGE9YS50eXBlLEVycm9yKHUoMTUyLGEuZGlzcGxheU5hbWV8fGEubmFtZXx8XCJDb21wb25lbnRcIikpO31yZXR1cm4gYyhhLGQpfX12YXIgWGc9UmcoITApLFlnPVJnKCExKSxaZz17fSwkZz17Y3VycmVudDpaZ30sYWg9e2N1cnJlbnQ6Wmd9LGJoPXtjdXJyZW50OlpnfTtcbmZ1bmN0aW9uIGNoKGEpe2lmKGE9PT1aZyl0aHJvdyBFcnJvcih1KDE3NCkpO3JldHVybiBhfWZ1bmN0aW9uIGRoKGEsYil7SShiaCxiKTtJKGFoLGEpO0koJGcsWmcpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6T2IobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPU9iKGIsYSl9SCgkZyk7SSgkZyxiKX1mdW5jdGlvbiBlaCgpe0goJGcpO0goYWgpO0goYmgpfWZ1bmN0aW9uIGZoKGEpe2NoKGJoLmN1cnJlbnQpO3ZhciBiPWNoKCRnLmN1cnJlbnQpO3ZhciBjPU9iKGIsYS50eXBlKTtiIT09YyYmKEkoYWgsYSksSSgkZyxjKSl9ZnVuY3Rpb24gZ2goYSl7YWguY3VycmVudD09PWEmJihIKCRnKSxIKGFoKSl9dmFyIE09e2N1cnJlbnQ6MH07XG5mdW5jdGlvbiBoaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxjLmRhdGE9PT1CZHx8Yy5kYXRhPT09Q2QpKXJldHVybiBifWVsc2UgaWYoMTk9PT1iLnRhZyYmdm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKXtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9ZnVuY3Rpb24gaWgoYSxiKXtyZXR1cm57cmVzcG9uZGVyOmEscHJvcHM6Yn19XG52YXIgamg9V2EuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixraD1XYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxsaD0wLE49bnVsbCxPPW51bGwsUD1udWxsLG1oPSExO2Z1bmN0aW9uIFEoKXt0aHJvdyBFcnJvcih1KDMyMSkpO31mdW5jdGlvbiBuaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCEkZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gb2goYSxiLGMsZCxlLGYpe2xoPWY7Tj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmV4cGlyYXRpb25UaW1lPTA7amguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9waDpxaDthPWMoZCxlKTtpZihiLmV4cGlyYXRpb25UaW1lPT09bGgpe2Y9MDtkb3tiLmV4cGlyYXRpb25UaW1lPTA7aWYoISgyNT5mKSl0aHJvdyBFcnJvcih1KDMwMSkpO2YrPTE7UD1PPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2poLmN1cnJlbnQ9cmg7YT1jKGQsZSl9d2hpbGUoYi5leHBpcmF0aW9uVGltZT09PWxoKX1qaC5jdXJyZW50PXNoO2I9bnVsbCE9PU8mJm51bGwhPT1PLm5leHQ7bGg9MDtQPU89Tj1udWxsO21oPSExO2lmKGIpdGhyb3cgRXJyb3IodSgzMDApKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIHRoKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxiYXNlUXVldWU6bnVsbCxxdWV1ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hO3JldHVybiBQfWZ1bmN0aW9uIHVoKCl7aWYobnVsbD09PU8pe3ZhciBhPU4uYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPU8ubmV4dDt2YXIgYj1udWxsPT09UD9OLm1lbW9pemVkU3RhdGU6UC5uZXh0O2lmKG51bGwhPT1iKVA9YixPPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih1KDMxMCkpO089YTthPXttZW1vaXplZFN0YXRlOk8ubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Ty5iYXNlU3RhdGUsYmFzZVF1ZXVlOk8uYmFzZVF1ZXVlLHF1ZXVlOk8ucXVldWUsbmV4dDpudWxsfTtudWxsPT09UD9OLm1lbW9pemVkU3RhdGU9UD1hOlA9UC5uZXh0PWF9cmV0dXJuIFB9XG5mdW5jdGlvbiB2aChhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIHdoKGEpe3ZhciBiPXVoKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHUoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9TyxlPWQuYmFzZVF1ZXVlLGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXtpZihudWxsIT09ZSl7dmFyIGc9ZS5uZXh0O2UubmV4dD1mLm5leHQ7Zi5uZXh0PWd9ZC5iYXNlUXVldWU9ZT1mO2MucGVuZGluZz1udWxsfWlmKG51bGwhPT1lKXtlPWUubmV4dDtkPWQuYmFzZVN0YXRlO3ZhciBoPWc9Zj1udWxsLGs9ZTtkb3t2YXIgbD1rLmV4cGlyYXRpb25UaW1lO2lmKGw8bGgpe3ZhciBtPXtleHBpcmF0aW9uVGltZTprLmV4cGlyYXRpb25UaW1lLHN1c3BlbnNlQ29uZmlnOmsuc3VzcGVuc2VDb25maWcsYWN0aW9uOmsuYWN0aW9uLGVhZ2VyUmVkdWNlcjprLmVhZ2VyUmVkdWNlcixlYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1oPyhnPWg9bSxmPWQpOmg9aC5uZXh0PW07bD5OLmV4cGlyYXRpb25UaW1lJiZcbihOLmV4cGlyYXRpb25UaW1lPWwsQmcobCkpfWVsc2UgbnVsbCE9PWgmJihoPWgubmV4dD17ZXhwaXJhdGlvblRpbWU6MTA3Mzc0MTgyMyxzdXNwZW5zZUNvbmZpZzprLnN1c3BlbnNlQ29uZmlnLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksQWcobCxrLnN1c3BlbnNlQ29uZmlnKSxkPWsuZWFnZXJSZWR1Y2VyPT09YT9rLmVhZ2VyU3RhdGU6YShkLGsuYWN0aW9uKTtrPWsubmV4dH13aGlsZShudWxsIT09ayYmayE9PWUpO251bGw9PT1oP2Y9ZDpoLm5leHQ9ZzskZShkLGIubWVtb2l6ZWRTdGF0ZSl8fChyZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZjtiLmJhc2VRdWV1ZT1oO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24geGgoYSl7dmFyIGI9dWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IodSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpOyRlKGYsYi5tZW1vaXplZFN0YXRlKXx8KHJnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19XG5mdW5jdGlvbiB5aChhKXt2YXIgYj10aCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9Yi5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjp2aCxsYXN0UmVuZGVyZWRTdGF0ZTphfTthPWEuZGlzcGF0Y2g9emguYmluZChudWxsLE4sYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1mdW5jdGlvbiBBaChhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1OLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGx9LE4udXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBCaCgpe3JldHVybiB1aCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gQ2goYSxiLGMsZCl7dmFyIGU9dGgoKTtOLmVmZmVjdFRhZ3w9YTtlLm1lbW9pemVkU3RhdGU9QWgoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1mdW5jdGlvbiBEaChhLGIsYyxkKXt2YXIgZT11aCgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1PKXt2YXIgZz1PLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJm5oKGQsZy5kZXBzKSl7QWgoYixjLGYsZCk7cmV0dXJufX1OLmVmZmVjdFRhZ3w9YTtlLm1lbW9pemVkU3RhdGU9QWgoMXxiLGMsZixkKX1mdW5jdGlvbiBFaChhLGIpe3JldHVybiBDaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIEZoKGEsYil7cmV0dXJuIERoKDUxNiw0LGEsYil9ZnVuY3Rpb24gR2goYSxiKXtyZXR1cm4gRGgoNCwyLGEsYil9XG5mdW5jdGlvbiBIaChhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fWZ1bmN0aW9uIEloKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gRGgoNCwyLEhoLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIEpoKCl7fWZ1bmN0aW9uIEtoKGEsYil7dGgoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX1mdW5jdGlvbiBMaChhLGIpe3ZhciBjPXVoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZuaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIE1oKGEsYil7dmFyIGM9dWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJm5oKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIE5oKGEsYixjKXt2YXIgZD1hZygpO2NnKDk4PmQ/OTg6ZCxmdW5jdGlvbigpe2EoITApfSk7Y2coOTc8ZD85NzpkLGZ1bmN0aW9uKCl7dmFyIGQ9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2EoITEpLGMoKX1maW5hbGx5e2toLnN1c3BlbnNlPWR9fSl9XG5mdW5jdGlvbiB6aChhLGIsYyl7dmFyIGQ9R2coKSxlPURnLnN1c3BlbnNlO2Q9SGcoZCxhLGUpO2U9e2V4cGlyYXRpb25UaW1lOmQsc3VzcGVuc2VDb25maWc6ZSxhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTt2YXIgZj1iLnBlbmRpbmc7bnVsbD09PWY/ZS5uZXh0PWU6KGUubmV4dD1mLm5leHQsZi5uZXh0PWUpO2IucGVuZGluZz1lO2Y9YS5hbHRlcm5hdGU7aWYoYT09PU58fG51bGwhPT1mJiZmPT09TiltaD0hMCxlLmV4cGlyYXRpb25UaW1lPWxoLE4uZXhwaXJhdGlvblRpbWU9bGg7ZWxzZXtpZigwPT09YS5leHBpcmF0aW9uVGltZSYmKG51bGw9PT1mfHwwPT09Zi5leHBpcmF0aW9uVGltZSkmJihmPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZikpdHJ5e3ZhciBnPWIubGFzdFJlbmRlcmVkU3RhdGUsaD1mKGcsYyk7ZS5lYWdlclJlZHVjZXI9ZjtlLmVhZ2VyU3RhdGU9aDtpZigkZShoLGcpKXJldHVybn1jYXRjaChrKXt9ZmluYWxseXt9SWcoYSxcbmQpfX1cbnZhciBzaD17cmVhZENvbnRleHQ6c2csdXNlQ2FsbGJhY2s6USx1c2VDb250ZXh0OlEsdXNlRWZmZWN0OlEsdXNlSW1wZXJhdGl2ZUhhbmRsZTpRLHVzZUxheW91dEVmZmVjdDpRLHVzZU1lbW86USx1c2VSZWR1Y2VyOlEsdXNlUmVmOlEsdXNlU3RhdGU6USx1c2VEZWJ1Z1ZhbHVlOlEsdXNlUmVzcG9uZGVyOlEsdXNlRGVmZXJyZWRWYWx1ZTpRLHVzZVRyYW5zaXRpb246UX0scGg9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOktoLHVzZUNvbnRleHQ6c2csdXNlRWZmZWN0OkVoLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBDaCg0LDIsSGguYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBDaCg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPXRoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsXG5iXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGgoKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9ZC5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2E9YS5kaXNwYXRjaD16aC5iaW5kKG51bGwsTixhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9dGgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX0sdXNlU3RhdGU6eWgsdXNlRGVidWdWYWx1ZTpKaCx1c2VSZXNwb25kZXI6aWgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXloKGEpLGQ9Y1swXSxlPWNbMV07RWgoZnVuY3Rpb24oKXt2YXIgYz1raC5zdXNwZW5zZTtraC5zdXNwZW5zZT12b2lkIDA9PT1iP251bGw6Yjt0cnl7ZShhKX1maW5hbGx5e2toLnN1c3BlbnNlPVxuY319LFthLGJdKTtyZXR1cm4gZH0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbihhKXt2YXIgYj15aCghMSksYz1iWzBdO2I9YlsxXTtyZXR1cm5bS2goTmguYmluZChudWxsLGIsYSksW2IsYV0pLGNdfX0scWg9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOkxoLHVzZUNvbnRleHQ6c2csdXNlRWZmZWN0OkZoLHVzZUltcGVyYXRpdmVIYW5kbGU6SWgsdXNlTGF5b3V0RWZmZWN0OkdoLHVzZU1lbW86TWgsdXNlUmVkdWNlcjp3aCx1c2VSZWY6QmgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gd2godmgpfSx1c2VEZWJ1Z1ZhbHVlOkpoLHVzZVJlc3BvbmRlcjppaCx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEsYil7dmFyIGM9d2godmgpLGQ9Y1swXSxlPWNbMV07RmgoZnVuY3Rpb24oKXt2YXIgYz1raC5zdXNwZW5zZTtraC5zdXNwZW5zZT12b2lkIDA9PT1iP251bGw6Yjt0cnl7ZShhKX1maW5hbGx5e2toLnN1c3BlbnNlPWN9fSxbYSxiXSk7cmV0dXJuIGR9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9XG53aCh2aCksYz1iWzBdO2I9YlsxXTtyZXR1cm5bTGgoTmguYmluZChudWxsLGIsYSksW2IsYV0pLGNdfX0scmg9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOkxoLHVzZUNvbnRleHQ6c2csdXNlRWZmZWN0OkZoLHVzZUltcGVyYXRpdmVIYW5kbGU6SWgsdXNlTGF5b3V0RWZmZWN0OkdoLHVzZU1lbW86TWgsdXNlUmVkdWNlcjp4aCx1c2VSZWY6QmgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4geGgodmgpfSx1c2VEZWJ1Z1ZhbHVlOkpoLHVzZVJlc3BvbmRlcjppaCx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEsYil7dmFyIGM9eGgodmgpLGQ9Y1swXSxlPWNbMV07RmgoZnVuY3Rpb24oKXt2YXIgYz1raC5zdXNwZW5zZTtraC5zdXNwZW5zZT12b2lkIDA9PT1iP251bGw6Yjt0cnl7ZShhKX1maW5hbGx5e2toLnN1c3BlbnNlPWN9fSxbYSxiXSk7cmV0dXJuIGR9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9eGgodmgpLGM9YlswXTtiPWJbMV07cmV0dXJuW0xoKE5oLmJpbmQobnVsbCxcbmIsYSksW2IsYV0pLGNdfX0sT2g9bnVsbCxQaD1udWxsLFFoPSExO2Z1bmN0aW9uIFJoKGEsYil7dmFyIGM9U2goNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZWZmZWN0VGFnPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31cbmZ1bmN0aW9uIFRoKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBVaChhKXtpZihRaCl7dmFyIGI9UGg7aWYoYil7dmFyIGM9YjtpZighVGgoYSxiKSl7Yj1KZChjLm5leHRTaWJsaW5nKTtpZighYnx8IVRoKGEsYikpe2EuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0xMDI1fDI7UWg9ITE7T2g9YTtyZXR1cm59UmgoT2gsYyl9T2g9YTtQaD1KZChiLmZpcnN0Q2hpbGQpfWVsc2UgYS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTEwMjV8MixRaD0hMSxPaD1hfX1mdW5jdGlvbiBWaChhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjEzIT09YS50YWc7KWE9YS5yZXR1cm47T2g9YX1cbmZ1bmN0aW9uIFdoKGEpe2lmKGEhPT1PaClyZXR1cm4hMTtpZighUWgpcmV0dXJuIFZoKGEpLFFoPSEwLCExO3ZhciBiPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhR2QoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPVBoO2I7KVJoKGEsYiksYj1KZChiLm5leHRTaWJsaW5nKTtWaChhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHUoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoYz09PUFkKXtpZigwPT09Yil7UGg9SmQoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZSBjIT09emQmJmMhPT1DZCYmYyE9PUJkfHxiKyt9YT1hLm5leHRTaWJsaW5nfVBoPW51bGx9fWVsc2UgUGg9T2g/SmQoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9XG5mdW5jdGlvbiBYaCgpe1BoPU9oPW51bGw7UWg9ITF9dmFyIFloPVdhLlJlYWN0Q3VycmVudE93bmVyLHJnPSExO2Z1bmN0aW9uIFIoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9ZZyhiLG51bGwsYyxkKTpYZyhiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiBaaChhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7cWcoYixlKTtkPW9oKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXJnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksJGgoYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1IoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBhaShhLGIsYyxkLGUsZil7aWYobnVsbD09PWEpe3ZhciBnPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmIWJpKGcpJiZ2b2lkIDA9PT1nLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1nLGNpKGEsYixnLGQsZSxmKTthPVVnKGMudHlwZSxudWxsLGQsbnVsbCxiLm1vZGUsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWc9YS5jaGlsZDtpZihlPGYmJihlPWcubWVtb2l6ZWRQcm9wcyxjPWMuY29tcGFyZSxjPW51bGwhPT1jP2M6YmYsYyhlLGQpJiZhLnJlZj09PWIucmVmKSlyZXR1cm4gJGgoYSxiLGYpO2IuZWZmZWN0VGFnfD0xO2E9U2coZyxkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBjaShhLGIsYyxkLGUsZil7cmV0dXJuIG51bGwhPT1hJiZiZihhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYmJihyZz0hMSxlPGYpPyhiLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWUsJGgoYSxiLGYpKTpkaShhLGIsYyxkLGYpfWZ1bmN0aW9uIGVpKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gZGkoYSxiLGMsZCxlKXt2YXIgZj1MKGMpP0JmOkouY3VycmVudDtmPUNmKGIsZik7cWcoYixlKTtjPW9oKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXJnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksJGgoYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1IoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBmaShhLGIsYyxkLGUpe2lmKEwoYykpe3ZhciBmPSEwO0dmKGIpfWVsc2UgZj0hMTtxZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksTGcoYixjLGQpLE5nKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXNnKGwpOihsPUwoYyk/QmY6Si5jdXJyZW50LGw9Q2YoYixsKSk7dmFyIG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMscD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7cHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk1nKGIsZyxkLGwpO3RnPSExO3ZhciB4PWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXg7emcoYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHghPT1rfHxLLmN1cnJlbnR8fHRnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKEZnKGIsYyxtLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD10Z3x8S2coYixjLGgsZCx4LGssbCkpPyhwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxkPSExKX1lbHNlIGc9Yi5zdGF0ZU5vZGUsdmcoYSxiKSxoPWIubWVtb2l6ZWRQcm9wcyxnLnByb3BzPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDppZyhiLnR5cGUsaCksaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlLFwib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1zZyhsKToobD1MKGMpP0JmOkouY3VycmVudCxsPUNmKGIsbCkpLG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsKHA9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk1nKGIsZyxkLGwpLHRnPSExLGs9Yi5tZW1vaXplZFN0YXRlLGcuc3RhdGU9ayx6ZyhiLGQsZyxlKSx4PWIubWVtb2l6ZWRTdGF0ZSxoIT09ZHx8ayE9PXh8fEsuY3VycmVudHx8dGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoRmcoYixjLG0sZCkseD1iLm1lbW9pemVkU3RhdGUpLChtPXRnfHxLZyhiLGMsaCxkLGsseCxsKSk/KHB8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsXG54LGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQseCxsKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTI1NikpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9eCksZy5wcm9wcz1kLGcuc3RhdGU9eCxnLmNvbnRleHQ9bCxkPW0pOlxuKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGQ9ITEpO3JldHVybiBnaShhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBnaShhLGIsYyxkLGUsZil7ZWkoYSxiKTt2YXIgZz0wIT09KGIuZWZmZWN0VGFnJjY0KTtpZighZCYmIWcpcmV0dXJuIGUmJkhmKGIsYywhMSksJGgoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7WWguY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5lZmZlY3RUYWd8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9WGcoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1YZyhiLG51bGwsaCxmKSk6UihhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZIZihiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGhpKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/RWYoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmRWYoYSxiLmNvbnRleHQsITEpO2RoKGEsYi5jb250YWluZXJJbmZvKX1cbnZhciBpaT17ZGVoeWRyYXRlZDpudWxsLHJldHJ5VGltZTowfTtcbmZ1bmN0aW9uIGppKGEsYixjKXt2YXIgZD1iLm1vZGUsZT1iLnBlbmRpbmdQcm9wcyxmPU0uY3VycmVudCxnPSExLGg7KGg9MCE9PShiLmVmZmVjdFRhZyY2NCkpfHwoaD0wIT09KGYmMikmJihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSkpO2g/KGc9ITAsYi5lZmZlY3RUYWcmPS02NSk6bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGV8fHZvaWQgMD09PWUuZmFsbGJhY2t8fCEwPT09ZS51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8KGZ8PTEpO0koTSxmJjEpO2lmKG51bGw9PT1hKXt2b2lkIDAhPT1lLmZhbGxiYWNrJiZVaChiKTtpZihnKXtnPWUuZmFsbGJhY2s7ZT1XZyhudWxsLGQsMCxudWxsKTtlLnJldHVybj1iO2lmKDA9PT0oYi5tb2RlJjIpKWZvcihhPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGUuY2hpbGQ9YTtudWxsIT09YTspYS5yZXR1cm49ZSxhPWEuc2libGluZztjPVdnKGcsZCxjLG51bGwpO2MucmV0dXJuPVxuYjtlLnNpYmxpbmc9YztiLm1lbW9pemVkU3RhdGU9aWk7Yi5jaGlsZD1lO3JldHVybiBjfWQ9ZS5jaGlsZHJlbjtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYi5jaGlsZD1ZZyhiLG51bGwsZCxjKX1pZihudWxsIT09YS5tZW1vaXplZFN0YXRlKXthPWEuY2hpbGQ7ZD1hLnNpYmxpbmc7aWYoZyl7ZT1lLmZhbGxiYWNrO2M9U2coYSxhLnBlbmRpbmdQcm9wcyk7Yy5yZXR1cm49YjtpZigwPT09KGIubW9kZSYyKSYmKGc9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZyE9PWEuY2hpbGQpKWZvcihjLmNoaWxkPWc7bnVsbCE9PWc7KWcucmV0dXJuPWMsZz1nLnNpYmxpbmc7ZD1TZyhkLGUpO2QucmV0dXJuPWI7Yy5zaWJsaW5nPWQ7Yy5jaGlsZEV4cGlyYXRpb25UaW1lPTA7Yi5tZW1vaXplZFN0YXRlPWlpO2IuY2hpbGQ9YztyZXR1cm4gZH1jPVhnKGIsYS5jaGlsZCxlLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBiLmNoaWxkPVxuY31hPWEuY2hpbGQ7aWYoZyl7Zz1lLmZhbGxiYWNrO2U9V2cobnVsbCxkLDAsbnVsbCk7ZS5yZXR1cm49YjtlLmNoaWxkPWE7bnVsbCE9PWEmJihhLnJldHVybj1lKTtpZigwPT09KGIubW9kZSYyKSlmb3IoYT1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxlLmNoaWxkPWE7bnVsbCE9PWE7KWEucmV0dXJuPWUsYT1hLnNpYmxpbmc7Yz1XZyhnLGQsYyxudWxsKTtjLnJldHVybj1iO2Uuc2libGluZz1jO2MuZWZmZWN0VGFnfD0yO2UuY2hpbGRFeHBpcmF0aW9uVGltZT0wO2IubWVtb2l6ZWRTdGF0ZT1paTtiLmNoaWxkPWU7cmV0dXJuIGN9Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGIuY2hpbGQ9WGcoYixhLGUuY2hpbGRyZW4sYyl9XG5mdW5jdGlvbiBraShhLGIpe2EuZXhwaXJhdGlvblRpbWU8YiYmKGEuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8YiYmKGMuZXhwaXJhdGlvblRpbWU9Yik7cGcoYS5yZXR1cm4sYil9ZnVuY3Rpb24gbGkoYSxiLGMsZCxlLGYpe3ZhciBnPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zz9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwscmVuZGVyaW5nU3RhcnRUaW1lOjAsbGFzdDpkLHRhaWw6Yyx0YWlsRXhwaXJhdGlvbjowLHRhaWxNb2RlOmUsbGFzdEVmZmVjdDpmfTooZy5pc0JhY2t3YXJkcz1iLGcucmVuZGVyaW5nPW51bGwsZy5yZW5kZXJpbmdTdGFydFRpbWU9MCxnLmxhc3Q9ZCxnLnRhaWw9YyxnLnRhaWxFeHBpcmF0aW9uPTAsZy50YWlsTW9kZT1lLGcubGFzdEVmZmVjdD1mKX1cbmZ1bmN0aW9uIG1pKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7UihhLGIsZC5jaGlsZHJlbixjKTtkPU0uY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmVmZmVjdFRhZ3w9NjQ7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmVmZmVjdFRhZyY2NCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZraShhLGMpO2Vsc2UgaWYoMTk9PT1hLnRhZylraShhLGMpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1JKE0sZCk7aWYoMD09PShiLm1vZGUmMikpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PWhoKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7bGkoYiwhMSxlLGMsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXthPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1hJiZudWxsPT09aGgoYSkpe2IuY2hpbGQ9ZTticmVha31hPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1hfWxpKGIsITAsYyxudWxsLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwidG9nZXRoZXJcIjpsaShiLCExLG51bGwsbnVsbCx2b2lkIDAsYi5sYXN0RWZmZWN0KTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gJGgoYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO3ZhciBkPWIuZXhwaXJhdGlvblRpbWU7MCE9PWQmJkJnKGQpO2lmKGIuY2hpbGRFeHBpcmF0aW9uVGltZTxjKXJldHVybiBudWxsO2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcih1KDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz1TZyhhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9U2coYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH12YXIgbmksb2kscGkscWk7XG5uaT1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07b2k9ZnVuY3Rpb24oKXt9O1xucGk9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoZiE9PWQpe3ZhciBnPWIuc3RhdGVOb2RlO2NoKCRnLmN1cnJlbnQpO2E9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6Zj16YihnLGYpO2Q9emIoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPUdiKGcsZik7ZD1HYihnLGQpO2E9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmY9bih7fSxmLHt2YWx1ZTp2b2lkIDB9KTtkPW4oe30sZCx7dmFsdWU6dm9pZCAwfSk7YT1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpmPUliKGcsZik7ZD1JYihnLGQpO2E9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZi5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoZy5vbmNsaWNrPXNkKX1vZChjLGQpO3ZhciBoLGs7Yz1udWxsO2ZvcihoIGluIGYpaWYoIWQuaGFzT3duUHJvcGVydHkoaCkmJmYuaGFzT3duUHJvcGVydHkoaCkmJm51bGwhPWZbaF0paWYoXCJzdHlsZVwiPT09XG5oKWZvcihrIGluIGc9ZltoXSxnKWcuaGFzT3duUHJvcGVydHkoaykmJihjfHwoYz17fSksY1trXT1cIlwiKTtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09aCYmXCJjaGlsZHJlblwiIT09aCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWgmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1oJiZcImF1dG9Gb2N1c1wiIT09aCYmKHZhLmhhc093blByb3BlcnR5KGgpP2F8fChhPVtdKTooYT1hfHxbXSkucHVzaChoLG51bGwpKTtmb3IoaCBpbiBkKXt2YXIgbD1kW2hdO2c9bnVsbCE9Zj9mW2hdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGgpJiZsIT09ZyYmKG51bGwhPWx8fG51bGwhPWcpKWlmKFwic3R5bGVcIj09PWgpaWYoZyl7Zm9yKGsgaW4gZykhZy5oYXNPd25Qcm9wZXJ0eShrKXx8bCYmbC5oYXNPd25Qcm9wZXJ0eShrKXx8KGN8fChjPXt9KSxjW2tdPVwiXCIpO2ZvcihrIGluIGwpbC5oYXNPd25Qcm9wZXJ0eShrKSYmZ1trXSE9PWxba10mJihjfHwoYz17fSksXG5jW2tdPWxba10pfWVsc2UgY3x8KGF8fChhPVtdKSxhLnB1c2goaCxjKSksYz1sO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1oPyhsPWw/bC5fX2h0bWw6dm9pZCAwLGc9Zz9nLl9faHRtbDp2b2lkIDAsbnVsbCE9bCYmZyE9PWwmJihhPWF8fFtdKS5wdXNoKGgsbCkpOlwiY2hpbGRyZW5cIj09PWg/Zz09PWx8fFwic3RyaW5nXCIhPT10eXBlb2YgbCYmXCJudW1iZXJcIiE9PXR5cGVvZiBsfHwoYT1hfHxbXSkucHVzaChoLFwiXCIrbCk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWgmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1oJiYodmEuaGFzT3duUHJvcGVydHkoaCk/KG51bGwhPWwmJnJkKGUsaCksYXx8Zz09PWx8fChhPVtdKSk6KGE9YXx8W10pLnB1c2goaCxsKSl9YyYmKGE9YXx8W10pLnB1c2goXCJzdHlsZVwiLGMpO2U9YTtpZihiLnVwZGF0ZVF1ZXVlPWUpYi5lZmZlY3RUYWd8PTR9fTtcbnFpPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5lZmZlY3RUYWd8PTQpfTtmdW5jdGlvbiByaShhLGIpe3N3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBzaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDE6cmV0dXJuIEwoYi50eXBlKSYmRGYoKSxudWxsO2Nhc2UgMzpyZXR1cm4gZWgoKSxIKEspLEgoSiksYz1iLnN0YXRlTm9kZSxjLnBlbmRpbmdDb250ZXh0JiYoYy5jb250ZXh0PWMucGVuZGluZ0NvbnRleHQsYy5wZW5kaW5nQ29udGV4dD1udWxsKSxudWxsIT09YSYmbnVsbCE9PWEuY2hpbGR8fCFXaChiKXx8KGIuZWZmZWN0VGFnfD00KSxvaShiKSxudWxsO2Nhc2UgNTpnaChiKTtjPWNoKGJoLmN1cnJlbnQpO3ZhciBlPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpcGkoYSxiLGUsZCxjKSxhLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCk7ZWxzZXtpZighZCl7aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHUoMTY2KSk7XG5yZXR1cm4gbnVsbH1hPWNoKCRnLmN1cnJlbnQpO2lmKFdoKGIpKXtkPWIuc3RhdGVOb2RlO2U9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW01kXT1iO2RbTmRdPWY7c3dpdGNoKGUpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RihcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoYT0wO2E8YWMubGVuZ3RoO2ErKylGKGFjW2FdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpGKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpGKFwiZXJyb3JcIixkKTtGKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RihcInJlc2V0XCIsZCk7RihcInN1Ym1pdFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RihcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkFiKGQsZik7RihcImludmFsaWRcIixkKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQuX3dyYXBwZXJTdGF0ZT1cbnt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0YoXCJpbnZhbGlkXCIsZCk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkpiKGQsZiksRihcImludmFsaWRcIixkKSxyZChjLFwib25DaGFuZ2VcIil9b2QoZSxmKTthPW51bGw7Zm9yKHZhciBnIGluIGYpaWYoZi5oYXNPd25Qcm9wZXJ0eShnKSl7dmFyIGg9ZltnXTtcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgaD9kLnRleHRDb250ZW50IT09aCYmKGE9W1wiY2hpbGRyZW5cIixoXSk6XCJudW1iZXJcIj09PXR5cGVvZiBoJiZkLnRleHRDb250ZW50IT09XCJcIitoJiYoYT1bXCJjaGlsZHJlblwiLFwiXCIraF0pOnZhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1oJiZyZChjLGcpfXN3aXRjaChlKXtjYXNlIFwiaW5wdXRcIjp4YihkKTtFYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnhiKGQpO0xiKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiZcbihkLm9uY2xpY2s9c2QpfWM9YTtiLnVwZGF0ZVF1ZXVlPWM7bnVsbCE9PWMmJihiLmVmZmVjdFRhZ3w9NCl9ZWxzZXtnPTk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O2E9PT1xZCYmKGE9TmIoZSkpO2E9PT1xZD9cInNjcmlwdFwiPT09ZT8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGUse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoZSksXCJzZWxlY3RcIj09PWUmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGUpO2FbTWRdPWI7YVtOZF09ZDtuaShhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7Zz1wZChlLGQpO3N3aXRjaChlKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkYoXCJsb2FkXCIsXG5hKTtoPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGg9MDtoPGFjLmxlbmd0aDtoKyspRihhY1toXSxhKTtoPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkYoXCJlcnJvclwiLGEpO2g9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpGKFwiZXJyb3JcIixhKTtGKFwibG9hZFwiLGEpO2g9ZDticmVhaztjYXNlIFwiZm9ybVwiOkYoXCJyZXNldFwiLGEpO0YoXCJzdWJtaXRcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpGKFwidG9nZ2xlXCIsYSk7aD1kO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkFiKGEsZCk7aD16YihhLGQpO0YoXCJpbnZhbGlkXCIsYSk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpoPUdiKGEsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFkLm11bHRpcGxlfTtoPW4oe30sZCx7dmFsdWU6dm9pZCAwfSk7RihcImludmFsaWRcIixhKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6SmIoYSxcbmQpO2g9SWIoYSxkKTtGKFwiaW52YWxpZFwiLGEpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztkZWZhdWx0Omg9ZH1vZChlLGgpO3ZhciBrPWg7Zm9yKGYgaW4gaylpZihrLmhhc093blByb3BlcnR5KGYpKXt2YXIgbD1rW2ZdO1wic3R5bGVcIj09PWY/bWQoYSxsKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1mPyhsPWw/bC5fX2h0bWw6dm9pZCAwLG51bGwhPWwmJlFiKGEsbCkpOlwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBsPyhcInRleHRhcmVhXCIhPT1lfHxcIlwiIT09bCkmJlJiKGEsbCk6XCJudW1iZXJcIj09PXR5cGVvZiBsJiZSYihhLFwiXCIrbCk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWYmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1mJiZcImF1dG9Gb2N1c1wiIT09ZiYmKHZhLmhhc093blByb3BlcnR5KGYpP251bGwhPWwmJnJkKGMsZik6bnVsbCE9bCYmWGEoYSxmLGwsZykpfXN3aXRjaChlKXtjYXNlIFwiaW5wdXRcIjp4YihhKTtFYihhLGQsITEpO1xuYnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6eGIoYSk7TGIoYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWQudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK3JiKGQudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWQubXVsdGlwbGU7Yz1kLnZhbHVlO251bGwhPWM/SGIoYSwhIWQubXVsdGlwbGUsYywhMSk6bnVsbCE9ZC5kZWZhdWx0VmFsdWUmJkhiKGEsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLm9uQ2xpY2smJihhLm9uY2xpY2s9c2QpfUZkKGUsZCkmJihiLmVmZmVjdFRhZ3w9NCl9bnVsbCE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKXFpKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih1KDE2NikpO1xuYz1jaChiaC5jdXJyZW50KTtjaCgkZy5jdXJyZW50KTtXaChiKT8oYz1iLnN0YXRlTm9kZSxkPWIubWVtb2l6ZWRQcm9wcyxjW01kXT1iLGMubm9kZVZhbHVlIT09ZCYmKGIuZWZmZWN0VGFnfD00KSk6KGM9KDk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShkKSxjW01kXT1iLGIuc3RhdGVOb2RlPWMpfXJldHVybiBudWxsO2Nhc2UgMTM6SChNKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSlyZXR1cm4gYi5leHBpcmF0aW9uVGltZT1jLGI7Yz1udWxsIT09ZDtkPSExO251bGw9PT1hP3ZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5mYWxsYmFjayYmV2goYik6KGU9YS5tZW1vaXplZFN0YXRlLGQ9bnVsbCE9PWUsY3x8bnVsbD09PWV8fChlPWEuY2hpbGQuc2libGluZyxudWxsIT09ZSYmKGY9Yi5maXJzdEVmZmVjdCxudWxsIT09Zj8oYi5maXJzdEVmZmVjdD1lLGUubmV4dEVmZmVjdD1mKTooYi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9XG5lLGUubmV4dEVmZmVjdD1udWxsKSxlLmVmZmVjdFRhZz04KSkpO2lmKGMmJiFkJiYwIT09KGIubW9kZSYyKSlpZihudWxsPT09YSYmITAhPT1iLm1lbW9pemVkUHJvcHMudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fDAhPT0oTS5jdXJyZW50JjEpKVM9PT10aSYmKFM9dWkpO2Vsc2V7aWYoUz09PXRpfHxTPT09dWkpUz12aTswIT09d2kmJm51bGwhPT1UJiYoeGkoVCxVKSx5aShULHdpKSl9aWYoY3x8ZCliLmVmZmVjdFRhZ3w9NDtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIGVoKCksb2koYiksbnVsbDtjYXNlIDEwOnJldHVybiBvZyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIEwoYi50eXBlKSYmRGYoKSxudWxsO2Nhc2UgMTk6SChNKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtlPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2Y9ZC5yZW5kZXJpbmc7aWYobnVsbD09PWYpaWYoZSlyaShkLCExKTtlbHNle2lmKFMhPT10aXx8bnVsbCE9PWEmJjAhPT0oYS5lZmZlY3RUYWcmXG42NCkpZm9yKGY9Yi5jaGlsZDtudWxsIT09Zjspe2E9aGgoZik7aWYobnVsbCE9PWEpe2IuZWZmZWN0VGFnfD02NDtyaShkLCExKTtlPWEudXBkYXRlUXVldWU7bnVsbCE9PWUmJihiLnVwZGF0ZVF1ZXVlPWUsYi5lZmZlY3RUYWd8PTQpO251bGw9PT1kLmxhc3RFZmZlY3QmJihiLmZpcnN0RWZmZWN0PW51bGwpO2IubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3Q7Zm9yKGQ9Yi5jaGlsZDtudWxsIT09ZDspZT1kLGY9YyxlLmVmZmVjdFRhZyY9MixlLm5leHRFZmZlY3Q9bnVsbCxlLmZpcnN0RWZmZWN0PW51bGwsZS5sYXN0RWZmZWN0PW51bGwsYT1lLmFsdGVybmF0ZSxudWxsPT09YT8oZS5jaGlsZEV4cGlyYXRpb25UaW1lPTAsZS5leHBpcmF0aW9uVGltZT1mLGUuY2hpbGQ9bnVsbCxlLm1lbW9pemVkUHJvcHM9bnVsbCxlLm1lbW9pemVkU3RhdGU9bnVsbCxlLnVwZGF0ZVF1ZXVlPW51bGwsZS5kZXBlbmRlbmNpZXM9bnVsbCk6KGUuY2hpbGRFeHBpcmF0aW9uVGltZT1hLmNoaWxkRXhwaXJhdGlvblRpbWUsXG5lLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWUsZS5jaGlsZD1hLmNoaWxkLGUubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHMsZS5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxlLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsZj1hLmRlcGVuZGVuY2llcyxlLmRlcGVuZGVuY2llcz1udWxsPT09Zj9udWxsOntleHBpcmF0aW9uVGltZTpmLmV4cGlyYXRpb25UaW1lLGZpcnN0Q29udGV4dDpmLmZpcnN0Q29udGV4dCxyZXNwb25kZXJzOmYucmVzcG9uZGVyc30pLGQ9ZC5zaWJsaW5nO0koTSxNLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1mPWYuc2libGluZ319ZWxzZXtpZighZSlpZihhPWhoKGYpLG51bGwhPT1hKXtpZihiLmVmZmVjdFRhZ3w9NjQsZT0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5lZmZlY3RUYWd8PTQpLHJpKGQsITApLG51bGw9PT1kLnRhaWwmJlwiaGlkZGVuXCI9PT1kLnRhaWxNb2RlJiYhZi5hbHRlcm5hdGUpcmV0dXJuIGI9XG5iLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0LG51bGwhPT1iJiYoYi5uZXh0RWZmZWN0PW51bGwpLG51bGx9ZWxzZSAyKiRmKCktZC5yZW5kZXJpbmdTdGFydFRpbWU+ZC50YWlsRXhwaXJhdGlvbiYmMTxjJiYoYi5lZmZlY3RUYWd8PTY0LGU9ITAscmkoZCwhMSksYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9Yy0xKTtkLmlzQmFja3dhcmRzPyhmLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWYpOihjPWQubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZjpiLmNoaWxkPWYsZC5sYXN0PWYpfXJldHVybiBudWxsIT09ZC50YWlsPygwPT09ZC50YWlsRXhwaXJhdGlvbiYmKGQudGFpbEV4cGlyYXRpb249JGYoKSs1MDApLGM9ZC50YWlsLGQucmVuZGVyaW5nPWMsZC50YWlsPWMuc2libGluZyxkLmxhc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0LGQucmVuZGVyaW5nU3RhcnRUaW1lPSRmKCksYy5zaWJsaW5nPW51bGwsYj1NLmN1cnJlbnQsSShNLGU/YiYxfDI6YiYxKSxjKTpudWxsfXRocm93IEVycm9yKHUoMTU2LFxuYi50YWcpKTt9ZnVuY3Rpb24gemkoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDE6TChhLnR5cGUpJiZEZigpO3ZhciBiPWEuZWZmZWN0VGFnO3JldHVybiBiJjQwOTY/KGEuZWZmZWN0VGFnPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDM6ZWgoKTtIKEspO0goSik7Yj1hLmVmZmVjdFRhZztpZigwIT09KGImNjQpKXRocm93IEVycm9yKHUoMjg1KSk7YS5lZmZlY3RUYWc9YiYtNDA5N3w2NDtyZXR1cm4gYTtjYXNlIDU6cmV0dXJuIGdoKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gSChNKSxiPWEuZWZmZWN0VGFnLGImNDA5Nj8oYS5lZmZlY3RUYWc9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMTk6cmV0dXJuIEgoTSksbnVsbDtjYXNlIDQ6cmV0dXJuIGVoKCksbnVsbDtjYXNlIDEwOnJldHVybiBvZyhhKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fWZ1bmN0aW9uIEFpKGEsYil7cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6cWIoYil9fVxudmFyIEJpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0O2Z1bmN0aW9uIENpKGEsYil7dmFyIGM9Yi5zb3VyY2UsZD1iLnN0YWNrO251bGw9PT1kJiZudWxsIT09YyYmKGQ9cWIoYykpO251bGwhPT1jJiZwYihjLnR5cGUpO2I9Yi52YWx1ZTtudWxsIT09YSYmMT09PWEudGFnJiZwYihhLnR5cGUpO3RyeXtjb25zb2xlLmVycm9yKGIpfWNhdGNoKGUpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBlO30pfX1mdW5jdGlvbiBEaShhLGIpe3RyeXtiLnByb3BzPWEubWVtb2l6ZWRQcm9wcyxiLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxiLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goYyl7RWkoYSxjKX19ZnVuY3Rpb24gRmkoYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7RWkoYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfVxuZnVuY3Rpb24gR2koYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpyZXR1cm47Y2FzZSAxOmlmKGIuZWZmZWN0VGFnJjI1NiYmbnVsbCE9PWEpe3ZhciBjPWEubWVtb2l6ZWRQcm9wcyxkPWEubWVtb2l6ZWRTdGF0ZTthPWIuc3RhdGVOb2RlO2I9YS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP2M6aWcoYi50eXBlLGMpLGQpO2EuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Yn1yZXR1cm47Y2FzZSAzOmNhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6cmV0dXJufXRocm93IEVycm9yKHUoMTYzKSk7fVxuZnVuY3Rpb24gSGkoYSxiKXtiPWIudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7dmFyIGM9Yj1iLm5leHQ7ZG97aWYoKGMudGFnJmEpPT09YSl7dmFyIGQ9Yy5kZXN0cm95O2MuZGVzdHJveT12b2lkIDA7dm9pZCAwIT09ZCYmZCgpfWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX19ZnVuY3Rpb24gSWkoYSxiKXtiPWIudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7dmFyIGM9Yj1iLm5leHQ7ZG97aWYoKGMudGFnJmEpPT09YSl7dmFyIGQ9Yy5jcmVhdGU7Yy5kZXN0cm95PWQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fVxuZnVuY3Rpb24gSmkoYSxiLGMpe3N3aXRjaChjLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOklpKDMsYyk7cmV0dXJuO2Nhc2UgMTphPWMuc3RhdGVOb2RlO2lmKGMuZWZmZWN0VGFnJjQpaWYobnVsbD09PWIpYS5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGQ9Yy5lbGVtZW50VHlwZT09PWMudHlwZT9iLm1lbW9pemVkUHJvcHM6aWcoYy50eXBlLGIubWVtb2l6ZWRQcm9wcyk7YS5jb21wb25lbnREaWRVcGRhdGUoZCxiLm1lbW9pemVkU3RhdGUsYS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9Yj1jLnVwZGF0ZVF1ZXVlO251bGwhPT1iJiZDZyhjLGIsYSk7cmV0dXJuO2Nhc2UgMzpiPWMudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2E9bnVsbDtpZihudWxsIT09Yy5jaGlsZClzd2l0Y2goYy5jaGlsZC50YWcpe2Nhc2UgNTphPWMuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTphPWMuY2hpbGQuc3RhdGVOb2RlfUNnKGMsYixhKX1yZXR1cm47XG5jYXNlIDU6YT1jLnN0YXRlTm9kZTtudWxsPT09YiYmYy5lZmZlY3RUYWcmNCYmRmQoYy50eXBlLGMubWVtb2l6ZWRQcm9wcykmJmEuZm9jdXMoKTtyZXR1cm47Y2FzZSA2OnJldHVybjtjYXNlIDQ6cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbD09PWMubWVtb2l6ZWRTdGF0ZSYmKGM9Yy5hbHRlcm5hdGUsbnVsbCE9PWMmJihjPWMubWVtb2l6ZWRTdGF0ZSxudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGwhPT1jJiZWYyhjKSkpKTtyZXR1cm47Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjA6Y2FzZSAyMTpyZXR1cm59dGhyb3cgRXJyb3IodSgxNjMpKTt9XG5mdW5jdGlvbiBLaShhLGIsYyl7XCJmdW5jdGlvblwiPT09dHlwZW9mIExpJiZMaShiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOmE9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YSYmKGE9YS5sYXN0RWZmZWN0LG51bGwhPT1hKSl7dmFyIGQ9YS5uZXh0O2NnKDk3PGM/OTc6YyxmdW5jdGlvbigpe3ZhciBhPWQ7ZG97dmFyIGM9YS5kZXN0cm95O2lmKHZvaWQgMCE9PWMpe3ZhciBnPWI7dHJ5e2MoKX1jYXRjaChoKXtFaShnLGgpfX1hPWEubmV4dH13aGlsZShhIT09ZCl9KX1icmVhaztjYXNlIDE6RmkoYik7Yz1iLnN0YXRlTm9kZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5jb21wb25lbnRXaWxsVW5tb3VudCYmRGkoYixjKTticmVhaztjYXNlIDU6RmkoYik7YnJlYWs7Y2FzZSA0Ok1pKGEsYixjKX19XG5mdW5jdGlvbiBOaShhKXt2YXIgYj1hLmFsdGVybmF0ZTthLnJldHVybj1udWxsO2EuY2hpbGQ9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnVwZGF0ZVF1ZXVlPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLmFsdGVybmF0ZT1udWxsO2EuZmlyc3RFZmZlY3Q9bnVsbDthLmxhc3RFZmZlY3Q9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2EubWVtb2l6ZWRQcm9wcz1udWxsO2Euc3RhdGVOb2RlPW51bGw7bnVsbCE9PWImJk5pKGIpfWZ1bmN0aW9uIE9pKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gUGkoYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoT2koYikpe3ZhciBjPWI7YnJlYWsgYX1iPWIucmV0dXJufXRocm93IEVycm9yKHUoMTYwKSk7fWI9Yy5zdGF0ZU5vZGU7c3dpdGNoKGMudGFnKXtjYXNlIDU6dmFyIGQ9ITE7YnJlYWs7Y2FzZSAzOmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDE2MSkpO31jLmVmZmVjdFRhZyYxNiYmKFJiKGIsXCJcIiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxPaShjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmVmZmVjdFRhZyYyKWNvbnRpbnVlIGI7XG5pZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWQ/UWkoYSxjLGIpOlJpKGEsYyxiKX1cbmZ1bmN0aW9uIFFpKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiPzg9PT1jLm5vZGVUeXBlP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxiKTpjLmluc2VydEJlZm9yZShhLGIpOig4PT09Yy5ub2RlVHlwZT8oYj1jLnBhcmVudE5vZGUsYi5pbnNlcnRCZWZvcmUoYSxjKSk6KGI9YyxiLmFwcGVuZENoaWxkKGEpKSxjPWMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09YyYmdm9pZCAwIT09Y3x8bnVsbCE9PWIub25jbGlja3x8KGIub25jbGljaz1zZCkpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihRaShhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVFpKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIFJpKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiP2MuaW5zZXJ0QmVmb3JlKGEsYik6Yy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoUmkoYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylSaShhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBNaShhLGIsYyl7Zm9yKHZhciBkPWIsZT0hMSxmLGc7Oyl7aWYoIWUpe2U9ZC5yZXR1cm47YTpmb3IoOzspe2lmKG51bGw9PT1lKXRocm93IEVycm9yKHUoMTYwKSk7Zj1lLnN0YXRlTm9kZTtzd2l0Y2goZS50YWcpe2Nhc2UgNTpnPSExO2JyZWFrIGE7Y2FzZSAzOmY9Zi5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYTtjYXNlIDQ6Zj1mLmNvbnRhaW5lckluZm87Zz0hMDticmVhayBhfWU9ZS5yZXR1cm59ZT0hMH1pZig1PT09ZC50YWd8fDY9PT1kLnRhZyl7YTpmb3IodmFyIGg9YSxrPWQsbD1jLG09azs7KWlmKEtpKGgsbSxsKSxudWxsIT09bS5jaGlsZCYmNCE9PW0udGFnKW0uY2hpbGQucmV0dXJuPW0sbT1tLmNoaWxkO2Vsc2V7aWYobT09PWspYnJlYWsgYTtmb3IoO251bGw9PT1tLnNpYmxpbmc7KXtpZihudWxsPT09bS5yZXR1cm58fG0ucmV0dXJuPT09aylicmVhayBhO209bS5yZXR1cm59bS5zaWJsaW5nLnJldHVybj1tLnJldHVybjttPW0uc2libGluZ31nPyhoPVxuZixrPWQuc3RhdGVOb2RlLDg9PT1oLm5vZGVUeXBlP2gucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChrKTpoLnJlbW92ZUNoaWxkKGspKTpmLnJlbW92ZUNoaWxkKGQuc3RhdGVOb2RlKX1lbHNlIGlmKDQ9PT1kLnRhZyl7aWYobnVsbCE9PWQuY2hpbGQpe2Y9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztnPSEwO2QuY2hpbGQucmV0dXJuPWQ7ZD1kLmNoaWxkO2NvbnRpbnVlfX1lbHNlIGlmKEtpKGEsZCxjKSxudWxsIT09ZC5jaGlsZCl7ZC5jaGlsZC5yZXR1cm49ZDtkPWQuY2hpbGQ7Y29udGludWV9aWYoZD09PWIpYnJlYWs7Zm9yKDtudWxsPT09ZC5zaWJsaW5nOyl7aWYobnVsbD09PWQucmV0dXJufHxkLnJldHVybj09PWIpcmV0dXJuO2Q9ZC5yZXR1cm47ND09PWQudGFnJiYoZT0hMSl9ZC5zaWJsaW5nLnJldHVybj1kLnJldHVybjtkPWQuc2libGluZ319XG5mdW5jdGlvbiBTaShhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6SGkoMyxiKTtyZXR1cm47Y2FzZSAxOnJldHVybjtjYXNlIDU6dmFyIGM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7dmFyIGQ9Yi5tZW1vaXplZFByb3BzLGU9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7YT1iLnR5cGU7dmFyIGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWYpe2NbTmRdPWQ7XCJpbnB1dFwiPT09YSYmXCJyYWRpb1wiPT09ZC50eXBlJiZudWxsIT1kLm5hbWUmJkJiKGMsZCk7cGQoYSxlKTtiPXBkKGEsZCk7Zm9yKGU9MDtlPGYubGVuZ3RoO2UrPTIpe3ZhciBnPWZbZV0saD1mW2UrMV07XCJzdHlsZVwiPT09Zz9tZChjLGgpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/UWIoYyxoKTpcImNoaWxkcmVuXCI9PT1nP1JiKGMsaCk6WGEoYyxnLGgsYil9c3dpdGNoKGEpe2Nhc2UgXCJpbnB1dFwiOkNiKGMsZCk7YnJlYWs7XG5jYXNlIFwidGV4dGFyZWFcIjpLYihjLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxjLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFkLm11bHRpcGxlLGE9ZC52YWx1ZSxudWxsIT1hP0hiKGMsISFkLm11bHRpcGxlLGEsITEpOmIhPT0hIWQubXVsdGlwbGUmJihudWxsIT1kLmRlZmF1bHRWYWx1ZT9IYihjLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk6SGIoYywhIWQubXVsdGlwbGUsZC5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fX1yZXR1cm47Y2FzZSA2OmlmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih1KDE2MikpO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iLm1lbW9pemVkUHJvcHM7cmV0dXJuO2Nhc2UgMzpiPWIuc3RhdGVOb2RlO2IuaHlkcmF0ZSYmKGIuaHlkcmF0ZT0hMSxWYyhiLmNvbnRhaW5lckluZm8pKTtyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpjPWI7bnVsbD09PWIubWVtb2l6ZWRTdGF0ZT9cbmQ9ITE6KGQ9ITAsYz1iLmNoaWxkLFRpPSRmKCkpO2lmKG51bGwhPT1jKWE6Zm9yKGE9Yzs7KXtpZig1PT09YS50YWcpZj1hLnN0YXRlTm9kZSxkPyhmPWYuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuc2V0UHJvcGVydHk/Zi5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpmLmRpc3BsYXk9XCJub25lXCIpOihmPWEuc3RhdGVOb2RlLGU9YS5tZW1vaXplZFByb3BzLnN0eWxlLGU9dm9pZCAwIT09ZSYmbnVsbCE9PWUmJmUuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2UuZGlzcGxheTpudWxsLGYuc3R5bGUuZGlzcGxheT1sZChcImRpc3BsYXlcIixlKSk7ZWxzZSBpZig2PT09YS50YWcpYS5zdGF0ZU5vZGUubm9kZVZhbHVlPWQ/XCJcIjphLm1lbW9pemVkUHJvcHM7ZWxzZSBpZigxMz09PWEudGFnJiZudWxsIT09YS5tZW1vaXplZFN0YXRlJiZudWxsPT09YS5tZW1vaXplZFN0YXRlLmRlaHlkcmF0ZWQpe2Y9YS5jaGlsZC5zaWJsaW5nO2YucmV0dXJuPWE7YT1cbmY7Y29udGludWV9ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWMpYnJlYWs7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWMpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9VWkoYik7cmV0dXJuO2Nhc2UgMTk6VWkoYik7cmV0dXJuO2Nhc2UgMTc6cmV0dXJufXRocm93IEVycm9yKHUoMTYzKSk7fWZ1bmN0aW9uIFVpKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IEJpKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9VmkuYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG52YXIgV2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gWGkoYSxiLGMpe2M9d2coYyxudWxsKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtZaXx8KFlpPSEwLFppPWQpO0NpKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gJGkoYSxiLGMpe2M9d2coYyxudWxsKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7Q2koYSxiKTtyZXR1cm4gZChlKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PWFqP2FqPW5ldyBTZXQoW3RoaXNdKTphai5hZGQodGhpcyksQ2koYSxiKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9XG52YXIgYmo9TWF0aC5jZWlsLGNqPVdhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZGo9V2EuUmVhY3RDdXJyZW50T3duZXIsVj0wLGVqPTgsZmo9MTYsZ2o9MzIsdGk9MCxoaj0xLGlqPTIsdWk9Myx2aT00LGpqPTUsVz1WLFQ9bnVsbCxYPW51bGwsVT0wLFM9dGksa2o9bnVsbCxsaj0xMDczNzQxODIzLG1qPTEwNzM3NDE4MjMsbmo9bnVsbCx3aT0wLG9qPSExLFRpPTAscGo9NTAwLFk9bnVsbCxZaT0hMSxaaT1udWxsLGFqPW51bGwscWo9ITEscmo9bnVsbCxzaj05MCx0aj1udWxsLHVqPTAsdmo9bnVsbCx3aj0wO2Z1bmN0aW9uIEdnKCl7cmV0dXJuKFcmKGZqfGdqKSkhPT1WPzEwNzM3NDE4MjEtKCRmKCkvMTB8MCk6MCE9PXdqP3dqOndqPTEwNzM3NDE4MjEtKCRmKCkvMTB8MCl9XG5mdW5jdGlvbiBIZyhhLGIsYyl7Yj1iLm1vZGU7aWYoMD09PShiJjIpKXJldHVybiAxMDczNzQxODIzO3ZhciBkPWFnKCk7aWYoMD09PShiJjQpKXJldHVybiA5OT09PWQ/MTA3Mzc0MTgyMzoxMDczNzQxODIyO2lmKChXJmZqKSE9PVYpcmV0dXJuIFU7aWYobnVsbCE9PWMpYT1oZyhhLGMudGltZW91dE1zfDB8fDVFMywyNTApO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgOTk6YT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgOTg6YT1oZyhhLDE1MCwxMDApO2JyZWFrO2Nhc2UgOTc6Y2FzZSA5NjphPWhnKGEsNUUzLDI1MCk7YnJlYWs7Y2FzZSA5NTphPTI7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMyNikpO31udWxsIT09VCYmYT09PVUmJi0tYTtyZXR1cm4gYX1cbmZ1bmN0aW9uIElnKGEsYil7aWYoNTA8dWopdGhyb3cgdWo9MCx2aj1udWxsLEVycm9yKHUoMTg1KSk7YT14aihhLGIpO2lmKG51bGwhPT1hKXt2YXIgYz1hZygpOzEwNzM3NDE4MjM9PT1iPyhXJmVqKSE9PVYmJihXJihmanxnaikpPT09Vj95aihhKTooWihhKSxXPT09ViYmZ2coKSk6WihhKTsoVyY0KT09PVZ8fDk4IT09YyYmOTkhPT1jfHwobnVsbD09PXRqP3RqPW5ldyBNYXAoW1thLGJdXSk6KGM9dGouZ2V0KGEpLCh2b2lkIDA9PT1jfHxjPmIpJiZ0ai5zZXQoYSxiKSkpfX1cbmZ1bmN0aW9uIHhqKGEsYil7YS5leHBpcmF0aW9uVGltZTxiJiYoYS5leHBpcmF0aW9uVGltZT1iKTt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTxiJiYoYy5leHBpcmF0aW9uVGltZT1iKTt2YXIgZD1hLnJldHVybixlPW51bGw7aWYobnVsbD09PWQmJjM9PT1hLnRhZyllPWEuc3RhdGVOb2RlO2Vsc2UgZm9yKDtudWxsIT09ZDspe2M9ZC5hbHRlcm5hdGU7ZC5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihkLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7bnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2lmKG51bGw9PT1kLnJldHVybiYmMz09PWQudGFnKXtlPWQuc3RhdGVOb2RlO2JyZWFrfWQ9ZC5yZXR1cm59bnVsbCE9PWUmJihUPT09ZSYmKEJnKGIpLFM9PT12aSYmeGkoZSxVKSkseWkoZSxiKSk7cmV0dXJuIGV9XG5mdW5jdGlvbiB6aihhKXt2YXIgYj1hLmxhc3RFeHBpcmVkVGltZTtpZigwIT09YilyZXR1cm4gYjtiPWEuZmlyc3RQZW5kaW5nVGltZTtpZighQWooYSxiKSlyZXR1cm4gYjt2YXIgYz1hLmxhc3RQaW5nZWRUaW1lO2E9YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw7YT1jPmE/YzphO3JldHVybiAyPj1hJiZiIT09YT8wOmF9XG5mdW5jdGlvbiBaKGEpe2lmKDAhPT1hLmxhc3RFeHBpcmVkVGltZSlhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMyxhLmNhbGxiYWNrUHJpb3JpdHk9OTksYS5jYWxsYmFja05vZGU9ZWcoeWouYmluZChudWxsLGEpKTtlbHNle3ZhciBiPXpqKGEpLGM9YS5jYWxsYmFja05vZGU7aWYoMD09PWIpbnVsbCE9PWMmJihhLmNhbGxiYWNrTm9kZT1udWxsLGEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT0wLGEuY2FsbGJhY2tQcmlvcml0eT05MCk7ZWxzZXt2YXIgZD1HZygpOzEwNzM3NDE4MjM9PT1iP2Q9OTk6MT09PWJ8fDI9PT1iP2Q9OTU6KGQ9MTAqKDEwNzM3NDE4MjEtYiktMTAqKDEwNzM3NDE4MjEtZCksZD0wPj1kPzk5OjI1MD49ZD85ODo1MjUwPj1kPzk3Ojk1KTtpZihudWxsIT09Yyl7dmFyIGU9YS5jYWxsYmFja1ByaW9yaXR5O2lmKGEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT09PWImJmU+PWQpcmV0dXJuO2MhPT1UZiYmS2YoYyl9YS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPVxuYjthLmNhbGxiYWNrUHJpb3JpdHk9ZDtiPTEwNzM3NDE4MjM9PT1iP2VnKHlqLmJpbmQobnVsbCxhKSk6ZGcoZCxCai5iaW5kKG51bGwsYSkse3RpbWVvdXQ6MTAqKDEwNzM3NDE4MjEtYiktJGYoKX0pO2EuY2FsbGJhY2tOb2RlPWJ9fX1cbmZ1bmN0aW9uIEJqKGEsYil7d2o9MDtpZihiKXJldHVybiBiPUdnKCksQ2ooYSxiKSxaKGEpLG51bGw7dmFyIGM9emooYSk7aWYoMCE9PWMpe2I9YS5jYWxsYmFja05vZGU7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMzI3KSk7RGooKTthPT09VCYmYz09PVV8fEVqKGEsYyk7aWYobnVsbCE9PVgpe3ZhciBkPVc7V3w9Zmo7dmFyIGU9RmooKTtkbyB0cnl7R2ooKTticmVha31jYXRjaChoKXtIaihhLGgpfXdoaWxlKDEpO25nKCk7Vz1kO2NqLmN1cnJlbnQ9ZTtpZihTPT09aGopdGhyb3cgYj1raixFaihhLGMpLHhpKGEsYyksWihhKSxiO2lmKG51bGw9PT1YKXN3aXRjaChlPWEuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGUsYS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPWMsZD1TLFQ9bnVsbCxkKXtjYXNlIHRpOmNhc2UgaGo6dGhyb3cgRXJyb3IodSgzNDUpKTtjYXNlIGlqOkNqKGEsMjxjPzI6Yyk7YnJlYWs7Y2FzZSB1aTp4aShhLGMpO2Q9YS5sYXN0U3VzcGVuZGVkVGltZTtcbmM9PT1kJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9SWooZSkpO2lmKDEwNzM3NDE4MjM9PT1saiYmKGU9VGkrcGotJGYoKSwxMDxlKSl7aWYob2ope3ZhciBmPWEubGFzdFBpbmdlZFRpbWU7aWYoMD09PWZ8fGY+PWMpe2EubGFzdFBpbmdlZFRpbWU9YztFaihhLGMpO2JyZWFrfX1mPXpqKGEpO2lmKDAhPT1mJiZmIT09YylicmVhaztpZigwIT09ZCYmZCE9PWMpe2EubGFzdFBpbmdlZFRpbWU9ZDticmVha31hLnRpbWVvdXRIYW5kbGU9SGQoSmouYmluZChudWxsLGEpLGUpO2JyZWFrfUpqKGEpO2JyZWFrO2Nhc2Ugdmk6eGkoYSxjKTtkPWEubGFzdFN1c3BlbmRlZFRpbWU7Yz09PWQmJihhLm5leHRLbm93blBlbmRpbmdMZXZlbD1JaihlKSk7aWYob2omJihlPWEubGFzdFBpbmdlZFRpbWUsMD09PWV8fGU+PWMpKXthLmxhc3RQaW5nZWRUaW1lPWM7RWooYSxjKTticmVha31lPXpqKGEpO2lmKDAhPT1lJiZlIT09YylicmVhaztpZigwIT09ZCYmZCE9PWMpe2EubGFzdFBpbmdlZFRpbWU9XG5kO2JyZWFrfTEwNzM3NDE4MjMhPT1taj9kPTEwKigxMDczNzQxODIxLW1qKS0kZigpOjEwNzM3NDE4MjM9PT1saj9kPTA6KGQ9MTAqKDEwNzM3NDE4MjEtbGopLTVFMyxlPSRmKCksYz0xMCooMTA3Mzc0MTgyMS1jKS1lLGQ9ZS1kLDA+ZCYmKGQ9MCksZD0oMTIwPmQ/MTIwOjQ4MD5kPzQ4MDoxMDgwPmQ/MTA4MDoxOTIwPmQ/MTkyMDozRTM+ZD8zRTM6NDMyMD5kPzQzMjA6MTk2MCpiaihkLzE5NjApKS1kLGM8ZCYmKGQ9YykpO2lmKDEwPGQpe2EudGltZW91dEhhbmRsZT1IZChKai5iaW5kKG51bGwsYSksZCk7YnJlYWt9SmooYSk7YnJlYWs7Y2FzZSBqajppZigxMDczNzQxODIzIT09bGomJm51bGwhPT1uail7Zj1sajt2YXIgZz1uajtkPWcuYnVzeU1pbkR1cmF0aW9uTXN8MDswPj1kP2Q9MDooZT1nLmJ1c3lEZWxheU1zfDAsZj0kZigpLSgxMCooMTA3Mzc0MTgyMS1mKS0oZy50aW1lb3V0TXN8MHx8NUUzKSksZD1mPD1lPzA6ZStkLWYpO2lmKDEwPGQpe3hpKGEsYyk7YS50aW1lb3V0SGFuZGxlPVxuSGQoSmouYmluZChudWxsLGEpLGQpO2JyZWFrfX1KaihhKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMzI5KSk7fVooYSk7aWYoYS5jYWxsYmFja05vZGU9PT1iKXJldHVybiBCai5iaW5kKG51bGwsYSl9fXJldHVybiBudWxsfVxuZnVuY3Rpb24geWooYSl7dmFyIGI9YS5sYXN0RXhwaXJlZFRpbWU7Yj0wIT09Yj9iOjEwNzM3NDE4MjM7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMzI3KSk7RGooKTthPT09VCYmYj09PVV8fEVqKGEsYik7aWYobnVsbCE9PVgpe3ZhciBjPVc7V3w9Zmo7dmFyIGQ9RmooKTtkbyB0cnl7S2ooKTticmVha31jYXRjaChlKXtIaihhLGUpfXdoaWxlKDEpO25nKCk7Vz1jO2NqLmN1cnJlbnQ9ZDtpZihTPT09aGopdGhyb3cgYz1raixFaihhLGIpLHhpKGEsYiksWihhKSxjO2lmKG51bGwhPT1YKXRocm93IEVycm9yKHUoMjYxKSk7YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9YjtUPW51bGw7SmooYSk7WihhKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBMaigpe2lmKG51bGwhPT10ail7dmFyIGE9dGo7dGo9bnVsbDthLmZvckVhY2goZnVuY3Rpb24oYSxjKXtDaihjLGEpO1ooYyl9KTtnZygpfX1cbmZ1bmN0aW9uIE1qKGEsYil7dmFyIGM9VztXfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1c9YyxXPT09ViYmZ2coKX19ZnVuY3Rpb24gTmooYSxiKXt2YXIgYz1XO1cmPS0yO1d8PWVqO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1c9YyxXPT09ViYmZ2coKX19XG5mdW5jdGlvbiBFaihhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxJZChjKSk7aWYobnVsbCE9PVgpZm9yKGM9WC5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3N3aXRjaChkLnRhZyl7Y2FzZSAxOmQ9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1kJiZ2b2lkIDAhPT1kJiZEZigpO2JyZWFrO2Nhc2UgMzplaCgpO0goSyk7SChKKTticmVhaztjYXNlIDU6Z2goZCk7YnJlYWs7Y2FzZSA0OmVoKCk7YnJlYWs7Y2FzZSAxMzpIKE0pO2JyZWFrO2Nhc2UgMTk6SChNKTticmVhaztjYXNlIDEwOm9nKGQpfWM9Yy5yZXR1cm59VD1hO1g9U2coYS5jdXJyZW50LG51bGwpO1U9YjtTPXRpO2tqPW51bGw7bWo9bGo9MTA3Mzc0MTgyMztuaj1udWxsO3dpPTA7b2o9ITF9XG5mdW5jdGlvbiBIaihhLGIpe2Rve3RyeXtuZygpO2poLmN1cnJlbnQ9c2g7aWYobWgpZm9yKHZhciBjPU4ubWVtb2l6ZWRTdGF0ZTtudWxsIT09Yzspe3ZhciBkPWMucXVldWU7bnVsbCE9PWQmJihkLnBlbmRpbmc9bnVsbCk7Yz1jLm5leHR9bGg9MDtQPU89Tj1udWxsO21oPSExO2lmKG51bGw9PT1YfHxudWxsPT09WC5yZXR1cm4pcmV0dXJuIFM9aGosa2o9YixYPW51bGw7YTp7dmFyIGU9YSxmPVgucmV0dXJuLGc9WCxoPWI7Yj1VO2cuZWZmZWN0VGFnfD0yMDQ4O2cuZmlyc3RFZmZlY3Q9Zy5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PWgmJlwib2JqZWN0XCI9PT10eXBlb2YgaCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGgudGhlbil7dmFyIGs9aDtpZigwPT09KGcubW9kZSYyKSl7dmFyIGw9Zy5hbHRlcm5hdGU7bD8oZy51cGRhdGVRdWV1ZT1sLnVwZGF0ZVF1ZXVlLGcubWVtb2l6ZWRTdGF0ZT1sLm1lbW9pemVkU3RhdGUsZy5leHBpcmF0aW9uVGltZT1sLmV4cGlyYXRpb25UaW1lKTooZy51cGRhdGVRdWV1ZT1cbm51bGwsZy5tZW1vaXplZFN0YXRlPW51bGwpfXZhciBtPTAhPT0oTS5jdXJyZW50JjEpLHA9Zjtkb3t2YXIgeDtpZih4PTEzPT09cC50YWcpe3ZhciB6PXAubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09eil4PW51bGwhPT16LmRlaHlkcmF0ZWQ/ITA6ITE7ZWxzZXt2YXIgY2E9cC5tZW1vaXplZFByb3BzO3g9dm9pZCAwPT09Y2EuZmFsbGJhY2s/ITE6ITAhPT1jYS51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjaz8hMDptPyExOiEwfX1pZih4KXt2YXIgRD1wLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1EKXt2YXIgdD1uZXcgU2V0O3QuYWRkKGspO3AudXBkYXRlUXVldWU9dH1lbHNlIEQuYWRkKGspO2lmKDA9PT0ocC5tb2RlJjIpKXtwLmVmZmVjdFRhZ3w9NjQ7Zy5lZmZlY3RUYWcmPS0yOTgxO2lmKDE9PT1nLnRhZylpZihudWxsPT09Zy5hbHRlcm5hdGUpZy50YWc9MTc7ZWxzZXt2YXIgeT13ZygxMDczNzQxODIzLG51bGwpO3kudGFnPTI7eGcoZyx5KX1nLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjM7XG5icmVhayBhfWg9dm9pZCAwO2c9Yjt2YXIgQT1lLnBpbmdDYWNoZTtudWxsPT09QT8oQT1lLnBpbmdDYWNoZT1uZXcgV2ksaD1uZXcgU2V0LEEuc2V0KGssaCkpOihoPUEuZ2V0KGspLHZvaWQgMD09PWgmJihoPW5ldyBTZXQsQS5zZXQoayxoKSkpO2lmKCFoLmhhcyhnKSl7aC5hZGQoZyk7dmFyIHE9T2ouYmluZChudWxsLGUsayxnKTtrLnRoZW4ocSxxKX1wLmVmZmVjdFRhZ3w9NDA5NjtwLmV4cGlyYXRpb25UaW1lPWI7YnJlYWsgYX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKTtoPUVycm9yKChwYihnLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1wiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIrcWIoZykpfVMhPT1cbmpqJiYoUz1paik7aD1BaShoLGcpO3A9Zjtkb3tzd2l0Y2gocC50YWcpe2Nhc2UgMzprPWg7cC5lZmZlY3RUYWd8PTQwOTY7cC5leHBpcmF0aW9uVGltZT1iO3ZhciBCPVhpKHAsayxiKTt5ZyhwLEIpO2JyZWFrIGE7Y2FzZSAxOms9aDt2YXIgdz1wLnR5cGUsdWI9cC5zdGF0ZU5vZGU7aWYoMD09PShwLmVmZmVjdFRhZyY2NCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT11YiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHViLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PWFqfHwhYWouaGFzKHViKSkpKXtwLmVmZmVjdFRhZ3w9NDA5NjtwLmV4cGlyYXRpb25UaW1lPWI7dmFyIHZiPSRpKHAsayxiKTt5ZyhwLHZiKTticmVhayBhfX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKX1YPVBqKFgpfWNhdGNoKFhjKXtiPVhjO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfVxuZnVuY3Rpb24gRmooKXt2YXIgYT1jai5jdXJyZW50O2NqLmN1cnJlbnQ9c2g7cmV0dXJuIG51bGw9PT1hP3NoOmF9ZnVuY3Rpb24gQWcoYSxiKXthPGxqJiYyPGEmJihsaj1hKTtudWxsIT09YiYmYTxtaiYmMjxhJiYobWo9YSxuaj1iKX1mdW5jdGlvbiBCZyhhKXthPndpJiYod2k9YSl9ZnVuY3Rpb24gS2ooKXtmb3IoO251bGwhPT1YOylYPVFqKFgpfWZ1bmN0aW9uIEdqKCl7Zm9yKDtudWxsIT09WCYmIVVmKCk7KVg9UWooWCl9ZnVuY3Rpb24gUWooYSl7dmFyIGI9UmooYS5hbHRlcm5hdGUsYSxVKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWImJihiPVBqKGEpKTtkai5jdXJyZW50PW51bGw7cmV0dXJuIGJ9XG5mdW5jdGlvbiBQaihhKXtYPWE7ZG97dmFyIGI9WC5hbHRlcm5hdGU7YT1YLnJldHVybjtpZigwPT09KFguZWZmZWN0VGFnJjIwNDgpKXtiPXNpKGIsWCxVKTtpZigxPT09VXx8MSE9PVguY2hpbGRFeHBpcmF0aW9uVGltZSl7Zm9yKHZhciBjPTAsZD1YLmNoaWxkO251bGwhPT1kOyl7dmFyIGU9ZC5leHBpcmF0aW9uVGltZSxmPWQuY2hpbGRFeHBpcmF0aW9uVGltZTtlPmMmJihjPWUpO2Y+YyYmKGM9Zik7ZD1kLnNpYmxpbmd9WC5jaGlsZEV4cGlyYXRpb25UaW1lPWN9aWYobnVsbCE9PWIpcmV0dXJuIGI7bnVsbCE9PWEmJjA9PT0oYS5lZmZlY3RUYWcmMjA0OCkmJihudWxsPT09YS5maXJzdEVmZmVjdCYmKGEuZmlyc3RFZmZlY3Q9WC5maXJzdEVmZmVjdCksbnVsbCE9PVgubGFzdEVmZmVjdCYmKG51bGwhPT1hLmxhc3RFZmZlY3QmJihhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1YLmZpcnN0RWZmZWN0KSxhLmxhc3RFZmZlY3Q9WC5sYXN0RWZmZWN0KSwxPFguZWZmZWN0VGFnJiYobnVsbCE9PVxuYS5sYXN0RWZmZWN0P2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PVg6YS5maXJzdEVmZmVjdD1YLGEubGFzdEVmZmVjdD1YKSl9ZWxzZXtiPXppKFgpO2lmKG51bGwhPT1iKXJldHVybiBiLmVmZmVjdFRhZyY9MjA0NyxiO251bGwhPT1hJiYoYS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9bnVsbCxhLmVmZmVjdFRhZ3w9MjA0OCl9Yj1YLnNpYmxpbmc7aWYobnVsbCE9PWIpcmV0dXJuIGI7WD1hfXdoaWxlKG51bGwhPT1YKTtTPT09dGkmJihTPWpqKTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBJaihhKXt2YXIgYj1hLmV4cGlyYXRpb25UaW1lO2E9YS5jaGlsZEV4cGlyYXRpb25UaW1lO3JldHVybiBiPmE/YjphfWZ1bmN0aW9uIEpqKGEpe3ZhciBiPWFnKCk7Y2coOTksU2ouYmluZChudWxsLGEsYikpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gU2ooYSxiKXtkbyBEaigpO3doaWxlKG51bGwhPT1yaik7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcmssZD1hLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHUoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDthLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MDthLmNhbGxiYWNrUHJpb3JpdHk9OTA7YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9MDt2YXIgZT1JaihjKTthLmZpcnN0UGVuZGluZ1RpbWU9ZTtkPD1hLmxhc3RTdXNwZW5kZWRUaW1lP2EuZmlyc3RTdXNwZW5kZWRUaW1lPWEubGFzdFN1c3BlbmRlZFRpbWU9YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9MDpkPD1hLmZpcnN0U3VzcGVuZGVkVGltZSYmKGEuZmlyc3RTdXNwZW5kZWRUaW1lPVxuZC0xKTtkPD1hLmxhc3RQaW5nZWRUaW1lJiYoYS5sYXN0UGluZ2VkVGltZT0wKTtkPD1hLmxhc3RFeHBpcmVkVGltZSYmKGEubGFzdEV4cGlyZWRUaW1lPTApO2E9PT1UJiYoWD1UPW51bGwsVT0wKTsxPGMuZWZmZWN0VGFnP251bGwhPT1jLmxhc3RFZmZlY3Q/KGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsZT1jLmZpcnN0RWZmZWN0KTplPWM6ZT1jLmZpcnN0RWZmZWN0O2lmKG51bGwhPT1lKXt2YXIgZj1XO1d8PWdqO2RqLmN1cnJlbnQ9bnVsbDtEZD1mZDt2YXIgZz14ZCgpO2lmKHlkKGcpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBnKXZhciBoPXtzdGFydDpnLnNlbGVjdGlvblN0YXJ0LGVuZDpnLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntoPShoPWcub3duZXJEb2N1bWVudCkmJmguZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgaz1oLmdldFNlbGVjdGlvbiYmaC5nZXRTZWxlY3Rpb24oKTtpZihrJiYwIT09ay5yYW5nZUNvdW50KXtoPWsuYW5jaG9yTm9kZTt2YXIgbD1rLmFuY2hvck9mZnNldCxcbm09ay5mb2N1c05vZGU7az1rLmZvY3VzT2Zmc2V0O3RyeXtoLm5vZGVUeXBlLG0ubm9kZVR5cGV9Y2F0Y2god2Ipe2g9bnVsbDticmVhayBhfXZhciBwPTAseD0tMSx6PS0xLGNhPTAsRD0wLHQ9Zyx5PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgQTs7KXt0IT09aHx8MCE9PWwmJjMhPT10Lm5vZGVUeXBlfHwoeD1wK2wpO3QhPT1tfHwwIT09ayYmMyE9PXQubm9kZVR5cGV8fCh6PXArayk7Mz09PXQubm9kZVR5cGUmJihwKz10Lm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oQT10LmZpcnN0Q2hpbGQpKWJyZWFrO3k9dDt0PUF9Zm9yKDs7KXtpZih0PT09ZylicmVhayBiO3k9PT1oJiYrK2NhPT09bCYmKHg9cCk7eT09PW0mJisrRD09PWsmJih6PXApO2lmKG51bGwhPT0oQT10Lm5leHRTaWJsaW5nKSlicmVhazt0PXk7eT10LnBhcmVudE5vZGV9dD1BfWg9LTE9PT14fHwtMT09PXo/bnVsbDp7c3RhcnQ6eCxlbmQ6en19ZWxzZSBoPW51bGx9aD1ofHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBoPVxubnVsbDtFZD17YWN0aXZlRWxlbWVudERldGFjaGVkOm51bGwsZm9jdXNlZEVsZW06ZyxzZWxlY3Rpb25SYW5nZTpofTtmZD0hMTtZPWU7ZG8gdHJ5e1RqKCl9Y2F0Y2god2Ipe2lmKG51bGw9PT1ZKXRocm93IEVycm9yKHUoMzMwKSk7RWkoWSx3Yik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO1k9ZTtkbyB0cnl7Zm9yKGc9YSxoPWI7bnVsbCE9PVk7KXt2YXIgcT1ZLmVmZmVjdFRhZztxJjE2JiZSYihZLnN0YXRlTm9kZSxcIlwiKTtpZihxJjEyOCl7dmFyIEI9WS5hbHRlcm5hdGU7aWYobnVsbCE9PUIpe3ZhciB3PUIucmVmO251bGwhPT13JiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHc/dyhudWxsKTp3LmN1cnJlbnQ9bnVsbCl9fXN3aXRjaChxJjEwMzgpe2Nhc2UgMjpQaShZKTtZLmVmZmVjdFRhZyY9LTM7YnJlYWs7Y2FzZSA2OlBpKFkpO1kuZWZmZWN0VGFnJj0tMztTaShZLmFsdGVybmF0ZSxZKTticmVhaztjYXNlIDEwMjQ6WS5lZmZlY3RUYWcmPS0xMDI1O2JyZWFrO2Nhc2UgMTAyODpZLmVmZmVjdFRhZyY9XG4tMTAyNTtTaShZLmFsdGVybmF0ZSxZKTticmVhaztjYXNlIDQ6U2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSA4Omw9WSxNaShnLGwsaCksTmkobCl9WT1ZLm5leHRFZmZlY3R9fWNhdGNoKHdiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKFksd2IpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTt3PUVkO0I9eGQoKTtxPXcuZm9jdXNlZEVsZW07aD13LnNlbGVjdGlvblJhbmdlO2lmKEIhPT1xJiZxJiZxLm93bmVyRG9jdW1lbnQmJndkKHEub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQscSkpe251bGwhPT1oJiZ5ZChxKSYmKEI9aC5zdGFydCx3PWguZW5kLHZvaWQgMD09PXcmJih3PUIpLFwic2VsZWN0aW9uU3RhcnRcImluIHE/KHEuc2VsZWN0aW9uU3RhcnQ9QixxLnNlbGVjdGlvbkVuZD1NYXRoLm1pbih3LHEudmFsdWUubGVuZ3RoKSk6KHc9KEI9cS5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJkIuZGVmYXVsdFZpZXd8fHdpbmRvdyx3LmdldFNlbGVjdGlvbiYmXG4odz13LmdldFNlbGVjdGlvbigpLGw9cS50ZXh0Q29udGVudC5sZW5ndGgsZz1NYXRoLm1pbihoLnN0YXJ0LGwpLGg9dm9pZCAwPT09aC5lbmQ/ZzpNYXRoLm1pbihoLmVuZCxsKSwhdy5leHRlbmQmJmc+aCYmKGw9aCxoPWcsZz1sKSxsPXZkKHEsZyksbT12ZChxLGgpLGwmJm0mJigxIT09dy5yYW5nZUNvdW50fHx3LmFuY2hvck5vZGUhPT1sLm5vZGV8fHcuYW5jaG9yT2Zmc2V0IT09bC5vZmZzZXR8fHcuZm9jdXNOb2RlIT09bS5ub2RlfHx3LmZvY3VzT2Zmc2V0IT09bS5vZmZzZXQpJiYoQj1CLmNyZWF0ZVJhbmdlKCksQi5zZXRTdGFydChsLm5vZGUsbC5vZmZzZXQpLHcucmVtb3ZlQWxsUmFuZ2VzKCksZz5oPyh3LmFkZFJhbmdlKEIpLHcuZXh0ZW5kKG0ubm9kZSxtLm9mZnNldCkpOihCLnNldEVuZChtLm5vZGUsbS5vZmZzZXQpLHcuYWRkUmFuZ2UoQikpKSkpKTtCPVtdO2Zvcih3PXE7dz13LnBhcmVudE5vZGU7KTE9PT13Lm5vZGVUeXBlJiZCLnB1c2goe2VsZW1lbnQ6dyxsZWZ0Oncuc2Nyb2xsTGVmdCxcbnRvcDp3LnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBxLmZvY3VzJiZxLmZvY3VzKCk7Zm9yKHE9MDtxPEIubGVuZ3RoO3ErKyl3PUJbcV0sdy5lbGVtZW50LnNjcm9sbExlZnQ9dy5sZWZ0LHcuZWxlbWVudC5zY3JvbGxUb3A9dy50b3B9ZmQ9ISFEZDtFZD1EZD1udWxsO2EuY3VycmVudD1jO1k9ZTtkbyB0cnl7Zm9yKHE9YTtudWxsIT09WTspe3ZhciB1Yj1ZLmVmZmVjdFRhZzt1YiYzNiYmSmkocSxZLmFsdGVybmF0ZSxZKTtpZih1YiYxMjgpe0I9dm9pZCAwO3ZhciB2Yj1ZLnJlZjtpZihudWxsIT09dmIpe3ZhciBYYz1ZLnN0YXRlTm9kZTtzd2l0Y2goWS50YWcpe2Nhc2UgNTpCPVhjO2JyZWFrO2RlZmF1bHQ6Qj1YY31cImZ1bmN0aW9uXCI9PT10eXBlb2YgdmI/dmIoQik6dmIuY3VycmVudD1CfX1ZPVkubmV4dEVmZmVjdH19Y2F0Y2god2Ipe2lmKG51bGw9PT1ZKXRocm93IEVycm9yKHUoMzMwKSk7RWkoWSx3Yik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO1k9XG5udWxsO1ZmKCk7Vz1mfWVsc2UgYS5jdXJyZW50PWM7aWYocWopcWo9ITEscmo9YSxzaj1iO2Vsc2UgZm9yKFk9ZTtudWxsIT09WTspYj1ZLm5leHRFZmZlY3QsWS5uZXh0RWZmZWN0PW51bGwsWT1iO2I9YS5maXJzdFBlbmRpbmdUaW1lOzA9PT1iJiYoYWo9bnVsbCk7MTA3Mzc0MTgyMz09PWI/YT09PXZqP3VqKys6KHVqPTAsdmo9YSk6dWo9MDtcImZ1bmN0aW9uXCI9PT10eXBlb2YgVWomJlVqKGMuc3RhdGVOb2RlLGQpO1ooYSk7aWYoWWkpdGhyb3cgWWk9ITEsYT1aaSxaaT1udWxsLGE7aWYoKFcmZWopIT09VilyZXR1cm4gbnVsbDtnZygpO3JldHVybiBudWxsfWZ1bmN0aW9uIFRqKCl7Zm9yKDtudWxsIT09WTspe3ZhciBhPVkuZWZmZWN0VGFnOzAhPT0oYSYyNTYpJiZHaShZLmFsdGVybmF0ZSxZKTswPT09KGEmNTEyKXx8cWp8fChxaj0hMCxkZyg5NyxmdW5jdGlvbigpe0RqKCk7cmV0dXJuIG51bGx9KSk7WT1ZLm5leHRFZmZlY3R9fVxuZnVuY3Rpb24gRGooKXtpZig5MCE9PXNqKXt2YXIgYT05Nzxzaj85Nzpzajtzaj05MDtyZXR1cm4gY2coYSxWail9fWZ1bmN0aW9uIFZqKCl7aWYobnVsbD09PXJqKXJldHVybiExO3ZhciBhPXJqO3JqPW51bGw7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMzMxKSk7dmFyIGI9VztXfD1najtmb3IoYT1hLmN1cnJlbnQuZmlyc3RFZmZlY3Q7bnVsbCE9PWE7KXt0cnl7dmFyIGM9YTtpZigwIT09KGMuZWZmZWN0VGFnJjUxMikpc3dpdGNoKGMudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6SGkoNSxjKSxJaSg1LGMpfX1jYXRjaChkKXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKGEsZCl9Yz1hLm5leHRFZmZlY3Q7YS5uZXh0RWZmZWN0PW51bGw7YT1jfVc9YjtnZygpO3JldHVybiEwfVxuZnVuY3Rpb24gV2ooYSxiLGMpe2I9QWkoYyxiKTtiPVhpKGEsYiwxMDczNzQxODIzKTt4ZyhhLGIpO2E9eGooYSwxMDczNzQxODIzKTtudWxsIT09YSYmWihhKX1mdW5jdGlvbiBFaShhLGIpe2lmKDM9PT1hLnRhZylXaihhLGEsYik7ZWxzZSBmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZigzPT09Yy50YWcpe1dqKGMsYSxiKTticmVha31lbHNlIGlmKDE9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PWFqfHwhYWouaGFzKGQpKSl7YT1BaShiLGEpO2E9JGkoYyxhLDEwNzM3NDE4MjMpO3hnKGMsYSk7Yz14aihjLDEwNzM3NDE4MjMpO251bGwhPT1jJiZaKGMpO2JyZWFrfX1jPWMucmV0dXJufX1cbmZ1bmN0aW9uIE9qKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7VD09PWEmJlU9PT1jP1M9PT12aXx8Uz09PXVpJiYxMDczNzQxODIzPT09bGomJiRmKCktVGk8cGo/RWooYSxVKTpvaj0hMDpBaihhLGMpJiYoYj1hLmxhc3RQaW5nZWRUaW1lLDAhPT1iJiZiPGN8fChhLmxhc3RQaW5nZWRUaW1lPWMsWihhKSkpfWZ1bmN0aW9uIFZpKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbCE9PWMmJmMuZGVsZXRlKGIpO2I9MDswPT09YiYmKGI9R2coKSxiPUhnKGIsYSxudWxsKSk7YT14aihhLGIpO251bGwhPT1hJiZaKGEpfXZhciBSajtcblJqPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iLmV4cGlyYXRpb25UaW1lO2lmKG51bGwhPT1hKXt2YXIgZT1iLnBlbmRpbmdQcm9wcztpZihhLm1lbW9pemVkUHJvcHMhPT1lfHxLLmN1cnJlbnQpcmc9ITA7ZWxzZXtpZihkPGMpe3JnPSExO3N3aXRjaChiLnRhZyl7Y2FzZSAzOmhpKGIpO1hoKCk7YnJlYWs7Y2FzZSA1OmZoKGIpO2lmKGIubW9kZSY0JiYxIT09YyYmZS5oaWRkZW4pcmV0dXJuIGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPTEsbnVsbDticmVhaztjYXNlIDE6TChiLnR5cGUpJiZHZihiKTticmVhaztjYXNlIDQ6ZGgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOmQ9Yi5tZW1vaXplZFByb3BzLnZhbHVlO2U9Yi50eXBlLl9jb250ZXh0O0koamcsZS5fY3VycmVudFZhbHVlKTtlLl9jdXJyZW50VmFsdWU9ZDticmVhaztjYXNlIDEzOmlmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpe2Q9Yi5jaGlsZC5jaGlsZEV4cGlyYXRpb25UaW1lO1xuaWYoMCE9PWQmJmQ+PWMpcmV0dXJuIGppKGEsYixjKTtJKE0sTS5jdXJyZW50JjEpO2I9JGgoYSxiLGMpO3JldHVybiBudWxsIT09Yj9iLnNpYmxpbmc6bnVsbH1JKE0sTS5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD1iLmNoaWxkRXhwaXJhdGlvblRpbWU+PWM7aWYoMCE9PShhLmVmZmVjdFRhZyY2NCkpe2lmKGQpcmV0dXJuIG1pKGEsYixjKTtiLmVmZmVjdFRhZ3w9NjR9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsKTtJKE0sTS5jdXJyZW50KTtpZighZClyZXR1cm4gbnVsbH1yZXR1cm4gJGgoYSxiLGMpfXJnPSExfX1lbHNlIHJnPSExO2IuZXhwaXJhdGlvblRpbWU9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wcztlPUNmKGIsSi5jdXJyZW50KTtxZyhiLGMpO2U9b2gobnVsbCxcbmIsZCxhLGUsYyk7Yi5lZmZlY3RUYWd8PTE7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mKXtiLnRhZz0xO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtpZihMKGQpKXt2YXIgZj0hMDtHZihiKX1lbHNlIGY9ITE7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbDt1ZyhiKTt2YXIgZz1kLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmRmcoYixkLGcsYSk7ZS51cGRhdGVyPUpnO2Iuc3RhdGVOb2RlPWU7ZS5fcmVhY3RJbnRlcm5hbEZpYmVyPWI7TmcoYixkLGEsYyk7Yj1naShudWxsLGIsZCwhMCxmLGMpfWVsc2UgYi50YWc9MCxSKG51bGwsYixlLGMpLGI9Yi5jaGlsZDtyZXR1cm4gYjtjYXNlIDE2OmE6e2U9Yi5lbGVtZW50VHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPVxubnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTthPWIucGVuZGluZ1Byb3BzO29iKGUpO2lmKDEhPT1lLl9zdGF0dXMpdGhyb3cgZS5fcmVzdWx0O2U9ZS5fcmVzdWx0O2IudHlwZT1lO2Y9Yi50YWc9WGooZSk7YT1pZyhlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1kaShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9ZmkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1aaChudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWFpKG51bGwsYixlLGlnKGUudHlwZSxhKSxkLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IodSgzMDYsZSxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxkaShhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxmaShhLGIsZCxlLGMpO1xuY2FzZSAzOmhpKGIpO2Q9Yi51cGRhdGVRdWV1ZTtpZihudWxsPT09YXx8bnVsbD09PWQpdGhyb3cgRXJyb3IodSgyODIpKTtkPWIucGVuZGluZ1Byb3BzO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7dmcoYSxiKTt6ZyhiLGQsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKVhoKCksYj0kaChhLGIsYyk7ZWxzZXtpZihlPWIuc3RhdGVOb2RlLmh5ZHJhdGUpUGg9SmQoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSxPaD1iLGU9UWg9ITA7aWYoZSlmb3IoYz1ZZyhiLG51bGwsZCxjKSxiLmNoaWxkPWM7YzspYy5lZmZlY3RUYWc9Yy5lZmZlY3RUYWcmLTN8MTAyNCxjPWMuc2libGluZztlbHNlIFIoYSxiLGQsYyksWGgoKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBmaChiKSxudWxsPT09YSYmVWgoYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpcbm51bGwsZz1lLmNoaWxkcmVuLEdkKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZHZChkLGYpJiYoYi5lZmZlY3RUYWd8PTE2KSxlaShhLGIpLGIubW9kZSY0JiYxIT09YyYmZS5oaWRkZW4/KGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPTEsYj1udWxsKTooUihhLGIsZyxjKSxiPWIuY2hpbGQpLGI7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmVWgoYiksbnVsbDtjYXNlIDEzOnJldHVybiBqaShhLGIsYyk7Y2FzZSA0OnJldHVybiBkaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1YZyhiLG51bGwsZCxjKTpSKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxaaChhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gUihhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIFIoYSxcbmIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBSKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7dmFyIGg9Yi50eXBlLl9jb250ZXh0O0koamcsaC5fY3VycmVudFZhbHVlKTtoLl9jdXJyZW50VmFsdWU9ZjtpZihudWxsIT09ZylpZihoPWcudmFsdWUsZj0kZShoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDAsMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhSy5jdXJyZW50KXtiPSRoKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBrPWguZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1cbmspe2c9aC5jaGlsZDtmb3IodmFyIGw9ay5maXJzdENvbnRleHQ7bnVsbCE9PWw7KXtpZihsLmNvbnRleHQ9PT1kJiYwIT09KGwub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihsPXdnKGMsbnVsbCksbC50YWc9Mix4ZyhoLGwpKTtoLmV4cGlyYXRpb25UaW1lPGMmJihoLmV4cGlyYXRpb25UaW1lPWMpO2w9aC5hbHRlcm5hdGU7bnVsbCE9PWwmJmwuZXhwaXJhdGlvblRpbWU8YyYmKGwuZXhwaXJhdGlvblRpbWU9Yyk7cGcoaC5yZXR1cm4sYyk7ay5leHBpcmF0aW9uVGltZTxjJiYoay5leHBpcmF0aW9uVGltZT1jKTticmVha31sPWwubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP251bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1cbmd9UihhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGQ9Zi5jaGlsZHJlbixxZyhiLGMpLGU9c2coZSxmLnVuc3RhYmxlX29ic2VydmVkQml0cyksZD1kKGUpLGIuZWZmZWN0VGFnfD0xLFIoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDE0OnJldHVybiBlPWIudHlwZSxmPWlnKGUsYi5wZW5kaW5nUHJvcHMpLGY9aWcoZS50eXBlLGYpLGFpKGEsYixlLGYsZCxjKTtjYXNlIDE1OnJldHVybiBjaShhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGQsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksYi50YWc9MSxMKGQpPyhhPSEwLEdmKGIpKTphPSExLHFnKGIsYyksTGcoYixkLGUpLE5nKGIsZCxlLGMpLGdpKG51bGwsXG5iLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiBtaShhLGIsYyl9dGhyb3cgRXJyb3IodSgxNTYsYi50YWcpKTt9O3ZhciBVaj1udWxsLExpPW51bGw7ZnVuY3Rpb24gWWooYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7VWo9ZnVuY3Rpb24oYSl7dHJ5e2Iub25Db21taXRGaWJlclJvb3QoYyxhLHZvaWQgMCw2ND09PShhLmN1cnJlbnQuZWZmZWN0VGFnJjY0KSl9Y2F0Y2goZSl7fX07TGk9ZnVuY3Rpb24oYSl7dHJ5e2Iub25Db21taXRGaWJlclVubW91bnQoYyxhKX1jYXRjaChlKXt9fX1jYXRjaChkKXt9cmV0dXJuITB9XG5mdW5jdGlvbiBaaihhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZWZmZWN0VGFnPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5jaGlsZEV4cGlyYXRpb25UaW1lPXRoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIFNoKGEsYixjLGQpe3JldHVybiBuZXcgWmooYSxiLGMsZCl9XG5mdW5jdGlvbiBiaShhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfWZ1bmN0aW9uIFhqKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBiaShhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09Z2IpcmV0dXJuIDExO2lmKGE9PT1qYilyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBTZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPVNoKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMuZWZmZWN0VGFnPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lO2MuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZTtjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2V4cGlyYXRpb25UaW1lOmIuZXhwaXJhdGlvblRpbWUsXG5maXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHQscmVzcG9uZGVyczpiLnJlc3BvbmRlcnN9O2Muc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gVWcoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKWJpKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIGFiOnJldHVybiBXZyhjLmNoaWxkcmVuLGUsZixiKTtjYXNlIGZiOmc9ODtlfD03O2JyZWFrO2Nhc2UgYmI6Zz04O2V8PTE7YnJlYWs7Y2FzZSBjYjpyZXR1cm4gYT1TaCgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPWNiLGEudHlwZT1jYixhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIGhiOnJldHVybiBhPVNoKDEzLGMsYixlKSxhLnR5cGU9aGIsYS5lbGVtZW50VHlwZT1oYixhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIGliOnJldHVybiBhPVNoKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPWliLGEuZXhwaXJhdGlvblRpbWU9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBkYjpnPVxuMTA7YnJlYWsgYTtjYXNlIGViOmc9OTticmVhayBhO2Nhc2UgZ2I6Zz0xMTticmVhayBhO2Nhc2UgamI6Zz0xNDticmVhayBhO2Nhc2Uga2I6Zz0xNjtkPW51bGw7YnJlYWsgYTtjYXNlIGxiOmc9MjI7YnJlYWsgYX10aHJvdyBFcnJvcih1KDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPVNoKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmV4cGlyYXRpb25UaW1lPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gV2coYSxiLGMsZCl7YT1TaCg3LGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gVGcoYSxiLGMpe2E9U2goNixhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfVxuZnVuY3Rpb24gVmcoYSxiLGMpe2I9U2goNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBhayhhLGIsYyl7dGhpcy50YWc9Yjt0aGlzLmN1cnJlbnQ9bnVsbDt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLnBpbmdDYWNoZT10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3RoaXMuZmluaXNoZWRXb3JrPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5oeWRyYXRlPWM7dGhpcy5jYWxsYmFja05vZGU9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9OTA7dGhpcy5sYXN0RXhwaXJlZFRpbWU9dGhpcy5sYXN0UGluZ2VkVGltZT10aGlzLm5leHRLbm93blBlbmRpbmdMZXZlbD10aGlzLmxhc3RTdXNwZW5kZWRUaW1lPXRoaXMuZmlyc3RTdXNwZW5kZWRUaW1lPXRoaXMuZmlyc3RQZW5kaW5nVGltZT0wfVxuZnVuY3Rpb24gQWooYSxiKXt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZTthPWEubGFzdFN1c3BlbmRlZFRpbWU7cmV0dXJuIDAhPT1jJiZjPj1iJiZhPD1ifWZ1bmN0aW9uIHhpKGEsYil7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWUsZD1hLmxhc3RTdXNwZW5kZWRUaW1lO2M8YiYmKGEuZmlyc3RTdXNwZW5kZWRUaW1lPWIpO2lmKGQ+Ynx8MD09PWMpYS5sYXN0U3VzcGVuZGVkVGltZT1iO2I8PWEubGFzdFBpbmdlZFRpbWUmJihhLmxhc3RQaW5nZWRUaW1lPTApO2I8PWEubGFzdEV4cGlyZWRUaW1lJiYoYS5sYXN0RXhwaXJlZFRpbWU9MCl9XG5mdW5jdGlvbiB5aShhLGIpe2I+YS5maXJzdFBlbmRpbmdUaW1lJiYoYS5maXJzdFBlbmRpbmdUaW1lPWIpO3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lOzAhPT1jJiYoYj49Yz9hLmZpcnN0U3VzcGVuZGVkVGltZT1hLmxhc3RTdXNwZW5kZWRUaW1lPWEubmV4dEtub3duUGVuZGluZ0xldmVsPTA6Yj49YS5sYXN0U3VzcGVuZGVkVGltZSYmKGEubGFzdFN1c3BlbmRlZFRpbWU9YisxKSxiPmEubmV4dEtub3duUGVuZGluZ0xldmVsJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9YikpfWZ1bmN0aW9uIENqKGEsYil7dmFyIGM9YS5sYXN0RXhwaXJlZFRpbWU7aWYoMD09PWN8fGM+YilhLmxhc3RFeHBpcmVkVGltZT1ifVxuZnVuY3Rpb24gYmsoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9R2coKSxnPURnLnN1c3BlbnNlO2Y9SGcoZixlLGcpO2E6aWYoYyl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7Yjp7aWYoZGMoYykhPT1jfHwxIT09Yy50YWcpdGhyb3cgRXJyb3IodSgxNzApKTt2YXIgaD1jO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmg9aC5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihMKGgudHlwZSkpe2g9aC5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn19aD1oLnJldHVybn13aGlsZShudWxsIT09aCk7dGhyb3cgRXJyb3IodSgxNzEpKTt9aWYoMT09PWMudGFnKXt2YXIgaz1jLnR5cGU7aWYoTChrKSl7Yz1GZihjLGssaCk7YnJlYWsgYX19Yz1ofWVsc2UgYz1BZjtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPXdnKGYsZyk7Yi5wYXlsb2FkPXtlbGVtZW50OmF9O2Q9dm9pZCAwPT09XG5kP251bGw6ZDtudWxsIT09ZCYmKGIuY2FsbGJhY2s9ZCk7eGcoZSxiKTtJZyhlLGYpO3JldHVybiBmfWZ1bmN0aW9uIGNrKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gZGsoYSxiKXthPWEubWVtb2l6ZWRTdGF0ZTtudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCYmYS5yZXRyeVRpbWU8YiYmKGEucmV0cnlUaW1lPWIpfWZ1bmN0aW9uIGVrKGEsYil7ZGsoYSxiKTsoYT1hLmFsdGVybmF0ZSkmJmRrKGEsYil9XG5mdW5jdGlvbiBmayhhLGIsYyl7Yz1udWxsIT1jJiYhMD09PWMuaHlkcmF0ZTt2YXIgZD1uZXcgYWsoYSxiLGMpLGU9U2goMyxudWxsLG51bGwsMj09PWI/NzoxPT09Yj8zOjApO2QuY3VycmVudD1lO2Uuc3RhdGVOb2RlPWQ7dWcoZSk7YVtPZF09ZC5jdXJyZW50O2MmJjAhPT1iJiZKYyhhLDk9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50KTt0aGlzLl9pbnRlcm5hbFJvb3Q9ZH1may5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe2JrKGEsdGhpcy5faW50ZXJuYWxSb290LG51bGwsbnVsbCl9O2ZrLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290LGI9YS5jb250YWluZXJJbmZvO2JrKG51bGwsYSxudWxsLGZ1bmN0aW9uKCl7YltPZF09bnVsbH0pfTtcbmZ1bmN0aW9uIGdrKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1mdW5jdGlvbiBoayhhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IGZrKGEsMCxiP3toeWRyYXRlOiEwfTp2b2lkIDApfVxuZnVuY3Rpb24gaWsoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1jayhnKTtoLmNhbGwoYSl9fWJrKGIsZyxhLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9aGsoYyxkKTtnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGs9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9Y2soZyk7ay5jYWxsKGEpfX1OaihmdW5jdGlvbigpe2JrKGIsZyxhLGUpfSl9cmV0dXJuIGNrKGcpfWZ1bmN0aW9uIGprKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6JGEsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG53Yz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1oZyhHZygpLDE1MCwxMDApO0lnKGEsYik7ZWsoYSxiKX19O3hjPWZ1bmN0aW9uKGEpezEzPT09YS50YWcmJihJZyhhLDMpLGVrKGEsMykpfTt5Yz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1HZygpO2I9SGcoYixhLG51bGwpO0lnKGEsYik7ZWsoYSxiKX19O1xuemE9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpDYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9UWQoZCk7aWYoIWUpdGhyb3cgRXJyb3IodSg5MCkpO3liKGQpO0NiKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjpLYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmSGIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtGYT1NajtcbkdhPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9VztXfD00O3RyeXtyZXR1cm4gY2coOTgsYS5iaW5kKG51bGwsYixjLGQsZSkpfWZpbmFsbHl7Vz1mLFc9PT1WJiZnZygpfX07SGE9ZnVuY3Rpb24oKXsoVyYoMXxmanxnaikpPT09ViYmKExqKCksRGooKSl9O0lhPWZ1bmN0aW9uKGEsYil7dmFyIGM9VztXfD0yO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1c9YyxXPT09ViYmZ2coKX19O2Z1bmN0aW9uIGtrKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIWdrKGIpKXRocm93IEVycm9yKHUoMjAwKSk7cmV0dXJuIGprKGEsYixudWxsLGMpfXZhciBsaz17RXZlbnRzOltOYyxQZCxRZCx4YSx0YSxYZCxmdW5jdGlvbihhKXtqYyhhLFdkKX0sRGEsRWEsaWQsbWMsRGose2N1cnJlbnQ6ITF9XX07XG4oZnVuY3Rpb24oYSl7dmFyIGI9YS5maW5kRmliZXJCeUhvc3RJbnN0YW5jZTtyZXR1cm4gWWoobih7fSxhLHtvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxzZXRTdXNwZW5zZUhhbmRsZXI6bnVsbCxzY2hlZHVsZVVwZGF0ZTpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOldhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1oYyhhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGI/YihhKTpudWxsfSxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsfSkpfSkoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOnRjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuMTQuMFwiLFxucmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1saztleHBvcnRzLmNyZWF0ZVBvcnRhbD1raztleHBvcnRzLmZpbmRET01Ob2RlPWZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcih1KDE4OCkpO3Rocm93IEVycm9yKHUoMjY4LE9iamVjdC5rZXlzKGEpKSk7fWE9aGMoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfTtcbmV4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEsYil7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMTg3KSk7dmFyIGM9VztXfD0xO3RyeXtyZXR1cm4gY2coOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7Vz1jLGdnKCl9fTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFnayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiBpayhudWxsLGEsYiwhMCxjKX07ZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFnayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiBpayhudWxsLGEsYiwhMSxjKX07XG5leHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIWdrKGEpKXRocm93IEVycm9yKHUoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhOaihmdW5jdGlvbigpe2lrKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVtPZF09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPU1qO2V4cG9ydHMudW5zdGFibGVfY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGtrKGEsYiwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbCl9O1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighZ2soYykpdGhyb3cgRXJyb3IodSgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXIpdGhyb3cgRXJyb3IodSgzOCkpO3JldHVybiBpayhhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTYuMTQuMFwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4xOS4xXG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGYsZyxoLGssbDtcbmlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciBwPW51bGwscT1udWxsLHQ9ZnVuY3Rpb24oKXtpZihudWxsIT09cCl0cnl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtwKCEwLGEpO3A9bnVsbH1jYXRjaChiKXt0aHJvdyBzZXRUaW1lb3V0KHQsMCksYjt9fSx1PURhdGUubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gRGF0ZS5ub3coKS11fTtmPWZ1bmN0aW9uKGEpe251bGwhPT1wP3NldFRpbWVvdXQoZiwwLGEpOihwPWEsc2V0VGltZW91dCh0LDApKX07Zz1mdW5jdGlvbihhLGIpe3E9c2V0VGltZW91dChhLGIpfTtoPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHEpfTtrPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2w9ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbigpe319ZWxzZXt2YXIgdz13aW5kb3cucGVyZm9ybWFuY2UseD13aW5kb3cuRGF0ZSxcbnk9d2luZG93LnNldFRpbWVvdXQsej13aW5kb3cuY2xlYXJUaW1lb3V0O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIEE9d2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBBJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIil9aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIHcmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiB3Lm5vdylleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiB3Lm5vdygpfTtlbHNle3ZhciBCPXgubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4geC5ub3coKS1CfX12YXIgQz0hMSxEPW51bGwsRT0tMSxGPTUsRz0wO2s9ZnVuY3Rpb24oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKT49R307bD1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZXJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHVuc3VwcG9ydGVkXCIpOkY9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O3ZhciBIPW5ldyBNZXNzYWdlQ2hhbm5lbCxJPUgucG9ydDI7SC5wb3J0MS5vbm1lc3NhZ2U9XG5mdW5jdGlvbigpe2lmKG51bGwhPT1EKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO0c9YStGO3RyeXtEKCEwLGEpP0kucG9zdE1lc3NhZ2UobnVsbCk6KEM9ITEsRD1udWxsKX1jYXRjaChiKXt0aHJvdyBJLnBvc3RNZXNzYWdlKG51bGwpLGI7fX1lbHNlIEM9ITF9O2Y9ZnVuY3Rpb24oYSl7RD1hO0N8fChDPSEwLEkucG9zdE1lc3NhZ2UobnVsbCkpfTtnPWZ1bmN0aW9uKGEsYil7RT15KGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9O2g9ZnVuY3Rpb24oKXt6KEUpO0U9LTF9fWZ1bmN0aW9uIEooYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKHZvaWQgMCE9PWUmJjA8SyhlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gTChhKXthPWFbMF07cmV0dXJuIHZvaWQgMD09PWE/bnVsbDphfVxuZnVuY3Rpb24gTShhKXt2YXIgYj1hWzBdO2lmKHZvaWQgMCE9PWIpe3ZhciBjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGg7ZDxlOyl7dmFyIG09MiooZCsxKS0xLG49YVttXSx2PW0rMSxyPWFbdl07aWYodm9pZCAwIT09biYmMD5LKG4sYykpdm9pZCAwIT09ciYmMD5LKHIsbik/KGFbZF09cixhW3ZdPWMsZD12KTooYVtkXT1uLGFbbV09YyxkPW0pO2Vsc2UgaWYodm9pZCAwIT09ciYmMD5LKHIsYykpYVtkXT1yLGFbdl09YyxkPXY7ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1yZXR1cm4gbnVsbH1mdW5jdGlvbiBLKGEsYil7dmFyIGM9YS5zb3J0SW5kZXgtYi5zb3J0SW5kZXg7cmV0dXJuIDAhPT1jP2M6YS5pZC1iLmlkfXZhciBOPVtdLE89W10sUD0xLFE9bnVsbCxSPTMsUz0hMSxUPSExLFU9ITE7XG5mdW5jdGlvbiBWKGEpe2Zvcih2YXIgYj1MKE8pO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spTShPKTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKU0oTyksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxKKE4sYik7ZWxzZSBicmVhaztiPUwoTyl9fWZ1bmN0aW9uIFcoYSl7VT0hMTtWKGEpO2lmKCFUKWlmKG51bGwhPT1MKE4pKVQ9ITAsZihYKTtlbHNle3ZhciBiPUwoTyk7bnVsbCE9PWImJmcoVyxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBYKGEsYil7VD0hMTtVJiYoVT0hMSxoKCkpO1M9ITA7dmFyIGM9Ujt0cnl7VihiKTtmb3IoUT1MKE4pO251bGwhPT1RJiYoIShRLmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhaygpKTspe3ZhciBkPVEuY2FsbGJhY2s7aWYobnVsbCE9PWQpe1EuY2FsbGJhY2s9bnVsbDtSPVEucHJpb3JpdHlMZXZlbDt2YXIgZT1kKFEuZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT9RLmNhbGxiYWNrPWU6UT09PUwoTikmJk0oTik7VihiKX1lbHNlIE0oTik7UT1MKE4pfWlmKG51bGwhPT1RKXZhciBtPSEwO2Vsc2V7dmFyIG49TChPKTtudWxsIT09biYmZyhXLG4uc3RhcnRUaW1lLWIpO209ITF9cmV0dXJuIG19ZmluYWxseXtRPW51bGwsUj1jLFM9ITF9fVxuZnVuY3Rpb24gWShhKXtzd2l0Y2goYSl7Y2FzZSAxOnJldHVybi0xO2Nhc2UgMjpyZXR1cm4gMjUwO2Nhc2UgNTpyZXR1cm4gMTA3Mzc0MTgyMztjYXNlIDQ6cmV0dXJuIDFFNDtkZWZhdWx0OnJldHVybiA1RTN9fXZhciBaPWw7ZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe1R8fFN8fChUPSEwLGYoWCkpfTtcbmV4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4gUn07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBMKE4pfTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKFIpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPVJ9dmFyIGM9UjtSPWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtSPWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1aO2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9UjtSPWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtSPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXt2YXIgZT1jLmRlbGF5O2U9XCJudW1iZXJcIj09PXR5cGVvZiBlJiYwPGU/ZCtlOmQ7Yz1cIm51bWJlclwiPT09dHlwZW9mIGMudGltZW91dD9jLnRpbWVvdXQ6WShhKX1lbHNlIGM9WShhKSxlPWQ7Yz1lK2M7YT17aWQ6UCsrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTplLGV4cGlyYXRpb25UaW1lOmMsc29ydEluZGV4Oi0xfTtlPmQ/KGEuc29ydEluZGV4PWUsSihPLGEpLG51bGw9PT1MKE4pJiZhPT09TChPKSYmKFU/aCgpOlU9ITAsZyhXLGUtZCkpKTooYS5zb3J0SW5kZXg9YyxKKE4sYSksVHx8U3x8KFQ9ITAsZihYKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO1YoYSk7dmFyIGI9TChOKTtyZXR1cm4gYiE9PVEmJm51bGwhPT1RJiZudWxsIT09YiYmbnVsbCE9PWIuY2FsbGJhY2smJmIuc3RhcnRUaW1lPD1hJiZiLmV4cGlyYXRpb25UaW1lPFEuZXhwaXJhdGlvblRpbWV8fGsoKX07ZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9UjtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1SO1I9Yjt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7Uj1jfX19O1xuIiwiXG52YXIgY2xlYW4gPSByZXF1aXJlKCd0by1uby1jYXNlJylcblxuLyoqXG4gKiBFeHBvcnQuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB0b1NwYWNlQ2FzZVxuXG4vKipcbiAqIENvbnZlcnQgYSBgc3RyaW5nYCB0byBzcGFjZSBjYXNlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuXG5mdW5jdGlvbiB0b1NwYWNlQ2FzZShzdHJpbmcpIHtcbiAgcmV0dXJuIGNsZWFuKHN0cmluZykucmVwbGFjZSgvW1xcV19dKygufCQpL2csIGZ1bmN0aW9uIChtYXRjaGVzLCBtYXRjaCkge1xuICAgIHJldHVybiBtYXRjaCA/ICcgJyArIG1hdGNoIDogJydcbiAgfSkudHJpbSgpXG59XG4iLCJcbi8qKlxuICogRXhwb3J0LlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gdG9Ob0Nhc2VcblxuLyoqXG4gKiBUZXN0IHdoZXRoZXIgYSBzdHJpbmcgaXMgY2FtZWwtY2FzZS5cbiAqL1xuXG52YXIgaGFzU3BhY2UgPSAvXFxzL1xudmFyIGhhc1NlcGFyYXRvciA9IC8oX3wtfFxcLnw6KS9cbnZhciBoYXNDYW1lbCA9IC8oW2Etel1bQS1aXXxbQS1aXVthLXpdKS9cblxuLyoqXG4gKiBSZW1vdmUgYW55IHN0YXJ0aW5nIGNhc2UgZnJvbSBhIGBzdHJpbmdgLCBsaWtlIGNhbWVsIG9yIHNuYWtlLCBidXQga2VlcFxuICogc3BhY2VzIGFuZCBwdW5jdHVhdGlvbiB0aGF0IG1heSBiZSBpbXBvcnRhbnQgb3RoZXJ3aXNlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuXG5mdW5jdGlvbiB0b05vQ2FzZShzdHJpbmcpIHtcbiAgaWYgKGhhc1NwYWNlLnRlc3Qoc3RyaW5nKSkgcmV0dXJuIHN0cmluZy50b0xvd2VyQ2FzZSgpXG4gIGlmIChoYXNTZXBhcmF0b3IudGVzdChzdHJpbmcpKSByZXR1cm4gKHVuc2VwYXJhdGUoc3RyaW5nKSB8fCBzdHJpbmcpLnRvTG93ZXJDYXNlKClcbiAgaWYgKGhhc0NhbWVsLnRlc3Qoc3RyaW5nKSkgcmV0dXJuIHVuY2FtZWxpemUoc3RyaW5nKS50b0xvd2VyQ2FzZSgpXG4gIHJldHVybiBzdHJpbmcudG9Mb3dlckNhc2UoKVxufVxuXG4vKipcbiAqIFNlcGFyYXRvciBzcGxpdHRlci5cbiAqL1xuXG52YXIgc2VwYXJhdG9yU3BsaXR0ZXIgPSAvW1xcV19dKygufCQpL2dcblxuLyoqXG4gKiBVbi1zZXBhcmF0ZSBhIGBzdHJpbmdgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuXG5mdW5jdGlvbiB1bnNlcGFyYXRlKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2Uoc2VwYXJhdG9yU3BsaXR0ZXIsIGZ1bmN0aW9uIChtLCBuZXh0KSB7XG4gICAgcmV0dXJuIG5leHQgPyAnICcgKyBuZXh0IDogJydcbiAgfSlcbn1cblxuLyoqXG4gKiBDYW1lbGNhc2Ugc3BsaXR0ZXIuXG4gKi9cblxudmFyIGNhbWVsU3BsaXR0ZXIgPSAvKC4pKFtBLVpdKykvZ1xuXG4vKipcbiAqIFVuLWNhbWVsY2FzZSBhIGBzdHJpbmdgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuXG5mdW5jdGlvbiB1bmNhbWVsaXplKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoY2FtZWxTcGxpdHRlciwgZnVuY3Rpb24gKG0sIHByZXZpb3VzLCB1cHBlcnMpIHtcbiAgICByZXR1cm4gcHJldmlvdXMgKyAnICcgKyB1cHBlcnMudG9Mb3dlckNhc2UoKS5zcGxpdCgnJykuam9pbignICcpXG4gIH0pXG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMi4wXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtcbnZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOlxuNjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpOjYwMTE3LHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpOjYwMTE4LHg9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik6NjAxMTk7ZnVuY3Rpb24geShhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIHooYSl7cmV0dXJuIHkoYSk9PT1tfVxuZXhwb3J0cy50eXBlT2Y9eTtleHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7ZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1lfHxhPT09bXx8YT09PWd8fGE9PT1mfHxhPT09cHx8YT09PXF8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09dHx8YS4kJHR5cGVvZj09PXJ8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW58fGEuJCR0eXBlb2Y9PT12fHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXgpfTtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpfHx5KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPXo7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWt9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1ofTtcbmV4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09dH07ZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1yfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1mfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1wfTtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsTW9kdWxlKSB7XG5cdGlmICghb3JpZ2luYWxNb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzOyIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8sIGZyb20pIHtcbiAgaWYgKGZyb20gPT09IHVuZGVmaW5lZCkgZnJvbSA9ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gKHRvICYmIHRvLnNwbGl0KCcvJykpIHx8IFtdO1xuICB2YXIgZnJvbVBhcnRzID0gKGZyb20gJiYgZnJvbS5zcGxpdCgnLycpKSB8fCBbXTtcblxuICB2YXIgaXNUb0FicyA9IHRvICYmIGlzQWJzb2x1dGUodG8pO1xuICB2YXIgaXNGcm9tQWJzID0gZnJvbSAmJiBpc0Fic29sdXRlKGZyb20pO1xuICB2YXIgbXVzdEVuZEFicyA9IGlzVG9BYnMgfHwgaXNGcm9tQWJzO1xuXG4gIGlmICh0byAmJiBpc0Fic29sdXRlKHRvKSkge1xuICAgIC8vIHRvIGlzIGFic29sdXRlXG4gICAgZnJvbVBhcnRzID0gdG9QYXJ0cztcbiAgfSBlbHNlIGlmICh0b1BhcnRzLmxlbmd0aCkge1xuICAgIC8vIHRvIGlzIHJlbGF0aXZlLCBkcm9wIHRoZSBmaWxlbmFtZVxuICAgIGZyb21QYXJ0cy5wb3AoKTtcbiAgICBmcm9tUGFydHMgPSBmcm9tUGFydHMuY29uY2F0KHRvUGFydHMpO1xuICB9XG5cbiAgaWYgKCFmcm9tUGFydHMubGVuZ3RoKSByZXR1cm4gJy8nO1xuXG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoO1xuICBpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuICAgIHZhciBsYXN0ID0gZnJvbVBhcnRzW2Zyb21QYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gbGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicgfHwgbGFzdCA9PT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IGZyb21QYXJ0cy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhcnQgPSBmcm9tUGFydHNbaV07XG5cbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtdXN0RW5kQWJzKSBmb3IgKDsgdXAtLTsgdXApIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuXG4gIGlmIChcbiAgICBtdXN0RW5kQWJzICYmXG4gICAgZnJvbVBhcnRzWzBdICE9PSAnJyAmJlxuICAgICghZnJvbVBhcnRzWzBdIHx8ICFpc0Fic29sdXRlKGZyb21QYXJ0c1swXSkpXG4gIClcbiAgICBmcm9tUGFydHMudW5zaGlmdCgnJyk7XG5cbiAgdmFyIHJlc3VsdCA9IGZyb21QYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgcmVzdWx0LnN1YnN0cigtMSkgIT09ICcvJykgcmVzdWx0ICs9ICcvJztcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXNvbHZlUGF0aG5hbWU7XG4iLCJ2YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbnZhciBwcmVmaXggPSAnSW52YXJpYW50IGZhaWxlZCc7XG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXggKyBcIjogXCIgKyAobWVzc2FnZSB8fCAnJykpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpbnZhcmlhbnQ7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcmVzb2x2ZVBhdGhuYW1lIGZyb20gJ3Jlc29sdmUtcGF0aG5hbWUnO1xuaW1wb3J0IHZhbHVlRXF1YWwgZnJvbSAndmFsdWUtZXF1YWwnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gcGF0aC50b0xvd2VyQ2FzZSgpLmluZGV4T2YocHJlZml4LnRvTG93ZXJDYXNlKCkpID09PSAwICYmICcvPyMnLmluZGV4T2YocGF0aC5jaGFyQXQocHJlZml4Lmxlbmd0aCkpICE9PSAtMTtcbn1cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG5cbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcblxuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRoO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uO1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpIDogdm9pZCAwO1xuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKSA6IHZvaWQgMDtcbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufVxuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbmZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuXG5mdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbmZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICFzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBfcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmIChpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxudmFyIEhhc2hDaGFuZ2VFdmVudCQxID0gJ2hhc2hjaGFuZ2UnO1xudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBzdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0cmlwSGFzaCh1cmwpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gdXJsIDogdXJsLnNsaWNlKDAsIGhhc2hJbmRleCk7XG59XG5cbmZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufVxuXG5mdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZikgKyAnIycgKyBwYXRoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gX3Byb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHZvaWQgMCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwkJDEoYSwgYikge1xuICAgIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsJCQxKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfSAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cblxuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gW2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgdmFyIGJhc2VUYWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJyk7XG4gICAgdmFyIGhyZWYgPSAnJztcblxuICAgIGlmIChiYXNlVGFnICYmIGJhc2VUYWcuZ2V0QXR0cmlidXRlKCdocmVmJykpIHtcbiAgICAgIGhyZWYgPSBzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmICsgJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpIDogdm9pZCAwO1xuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpIDogdm9pZCAwO1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5mdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdm9pZCAwID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gX3Byb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gY3JlYXRlUGF0aDtcblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcblxuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBwYXJzZVBhdGgsIGNyZWF0ZVBhdGggfTtcbiIsImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBjcmVhdGVQYXRoIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGNyZWF0ZUNvbnRleHQgZnJvbSAnbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dCc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSAncGF0aC10by1yZWdleHAnO1xuaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnRUeXBlIH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5cbi8vIFRPRE86IFJlcGxhY2Ugd2l0aCBSZWFjdC5jcmVhdGVDb250ZXh0IG9uY2Ugd2UgY2FuIGFzc3VtZSBSZWFjdCAxNitcblxudmFyIGNyZWF0ZU5hbWVkQ29udGV4dCA9IGZ1bmN0aW9uIGNyZWF0ZU5hbWVkQ29udGV4dChuYW1lKSB7XG4gIHZhciBjb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuICBjb250ZXh0LmRpc3BsYXlOYW1lID0gbmFtZTtcbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG52YXIgaGlzdG9yeUNvbnRleHQgPVxuLyojX19QVVJFX18qL1xuY3JlYXRlTmFtZWRDb250ZXh0KFwiUm91dGVyLUhpc3RvcnlcIik7XG5cbi8vIFRPRE86IFJlcGxhY2Ugd2l0aCBSZWFjdC5jcmVhdGVDb250ZXh0IG9uY2Ugd2UgY2FuIGFzc3VtZSBSZWFjdCAxNitcblxudmFyIGNyZWF0ZU5hbWVkQ29udGV4dCQxID0gZnVuY3Rpb24gY3JlYXRlTmFtZWRDb250ZXh0KG5hbWUpIHtcbiAgdmFyIGNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG4gIGNvbnRleHQuZGlzcGxheU5hbWUgPSBuYW1lO1xuICByZXR1cm4gY29udGV4dDtcbn07XG5cbnZhciBjb250ZXh0ID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZU5hbWVkQ29udGV4dCQxKFwiUm91dGVyXCIpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwdXR0aW5nIGhpc3Rvcnkgb24gY29udGV4dC5cbiAqL1xuXG52YXIgUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgUm91dGVyLmNvbXB1dGVSb290TWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlUm9vdE1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IFwiL1wiLFxuICAgICAgdXJsOiBcIi9cIixcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBpc0V4YWN0OiBwYXRobmFtZSA9PT0gXCIvXCJcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIFJvdXRlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgbG9jYXRpb246IHByb3BzLmhpc3RvcnkubG9jYXRpb25cbiAgICB9OyAvLyBUaGlzIGlzIGEgYml0IG9mIGEgaGFjay4gV2UgaGF2ZSB0byBzdGFydCBsaXN0ZW5pbmcgZm9yIGxvY2F0aW9uXG4gICAgLy8gY2hhbmdlcyBoZXJlIGluIHRoZSBjb25zdHJ1Y3RvciBpbiBjYXNlIHRoZXJlIGFyZSBhbnkgPFJlZGlyZWN0PnNcbiAgICAvLyBvbiB0aGUgaW5pdGlhbCByZW5kZXIuIElmIHRoZXJlIGFyZSwgdGhleSB3aWxsIHJlcGxhY2UvcHVzaCB3aGVuXG4gICAgLy8gdGhleSBtb3VudCBhbmQgc2luY2UgY0RNIGZpcmVzIGluIGNoaWxkcmVuIGJlZm9yZSBwYXJlbnRzLCB3ZSBtYXlcbiAgICAvLyBnZXQgYSBuZXcgbG9jYXRpb24gYmVmb3JlIHRoZSA8Um91dGVyPiBpcyBtb3VudGVkLlxuXG4gICAgX3RoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBudWxsO1xuXG4gICAgaWYgKCFwcm9wcy5zdGF0aWNDb250ZXh0KSB7XG4gICAgICBfdGhpcy51bmxpc3RlbiA9IHByb3BzLmhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgICBpZiAoX3RoaXMuX2lzTW91bnRlZCkge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLl9wZW5kaW5nTG9jYXRpb24pIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBsb2NhdGlvbjogdGhpcy5fcGVuZGluZ0xvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMudW5saXN0ZW4pIHRoaXMudW5saXN0ZW4oKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIGhpc3Rvcnk6IHRoaXMucHJvcHMuaGlzdG9yeSxcbiAgICAgICAgbG9jYXRpb246IHRoaXMuc3RhdGUubG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBSb3V0ZXIuY29tcHV0ZVJvb3RNYXRjaCh0aGlzLnN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lKSxcbiAgICAgICAgc3RhdGljQ29udGV4dDogdGhpcy5wcm9wcy5zdGF0aWNDb250ZXh0XG4gICAgICB9XG4gICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChoaXN0b3J5Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfHwgbnVsbCxcbiAgICAgIHZhbHVlOiB0aGlzLnByb3BzLmhpc3RvcnlcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJldlByb3BzLmhpc3RvcnkgPT09IHRoaXMucHJvcHMuaGlzdG9yeSwgXCJZb3UgY2Fubm90IGNoYW5nZSA8Um91dGVyIGhpc3Rvcnk+XCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGxvY2F0aW9uIGluIG1lbW9yeS5cbiAqL1xuXG52YXIgTWVtb3J5Um91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1lbW9yeVJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVtb3J5Um91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVNZW1vcnlIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTWVtb3J5Um91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTWVtb3J5Um91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE1lbW9yeVJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgaW5pdGlhbEVudHJpZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgICBpbml0aWFsSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxuICB9O1xuXG4gIE1lbW9yeVJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxNZW1vcnlSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBNZW1vcnlSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxudmFyIExpZmVjeWNsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShMaWZlY3ljbGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpZmVjeWNsZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTGlmZWN5Y2xlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbk1vdW50KSB0aGlzLnByb3BzLm9uTW91bnQuY2FsbCh0aGlzLCB0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLm9uVXBkYXRlKSB0aGlzLnByb3BzLm9uVXBkYXRlLmNhbGwodGhpcywgdGhpcywgcHJldlByb3BzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVubW91bnQpIHRoaXMucHJvcHMub25Vbm1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gTGlmZWN5Y2xlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwcm9tcHRpbmcgdGhlIHVzZXIgYmVmb3JlIG5hdmlnYXRpbmcgYXdheSBmcm9tIGEgc2NyZWVuLlxuICovXG5cbmZ1bmN0aW9uIFByb21wdChfcmVmKSB7XG4gIHZhciBtZXNzYWdlID0gX3JlZi5tZXNzYWdlLFxuICAgICAgX3JlZiR3aGVuID0gX3JlZi53aGVuLFxuICAgICAgd2hlbiA9IF9yZWYkd2hlbiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkd2hlbjtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFByb21wdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBpZiAoIXdoZW4gfHwgY29udGV4dC5zdGF0aWNDb250ZXh0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgbWV0aG9kID0gY29udGV4dC5oaXN0b3J5LmJsb2NrO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIGlmIChwcmV2UHJvcHMubWVzc2FnZSAhPT0gbWVzc2FnZSkge1xuICAgICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uVW5tb3VudDogZnVuY3Rpb24gb25Vbm1vdW50KHNlbGYpIHtcbiAgICAgICAgc2VsZi5yZWxlYXNlKCk7XG4gICAgICB9LFxuICAgICAgbWVzc2FnZTogbWVzc2FnZVxuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgbWVzc2FnZVR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pO1xuICBQcm9tcHQucHJvcFR5cGVzID0ge1xuICAgIHdoZW46IFByb3BUeXBlcy5ib29sLFxuICAgIG1lc3NhZ2U6IG1lc3NhZ2VUeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aChwYXRoKSB7XG4gIGlmIChjYWNoZVtwYXRoXSkgcmV0dXJuIGNhY2hlW3BhdGhdO1xuICB2YXIgZ2VuZXJhdG9yID0gcGF0aFRvUmVnZXhwLmNvbXBpbGUocGF0aCk7XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0aF0gPSBnZW5lcmF0b3I7XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGdlbmVyYXRvcjtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgZ2VuZXJhdGluZyBhIFVSTCBwYXRobmFtZSBmcm9tIGEgcGF0aCBhbmQgcGFyYW1ldGVycy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlUGF0aChwYXRoLCBwYXJhbXMpIHtcbiAgaWYgKHBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhdGggPSBcIi9cIjtcbiAgfVxuXG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG5cbiAgcmV0dXJuIHBhdGggPT09IFwiL1wiID8gcGF0aCA6IGNvbXBpbGVQYXRoKHBhdGgpKHBhcmFtcywge1xuICAgIHByZXR0eTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbmF2aWdhdGluZyBwcm9ncmFtbWF0aWNhbGx5IHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxuZnVuY3Rpb24gUmVkaXJlY3QoX3JlZikge1xuICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIF9yZWYkcHVzaCA9IF9yZWYucHVzaCxcbiAgICAgIHB1c2ggPSBfcmVmJHB1c2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRwdXNoO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UmVkaXJlY3Q+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhpc3RvcnkgPSBjb250ZXh0Lmhpc3RvcnksXG4gICAgICAgIHN0YXRpY0NvbnRleHQgPSBjb250ZXh0LnN0YXRpY0NvbnRleHQ7XG4gICAgdmFyIG1ldGhvZCA9IHB1c2ggPyBoaXN0b3J5LnB1c2ggOiBoaXN0b3J5LnJlcGxhY2U7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oY29tcHV0ZWRNYXRjaCA/IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGdlbmVyYXRlUGF0aCh0bywgY29tcHV0ZWRNYXRjaC5wYXJhbXMpIDogX2V4dGVuZHMoe30sIHRvLCB7XG4gICAgICBwYXRobmFtZTogZ2VuZXJhdGVQYXRoKHRvLnBhdGhuYW1lLCBjb21wdXRlZE1hdGNoLnBhcmFtcylcbiAgICB9KSA6IHRvKTsgLy8gV2hlbiByZW5kZXJpbmcgaW4gYSBzdGF0aWMgY29udGV4dCxcbiAgICAvLyBzZXQgdGhlIG5ldyBsb2NhdGlvbiBpbW1lZGlhdGVseS5cblxuICAgIGlmIChzdGF0aWNDb250ZXh0KSB7XG4gICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGlmZWN5Y2xlLCB7XG4gICAgICBvbk1vdW50OiBmdW5jdGlvbiBvbk1vdW50KCkge1xuICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgfSxcbiAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShzZWxmLCBwcmV2UHJvcHMpIHtcbiAgICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHByZXZQcm9wcy50byk7XG5cbiAgICAgICAgaWYgKCFsb2NhdGlvbnNBcmVFcXVhbChwcmV2TG9jYXRpb24sIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgICAgICAgIGtleTogcHJldkxvY2F0aW9uLmtleVxuICAgICAgICB9KSkpIHtcbiAgICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdG86IHRvXG4gICAgfSk7XG4gIH0pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJlZGlyZWN0LnByb3BUeXBlcyA9IHtcbiAgICBwdXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBmcm9tOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgY2FjaGUkMSA9IHt9O1xudmFyIGNhY2hlTGltaXQkMSA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQkMSA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoJDEocGF0aCwgb3B0aW9ucykge1xuICB2YXIgY2FjaGVLZXkgPSBcIlwiICsgb3B0aW9ucy5lbmQgKyBvcHRpb25zLnN0cmljdCArIG9wdGlvbnMuc2Vuc2l0aXZlO1xuICB2YXIgcGF0aENhY2hlID0gY2FjaGUkMVtjYWNoZUtleV0gfHwgKGNhY2hlJDFbY2FjaGVLZXldID0ge30pO1xuICBpZiAocGF0aENhY2hlW3BhdGhdKSByZXR1cm4gcGF0aENhY2hlW3BhdGhdO1xuICB2YXIga2V5cyA9IFtdO1xuICB2YXIgcmVnZXhwID0gcGF0aFRvUmVnZXhwKHBhdGgsIGtleXMsIG9wdGlvbnMpO1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIHJlZ2V4cDogcmVnZXhwLFxuICAgIGtleXM6IGtleXNcbiAgfTtcblxuICBpZiAoY2FjaGVDb3VudCQxIDwgY2FjaGVMaW1pdCQxKSB7XG4gICAgcGF0aENhY2hlW3BhdGhdID0gcmVzdWx0O1xuICAgIGNhY2hlQ291bnQkMSsrO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBVUkwgcGF0aG5hbWUgdG8gYSBwYXRoLlxuICovXG5cblxuZnVuY3Rpb24gbWF0Y2hQYXRoKHBhdGhuYW1lLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheShvcHRpb25zKSkge1xuICAgIG9wdGlvbnMgPSB7XG4gICAgICBwYXRoOiBvcHRpb25zXG4gICAgfTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBwYXRoID0gX29wdGlvbnMucGF0aCxcbiAgICAgIF9vcHRpb25zJGV4YWN0ID0gX29wdGlvbnMuZXhhY3QsXG4gICAgICBleGFjdCA9IF9vcHRpb25zJGV4YWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGV4YWN0LFxuICAgICAgX29wdGlvbnMkc3RyaWN0ID0gX29wdGlvbnMuc3RyaWN0LFxuICAgICAgc3RyaWN0ID0gX29wdGlvbnMkc3RyaWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHN0cmljdCxcbiAgICAgIF9vcHRpb25zJHNlbnNpdGl2ZSA9IF9vcHRpb25zLnNlbnNpdGl2ZSxcbiAgICAgIHNlbnNpdGl2ZSA9IF9vcHRpb25zJHNlbnNpdGl2ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRzZW5zaXRpdmU7XG4gIHZhciBwYXRocyA9IFtdLmNvbmNhdChwYXRoKTtcbiAgcmV0dXJuIHBhdGhzLnJlZHVjZShmdW5jdGlvbiAobWF0Y2hlZCwgcGF0aCkge1xuICAgIGlmICghcGF0aCAmJiBwYXRoICE9PSBcIlwiKSByZXR1cm4gbnVsbDtcbiAgICBpZiAobWF0Y2hlZCkgcmV0dXJuIG1hdGNoZWQ7XG5cbiAgICB2YXIgX2NvbXBpbGVQYXRoID0gY29tcGlsZVBhdGgkMShwYXRoLCB7XG4gICAgICBlbmQ6IGV4YWN0LFxuICAgICAgc3RyaWN0OiBzdHJpY3QsXG4gICAgICBzZW5zaXRpdmU6IHNlbnNpdGl2ZVxuICAgIH0pLFxuICAgICAgICByZWdleHAgPSBfY29tcGlsZVBhdGgucmVnZXhwLFxuICAgICAgICBrZXlzID0gX2NvbXBpbGVQYXRoLmtleXM7XG5cbiAgICB2YXIgbWF0Y2ggPSByZWdleHAuZXhlYyhwYXRobmFtZSk7XG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHVybCA9IG1hdGNoWzBdLFxuICAgICAgICB2YWx1ZXMgPSBtYXRjaC5zbGljZSgxKTtcbiAgICB2YXIgaXNFeGFjdCA9IHBhdGhuYW1lID09PSB1cmw7XG4gICAgaWYgKGV4YWN0ICYmICFpc0V4YWN0KSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogcGF0aCxcbiAgICAgIC8vIHRoZSBwYXRoIHVzZWQgdG8gbWF0Y2hcbiAgICAgIHVybDogcGF0aCA9PT0gXCIvXCIgJiYgdXJsID09PSBcIlwiID8gXCIvXCIgOiB1cmwsXG4gICAgICAvLyB0aGUgbWF0Y2hlZCBwb3J0aW9uIG9mIHRoZSBVUkxcbiAgICAgIGlzRXhhY3Q6IGlzRXhhY3QsXG4gICAgICAvLyB3aGV0aGVyIG9yIG5vdCB3ZSBtYXRjaGVkIGV4YWN0bHlcbiAgICAgIHBhcmFtczoga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGtleSwgaW5kZXgpIHtcbiAgICAgICAgbWVtb1trZXkubmFtZV0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgIH0sIHt9KVxuICAgIH07XG4gIH0sIG51bGwpO1xufVxuXG5mdW5jdGlvbiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgcGF0aCkge1xuICB2YXIgdmFsdWUgPSBjaGlsZHJlbihwcm9wcyk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcodmFsdWUgIT09IHVuZGVmaW5lZCwgXCJZb3UgcmV0dXJuZWQgYHVuZGVmaW5lZGAgZnJvbSB0aGUgYGNoaWxkcmVuYCBmdW5jdGlvbiBvZiBcIiArIChcIjxSb3V0ZVwiICsgKHBhdGggPyBcIiBwYXRoPVxcXCJcIiArIHBhdGggKyBcIlxcXCJcIiA6IFwiXCIpICsgXCI+LCBidXQgeW91IFwiKSArIFwic2hvdWxkIGhhdmUgcmV0dXJuZWQgYSBSZWFjdCBlbGVtZW50IG9yIGBudWxsYFwiKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHZhbHVlIHx8IG51bGw7XG59XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIHNpbmdsZSBwYXRoIGFuZCByZW5kZXJpbmcuXG4gKi9cblxuXG52YXIgUm91dGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm91dGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSb3V0ZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQkMSkge1xuICAgICAgIWNvbnRleHQkMSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dCQxLmxvY2F0aW9uO1xuICAgICAgdmFyIG1hdGNoID0gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCA/IF90aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggLy8gPFN3aXRjaD4gYWxyZWFkeSBjb21wdXRlZCB0aGUgbWF0Y2ggZm9yIHVzXG4gICAgICA6IF90aGlzLnByb3BzLnBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIF90aGlzLnByb3BzKSA6IGNvbnRleHQkMS5tYXRjaDtcblxuICAgICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIGNvbnRleHQkMSwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBtYXRjaFxuICAgICAgfSk7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICAgIHJlbmRlciA9IF90aGlzJHByb3BzLnJlbmRlcjsgLy8gUHJlYWN0IHVzZXMgYW4gZW1wdHkgYXJyYXkgYXMgY2hpbGRyZW4gYnlcbiAgICAgIC8vIGRlZmF1bHQsIHNvIHVzZSBudWxsIGlmIHRoYXQncyB0aGUgY2FzZS5cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIGNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjaGlsZHJlbiA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IHByb3BzXG4gICAgICB9LCBwcm9wcy5tYXRjaCA/IGNoaWxkcmVuID8gdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBfdGhpcy5wcm9wcy5wYXRoKSA6IGNoaWxkcmVuKHByb3BzKSA6IGNoaWxkcmVuIDogY29tcG9uZW50ID8gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKSA6IHJlbmRlciA/IHJlbmRlcihwcm9wcykgOiBudWxsIDogdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBfdGhpcy5wcm9wcy5wYXRoKSA6IGNoaWxkcmVuKHByb3BzKSA6IG51bGwpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZS5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KHByb3BzLCBwcm9wTmFtZSkge1xuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSAmJiAhaXNWYWxpZEVsZW1lbnRUeXBlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIkludmFsaWQgcHJvcCAnY29tcG9uZW50JyBzdXBwbGllZCB0byAnUm91dGUnOiB0aGUgcHJvcCBpcyBub3QgYSB2YWxpZCBSZWFjdCBjb21wb25lbnRcIik7XG4gICAgICB9XG4gICAgfSxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcGF0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyldKSxcbiAgICByZW5kZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbFxuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMuY29tcG9uZW50KSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjb21wb25lbnQ+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gXCIvXCIgPyBwYXRoIDogXCIvXCIgKyBwYXRoO1xufVxuXG5mdW5jdGlvbiBhZGRCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSkgKyBsb2NhdGlvbi5wYXRobmFtZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICB2YXIgYmFzZSA9IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSk7XG4gIGlmIChsb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKGJhc2UpICE9PSAwKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVVJMKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBsb2NhdGlvbiA6IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xufVxuXG5mdW5jdGlvbiBzdGF0aWNIYW5kbGVyKG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgJXMgd2l0aCA8U3RhdGljUm91dGVyPlwiLCBtZXRob2ROYW1lKSA6IGludmFyaWFudChmYWxzZSkgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuXG5cbnZhciBTdGF0aWNSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3RhdGljUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdGF0aWNSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVQdXNoID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJQVVNIXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSZXBsYWNlID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJSRVBMQUNFXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0YXRpY1JvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm5hdmlnYXRlVG8gPSBmdW5jdGlvbiBuYXZpZ2F0ZVRvKGxvY2F0aW9uLCBhY3Rpb24pIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9IF90aGlzJHByb3BzLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMkYmFzZW5hbWUsXG4gICAgICAgIF90aGlzJHByb3BzJGNvbnRleHQgPSBfdGhpcyRwcm9wcy5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wcyRjb250ZXh0O1xuICAgIGNvbnRleHQuYWN0aW9uID0gYWN0aW9uO1xuICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wczIkYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIuYmFzZW5hbWUsXG4gICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMyJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wczIkY29udGV4dCA9IF90aGlzJHByb3BzMi5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMyJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMyJGNvbnRleHQsXG4gICAgICAgIF90aGlzJHByb3BzMiRsb2NhdGlvbiA9IF90aGlzJHByb3BzMi5sb2NhdGlvbixcbiAgICAgICAgbG9jYXRpb24gPSBfdGhpcyRwcm9wczIkbG9jYXRpb24gPT09IHZvaWQgMCA/IFwiL1wiIDogX3RoaXMkcHJvcHMyJGxvY2F0aW9uLFxuICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMyLCBbXCJiYXNlbmFtZVwiLCBcImNvbnRleHRcIiwgXCJsb2NhdGlvblwiXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHtcbiAgICAgIGNyZWF0ZUhyZWY6IGZ1bmN0aW9uIGNyZWF0ZUhyZWYocGF0aCkge1xuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lICsgY3JlYXRlVVJMKHBhdGgpKTtcbiAgICAgIH0sXG4gICAgICBhY3Rpb246IFwiUE9QXCIsXG4gICAgICBsb2NhdGlvbjogc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKSxcbiAgICAgIHB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgIHJlcGxhY2U6IHRoaXMuaGFuZGxlUmVwbGFjZSxcbiAgICAgIGdvOiBzdGF0aWNIYW5kbGVyKFwiZ29cIiksXG4gICAgICBnb0JhY2s6IHN0YXRpY0hhbmRsZXIoXCJnb0JhY2tcIiksXG4gICAgICBnb0ZvcndhcmQ6IHN0YXRpY0hhbmRsZXIoXCJnb0ZvcndhcmRcIiksXG4gICAgICBsaXN0ZW46IHRoaXMuaGFuZGxlTGlzdGVuLFxuICAgICAgYmxvY2s6IHRoaXMuaGFuZGxlQmxvY2tcbiAgICB9O1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhpc3Rvcnk6IGhpc3RvcnksXG4gICAgICBzdGF0aWNDb250ZXh0OiBjb250ZXh0XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBTdGF0aWNSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU3RhdGljUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8U3RhdGljUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgU3RhdGljUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyB0aGUgZmlyc3QgPFJvdXRlPiB0aGF0IG1hdGNoZXMuXG4gKi9cblxudmFyIFN3aXRjaCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShTd2l0Y2gsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN3aXRjaCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3dpdGNoLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxTd2l0Y2g+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCBjb250ZXh0LmxvY2F0aW9uO1xuICAgICAgdmFyIGVsZW1lbnQsIG1hdGNoOyAvLyBXZSB1c2UgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaCBpbnN0ZWFkIG9mIFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoKS5maW5kKClcbiAgICAgIC8vIGhlcmUgYmVjYXVzZSB0b0FycmF5IGFkZHMga2V5cyB0byBhbGwgY2hpbGQgZWxlbWVudHMgYW5kIHdlIGRvIG5vdCB3YW50XG4gICAgICAvLyB0byB0cmlnZ2VyIGFuIHVubW91bnQvcmVtb3VudCBmb3IgdHdvIDxSb3V0ZT5zIHRoYXQgcmVuZGVyIHRoZSBzYW1lXG4gICAgICAvLyBjb21wb25lbnQgYXQgZGlmZmVyZW50IFVSTHMuXG5cbiAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goX3RoaXMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAobWF0Y2ggPT0gbnVsbCAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICBlbGVtZW50ID0gY2hpbGQ7XG4gICAgICAgICAgdmFyIHBhdGggPSBjaGlsZC5wcm9wcy5wYXRoIHx8IGNoaWxkLnByb3BzLmZyb207XG4gICAgICAgICAgbWF0Y2ggPSBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfZXh0ZW5kcyh7fSwgY2hpbGQucHJvcHMsIHtcbiAgICAgICAgICAgIHBhdGg6IHBhdGhcbiAgICAgICAgICB9KSkgOiBjb250ZXh0Lm1hdGNoO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtYXRjaCA/IFJlYWN0LmNsb25lRWxlbWVudChlbGVtZW50LCB7XG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgY29tcHV0ZWRNYXRjaDogbWF0Y2hcbiAgICAgIH0pIDogbnVsbDtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gU3dpdGNoO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIEEgcHVibGljIGhpZ2hlci1vcmRlciBjb21wb25lbnQgdG8gYWNjZXNzIHRoZSBpbXBlcmF0aXZlIEFQSVxuICovXG5cbmZ1bmN0aW9uIHdpdGhSb3V0ZXIoQ29tcG9uZW50KSB7XG4gIHZhciBkaXNwbGF5TmFtZSA9IFwid2l0aFJvdXRlcihcIiArIChDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUpICsgXCIpXCI7XG5cbiAgdmFyIEMgPSBmdW5jdGlvbiBDKHByb3BzKSB7XG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnRSZWYgPSBwcm9wcy53cmFwcGVkQ29tcG9uZW50UmVmLFxuICAgICAgICByZW1haW5pbmdQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBbXCJ3cmFwcGVkQ29tcG9uZW50UmVmXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFwiICsgZGlzcGxheU5hbWUgKyBcIiAvPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcmVtYWluaW5nUHJvcHMsIGNvbnRleHQsIHtcbiAgICAgICAgcmVmOiB3cmFwcGVkQ29tcG9uZW50UmVmXG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH07XG5cbiAgQy5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICBDLldyYXBwZWRDb21wb25lbnQgPSBDb21wb25lbnQ7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIEMucHJvcFR5cGVzID0ge1xuICAgICAgd3JhcHBlZENvbXBvbmVudFJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gaG9pc3RTdGF0aWNzKEMsIENvbXBvbmVudCk7XG59XG5cbnZhciB1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dDtcbmZ1bmN0aW9uIHVzZUhpc3RvcnkoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VIaXN0b3J5KClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHVzZUNvbnRleHQoaGlzdG9yeUNvbnRleHQpO1xufVxuZnVuY3Rpb24gdXNlTG9jYXRpb24oKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VMb2NhdGlvbigpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpLmxvY2F0aW9uO1xufVxuZnVuY3Rpb24gdXNlUGFyYW1zKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUGFyYW1zKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgdmFyIG1hdGNoID0gdXNlQ29udGV4dChjb250ZXh0KS5tYXRjaDtcbiAgcmV0dXJuIG1hdGNoID8gbWF0Y2gucGFyYW1zIDoge307XG59XG5mdW5jdGlvbiB1c2VSb3V0ZU1hdGNoKHBhdGgpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZVJvdXRlTWF0Y2goKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICB2YXIgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICB2YXIgbWF0Y2ggPSB1c2VDb250ZXh0KGNvbnRleHQpLm1hdGNoO1xuICByZXR1cm4gcGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgcGF0aCkgOiBtYXRjaDtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBnbG9iYWwgPSB3aW5kb3c7XG4gICAgdmFyIGtleSA9IFwiX19yZWFjdF9yb3V0ZXJfYnVpbGRfX1wiO1xuICAgIHZhciBidWlsZE5hbWVzID0ge1xuICAgICAgY2pzOiBcIkNvbW1vbkpTXCIsXG4gICAgICBlc206IFwiRVMgbW9kdWxlc1wiLFxuICAgICAgdW1kOiBcIlVNRFwiXG4gICAgfTtcblxuICAgIGlmIChnbG9iYWxba2V5XSAmJiBnbG9iYWxba2V5XSAhPT0gXCJlc21cIikge1xuICAgICAgdmFyIGluaXRpYWxCdWlsZE5hbWUgPSBidWlsZE5hbWVzW2dsb2JhbFtrZXldXTtcbiAgICAgIHZhciBzZWNvbmRhcnlCdWlsZE5hbWUgPSBidWlsZE5hbWVzW1wiZXNtXCJdOyAvLyBUT0RPOiBBZGQgbGluayB0byBhcnRpY2xlIHRoYXQgZXhwbGFpbnMgaW4gZGV0YWlsIGhvdyB0byBhdm9pZFxuICAgICAgLy8gbG9hZGluZyAyIGRpZmZlcmVudCBidWlsZHMuXG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBhcmUgbG9hZGluZyB0aGUgXCIgKyBzZWNvbmRhcnlCdWlsZE5hbWUgKyBcIiBidWlsZCBvZiBSZWFjdCBSb3V0ZXIgXCIgKyAoXCJvbiBhIHBhZ2UgdGhhdCBpcyBhbHJlYWR5IHJ1bm5pbmcgdGhlIFwiICsgaW5pdGlhbEJ1aWxkTmFtZSArIFwiIFwiKSArIFwiYnVpbGQsIHNvIHRoaW5ncyB3b24ndCB3b3JrIHJpZ2h0LlwiKTtcbiAgICB9XG5cbiAgICBnbG9iYWxba2V5XSA9IFwiZXNtXCI7XG4gIH1cbn1cblxuZXhwb3J0IHsgTWVtb3J5Um91dGVyLCBQcm9tcHQsIFJlZGlyZWN0LCBSb3V0ZSwgUm91dGVyLCBTdGF0aWNSb3V0ZXIsIFN3aXRjaCwgaGlzdG9yeUNvbnRleHQgYXMgX19IaXN0b3J5Q29udGV4dCwgY29udGV4dCBhcyBfX1JvdXRlckNvbnRleHQsIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiwgdXNlUGFyYW1zLCB1c2VSb3V0ZU1hdGNoLCB3aXRoUm91dGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yb3V0ZXIuanMubWFwXG4iLCJpbXBvcnQgeyBSb3V0ZXIsIF9fUm91dGVyQ29udGV4dCwgbWF0Y2hQYXRoIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmV4cG9ydCB7IE1lbW9yeVJvdXRlciwgUHJvbXB0LCBSZWRpcmVjdCwgUm91dGUsIFJvdXRlciwgU3RhdGljUm91dGVyLCBTd2l0Y2gsIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiwgdXNlUGFyYW1zLCB1c2VSb3V0ZU1hdGNoLCB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG5cbnZhciBCcm93c2VyUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnJvd3NlclJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyb3dzZXJSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgQnJvd3NlclJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGZvcmNlUmVmcmVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyXG4gIH07XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxCcm93c2VyUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyB3aW5kb3cubG9jYXRpb24uaGFzaC5cbiAqL1xuXG52YXIgSGFzaFJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShIYXNoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBIYXNoUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIYXNoSGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEhhc2hSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBIYXNoUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEhhc2hSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBoYXNoVHlwZTogUHJvcFR5cGVzLm9uZU9mKFtcImhhc2hiYW5nXCIsIFwibm9zbGFzaFwiLCBcInNsYXNoXCJdKVxuICB9O1xuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8SGFzaFJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxudmFyIHJlc29sdmVUb0xvY2F0aW9uID0gZnVuY3Rpb24gcmVzb2x2ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIHRvID09PSBcImZ1bmN0aW9uXCIgPyB0byhjdXJyZW50TG9jYXRpb24pIDogdG87XG59O1xudmFyIG5vcm1hbGl6ZVRvTG9jYXRpb24gPSBmdW5jdGlvbiBub3JtYWxpemVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGNyZWF0ZUxvY2F0aW9uKHRvLCBudWxsLCBudWxsLCBjdXJyZW50TG9jYXRpb24pIDogdG87XG59O1xuXG52YXIgZm9yd2FyZFJlZlNoaW0gPSBmdW5jdGlvbiBmb3J3YXJkUmVmU2hpbShDKSB7XG4gIHJldHVybiBDO1xufTtcblxudmFyIGZvcndhcmRSZWYgPSBSZWFjdC5mb3J3YXJkUmVmO1xuXG5pZiAodHlwZW9mIGZvcndhcmRSZWYgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgZm9yd2FyZFJlZiA9IGZvcndhcmRSZWZTaGltO1xufVxuXG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuXG52YXIgTGlua0FuY2hvciA9IGZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYsIGZvcndhcmRlZFJlZikge1xuICB2YXIgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgbmF2aWdhdGUgPSBfcmVmLm5hdmlnYXRlLFxuICAgICAgX29uQ2xpY2sgPSBfcmVmLm9uQ2xpY2ssXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiaW5uZXJSZWZcIiwgXCJuYXZpZ2F0ZVwiLCBcIm9uQ2xpY2tcIl0pO1xuXG4gIHZhciB0YXJnZXQgPSByZXN0LnRhcmdldDtcblxuICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZXZlbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChfb25DbGljaykgX29uQ2xpY2soZXZlbnQpO1xuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhyb3cgZXg7XG4gICAgICB9XG5cbiAgICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCAmJiAvLyBvbkNsaWNrIHByZXZlbnRlZCBkZWZhdWx0XG4gICAgICBldmVudC5idXR0b24gPT09IDAgJiYgKCAvLyBpZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgICAgICF0YXJnZXQgfHwgdGFyZ2V0ID09PSBcIl9zZWxmXCIpICYmIC8vIGxldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICAgICAhaXNNb2RpZmllZEV2ZW50KGV2ZW50KSAvLyBpZ25vcmUgY2xpY2tzIHdpdGggbW9kaWZpZXIga2V5c1xuICAgICAgKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBuYXZpZ2F0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICB9KTsgLy8gUmVhY3QgMTUgY29tcGF0XG5cblxuICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcbiAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gIH0gZWxzZSB7XG4gICAgcHJvcHMucmVmID0gaW5uZXJSZWY7XG4gIH1cbiAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L2FuY2hvci1oYXMtY29udGVudCAqL1xuXG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHByb3BzKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExpbmtBbmNob3IuZGlzcGxheU5hbWUgPSBcIkxpbmtBbmNob3JcIjtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5cblxudmFyIExpbmsgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmMiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBfcmVmMiRjb21wb25lbnQgPSBfcmVmMi5jb21wb25lbnQsXG4gICAgICBjb21wb25lbnQgPSBfcmVmMiRjb21wb25lbnQgPT09IHZvaWQgMCA/IExpbmtBbmNob3IgOiBfcmVmMiRjb21wb25lbnQsXG4gICAgICByZXBsYWNlID0gX3JlZjIucmVwbGFjZSxcbiAgICAgIHRvID0gX3JlZjIudG8sXG4gICAgICBpbm5lclJlZiA9IF9yZWYyLmlubmVyUmVmLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJjb21wb25lbnRcIiwgXCJyZXBsYWNlXCIsIFwidG9cIiwgXCJpbm5lclJlZlwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgaGlzdG9yeSA9IGNvbnRleHQuaGlzdG9yeTtcbiAgICB2YXIgbG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjb250ZXh0LmxvY2F0aW9uKSwgY29udGV4dC5sb2NhdGlvbik7XG4gICAgdmFyIGhyZWYgPSBsb2NhdGlvbiA/IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbikgOiBcIlwiO1xuXG4gICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhyZWY6IGhyZWYsXG4gICAgICBuYXZpZ2F0ZTogZnVuY3Rpb24gbmF2aWdhdGUoKSB7XG4gICAgICAgIHZhciBsb2NhdGlvbiA9IHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjb250ZXh0LmxvY2F0aW9uKTtcbiAgICAgICAgdmFyIG1ldGhvZCA9IHJlcGxhY2UgPyBoaXN0b3J5LnJlcGxhY2UgOiBoaXN0b3J5LnB1c2g7XG4gICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICB9XG4gICAgfSk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcbiAgICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHMuaW5uZXJSZWYgPSBpbm5lclJlZjtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKTtcbiAgfSk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgdG9UeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmZ1bmNdKTtcbiAgdmFyIHJlZlR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBjdXJyZW50OiBQcm9wVHlwZXMuYW55XG4gIH0pXSk7XG4gIExpbmsuZGlzcGxheU5hbWUgPSBcIkxpbmtcIjtcbiAgTGluay5wcm9wVHlwZXMgPSB7XG4gICAgaW5uZXJSZWY6IHJlZlR5cGUsXG4gICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgcmVwbGFjZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgdGFyZ2V0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvOiB0b1R5cGUuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgZm9yd2FyZFJlZlNoaW0kMSA9IGZ1bmN0aW9uIGZvcndhcmRSZWZTaGltKEMpIHtcbiAgcmV0dXJuIEM7XG59O1xuXG52YXIgZm9yd2FyZFJlZiQxID0gUmVhY3QuZm9yd2FyZFJlZjtcblxuaWYgKHR5cGVvZiBmb3J3YXJkUmVmJDEgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgZm9yd2FyZFJlZiQxID0gZm9yd2FyZFJlZlNoaW0kMTtcbn1cblxuZnVuY3Rpb24gam9pbkNsYXNzbmFtZXMoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBjbGFzc25hbWVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGNsYXNzbmFtZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gY2xhc3NuYW1lcy5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICByZXR1cm4gaTtcbiAgfSkuam9pbihcIiBcIik7XG59XG4vKipcbiAqIEEgPExpbms+IHdyYXBwZXIgdGhhdCBrbm93cyBpZiBpdCdzIFwiYWN0aXZlXCIgb3Igbm90LlxuICovXG5cblxudmFyIE5hdkxpbmsgPSBmb3J3YXJkUmVmJDEoZnVuY3Rpb24gKF9yZWYsIGZvcndhcmRlZFJlZikge1xuICB2YXIgX3JlZiRhcmlhQ3VycmVudCA9IF9yZWZbXCJhcmlhLWN1cnJlbnRcIl0sXG4gICAgICBhcmlhQ3VycmVudCA9IF9yZWYkYXJpYUN1cnJlbnQgPT09IHZvaWQgMCA/IFwicGFnZVwiIDogX3JlZiRhcmlhQ3VycmVudCxcbiAgICAgIF9yZWYkYWN0aXZlQ2xhc3NOYW1lID0gX3JlZi5hY3RpdmVDbGFzc05hbWUsXG4gICAgICBhY3RpdmVDbGFzc05hbWUgPSBfcmVmJGFjdGl2ZUNsYXNzTmFtZSA9PT0gdm9pZCAwID8gXCJhY3RpdmVcIiA6IF9yZWYkYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgYWN0aXZlU3R5bGUgPSBfcmVmLmFjdGl2ZVN0eWxlLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgZXhhY3QgPSBfcmVmLmV4YWN0LFxuICAgICAgaXNBY3RpdmVQcm9wID0gX3JlZi5pc0FjdGl2ZSxcbiAgICAgIGxvY2F0aW9uUHJvcCA9IF9yZWYubG9jYXRpb24sXG4gICAgICBzZW5zaXRpdmUgPSBfcmVmLnNlbnNpdGl2ZSxcbiAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgc3R5bGVQcm9wID0gX3JlZi5zdHlsZSxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIGlubmVyUmVmID0gX3JlZi5pbm5lclJlZixcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJhcmlhLWN1cnJlbnRcIiwgXCJhY3RpdmVDbGFzc05hbWVcIiwgXCJhY3RpdmVTdHlsZVwiLCBcImNsYXNzTmFtZVwiLCBcImV4YWN0XCIsIFwiaXNBY3RpdmVcIiwgXCJsb2NhdGlvblwiLCBcInNlbnNpdGl2ZVwiLCBcInN0cmljdFwiLCBcInN0eWxlXCIsIFwidG9cIiwgXCJpbm5lclJlZlwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TmF2TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgY3VycmVudExvY2F0aW9uID0gbG9jYXRpb25Qcm9wIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgdmFyIHRvTG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pLCBjdXJyZW50TG9jYXRpb24pO1xuICAgIHZhciBwYXRoID0gdG9Mb2NhdGlvbi5wYXRobmFtZTsgLy8gUmVnZXggdGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhwL2Jsb2IvbWFzdGVyL2luZGV4LmpzI0wyMDJcblxuICAgIHZhciBlc2NhcGVkUGF0aCA9IHBhdGggJiYgcGF0aC5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfC9cXFxcXSkvZywgXCJcXFxcJDFcIik7XG4gICAgdmFyIG1hdGNoID0gZXNjYXBlZFBhdGggPyBtYXRjaFBhdGgoY3VycmVudExvY2F0aW9uLnBhdGhuYW1lLCB7XG4gICAgICBwYXRoOiBlc2NhcGVkUGF0aCxcbiAgICAgIGV4YWN0OiBleGFjdCxcbiAgICAgIHNlbnNpdGl2ZTogc2Vuc2l0aXZlLFxuICAgICAgc3RyaWN0OiBzdHJpY3RcbiAgICB9KSA6IG51bGw7XG4gICAgdmFyIGlzQWN0aXZlID0gISEoaXNBY3RpdmVQcm9wID8gaXNBY3RpdmVQcm9wKG1hdGNoLCBjdXJyZW50TG9jYXRpb24pIDogbWF0Y2gpO1xuICAgIHZhciBjbGFzc05hbWUgPSBpc0FjdGl2ZSA/IGpvaW5DbGFzc25hbWVzKGNsYXNzTmFtZVByb3AsIGFjdGl2ZUNsYXNzTmFtZSkgOiBjbGFzc05hbWVQcm9wO1xuICAgIHZhciBzdHlsZSA9IGlzQWN0aXZlID8gX2V4dGVuZHMoe30sIHN0eWxlUHJvcCwge30sIGFjdGl2ZVN0eWxlKSA6IHN0eWxlUHJvcDtcblxuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHtcbiAgICAgIFwiYXJpYS1jdXJyZW50XCI6IGlzQWN0aXZlICYmIGFyaWFDdXJyZW50IHx8IG51bGwsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIHRvOiB0b0xvY2F0aW9uXG4gICAgfSwgcmVzdCk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgICBpZiAoZm9yd2FyZFJlZlNoaW0kMSAhPT0gZm9yd2FyZFJlZiQxKSB7XG4gICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgcHJvcHMpO1xuICB9KTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcbiAgdmFyIGFyaWFDdXJyZW50VHlwZSA9IFByb3BUeXBlcy5vbmVPZihbXCJwYWdlXCIsIFwic3RlcFwiLCBcImxvY2F0aW9uXCIsIFwiZGF0ZVwiLCBcInRpbWVcIiwgXCJ0cnVlXCJdKTtcbiAgTmF2TGluay5wcm9wVHlwZXMgPSBfZXh0ZW5kcyh7fSwgTGluay5wcm9wVHlwZXMsIHtcbiAgICBcImFyaWEtY3VycmVudFwiOiBhcmlhQ3VycmVudFR5cGUsXG4gICAgYWN0aXZlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNBY3RpdmU6IFByb3BUeXBlcy5mdW5jLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdFxuICB9KTtcbn1cblxuZXhwb3J0IHsgQnJvd3NlclJvdXRlciwgSGFzaFJvdXRlciwgTGluaywgTmF2TGluayB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3Qtcm91dGVyLWRvbS5qcy5tYXBcbiIsImV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHwgdmFsdWUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgdmFyIHByb3RvID0gdmFsdWU7XG5cbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKSA9PT0gcHJvdG87XG59KTsiLCJleHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG59KTsiLCJleHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn0pOyIsImV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpO1xufSk7IiwiZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbn0pOyIsImV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQ7XG59KTsiLCJleHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gKGFycmF5KSB7XG4gIHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSAxXTtcbn0pOyIsImltcG9ydCBjYW1lbENhc2UgZnJvbSAndG8tY2FtZWwtY2FzZSc7XG52YXIgbmFtZXNwYWNlciA9ICcvJztcbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAodHlwZSkge1xuICByZXR1cm4gdHlwZS5pbmRleE9mKG5hbWVzcGFjZXIpID09PSAtMSA/IGNhbWVsQ2FzZSh0eXBlKSA6IHR5cGUuc3BsaXQobmFtZXNwYWNlcikubWFwKGNhbWVsQ2FzZSkuam9pbihuYW1lc3BhY2VyKTtcbn0pOyIsImV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAoYXJyYXksIGNhbGxiYWNrKSB7XG4gIHJldHVybiBhcnJheS5yZWR1Y2UoZnVuY3Rpb24gKHBhcnRpYWxPYmplY3QsIGVsZW1lbnQpIHtcbiAgICByZXR1cm4gY2FsbGJhY2socGFydGlhbE9iamVjdCwgZWxlbWVudCk7XG4gIH0sIHt9KTtcbn0pOyIsImV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiBNYXAgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlIGluc3RhbmNlb2YgTWFwO1xufSk7IiwiaW1wb3J0IGlzTWFwIGZyb20gJy4vaXNNYXAnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3duS2V5cyhvYmplY3QpIHtcbiAgaWYgKGlzTWFwKG9iamVjdCkpIHtcbiAgICAvLyBXZSBhcmUgdXNpbmcgbG9vc2UgdHJhbnNmb3JtcyBpbiBiYWJlbC4gSGVyZSB3ZSBhcmUgdHJ5aW5nIHRvIGNvbnZlcnQgYW5cbiAgICAvLyBpbnRlcmFibGUgdG8gYW4gYXJyYXkuIExvb3NlIG1vZGUgZXhwZWN0cyBldmVyeXRoaW5nIHRvIGFscmVhZHkgYmUgYW5cbiAgICAvLyBhcnJheS4gVGhlIHByb2JsZW0gaXMgdGhhdCBvdXIgZXNsaW50IHJ1bGVzIGVuY291cmFnZSB1cyB0byBwcmVmZXJcbiAgICAvLyBzcHJlYWQgb3ZlciBBcnJheS5mcm9tLlxuICAgIC8vXG4gICAgLy8gSW5zdGVhZCBvZiBkaXNhYmxpbmcgbG9vc2UgbW9kZSB3ZSBzaW1wbHkgZGlzYWJsZSB0aGUgd2FybmluZy5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9wcmVmZXItc3ByZWFkXG4gICAgcmV0dXJuIEFycmF5LmZyb20ob2JqZWN0LmtleXMoKSk7XG4gIH1cblxuICBpZiAodHlwZW9mIFJlZmxlY3QgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBSZWZsZWN0Lm93bktleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gUmVmbGVjdC5vd25LZXlzKG9iamVjdCk7XG4gIH1cblxuICB2YXIga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iamVjdCk7XG5cbiAgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7XG4gICAga2V5cyA9IGtleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KSk7XG4gIH1cblxuICByZXR1cm4ga2V5cztcbn0iLCJpbXBvcnQgaXNNYXAgZnJvbSAnLi9pc01hcCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXQoa2V5LCB4KSB7XG4gIHJldHVybiBpc01hcCh4KSA/IHguZ2V0KGtleSkgOiB4W2tleV07XG59IiwiaW1wb3J0IHsgREVGQVVMVF9OQU1FU1BBQ0UsIEFDVElPTl9UWVBFX0RFTElNSVRFUiB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgb3duS2V5cyBmcm9tICcuL293bktleXMnO1xuaW1wb3J0IGdldCBmcm9tICcuL2dldCc7XG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gKHByZWRpY2F0ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gZmxhdHRlbihtYXAsIF90ZW1wLCBwYXJ0aWFsRmxhdE1hcCwgcGFydGlhbEZsYXRBY3Rpb25UeXBlKSB7XG4gICAgdmFyIF9yZWYgPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCxcbiAgICAgICAgX3JlZiRuYW1lc3BhY2UgPSBfcmVmLm5hbWVzcGFjZSxcbiAgICAgICAgbmFtZXNwYWNlID0gX3JlZiRuYW1lc3BhY2UgPT09IHZvaWQgMCA/IERFRkFVTFRfTkFNRVNQQUNFIDogX3JlZiRuYW1lc3BhY2UsXG4gICAgICAgIHByZWZpeCA9IF9yZWYucHJlZml4O1xuXG4gICAgaWYgKHBhcnRpYWxGbGF0TWFwID09PSB2b2lkIDApIHtcbiAgICAgIHBhcnRpYWxGbGF0TWFwID0ge307XG4gICAgfVxuXG4gICAgaWYgKHBhcnRpYWxGbGF0QWN0aW9uVHlwZSA9PT0gdm9pZCAwKSB7XG4gICAgICBwYXJ0aWFsRmxhdEFjdGlvblR5cGUgPSAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25uZWN0TmFtZXNwYWNlKHR5cGUpIHtcbiAgICAgIHZhciBfcmVmMjtcblxuICAgICAgaWYgKCFwYXJ0aWFsRmxhdEFjdGlvblR5cGUpIHJldHVybiB0eXBlO1xuICAgICAgdmFyIHR5cGVzID0gdHlwZS50b1N0cmluZygpLnNwbGl0KEFDVElPTl9UWVBFX0RFTElNSVRFUik7XG4gICAgICB2YXIgcGFydGlhbHMgPSBwYXJ0aWFsRmxhdEFjdGlvblR5cGUuc3BsaXQoQUNUSU9OX1RZUEVfREVMSU1JVEVSKTtcbiAgICAgIHJldHVybiAoX3JlZjIgPSBbXSkuY29uY2F0LmFwcGx5KF9yZWYyLCBwYXJ0aWFscy5tYXAoZnVuY3Rpb24gKHApIHtcbiAgICAgICAgcmV0dXJuIHR5cGVzLm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiBcIlwiICsgcCArIG5hbWVzcGFjZSArIHQ7XG4gICAgICAgIH0pO1xuICAgICAgfSkpLmpvaW4oQUNUSU9OX1RZUEVfREVMSU1JVEVSKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25uZWN0UHJlZml4KHR5cGUpIHtcbiAgICAgIGlmIChwYXJ0aWFsRmxhdEFjdGlvblR5cGUgfHwgIXByZWZpeCB8fCBwcmVmaXggJiYgbmV3IFJlZ0V4cChcIl5cIiArIHByZWZpeCArIG5hbWVzcGFjZSkudGVzdCh0eXBlKSkge1xuICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFwiXCIgKyBwcmVmaXggKyBuYW1lc3BhY2UgKyB0eXBlO1xuICAgIH1cblxuICAgIG93bktleXMobWFwKS5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICB2YXIgbmV4dE5hbWVzcGFjZSA9IGNvbm5lY3RQcmVmaXgoY29ubmVjdE5hbWVzcGFjZSh0eXBlKSk7XG4gICAgICB2YXIgbWFwVmFsdWUgPSBnZXQodHlwZSwgbWFwKTtcblxuICAgICAgaWYgKHByZWRpY2F0ZShtYXBWYWx1ZSkpIHtcbiAgICAgICAgZmxhdHRlbihtYXBWYWx1ZSwge1xuICAgICAgICAgIG5hbWVzcGFjZTogbmFtZXNwYWNlLFxuICAgICAgICAgIHByZWZpeDogcHJlZml4XG4gICAgICAgIH0sIHBhcnRpYWxGbGF0TWFwLCBuZXh0TmFtZXNwYWNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnRpYWxGbGF0TWFwW25leHROYW1lc3BhY2VdID0gbWFwVmFsdWU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHBhcnRpYWxGbGF0TWFwO1xuICB9O1xufSk7IiwiZXhwb3J0IHZhciBERUZBVUxUX05BTUVTUEFDRSA9ICcvJztcbmV4cG9ydCB2YXIgQUNUSU9OX1RZUEVfREVMSU1JVEVSID0gJ3x8JzsiLCJpbXBvcnQgaXNQbGFpbk9iamVjdCBmcm9tICcuL2lzUGxhaW5PYmplY3QnO1xuaW1wb3J0IGZsYXR0ZW5XaGVuTm9kZSBmcm9tICcuL2ZsYXR0ZW5XaGVuTm9kZSc7XG5leHBvcnQgZGVmYXVsdCBmbGF0dGVuV2hlbk5vZGUoaXNQbGFpbk9iamVjdCk7IiwiaW1wb3J0IHsgREVGQVVMVF9OQU1FU1BBQ0UgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IGlzRW1wdHkgZnJvbSAnLi9pc0VtcHR5JztcbmltcG9ydCBjYW1lbENhc2UgZnJvbSAnLi9jYW1lbENhc2UnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdW5mbGF0dGVuQWN0aW9uQ3JlYXRvcnMoZmxhdEFjdGlvbkNyZWF0b3JzLCBfdGVtcCkge1xuICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgX3JlZiRuYW1lc3BhY2UgPSBfcmVmLm5hbWVzcGFjZSxcbiAgICAgIG5hbWVzcGFjZSA9IF9yZWYkbmFtZXNwYWNlID09PSB2b2lkIDAgPyBERUZBVUxUX05BTUVTUEFDRSA6IF9yZWYkbmFtZXNwYWNlLFxuICAgICAgcHJlZml4ID0gX3JlZi5wcmVmaXg7XG5cbiAgZnVuY3Rpb24gdW5mbGF0dGVuKGZsYXRBY3Rpb25UeXBlLCBwYXJ0aWFsTmVzdGVkQWN0aW9uQ3JlYXRvcnMsIHBhcnRpYWxGbGF0QWN0aW9uVHlwZVBhdGgpIHtcbiAgICB2YXIgbmV4dE5hbWVzcGFjZSA9IGNhbWVsQ2FzZShwYXJ0aWFsRmxhdEFjdGlvblR5cGVQYXRoLnNoaWZ0KCkpO1xuXG4gICAgaWYgKGlzRW1wdHkocGFydGlhbEZsYXRBY3Rpb25UeXBlUGF0aCkpIHtcbiAgICAgIHBhcnRpYWxOZXN0ZWRBY3Rpb25DcmVhdG9yc1tuZXh0TmFtZXNwYWNlXSA9IGZsYXRBY3Rpb25DcmVhdG9yc1tmbGF0QWN0aW9uVHlwZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghcGFydGlhbE5lc3RlZEFjdGlvbkNyZWF0b3JzW25leHROYW1lc3BhY2VdKSB7XG4gICAgICAgIHBhcnRpYWxOZXN0ZWRBY3Rpb25DcmVhdG9yc1tuZXh0TmFtZXNwYWNlXSA9IHt9O1xuICAgICAgfVxuXG4gICAgICB1bmZsYXR0ZW4oZmxhdEFjdGlvblR5cGUsIHBhcnRpYWxOZXN0ZWRBY3Rpb25DcmVhdG9yc1tuZXh0TmFtZXNwYWNlXSwgcGFydGlhbEZsYXRBY3Rpb25UeXBlUGF0aCk7XG4gICAgfVxuICB9XG5cbiAgdmFyIG5lc3RlZEFjdGlvbkNyZWF0b3JzID0ge307XG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGZsYXRBY3Rpb25DcmVhdG9ycykuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIHZhciB1bnByZWZpeGVkVHlwZSA9IHByZWZpeCA/IHR5cGUucmVwbGFjZShcIlwiICsgcHJlZml4ICsgbmFtZXNwYWNlLCAnJykgOiB0eXBlO1xuICAgIHJldHVybiB1bmZsYXR0ZW4odHlwZSwgbmVzdGVkQWN0aW9uQ3JlYXRvcnMsIHVucHJlZml4ZWRUeXBlLnNwbGl0KG5hbWVzcGFjZSkpO1xuICB9KTtcbiAgcmV0dXJuIG5lc3RlZEFjdGlvbkNyZWF0b3JzO1xufSIsImV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlLmxlbmd0aCA9PT0gMDtcbn0pOyIsImV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBudWxsO1xufSk7IiwiaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi91dGlscy9pc0Z1bmN0aW9uJztcbmltcG9ydCBpZGVudGl0eSBmcm9tICcuL3V0aWxzL2lkZW50aXR5JztcbmltcG9ydCBpc051bGwgZnJvbSAnLi91dGlscy9pc051bGwnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQWN0aW9uKHR5cGUsIHBheWxvYWRDcmVhdG9yLCBtZXRhQ3JlYXRvcikge1xuICBpZiAocGF5bG9hZENyZWF0b3IgPT09IHZvaWQgMCkge1xuICAgIHBheWxvYWRDcmVhdG9yID0gaWRlbnRpdHk7XG4gIH1cblxuICBpbnZhcmlhbnQoaXNGdW5jdGlvbihwYXlsb2FkQ3JlYXRvcikgfHwgaXNOdWxsKHBheWxvYWRDcmVhdG9yKSwgJ0V4cGVjdGVkIHBheWxvYWRDcmVhdG9yIHRvIGJlIGEgZnVuY3Rpb24sIHVuZGVmaW5lZCBvciBudWxsJyk7XG4gIHZhciBmaW5hbFBheWxvYWRDcmVhdG9yID0gaXNOdWxsKHBheWxvYWRDcmVhdG9yKSB8fCBwYXlsb2FkQ3JlYXRvciA9PT0gaWRlbnRpdHkgPyBpZGVudGl0eSA6IGZ1bmN0aW9uIChoZWFkKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGhlYWQgaW5zdGFuY2VvZiBFcnJvciA/IGhlYWQgOiBwYXlsb2FkQ3JlYXRvci5hcHBseSh2b2lkIDAsIFtoZWFkXS5jb25jYXQoYXJncykpO1xuICB9O1xuICB2YXIgaGFzTWV0YSA9IGlzRnVuY3Rpb24obWV0YUNyZWF0b3IpO1xuICB2YXIgdHlwZVN0cmluZyA9IHR5cGUudG9TdHJpbmcoKTtcblxuICB2YXIgYWN0aW9uQ3JlYXRvciA9IGZ1bmN0aW9uIGFjdGlvbkNyZWF0b3IoKSB7XG4gICAgdmFyIHBheWxvYWQgPSBmaW5hbFBheWxvYWRDcmVhdG9yLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICB2YXIgYWN0aW9uID0ge1xuICAgICAgdHlwZTogdHlwZVxuICAgIH07XG5cbiAgICBpZiAocGF5bG9hZCBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICBhY3Rpb24uZXJyb3IgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChwYXlsb2FkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGFjdGlvbi5wYXlsb2FkID0gcGF5bG9hZDtcbiAgICB9XG5cbiAgICBpZiAoaGFzTWV0YSkge1xuICAgICAgYWN0aW9uLm1ldGEgPSBtZXRhQ3JlYXRvci5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfTtcblxuICBhY3Rpb25DcmVhdG9yLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0eXBlU3RyaW5nO1xuICB9O1xuXG4gIHJldHVybiBhY3Rpb25DcmVhdG9yO1xufSIsImZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyB2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykgeyBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlOyB9KSk7IH0gb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IGlzUGxhaW5PYmplY3QgZnJvbSAnLi91dGlscy9pc1BsYWluT2JqZWN0JztcbmltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vdXRpbHMvaXNGdW5jdGlvbic7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSAnLi91dGlscy9pZGVudGl0eSc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL3V0aWxzL2lzQXJyYXknO1xuaW1wb3J0IGlzU3RyaW5nIGZyb20gJy4vdXRpbHMvaXNTdHJpbmcnO1xuaW1wb3J0IGlzTmlsIGZyb20gJy4vdXRpbHMvaXNOaWwnO1xuaW1wb3J0IGdldExhc3RFbGVtZW50IGZyb20gJy4vdXRpbHMvZ2V0TGFzdEVsZW1lbnQnO1xuaW1wb3J0IGNhbWVsQ2FzZSBmcm9tICcuL3V0aWxzL2NhbWVsQ2FzZSc7XG5pbXBvcnQgYXJyYXlUb09iamVjdCBmcm9tICcuL3V0aWxzL2FycmF5VG9PYmplY3QnO1xuaW1wb3J0IGZsYXR0ZW5BY3Rpb25NYXAgZnJvbSAnLi91dGlscy9mbGF0dGVuQWN0aW9uTWFwJztcbmltcG9ydCB1bmZsYXR0ZW5BY3Rpb25DcmVhdG9ycyBmcm9tICcuL3V0aWxzL3VuZmxhdHRlbkFjdGlvbkNyZWF0b3JzJztcbmltcG9ydCBjcmVhdGVBY3Rpb24gZnJvbSAnLi9jcmVhdGVBY3Rpb24nO1xuaW1wb3J0IHsgREVGQVVMVF9OQU1FU1BBQ0UgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVBY3Rpb25zKGFjdGlvbk1hcCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgaWRlbnRpdHlBY3Rpb25zID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBpZGVudGl0eUFjdGlvbnNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIG9wdGlvbnMgPSBpc1BsYWluT2JqZWN0KGdldExhc3RFbGVtZW50KGlkZW50aXR5QWN0aW9ucykpID8gaWRlbnRpdHlBY3Rpb25zLnBvcCgpIDoge307XG4gIGludmFyaWFudChpZGVudGl0eUFjdGlvbnMuZXZlcnkoaXNTdHJpbmcpICYmIChpc1N0cmluZyhhY3Rpb25NYXApIHx8IGlzUGxhaW5PYmplY3QoYWN0aW9uTWFwKSksICdFeHBlY3RlZCBvcHRpb25hbCBvYmplY3QgZm9sbG93ZWQgYnkgc3RyaW5nIGFjdGlvbiB0eXBlcycpO1xuXG4gIGlmIChpc1N0cmluZyhhY3Rpb25NYXApKSB7XG4gICAgcmV0dXJuIGFjdGlvbkNyZWF0b3JzRnJvbUlkZW50aXR5QWN0aW9ucyhbYWN0aW9uTWFwXS5jb25jYXQoaWRlbnRpdHlBY3Rpb25zKSwgb3B0aW9ucyk7XG4gIH1cblxuICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgYWN0aW9uQ3JlYXRvcnNGcm9tQWN0aW9uTWFwKGFjdGlvbk1hcCwgb3B0aW9ucyksIGFjdGlvbkNyZWF0b3JzRnJvbUlkZW50aXR5QWN0aW9ucyhpZGVudGl0eUFjdGlvbnMsIG9wdGlvbnMpKTtcbn1cblxuZnVuY3Rpb24gYWN0aW9uQ3JlYXRvcnNGcm9tQWN0aW9uTWFwKGFjdGlvbk1hcCwgb3B0aW9ucykge1xuICB2YXIgZmxhdEFjdGlvbk1hcCA9IGZsYXR0ZW5BY3Rpb25NYXAoYWN0aW9uTWFwLCBvcHRpb25zKTtcbiAgdmFyIGZsYXRBY3Rpb25DcmVhdG9ycyA9IGFjdGlvbk1hcFRvQWN0aW9uQ3JlYXRvcnMoZmxhdEFjdGlvbk1hcCk7XG4gIHJldHVybiB1bmZsYXR0ZW5BY3Rpb25DcmVhdG9ycyhmbGF0QWN0aW9uQ3JlYXRvcnMsIG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBhY3Rpb25NYXBUb0FjdGlvbkNyZWF0b3JzKGFjdGlvbk1hcCwgX3RlbXApIHtcbiAgdmFyIF9yZWYgPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCxcbiAgICAgIHByZWZpeCA9IF9yZWYucHJlZml4LFxuICAgICAgX3JlZiRuYW1lc3BhY2UgPSBfcmVmLm5hbWVzcGFjZSxcbiAgICAgIG5hbWVzcGFjZSA9IF9yZWYkbmFtZXNwYWNlID09PSB2b2lkIDAgPyBERUZBVUxUX05BTUVTUEFDRSA6IF9yZWYkbmFtZXNwYWNlO1xuXG4gIGZ1bmN0aW9uIGlzVmFsaWRBY3Rpb25NYXBWYWx1ZShhY3Rpb25NYXBWYWx1ZSkge1xuICAgIGlmIChpc0Z1bmN0aW9uKGFjdGlvbk1hcFZhbHVlKSB8fCBpc05pbChhY3Rpb25NYXBWYWx1ZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChpc0FycmF5KGFjdGlvbk1hcFZhbHVlKSkge1xuICAgICAgdmFyIF9hY3Rpb25NYXBWYWx1ZSQgPSBhY3Rpb25NYXBWYWx1ZVswXSxcbiAgICAgICAgICBwYXlsb2FkID0gX2FjdGlvbk1hcFZhbHVlJCA9PT0gdm9pZCAwID8gaWRlbnRpdHkgOiBfYWN0aW9uTWFwVmFsdWUkLFxuICAgICAgICAgIG1ldGEgPSBhY3Rpb25NYXBWYWx1ZVsxXTtcbiAgICAgIHJldHVybiBpc0Z1bmN0aW9uKHBheWxvYWQpICYmIGlzRnVuY3Rpb24obWV0YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGFycmF5VG9PYmplY3QoT2JqZWN0LmtleXMoYWN0aW9uTWFwKSwgZnVuY3Rpb24gKHBhcnRpYWxBY3Rpb25DcmVhdG9ycywgdHlwZSkge1xuICAgIHZhciBfb2JqZWN0U3ByZWFkMjtcblxuICAgIHZhciBhY3Rpb25NYXBWYWx1ZSA9IGFjdGlvbk1hcFt0eXBlXTtcbiAgICBpbnZhcmlhbnQoaXNWYWxpZEFjdGlvbk1hcFZhbHVlKGFjdGlvbk1hcFZhbHVlKSwgJ0V4cGVjdGVkIGZ1bmN0aW9uLCB1bmRlZmluZWQsIG51bGwsIG9yIGFycmF5IHdpdGggcGF5bG9hZCBhbmQgbWV0YSAnICsgKFwiZnVuY3Rpb25zIGZvciBcIiArIHR5cGUpKTtcbiAgICB2YXIgcHJlZml4ZWRUeXBlID0gcHJlZml4ID8gXCJcIiArIHByZWZpeCArIG5hbWVzcGFjZSArIHR5cGUgOiB0eXBlO1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gaXNBcnJheShhY3Rpb25NYXBWYWx1ZSkgPyBjcmVhdGVBY3Rpb24uYXBwbHkodm9pZCAwLCBbcHJlZml4ZWRUeXBlXS5jb25jYXQoYWN0aW9uTWFwVmFsdWUpKSA6IGNyZWF0ZUFjdGlvbihwcmVmaXhlZFR5cGUsIGFjdGlvbk1hcFZhbHVlKTtcbiAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgcGFydGlhbEFjdGlvbkNyZWF0b3JzLCAoX29iamVjdFNwcmVhZDIgPSB7fSwgX29iamVjdFNwcmVhZDJbdHlwZV0gPSBhY3Rpb25DcmVhdG9yLCBfb2JqZWN0U3ByZWFkMikpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYWN0aW9uQ3JlYXRvcnNGcm9tSWRlbnRpdHlBY3Rpb25zKGlkZW50aXR5QWN0aW9ucywgb3B0aW9ucykge1xuICB2YXIgYWN0aW9uTWFwID0gYXJyYXlUb09iamVjdChpZGVudGl0eUFjdGlvbnMsIGZ1bmN0aW9uIChwYXJ0aWFsQWN0aW9uTWFwLCB0eXBlKSB7XG4gICAgdmFyIF9vYmplY3RTcHJlYWQzO1xuXG4gICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHBhcnRpYWxBY3Rpb25NYXAsIChfb2JqZWN0U3ByZWFkMyA9IHt9LCBfb2JqZWN0U3ByZWFkM1t0eXBlXSA9IGlkZW50aXR5LCBfb2JqZWN0U3ByZWFkMykpO1xuICB9KTtcbiAgdmFyIGFjdGlvbkNyZWF0b3JzID0gYWN0aW9uTWFwVG9BY3Rpb25DcmVhdG9ycyhhY3Rpb25NYXAsIG9wdGlvbnMpO1xuICByZXR1cm4gYXJyYXlUb09iamVjdChPYmplY3Qua2V5cyhhY3Rpb25DcmVhdG9ycyksIGZ1bmN0aW9uIChwYXJ0aWFsQWN0aW9uQ3JlYXRvcnMsIHR5cGUpIHtcbiAgICB2YXIgX29iamVjdFNwcmVhZDQ7XG5cbiAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgcGFydGlhbEFjdGlvbkNyZWF0b3JzLCAoX29iamVjdFNwcmVhZDQgPSB7fSwgX29iamVjdFNwcmVhZDRbY2FtZWxDYXNlKHR5cGUpXSA9IGFjdGlvbkNyZWF0b3JzW3R5cGVdLCBfb2JqZWN0U3ByZWFkNCkpO1xuICB9KTtcbn0iLCJpbXBvcnQge2NyZWF0ZUFjdGlvbnN9IGZyb20gJ3JlZHV4LWFjdGlvbnMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IHtsb2FkRGF0YSwgc2V0SXNPcGVuLCBzZXROYXZJc0hpZGRlbn0gPSBjcmVhdGVBY3Rpb25zKHtcclxuICAgIExPQURfREFUQTogKCkgPT4gKHt9KSxcclxuICAgIFNFVF9JU19PUEVOOiAoaXNPcGVuVmFsKSA9Pih7aXNPcGVuVmFsfSksXHJcbiAgICBTRVRfTkFWX0lTX0hJRERFTjogKG5hdklzSGlkZGVuVmFsKSA9Pih7bmF2SXNIaWRkZW5WYWx9KVxyXG59KTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IHZhciBSZWFjdFJlZHV4Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBSZWFjdFJlZHV4Q29udGV4dC5kaXNwbGF5TmFtZSA9ICdSZWFjdFJlZHV4Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVhY3RSZWR1eENvbnRleHQ7IiwiLy8gRGVmYXVsdCB0byBhIGR1bW15IFwiYmF0Y2hcIiBpbXBsZW1lbnRhdGlvbiB0aGF0IGp1c3QgcnVucyB0aGUgY2FsbGJhY2tcbmZ1bmN0aW9uIGRlZmF1bHROb29wQmF0Y2goY2FsbGJhY2spIHtcbiAgY2FsbGJhY2soKTtcbn1cblxudmFyIGJhdGNoID0gZGVmYXVsdE5vb3BCYXRjaDsgLy8gQWxsb3cgaW5qZWN0aW5nIGFub3RoZXIgYmF0Y2hpbmcgZnVuY3Rpb24gbGF0ZXJcblxuZXhwb3J0IHZhciBzZXRCYXRjaCA9IGZ1bmN0aW9uIHNldEJhdGNoKG5ld0JhdGNoKSB7XG4gIHJldHVybiBiYXRjaCA9IG5ld0JhdGNoO1xufTsgLy8gU3VwcGx5IGEgZ2V0dGVyIGp1c3QgdG8gc2tpcCBkZWFsaW5nIHdpdGggRVNNIGJpbmRpbmdzXG5cbmV4cG9ydCB2YXIgZ2V0QmF0Y2ggPSBmdW5jdGlvbiBnZXRCYXRjaCgpIHtcbiAgcmV0dXJuIGJhdGNoO1xufTsiLCJpbXBvcnQgeyBnZXRCYXRjaCB9IGZyb20gJy4vYmF0Y2gnOyAvLyBlbmNhcHN1bGF0ZXMgdGhlIHN1YnNjcmlwdGlvbiBsb2dpYyBmb3IgY29ubmVjdGluZyBhIGNvbXBvbmVudCB0byB0aGUgcmVkdXggc3RvcmUsIGFzXG4vLyB3ZWxsIGFzIG5lc3Rpbmcgc3Vic2NyaXB0aW9ucyBvZiBkZXNjZW5kYW50IGNvbXBvbmVudHMsIHNvIHRoYXQgd2UgY2FuIGVuc3VyZSB0aGVcbi8vIGFuY2VzdG9yIGNvbXBvbmVudHMgcmUtcmVuZGVyIGJlZm9yZSBkZXNjZW5kYW50c1xuXG52YXIgbnVsbExpc3RlbmVycyA9IHtcbiAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7fVxufTtcblxuZnVuY3Rpb24gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCkge1xuICB2YXIgYmF0Y2ggPSBnZXRCYXRjaCgpO1xuICB2YXIgZmlyc3QgPSBudWxsO1xuICB2YXIgbGFzdCA9IG51bGw7XG4gIHJldHVybiB7XG4gICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgZmlyc3QgPSBudWxsO1xuICAgICAgbGFzdCA9IG51bGw7XG4gICAgfSxcbiAgICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICAgIGJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVyID0gZmlyc3Q7XG5cbiAgICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgICAgbGlzdGVuZXIuY2FsbGJhY2soKTtcbiAgICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gW107XG4gICAgICB2YXIgbGlzdGVuZXIgPSBmaXJzdDtcblxuICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGlzdGVuZXJzO1xuICAgIH0sXG4gICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgdmFyIGxpc3RlbmVyID0gbGFzdCA9IHtcbiAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgICBuZXh0OiBudWxsLFxuICAgICAgICBwcmV2OiBsYXN0XG4gICAgICB9O1xuXG4gICAgICBpZiAobGlzdGVuZXIucHJldikge1xuICAgICAgICBsaXN0ZW5lci5wcmV2Lm5leHQgPSBsaXN0ZW5lcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpcnN0ID0gbGlzdGVuZXI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKCFpc1N1YnNjcmliZWQgfHwgZmlyc3QgPT09IG51bGwpIHJldHVybjtcbiAgICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGxpc3RlbmVyLm5leHQpIHtcbiAgICAgICAgICBsaXN0ZW5lci5uZXh0LnByZXYgPSBsaXN0ZW5lci5wcmV2O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxhc3QgPSBsaXN0ZW5lci5wcmV2O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpc3RlbmVyLnByZXYpIHtcbiAgICAgICAgICBsaXN0ZW5lci5wcmV2Lm5leHQgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZpcnN0ID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBTdWJzY3JpcHRpb24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oc3RvcmUsIHBhcmVudFN1Yikge1xuICAgIHRoaXMuc3RvcmUgPSBzdG9yZTtcbiAgICB0aGlzLnBhcmVudFN1YiA9IHBhcmVudFN1YjtcbiAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgdGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyID0gdGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyLmJpbmQodGhpcyk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3Vic2NyaXB0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYWRkTmVzdGVkU3ViID0gZnVuY3Rpb24gYWRkTmVzdGVkU3ViKGxpc3RlbmVyKSB7XG4gICAgdGhpcy50cnlTdWJzY3JpYmUoKTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lcnMuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgfTtcblxuICBfcHJvdG8ubm90aWZ5TmVzdGVkU3VicyA9IGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnMoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMubm90aWZ5KCk7XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZUNoYW5nZVdyYXBwZXIgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2VXcmFwcGVyKCkge1xuICAgIGlmICh0aGlzLm9uU3RhdGVDaGFuZ2UpIHtcbiAgICAgIHRoaXMub25TdGF0ZUNoYW5nZSgpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uaXNTdWJzY3JpYmVkID0gZnVuY3Rpb24gaXNTdWJzY3JpYmVkKCkge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMudW5zdWJzY3JpYmUpO1xuICB9O1xuXG4gIF9wcm90by50cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlTdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gdGhpcy5wYXJlbnRTdWIgPyB0aGlzLnBhcmVudFN1Yi5hZGROZXN0ZWRTdWIodGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyKSA6IHRoaXMuc3RvcmUuc3Vic2NyaWJlKHRoaXMuaGFuZGxlQ2hhbmdlV3JhcHBlcik7XG4gICAgICB0aGlzLmxpc3RlbmVycyA9IGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8udHJ5VW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlVbnN1YnNjcmliZSgpIHtcbiAgICBpZiAodGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgICB0aGlzLmxpc3RlbmVycy5jbGVhcigpO1xuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSgpO1xuXG5leHBvcnQgeyBTdWJzY3JpcHRpb24gYXMgZGVmYXVsdCB9OyIsImltcG9ydCBSZWFjdCwgeyB1c2VNZW1vLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL0NvbnRleHQnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuXG5mdW5jdGlvbiBQcm92aWRlcihfcmVmKSB7XG4gIHZhciBzdG9yZSA9IF9yZWYuc3RvcmUsXG4gICAgICBjb250ZXh0ID0gX3JlZi5jb250ZXh0LFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuO1xuICB2YXIgY29udGV4dFZhbHVlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oc3RvcmUpO1xuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnM7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0b3JlOiBzdG9yZSxcbiAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgfTtcbiAgfSwgW3N0b3JlXSk7XG4gIHZhciBwcmV2aW91c1N0YXRlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHN0b3JlLmdldFN0YXRlKCk7XG4gIH0sIFtzdG9yZV0pO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBjb250ZXh0VmFsdWUuc3Vic2NyaXB0aW9uO1xuICAgIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcblxuICAgIGlmIChwcmV2aW91c1N0YXRlICE9PSBzdG9yZS5nZXRTdGF0ZSgpKSB7XG4gICAgICBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicygpO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gbnVsbDtcbiAgICB9O1xuICB9LCBbY29udGV4dFZhbHVlLCBwcmV2aW91c1N0YXRlXSk7XG4gIHZhciBDb250ZXh0ID0gY29udGV4dCB8fCBSZWFjdFJlZHV4Q29udGV4dDtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29udGV4dFZhbHVlXG4gIH0sIGNoaWxkcmVuKTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICAgIHN0b3JlOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgc3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBnZXRTdGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLFxuICAgIGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnlcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJvdmlkZXI7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZUxheW91dEVmZmVjdCB9IGZyb20gJ3JlYWN0JzsgLy8gUmVhY3QgY3VycmVudGx5IHRocm93cyBhIHdhcm5pbmcgd2hlbiB1c2luZyB1c2VMYXlvdXRFZmZlY3Qgb24gdGhlIHNlcnZlci5cbi8vIFRvIGdldCBhcm91bmQgaXQsIHdlIGNhbiBjb25kaXRpb25hbGx5IHVzZUVmZmVjdCBvbiB0aGUgc2VydmVyIChuby1vcCkgYW5kXG4vLyB1c2VMYXlvdXRFZmZlY3QgaW4gdGhlIGJyb3dzZXIuIFdlIG5lZWQgdXNlTGF5b3V0RWZmZWN0IHRvIGVuc3VyZSB0aGUgc3RvcmVcbi8vIHN1YnNjcmlwdGlvbiBjYWxsYmFjayBhbHdheXMgaGFzIHRoZSBzZWxlY3RvciBmcm9tIHRoZSBsYXRlc3QgcmVuZGVyIGNvbW1pdFxuLy8gYXZhaWxhYmxlLCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IGhhcHBlbiBiZXR3ZWVuIHJlbmRlciBhbmQgdGhlIGVmZmVjdCxcbi8vIHdoaWNoIG1heSBjYXVzZSBtaXNzZWQgdXBkYXRlczsgd2UgYWxzbyBtdXN0IGVuc3VyZSB0aGUgc3RvcmUgc3Vic2NyaXB0aW9uXG4vLyBpcyBjcmVhdGVkIHN5bmNocm9ub3VzbHksIG90aGVyd2lzZSBhIHN0b3JlIHVwZGF0ZSBtYXkgb2NjdXIgYmVmb3JlIHRoZVxuLy8gc3Vic2NyaXB0aW9uIGlzIGNyZWF0ZWQgYW5kIGFuIGluY29uc2lzdGVudCBzdGF0ZSBtYXkgYmUgb2JzZXJ2ZWRcblxuZXhwb3J0IHZhciB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSAndW5kZWZpbmVkJyA/IHVzZUxheW91dEVmZmVjdCA6IHVzZUVmZmVjdDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlTWVtbywgdXNlUmVmLCB1c2VSZWR1Y2VyIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnRUeXBlLCBpc0NvbnRleHRDb25zdW1lciB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLi91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9Db250ZXh0JzsgLy8gRGVmaW5lIHNvbWUgY29uc3RhbnQgYXJyYXlzIGp1c3QgdG8gYXZvaWQgcmUtY3JlYXRpbmcgdGhlc2VcblxudmFyIEVNUFRZX0FSUkFZID0gW107XG52YXIgTk9fU1VCU0NSSVBUSU9OX0FSUkFZID0gW251bGwsIG51bGxdO1xuXG52YXIgc3RyaW5naWZ5Q29tcG9uZW50ID0gZnVuY3Rpb24gc3RyaW5naWZ5Q29tcG9uZW50KENvbXApIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoQ29tcCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBTdHJpbmcoQ29tcCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0b3JlU3RhdGVVcGRhdGVzUmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XG4gIHZhciB1cGRhdGVDb3VudCA9IHN0YXRlWzFdO1xuICByZXR1cm4gW2FjdGlvbi5wYXlsb2FkLCB1cGRhdGVDb3VudCArIDFdO1xufVxuXG5mdW5jdGlvbiB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0V2l0aEFyZ3MoZWZmZWN0RnVuYywgZWZmZWN0QXJncywgZGVwZW5kZW5jaWVzKSB7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBlZmZlY3RGdW5jLmFwcGx5KHZvaWQgMCwgZWZmZWN0QXJncyk7XG4gIH0sIGRlcGVuZGVuY2llcyk7XG59XG5cbmZ1bmN0aW9uIGNhcHR1cmVXcmFwcGVyUHJvcHMobGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCB3cmFwcGVyUHJvcHMsIGFjdHVhbENoaWxkUHJvcHMsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMpIHtcbiAgLy8gV2Ugd2FudCB0byBjYXB0dXJlIHRoZSB3cmFwcGVyIHByb3BzIGFuZCBjaGlsZCBwcm9wcyB3ZSB1c2VkIGZvciBsYXRlciBjb21wYXJpc29uc1xuICBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQgPSB3cmFwcGVyUHJvcHM7XG4gIGxhc3RDaGlsZFByb3BzLmN1cnJlbnQgPSBhY3R1YWxDaGlsZFByb3BzO1xuICByZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50ID0gZmFsc2U7IC8vIElmIHRoZSByZW5kZXIgd2FzIGZyb20gYSBzdG9yZSB1cGRhdGUsIGNsZWFyIG91dCB0aGF0IHJlZmVyZW5jZSBhbmQgY2FzY2FkZSB0aGUgc3Vic2NyaWJlciB1cGRhdGVcblxuICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50KSB7XG4gICAgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ID0gbnVsbDtcbiAgICBub3RpZnlOZXN0ZWRTdWJzKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3Vic2NyaWJlVXBkYXRlcyhzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsIHN0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3RvciwgbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzLCBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoKSB7XG4gIC8vIElmIHdlJ3JlIG5vdCBzdWJzY3JpYmVkIHRvIHRoZSBzdG9yZSwgbm90aGluZyB0byBkbyBoZXJlXG4gIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm47IC8vIENhcHR1cmUgdmFsdWVzIGZvciBjaGVja2luZyBpZiBhbmQgd2hlbiB0aGlzIGNvbXBvbmVudCB1bm1vdW50c1xuXG4gIHZhciBkaWRVbnN1YnNjcmliZSA9IGZhbHNlO1xuICB2YXIgbGFzdFRocm93bkVycm9yID0gbnVsbDsgLy8gV2UnbGwgcnVuIHRoaXMgY2FsbGJhY2sgZXZlcnkgdGltZSBhIHN0b3JlIHN1YnNjcmlwdGlvbiB1cGRhdGUgcHJvcGFnYXRlcyB0byB0aGlzIGNvbXBvbmVudFxuXG4gIHZhciBjaGVja0ZvclVwZGF0ZXMgPSBmdW5jdGlvbiBjaGVja0ZvclVwZGF0ZXMoKSB7XG4gICAgaWYgKGRpZFVuc3Vic2NyaWJlKSB7XG4gICAgICAvLyBEb24ndCBydW4gc3RhbGUgbGlzdGVuZXJzLlxuICAgICAgLy8gUmVkdXggZG9lc24ndCBndWFyYW50ZWUgdW5zdWJzY3JpcHRpb25zIGhhcHBlbiB1bnRpbCBuZXh0IGRpc3BhdGNoLlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBsYXRlc3RTdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICB2YXIgbmV3Q2hpbGRQcm9wcywgZXJyb3I7XG5cbiAgICB0cnkge1xuICAgICAgLy8gQWN0dWFsbHkgcnVuIHRoZSBzZWxlY3RvciB3aXRoIHRoZSBtb3N0IHJlY2VudCBzdG9yZSBzdGF0ZSBhbmQgd3JhcHBlciBwcm9wc1xuICAgICAgLy8gdG8gZGV0ZXJtaW5lIHdoYXQgdGhlIGNoaWxkIHByb3BzIHNob3VsZCBiZVxuICAgICAgbmV3Q2hpbGRQcm9wcyA9IGNoaWxkUHJvcHNTZWxlY3RvcihsYXRlc3RTdG9yZVN0YXRlLCBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGVycm9yID0gZTtcbiAgICAgIGxhc3RUaHJvd25FcnJvciA9IGU7XG4gICAgfVxuXG4gICAgaWYgKCFlcnJvcikge1xuICAgICAgbGFzdFRocm93bkVycm9yID0gbnVsbDtcbiAgICB9IC8vIElmIHRoZSBjaGlsZCBwcm9wcyBoYXZlbid0IGNoYW5nZWQsIG5vdGhpbmcgdG8gZG8gaGVyZSAtIGNhc2NhZGUgdGhlIHN1YnNjcmlwdGlvbiB1cGRhdGVcblxuXG4gICAgaWYgKG5ld0NoaWxkUHJvcHMgPT09IGxhc3RDaGlsZFByb3BzLmN1cnJlbnQpIHtcbiAgICAgIGlmICghcmVuZGVySXNTY2hlZHVsZWQuY3VycmVudCkge1xuICAgICAgICBub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNhdmUgcmVmZXJlbmNlcyB0byB0aGUgbmV3IGNoaWxkIHByb3BzLiAgTm90ZSB0aGF0IHdlIHRyYWNrIHRoZSBcImNoaWxkIHByb3BzIGZyb20gc3RvcmUgdXBkYXRlXCJcbiAgICAgIC8vIGFzIGEgcmVmIGluc3RlYWQgb2YgYSB1c2VTdGF0ZS91c2VSZWR1Y2VyIGJlY2F1c2Ugd2UgbmVlZCBhIHdheSB0byBkZXRlcm1pbmUgaWYgdGhhdCB2YWx1ZSBoYXNcbiAgICAgIC8vIGJlZW4gcHJvY2Vzc2VkLiAgSWYgdGhpcyB3ZW50IGludG8gdXNlU3RhdGUvdXNlUmVkdWNlciwgd2UgY291bGRuJ3QgY2xlYXIgb3V0IHRoZSB2YWx1ZSB3aXRob3V0XG4gICAgICAvLyBmb3JjaW5nIGFub3RoZXIgcmUtcmVuZGVyLCB3aGljaCB3ZSBkb24ndCB3YW50LlxuICAgICAgbGFzdENoaWxkUHJvcHMuY3VycmVudCA9IG5ld0NoaWxkUHJvcHM7XG4gICAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSBuZXdDaGlsZFByb3BzO1xuICAgICAgcmVuZGVySXNTY2hlZHVsZWQuY3VycmVudCA9IHRydWU7IC8vIElmIHRoZSBjaGlsZCBwcm9wcyBfZGlkXyBjaGFuZ2UgKG9yIHdlIGNhdWdodCBhbiBlcnJvciksIHRoaXMgd3JhcHBlciBjb21wb25lbnQgbmVlZHMgdG8gcmUtcmVuZGVyXG5cbiAgICAgIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiAnU1RPUkVfVVBEQVRFRCcsXG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICBlcnJvcjogZXJyb3JcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9OyAvLyBBY3R1YWxseSBzdWJzY3JpYmUgdG8gdGhlIG5lYXJlc3QgY29ubmVjdGVkIGFuY2VzdG9yIChvciBzdG9yZSlcblxuXG4gIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gY2hlY2tGb3JVcGRhdGVzO1xuICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7IC8vIFB1bGwgZGF0YSBmcm9tIHRoZSBzdG9yZSBhZnRlciBmaXJzdCByZW5kZXIgaW4gY2FzZSB0aGUgc3RvcmUgaGFzXG4gIC8vIGNoYW5nZWQgc2luY2Ugd2UgYmVnYW4uXG5cbiAgY2hlY2tGb3JVcGRhdGVzKCk7XG5cbiAgdmFyIHVuc3Vic2NyaWJlV3JhcHBlciA9IGZ1bmN0aW9uIHVuc3Vic2NyaWJlV3JhcHBlcigpIHtcbiAgICBkaWRVbnN1YnNjcmliZSA9IHRydWU7XG4gICAgc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBudWxsO1xuXG4gICAgaWYgKGxhc3RUaHJvd25FcnJvcikge1xuICAgICAgLy8gSXQncyBwb3NzaWJsZSB0aGF0IHdlIGNhdWdodCBhbiBlcnJvciBkdWUgdG8gYSBiYWQgbWFwU3RhdGUgZnVuY3Rpb24sIGJ1dCB0aGVcbiAgICAgIC8vIHBhcmVudCByZS1yZW5kZXJlZCB3aXRob3V0IHRoaXMgY29tcG9uZW50IGFuZCB3ZSdyZSBhYm91dCB0byB1bm1vdW50LlxuICAgICAgLy8gVGhpcyBzaG91bGRuJ3QgaGFwcGVuIGFzIGxvbmcgYXMgd2UgZG8gdG9wLWRvd24gc3Vic2NyaXB0aW9ucyBjb3JyZWN0bHksIGJ1dFxuICAgICAgLy8gaWYgd2UgZXZlciBkbyB0aG9zZSB3cm9uZywgdGhpcyB0aHJvdyB3aWxsIHN1cmZhY2UgdGhlIGVycm9yIGluIG91ciB0ZXN0cy5cbiAgICAgIC8vIEluIHRoYXQgY2FzZSwgdGhyb3cgdGhlIGVycm9yIGZyb20gaGVyZSBzbyBpdCBkb2Vzbid0IGdldCBsb3N0LlxuICAgICAgdGhyb3cgbGFzdFRocm93bkVycm9yO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdW5zdWJzY3JpYmVXcmFwcGVyO1xufVxuXG52YXIgaW5pdFN0YXRlVXBkYXRlcyA9IGZ1bmN0aW9uIGluaXRTdGF0ZVVwZGF0ZXMoKSB7XG4gIHJldHVybiBbbnVsbCwgMF07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb25uZWN0QWR2YW5jZWQoXG4vKlxuICBzZWxlY3RvckZhY3RvcnkgaXMgYSBmdW5jIHRoYXQgaXMgcmVzcG9uc2libGUgZm9yIHJldHVybmluZyB0aGUgc2VsZWN0b3IgZnVuY3Rpb24gdXNlZCB0b1xuICBjb21wdXRlIG5ldyBwcm9wcyBmcm9tIHN0YXRlLCBwcm9wcywgYW5kIGRpc3BhdGNoLiBGb3IgZXhhbXBsZTpcbiAgICAgZXhwb3J0IGRlZmF1bHQgY29ubmVjdEFkdmFuY2VkKChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKHN0YXRlLCBwcm9wcykgPT4gKHtcbiAgICAgIHRoaW5nOiBzdGF0ZS50aGluZ3NbcHJvcHMudGhpbmdJZF0sXG4gICAgICBzYXZlVGhpbmc6IGZpZWxkcyA9PiBkaXNwYXRjaChhY3Rpb25DcmVhdG9ycy5zYXZlVGhpbmcocHJvcHMudGhpbmdJZCwgZmllbGRzKSksXG4gICAgfSkpKFlvdXJDb21wb25lbnQpXG4gICBBY2Nlc3MgdG8gZGlzcGF0Y2ggaXMgcHJvdmlkZWQgdG8gdGhlIGZhY3Rvcnkgc28gc2VsZWN0b3JGYWN0b3JpZXMgY2FuIGJpbmQgYWN0aW9uQ3JlYXRvcnNcbiAgb3V0c2lkZSBvZiB0aGVpciBzZWxlY3RvciBhcyBhbiBvcHRpbWl6YXRpb24uIE9wdGlvbnMgcGFzc2VkIHRvIGNvbm5lY3RBZHZhbmNlZCBhcmUgcGFzc2VkIHRvXG4gIHRoZSBzZWxlY3RvckZhY3RvcnksIGFsb25nIHdpdGggZGlzcGxheU5hbWUgYW5kIFdyYXBwZWRDb21wb25lbnQsIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQuXG4gICBOb3RlIHRoYXQgc2VsZWN0b3JGYWN0b3J5IGlzIHJlc3BvbnNpYmxlIGZvciBhbGwgY2FjaGluZy9tZW1vaXphdGlvbiBvZiBpbmJvdW5kIGFuZCBvdXRib3VuZFxuICBwcm9wcy4gRG8gbm90IHVzZSBjb25uZWN0QWR2YW5jZWQgZGlyZWN0bHkgd2l0aG91dCBtZW1vaXppbmcgcmVzdWx0cyBiZXR3ZWVuIGNhbGxzIHRvIHlvdXJcbiAgc2VsZWN0b3IsIG90aGVyd2lzZSB0aGUgQ29ubmVjdCBjb21wb25lbnQgd2lsbCByZS1yZW5kZXIgb24gZXZlcnkgc3RhdGUgb3IgcHJvcHMgY2hhbmdlLlxuKi9cbnNlbGVjdG9yRmFjdG9yeSwgLy8gb3B0aW9ucyBvYmplY3Q6XG5fcmVmKSB7XG4gIGlmIChfcmVmID09PSB2b2lkIDApIHtcbiAgICBfcmVmID0ge307XG4gIH1cblxuICB2YXIgX3JlZjIgPSBfcmVmLFxuICAgICAgX3JlZjIkZ2V0RGlzcGxheU5hbWUgPSBfcmVmMi5nZXREaXNwbGF5TmFtZSxcbiAgICAgIGdldERpc3BsYXlOYW1lID0gX3JlZjIkZ2V0RGlzcGxheU5hbWUgPT09IHZvaWQgMCA/IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIFwiQ29ubmVjdEFkdmFuY2VkKFwiICsgbmFtZSArIFwiKVwiO1xuICB9IDogX3JlZjIkZ2V0RGlzcGxheU5hbWUsXG4gICAgICBfcmVmMiRtZXRob2ROYW1lID0gX3JlZjIubWV0aG9kTmFtZSxcbiAgICAgIG1ldGhvZE5hbWUgPSBfcmVmMiRtZXRob2ROYW1lID09PSB2b2lkIDAgPyAnY29ubmVjdEFkdmFuY2VkJyA6IF9yZWYyJG1ldGhvZE5hbWUsXG4gICAgICBfcmVmMiRyZW5kZXJDb3VudFByb3AgPSBfcmVmMi5yZW5kZXJDb3VudFByb3AsXG4gICAgICByZW5kZXJDb3VudFByb3AgPSBfcmVmMiRyZW5kZXJDb3VudFByb3AgPT09IHZvaWQgMCA/IHVuZGVmaW5lZCA6IF9yZWYyJHJlbmRlckNvdW50UHJvcCxcbiAgICAgIF9yZWYyJHNob3VsZEhhbmRsZVN0YSA9IF9yZWYyLnNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyA9IF9yZWYyJHNob3VsZEhhbmRsZVN0YSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYyJHNob3VsZEhhbmRsZVN0YSxcbiAgICAgIF9yZWYyJHN0b3JlS2V5ID0gX3JlZjIuc3RvcmVLZXksXG4gICAgICBzdG9yZUtleSA9IF9yZWYyJHN0b3JlS2V5ID09PSB2b2lkIDAgPyAnc3RvcmUnIDogX3JlZjIkc3RvcmVLZXksXG4gICAgICBfcmVmMiR3aXRoUmVmID0gX3JlZjIud2l0aFJlZixcbiAgICAgIHdpdGhSZWYgPSBfcmVmMiR3aXRoUmVmID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJHdpdGhSZWYsXG4gICAgICBfcmVmMiRmb3J3YXJkUmVmID0gX3JlZjIuZm9yd2FyZFJlZixcbiAgICAgIGZvcndhcmRSZWYgPSBfcmVmMiRmb3J3YXJkUmVmID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJGZvcndhcmRSZWYsXG4gICAgICBfcmVmMiRjb250ZXh0ID0gX3JlZjIuY29udGV4dCxcbiAgICAgIGNvbnRleHQgPSBfcmVmMiRjb250ZXh0ID09PSB2b2lkIDAgPyBSZWFjdFJlZHV4Q29udGV4dCA6IF9yZWYyJGNvbnRleHQsXG4gICAgICBjb25uZWN0T3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJnZXREaXNwbGF5TmFtZVwiLCBcIm1ldGhvZE5hbWVcIiwgXCJyZW5kZXJDb3VudFByb3BcIiwgXCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXNcIiwgXCJzdG9yZUtleVwiLCBcIndpdGhSZWZcIiwgXCJmb3J3YXJkUmVmXCIsIFwiY29udGV4dFwiXSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAocmVuZGVyQ291bnRQcm9wICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInJlbmRlckNvdW50UHJvcCBpcyByZW1vdmVkLiByZW5kZXIgY291bnRpbmcgaXMgYnVpbHQgaW50byB0aGUgbGF0ZXN0IFJlYWN0IERldiBUb29scyBwcm9maWxpbmcgZXh0ZW5zaW9uXCIpO1xuICAgIH1cblxuICAgIGlmICh3aXRoUmVmKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3dpdGhSZWYgaXMgcmVtb3ZlZC4gVG8gYWNjZXNzIHRoZSB3cmFwcGVkIGluc3RhbmNlLCB1c2UgYSByZWYgb24gdGhlIGNvbm5lY3RlZCBjb21wb25lbnQnKTtcbiAgICB9XG5cbiAgICB2YXIgY3VzdG9tU3RvcmVXYXJuaW5nTWVzc2FnZSA9ICdUbyB1c2UgYSBjdXN0b20gUmVkdXggc3RvcmUgZm9yIHNwZWNpZmljIGNvbXBvbmVudHMsIGNyZWF0ZSBhIGN1c3RvbSBSZWFjdCBjb250ZXh0IHdpdGggJyArIFwiUmVhY3QuY3JlYXRlQ29udGV4dCgpLCBhbmQgcGFzcyB0aGUgY29udGV4dCBvYmplY3QgdG8gUmVhY3QgUmVkdXgncyBQcm92aWRlciBhbmQgc3BlY2lmaWMgY29tcG9uZW50c1wiICsgJyBsaWtlOiA8UHJvdmlkZXIgY29udGV4dD17TXlDb250ZXh0fT48Q29ubmVjdGVkQ29tcG9uZW50IGNvbnRleHQ9e015Q29udGV4dH0gLz48L1Byb3ZpZGVyPi4gJyArICdZb3UgbWF5IGFsc28gcGFzcyBhIHtjb250ZXh0IDogTXlDb250ZXh0fSBvcHRpb24gdG8gY29ubmVjdCc7XG5cbiAgICBpZiAoc3RvcmVLZXkgIT09ICdzdG9yZScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignc3RvcmVLZXkgaGFzIGJlZW4gcmVtb3ZlZCBhbmQgZG9lcyBub3QgZG8gYW55dGhpbmcuICcgKyBjdXN0b21TdG9yZVdhcm5pbmdNZXNzYWdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgQ29udGV4dCA9IGNvbnRleHQ7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwV2l0aENvbm5lY3QoV3JhcHBlZENvbXBvbmVudCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFpc1ZhbGlkRWxlbWVudFR5cGUoV3JhcHBlZENvbXBvbmVudCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBtdXN0IHBhc3MgYSBjb21wb25lbnQgdG8gdGhlIGZ1bmN0aW9uIHJldHVybmVkIGJ5IFwiICsgKG1ldGhvZE5hbWUgKyBcIi4gSW5zdGVhZCByZWNlaXZlZCBcIiArIHN0cmluZ2lmeUNvbXBvbmVudChXcmFwcGVkQ29tcG9uZW50KSkpO1xuICAgIH1cblxuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50TmFtZSA9IFdyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IGdldERpc3BsYXlOYW1lKHdyYXBwZWRDb21wb25lbnROYW1lKTtcblxuICAgIHZhciBzZWxlY3RvckZhY3RvcnlPcHRpb25zID0gX2V4dGVuZHMoe30sIGNvbm5lY3RPcHRpb25zLCB7XG4gICAgICBnZXREaXNwbGF5TmFtZTogZ2V0RGlzcGxheU5hbWUsXG4gICAgICBtZXRob2ROYW1lOiBtZXRob2ROYW1lLFxuICAgICAgcmVuZGVyQ291bnRQcm9wOiByZW5kZXJDb3VudFByb3AsXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHN0b3JlS2V5OiBzdG9yZUtleSxcbiAgICAgIGRpc3BsYXlOYW1lOiBkaXNwbGF5TmFtZSxcbiAgICAgIHdyYXBwZWRDb21wb25lbnROYW1lOiB3cmFwcGVkQ29tcG9uZW50TmFtZSxcbiAgICAgIFdyYXBwZWRDb21wb25lbnQ6IFdyYXBwZWRDb21wb25lbnRcbiAgICB9KTtcblxuICAgIHZhciBwdXJlID0gY29ubmVjdE9wdGlvbnMucHVyZTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkU2VsZWN0b3Ioc3RvcmUpIHtcbiAgICAgIHJldHVybiBzZWxlY3RvckZhY3Rvcnkoc3RvcmUuZGlzcGF0Y2gsIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMpO1xuICAgIH0gLy8gSWYgd2UgYXJlbid0IHJ1bm5pbmcgaW4gXCJwdXJlXCIgbW9kZSwgd2UgZG9uJ3Qgd2FudCB0byBtZW1vaXplIHZhbHVlcy5cbiAgICAvLyBUbyBhdm9pZCBjb25kaXRpb25hbGx5IGNhbGxpbmcgaG9va3MsIHdlIGZhbGwgYmFjayB0byBhIHRpbnkgd3JhcHBlclxuICAgIC8vIHRoYXQganVzdCBleGVjdXRlcyB0aGUgZ2l2ZW4gY2FsbGJhY2sgaW1tZWRpYXRlbHkuXG5cblxuICAgIHZhciB1c2VQdXJlT25seU1lbW8gPSBwdXJlID8gdXNlTWVtbyA6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIENvbm5lY3RGdW5jdGlvbihwcm9wcykge1xuICAgICAgdmFyIF91c2VNZW1vID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIERpc3Rpbmd1aXNoIGJldHdlZW4gYWN0dWFsIFwiZGF0YVwiIHByb3BzIHRoYXQgd2VyZSBwYXNzZWQgdG8gdGhlIHdyYXBwZXIgY29tcG9uZW50LFxuICAgICAgICAvLyBhbmQgdmFsdWVzIG5lZWRlZCB0byBjb250cm9sIGJlaGF2aW9yIChmb3J3YXJkZWQgcmVmcywgYWx0ZXJuYXRlIGNvbnRleHQgaW5zdGFuY2VzKS5cbiAgICAgICAgLy8gVG8gbWFpbnRhaW4gdGhlIHdyYXBwZXJQcm9wcyBvYmplY3QgcmVmZXJlbmNlLCBtZW1vaXplIHRoaXMgZGVzdHJ1Y3R1cmluZy5cbiAgICAgICAgdmFyIHJlYWN0UmVkdXhGb3J3YXJkZWRSZWYgPSBwcm9wcy5yZWFjdFJlZHV4Rm9yd2FyZGVkUmVmLFxuICAgICAgICAgICAgd3JhcHBlclByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIFtcInJlYWN0UmVkdXhGb3J3YXJkZWRSZWZcIl0pO1xuXG4gICAgICAgIHJldHVybiBbcHJvcHMuY29udGV4dCwgcmVhY3RSZWR1eEZvcndhcmRlZFJlZiwgd3JhcHBlclByb3BzXTtcbiAgICAgIH0sIFtwcm9wc10pLFxuICAgICAgICAgIHByb3BzQ29udGV4dCA9IF91c2VNZW1vWzBdLFxuICAgICAgICAgIHJlYWN0UmVkdXhGb3J3YXJkZWRSZWYgPSBfdXNlTWVtb1sxXSxcbiAgICAgICAgICB3cmFwcGVyUHJvcHMgPSBfdXNlTWVtb1syXTtcblxuICAgICAgdmFyIENvbnRleHRUb1VzZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBVc2VycyBtYXkgb3B0aW9uYWxseSBwYXNzIGluIGEgY3VzdG9tIGNvbnRleHQgaW5zdGFuY2UgdG8gdXNlIGluc3RlYWQgb2Ygb3VyIFJlYWN0UmVkdXhDb250ZXh0LlxuICAgICAgICAvLyBNZW1vaXplIHRoZSBjaGVjayB0aGF0IGRldGVybWluZXMgd2hpY2ggY29udGV4dCBpbnN0YW5jZSB3ZSBzaG91bGQgdXNlLlxuICAgICAgICByZXR1cm4gcHJvcHNDb250ZXh0ICYmIHByb3BzQ29udGV4dC5Db25zdW1lciAmJiBpc0NvbnRleHRDb25zdW1lciggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQocHJvcHNDb250ZXh0LkNvbnN1bWVyLCBudWxsKSkgPyBwcm9wc0NvbnRleHQgOiBDb250ZXh0O1xuICAgICAgfSwgW3Byb3BzQ29udGV4dCwgQ29udGV4dF0pOyAvLyBSZXRyaWV2ZSB0aGUgc3RvcmUgYW5kIGFuY2VzdG9yIHN1YnNjcmlwdGlvbiB2aWEgY29udGV4dCwgaWYgYXZhaWxhYmxlXG5cbiAgICAgIHZhciBjb250ZXh0VmFsdWUgPSB1c2VDb250ZXh0KENvbnRleHRUb1VzZSk7IC8vIFRoZSBzdG9yZSBfbXVzdF8gZXhpc3QgYXMgZWl0aGVyIGEgcHJvcCBvciBpbiBjb250ZXh0LlxuICAgICAgLy8gV2UnbGwgY2hlY2sgdG8gc2VlIGlmIGl0IF9sb29rc18gbGlrZSBhIFJlZHV4IHN0b3JlIGZpcnN0LlxuICAgICAgLy8gVGhpcyBhbGxvd3MgdXMgdG8gcGFzcyB0aHJvdWdoIGEgYHN0b3JlYCBwcm9wIHRoYXQgaXMganVzdCBhIHBsYWluIHZhbHVlLlxuXG4gICAgICB2YXIgZGlkU3RvcmVDb21lRnJvbVByb3BzID0gQm9vbGVhbihwcm9wcy5zdG9yZSkgJiYgQm9vbGVhbihwcm9wcy5zdG9yZS5nZXRTdGF0ZSkgJiYgQm9vbGVhbihwcm9wcy5zdG9yZS5kaXNwYXRjaCk7XG4gICAgICB2YXIgZGlkU3RvcmVDb21lRnJvbUNvbnRleHQgPSBCb29sZWFuKGNvbnRleHRWYWx1ZSkgJiYgQm9vbGVhbihjb250ZXh0VmFsdWUuc3RvcmUpO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhZGlkU3RvcmVDb21lRnJvbVByb3BzICYmICFkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZmluZCBcXFwic3RvcmVcXFwiIGluIHRoZSBjb250ZXh0IG9mIFwiICsgKFwiXFxcIlwiICsgZGlzcGxheU5hbWUgKyBcIlxcXCIuIEVpdGhlciB3cmFwIHRoZSByb290IGNvbXBvbmVudCBpbiBhIDxQcm92aWRlcj4sIFwiKSArIFwib3IgcGFzcyBhIGN1c3RvbSBSZWFjdCBjb250ZXh0IHByb3ZpZGVyIHRvIDxQcm92aWRlcj4gYW5kIHRoZSBjb3JyZXNwb25kaW5nIFwiICsgKFwiUmVhY3QgY29udGV4dCBjb25zdW1lciB0byBcIiArIGRpc3BsYXlOYW1lICsgXCIgaW4gY29ubmVjdCBvcHRpb25zLlwiKSk7XG4gICAgICB9IC8vIEJhc2VkIG9uIHRoZSBwcmV2aW91cyBjaGVjaywgb25lIG9mIHRoZXNlIG11c3QgYmUgdHJ1ZVxuXG5cbiAgICAgIHZhciBzdG9yZSA9IGRpZFN0b3JlQ29tZUZyb21Qcm9wcyA/IHByb3BzLnN0b3JlIDogY29udGV4dFZhbHVlLnN0b3JlO1xuICAgICAgdmFyIGNoaWxkUHJvcHNTZWxlY3RvciA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBUaGUgY2hpbGQgcHJvcHMgc2VsZWN0b3IgbmVlZHMgdGhlIHN0b3JlIHJlZmVyZW5jZSBhcyBhbiBpbnB1dC5cbiAgICAgICAgLy8gUmUtY3JlYXRlIHRoaXMgc2VsZWN0b3Igd2hlbmV2ZXIgdGhlIHN0b3JlIGNoYW5nZXMuXG4gICAgICAgIHJldHVybiBjcmVhdGVDaGlsZFNlbGVjdG9yKHN0b3JlKTtcbiAgICAgIH0sIFtzdG9yZV0pO1xuXG4gICAgICB2YXIgX3VzZU1lbW8yID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm4gTk9fU1VCU0NSSVBUSU9OX0FSUkFZOyAvLyBUaGlzIFN1YnNjcmlwdGlvbidzIHNvdXJjZSBzaG91bGQgbWF0Y2ggd2hlcmUgc3RvcmUgY2FtZSBmcm9tOiBwcm9wcyB2cy4gY29udGV4dC4gQSBjb21wb25lbnRcbiAgICAgICAgLy8gY29ubmVjdGVkIHRvIHRoZSBzdG9yZSB2aWEgcHJvcHMgc2hvdWxkbid0IHVzZSBzdWJzY3JpcHRpb24gZnJvbSBjb250ZXh0LCBvciB2aWNlIHZlcnNhLlxuXG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKHN0b3JlLCBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPyBudWxsIDogY29udGV4dFZhbHVlLnN1YnNjcmlwdGlvbik7IC8vIGBub3RpZnlOZXN0ZWRTdWJzYCBpcyBkdXBsaWNhdGVkIHRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZCBpblxuICAgICAgICAvLyB0aGUgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcCwgd2hlcmUgYHN1YnNjcmlwdGlvbmAgd2lsbCB0aGVuIGJlIG51bGwuIFRoaXMgY2FuXG4gICAgICAgIC8vIHByb2JhYmx5IGJlIGF2b2lkZWQgaWYgU3Vic2NyaXB0aW9uJ3MgbGlzdGVuZXJzIGxvZ2ljIGlzIGNoYW5nZWQgdG8gbm90IGNhbGwgbGlzdGVuZXJzXG4gICAgICAgIC8vIHRoYXQgaGF2ZSBiZWVuIHVuc3Vic2NyaWJlZCBpbiB0aGUgIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AuXG5cbiAgICAgICAgdmFyIG5vdGlmeU5lc3RlZFN1YnMgPSBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3Vicy5iaW5kKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIHJldHVybiBbc3Vic2NyaXB0aW9uLCBub3RpZnlOZXN0ZWRTdWJzXTtcbiAgICAgIH0sIFtzdG9yZSwgZGlkU3RvcmVDb21lRnJvbVByb3BzLCBjb250ZXh0VmFsdWVdKSxcbiAgICAgICAgICBzdWJzY3JpcHRpb24gPSBfdXNlTWVtbzJbMF0sXG4gICAgICAgICAgbm90aWZ5TmVzdGVkU3VicyA9IF91c2VNZW1vMlsxXTsgLy8gRGV0ZXJtaW5lIHdoYXQge3N0b3JlLCBzdWJzY3JpcHRpb259IHZhbHVlIHNob3VsZCBiZSBwdXQgaW50byBuZXN0ZWQgY29udGV4dCwgaWYgbmVjZXNzYXJ5LFxuICAgICAgLy8gYW5kIG1lbW9pemUgdGhhdCB2YWx1ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSBjb250ZXh0IHVwZGF0ZXMuXG5cblxuICAgICAgdmFyIG92ZXJyaWRkZW5Db250ZXh0VmFsdWUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGRpZFN0b3JlQ29tZUZyb21Qcm9wcykge1xuICAgICAgICAgIC8vIFRoaXMgY29tcG9uZW50IGlzIGRpcmVjdGx5IHN1YnNjcmliZWQgdG8gYSBzdG9yZSBmcm9tIHByb3BzLlxuICAgICAgICAgIC8vIFdlIGRvbid0IHdhbnQgZGVzY2VuZGFudHMgcmVhZGluZyBmcm9tIHRoaXMgc3RvcmUgLSBwYXNzIGRvd24gd2hhdGV2ZXJcbiAgICAgICAgICAvLyB0aGUgZXhpc3RpbmcgY29udGV4dCB2YWx1ZSBpcyBmcm9tIHRoZSBuZWFyZXN0IGNvbm5lY3RlZCBhbmNlc3Rvci5cbiAgICAgICAgICByZXR1cm4gY29udGV4dFZhbHVlO1xuICAgICAgICB9IC8vIE90aGVyd2lzZSwgcHV0IHRoaXMgY29tcG9uZW50J3Mgc3Vic2NyaXB0aW9uIGluc3RhbmNlIGludG8gY29udGV4dCwgc28gdGhhdFxuICAgICAgICAvLyBjb25uZWN0ZWQgZGVzY2VuZGFudHMgd29uJ3QgdXBkYXRlIHVudGlsIGFmdGVyIHRoaXMgY29tcG9uZW50IGlzIGRvbmVcblxuXG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgY29udGV4dFZhbHVlLCB7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb25cbiAgICAgICAgfSk7XG4gICAgICB9LCBbZGlkU3RvcmVDb21lRnJvbVByb3BzLCBjb250ZXh0VmFsdWUsIHN1YnNjcmlwdGlvbl0pOyAvLyBXZSBuZWVkIHRvIGZvcmNlIHRoaXMgd3JhcHBlciBjb21wb25lbnQgdG8gcmUtcmVuZGVyIHdoZW5ldmVyIGEgUmVkdXggc3RvcmUgdXBkYXRlXG4gICAgICAvLyBjYXVzZXMgYSBjaGFuZ2UgdG8gdGhlIGNhbGN1bGF0ZWQgY2hpbGQgY29tcG9uZW50IHByb3BzIChvciB3ZSBjYXVnaHQgYW4gZXJyb3IgaW4gbWFwU3RhdGUpXG5cbiAgICAgIHZhciBfdXNlUmVkdWNlciA9IHVzZVJlZHVjZXIoc3RvcmVTdGF0ZVVwZGF0ZXNSZWR1Y2VyLCBFTVBUWV9BUlJBWSwgaW5pdFN0YXRlVXBkYXRlcyksXG4gICAgICAgICAgX3VzZVJlZHVjZXIkID0gX3VzZVJlZHVjZXJbMF0sXG4gICAgICAgICAgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdCA9IF91c2VSZWR1Y2VyJFswXSxcbiAgICAgICAgICBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoID0gX3VzZVJlZHVjZXJbMV07IC8vIFByb3BhZ2F0ZSBhbnkgbWFwU3RhdGUvbWFwRGlzcGF0Y2ggZXJyb3JzIHVwd2FyZHNcblxuXG4gICAgICBpZiAocHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdCAmJiBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LmVycm9yKSB7XG4gICAgICAgIHRocm93IHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQuZXJyb3I7XG4gICAgICB9IC8vIFNldCB1cCByZWZzIHRvIGNvb3JkaW5hdGUgdmFsdWVzIGJldHdlZW4gdGhlIHN1YnNjcmlwdGlvbiBlZmZlY3QgYW5kIHRoZSByZW5kZXIgbG9naWNcblxuXG4gICAgICB2YXIgbGFzdENoaWxkUHJvcHMgPSB1c2VSZWYoKTtcbiAgICAgIHZhciBsYXN0V3JhcHBlclByb3BzID0gdXNlUmVmKHdyYXBwZXJQcm9wcyk7XG4gICAgICB2YXIgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSA9IHVzZVJlZigpO1xuICAgICAgdmFyIHJlbmRlcklzU2NoZWR1bGVkID0gdXNlUmVmKGZhbHNlKTtcbiAgICAgIHZhciBhY3R1YWxDaGlsZFByb3BzID0gdXNlUHVyZU9ubHlNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVHJpY2t5IGxvZ2ljIGhlcmU6XG4gICAgICAgIC8vIC0gVGhpcyByZW5kZXIgbWF5IGhhdmUgYmVlbiB0cmlnZ2VyZWQgYnkgYSBSZWR1eCBzdG9yZSB1cGRhdGUgdGhhdCBwcm9kdWNlZCBuZXcgY2hpbGQgcHJvcHNcbiAgICAgICAgLy8gLSBIb3dldmVyLCB3ZSBtYXkgaGF2ZSBnb3R0ZW4gbmV3IHdyYXBwZXIgcHJvcHMgYWZ0ZXIgdGhhdFxuICAgICAgICAvLyBJZiB3ZSBoYXZlIG5ldyBjaGlsZCBwcm9wcywgYW5kIHRoZSBzYW1lIHdyYXBwZXIgcHJvcHMsIHdlIGtub3cgd2Ugc2hvdWxkIHVzZSB0aGUgbmV3IGNoaWxkIHByb3BzIGFzLWlzLlxuICAgICAgICAvLyBCdXQsIGlmIHdlIGhhdmUgbmV3IHdyYXBwZXIgcHJvcHMsIHRob3NlIG1pZ2h0IGNoYW5nZSB0aGUgY2hpbGQgcHJvcHMsIHNvIHdlIGhhdmUgdG8gcmVjYWxjdWxhdGUgdGhpbmdzLlxuICAgICAgICAvLyBTbywgd2UnbGwgdXNlIHRoZSBjaGlsZCBwcm9wcyBmcm9tIHN0b3JlIHVwZGF0ZSBvbmx5IGlmIHRoZSB3cmFwcGVyIHByb3BzIGFyZSB0aGUgc2FtZSBhcyBsYXN0IHRpbWUuXG4gICAgICAgIGlmIChjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgJiYgd3JhcHBlclByb3BzID09PSBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQpIHtcbiAgICAgICAgICByZXR1cm4gY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50O1xuICAgICAgICB9IC8vIFRPRE8gV2UncmUgcmVhZGluZyB0aGUgc3RvcmUgZGlyZWN0bHkgaW4gcmVuZGVyKCkgaGVyZS4gQmFkIGlkZWE/XG4gICAgICAgIC8vIFRoaXMgd2lsbCBsaWtlbHkgY2F1c2UgQmFkIFRoaW5ncyAoVE0pIHRvIGhhcHBlbiBpbiBDb25jdXJyZW50IE1vZGUuXG4gICAgICAgIC8vIE5vdGUgdGhhdCB3ZSBkbyB0aGlzIGJlY2F1c2Ugb24gcmVuZGVycyBfbm90XyBjYXVzZWQgYnkgc3RvcmUgdXBkYXRlcywgd2UgbmVlZCB0aGUgbGF0ZXN0IHN0b3JlIHN0YXRlXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB3aGF0IHRoZSBjaGlsZCBwcm9wcyBzaG91bGQgYmUuXG5cblxuICAgICAgICByZXR1cm4gY2hpbGRQcm9wc1NlbGVjdG9yKHN0b3JlLmdldFN0YXRlKCksIHdyYXBwZXJQcm9wcyk7XG4gICAgICB9LCBbc3RvcmUsIHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQsIHdyYXBwZXJQcm9wc10pOyAvLyBXZSBuZWVkIHRoaXMgdG8gZXhlY3V0ZSBzeW5jaHJvbm91c2x5IGV2ZXJ5IHRpbWUgd2UgcmUtcmVuZGVyLiBIb3dldmVyLCBSZWFjdCB3YXJuc1xuICAgICAgLy8gYWJvdXQgdXNlTGF5b3V0RWZmZWN0IGluIFNTUiwgc28gd2UgdHJ5IHRvIGRldGVjdCBlbnZpcm9ubWVudCBhbmQgZmFsbCBiYWNrIHRvXG4gICAgICAvLyBqdXN0IHVzZUVmZmVjdCBpbnN0ZWFkIHRvIGF2b2lkIHRoZSB3YXJuaW5nLCBzaW5jZSBuZWl0aGVyIHdpbGwgcnVuIGFueXdheS5cblxuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFdpdGhBcmdzKGNhcHR1cmVXcmFwcGVyUHJvcHMsIFtsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIHdyYXBwZXJQcm9wcywgYWN0dWFsQ2hpbGRQcm9wcywgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3Vic10pOyAvLyBPdXIgcmUtc3Vic2NyaWJlIGxvZ2ljIG9ubHkgcnVucyB3aGVuIHRoZSBzdG9yZS9zdWJzY3JpcHRpb24gc2V0dXAgY2hhbmdlc1xuXG4gICAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0V2l0aEFyZ3Moc3Vic2NyaWJlVXBkYXRlcywgW3Nob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcywgc3RvcmUsIHN1YnNjcmlwdGlvbiwgY2hpbGRQcm9wc1NlbGVjdG9yLCBsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMsIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2hdLCBbc3RvcmUsIHN1YnNjcmlwdGlvbiwgY2hpbGRQcm9wc1NlbGVjdG9yXSk7IC8vIE5vdyB0aGF0IGFsbCB0aGF0J3MgZG9uZSwgd2UgY2FuIGZpbmFsbHkgdHJ5IHRvIGFjdHVhbGx5IHJlbmRlciB0aGUgY2hpbGQgY29tcG9uZW50LlxuICAgICAgLy8gV2UgbWVtb2l6ZSB0aGUgZWxlbWVudHMgZm9yIHRoZSByZW5kZXJlZCBjaGlsZCBjb21wb25lbnQgYXMgYW4gb3B0aW1pemF0aW9uLlxuXG4gICAgICB2YXIgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50ID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgYWN0dWFsQ2hpbGRQcm9wcywge1xuICAgICAgICAgIHJlZjogcmVhY3RSZWR1eEZvcndhcmRlZFJlZlxuICAgICAgICB9KSk7XG4gICAgICB9LCBbcmVhY3RSZWR1eEZvcndhcmRlZFJlZiwgV3JhcHBlZENvbXBvbmVudCwgYWN0dWFsQ2hpbGRQcm9wc10pOyAvLyBJZiBSZWFjdCBzZWVzIHRoZSBleGFjdCBzYW1lIGVsZW1lbnQgcmVmZXJlbmNlIGFzIGxhc3QgdGltZSwgaXQgYmFpbHMgb3V0IG9mIHJlLXJlbmRlcmluZ1xuICAgICAgLy8gdGhhdCBjaGlsZCwgc2FtZSBhcyBpZiBpdCB3YXMgd3JhcHBlZCBpbiBSZWFjdC5tZW1vKCkgb3IgcmV0dXJuZWQgZmFsc2UgZnJvbSBzaG91bGRDb21wb25lbnRVcGRhdGUuXG5cbiAgICAgIHZhciByZW5kZXJlZENoaWxkID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHtcbiAgICAgICAgICAvLyBJZiB0aGlzIGNvbXBvbmVudCBpcyBzdWJzY3JpYmVkIHRvIHN0b3JlIHVwZGF0ZXMsIHdlIG5lZWQgdG8gcGFzcyBpdHMgb3duXG4gICAgICAgICAgLy8gc3Vic2NyaXB0aW9uIGluc3RhbmNlIGRvd24gdG8gb3VyIGRlc2NlbmRhbnRzLiBUaGF0IG1lYW5zIHJlbmRlcmluZyB0aGUgc2FtZVxuICAgICAgICAgIC8vIENvbnRleHQgaW5zdGFuY2UsIGFuZCBwdXR0aW5nIGEgZGlmZmVyZW50IHZhbHVlIGludG8gdGhlIGNvbnRleHQuXG4gICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHRUb1VzZS5Qcm92aWRlciwge1xuICAgICAgICAgICAgdmFsdWU6IG92ZXJyaWRkZW5Db250ZXh0VmFsdWVcbiAgICAgICAgICB9LCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudDtcbiAgICAgIH0sIFtDb250ZXh0VG9Vc2UsIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCwgb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZV0pO1xuICAgICAgcmV0dXJuIHJlbmRlcmVkQ2hpbGQ7XG4gICAgfSAvLyBJZiB3ZSdyZSBpbiBcInB1cmVcIiBtb2RlLCBlbnN1cmUgb3VyIHdyYXBwZXIgY29tcG9uZW50IG9ubHkgcmUtcmVuZGVycyB3aGVuIGluY29taW5nIHByb3BzIGhhdmUgY2hhbmdlZC5cblxuXG4gICAgdmFyIENvbm5lY3QgPSBwdXJlID8gUmVhY3QubWVtbyhDb25uZWN0RnVuY3Rpb24pIDogQ29ubmVjdEZ1bmN0aW9uO1xuICAgIENvbm5lY3QuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgQ29ubmVjdC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuXG4gICAgaWYgKGZvcndhcmRSZWYpIHtcbiAgICAgIHZhciBmb3J3YXJkZWQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIGZvcndhcmRDb25uZWN0UmVmKHByb3BzLCByZWYpIHtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbm5lY3QsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICAgIHJlYWN0UmVkdXhGb3J3YXJkZWRSZWY6IHJlZlxuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICAgIGZvcndhcmRlZC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICAgICAgZm9yd2FyZGVkLldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgICAgcmV0dXJuIGhvaXN0U3RhdGljcyhmb3J3YXJkZWQsIFdyYXBwZWRDb21wb25lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBob2lzdFN0YXRpY3MoQ29ubmVjdCwgV3JhcHBlZENvbXBvbmVudCk7XG4gIH07XG59IiwiZnVuY3Rpb24gaXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAodHlwZW9mIG9iakEgIT09ICdvYmplY3QnIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn0iLCJpbXBvcnQgJCRvYnNlcnZhYmxlIGZyb20gJ3N5bWJvbC1vYnNlcnZhYmxlJztcblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbnZhciByYW5kb21TdHJpbmcgPSBmdW5jdGlvbiByYW5kb21TdHJpbmcoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKTtcbn07XG5cbnZhciBBY3Rpb25UeXBlcyA9IHtcbiAgSU5JVDogXCJAQHJlZHV4L0lOSVRcIiArIHJhbmRvbVN0cmluZygpLFxuICBSRVBMQUNFOiBcIkBAcmVkdXgvUkVQTEFDRVwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFBST0JFX1VOS05PV05fQUNUSU9OOiBmdW5jdGlvbiBQUk9CRV9VTktOT1dOX0FDVElPTigpIHtcbiAgICByZXR1cm4gXCJAQHJlZHV4L1BST0JFX1VOS05PV05fQUNUSU9OXCIgKyByYW5kb21TdHJpbmcoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gb2JqIFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIHZhciBwcm90byA9IG9iajtcblxuICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSAhPT0gbnVsbCkge1xuICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gcHJvdG87XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIFJlZHV4IHN0b3JlIHRoYXQgaG9sZHMgdGhlIHN0YXRlIHRyZWUuXG4gKiBUaGUgb25seSB3YXkgdG8gY2hhbmdlIHRoZSBkYXRhIGluIHRoZSBzdG9yZSBpcyB0byBjYWxsIGBkaXNwYXRjaCgpYCBvbiBpdC5cbiAqXG4gKiBUaGVyZSBzaG91bGQgb25seSBiZSBhIHNpbmdsZSBzdG9yZSBpbiB5b3VyIGFwcC4gVG8gc3BlY2lmeSBob3cgZGlmZmVyZW50XG4gKiBwYXJ0cyBvZiB0aGUgc3RhdGUgdHJlZSByZXNwb25kIHRvIGFjdGlvbnMsIHlvdSBtYXkgY29tYmluZSBzZXZlcmFsIHJlZHVjZXJzXG4gKiBpbnRvIGEgc2luZ2xlIHJlZHVjZXIgZnVuY3Rpb24gYnkgdXNpbmcgYGNvbWJpbmVSZWR1Y2Vyc2AuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVkdWNlciBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgbmV4dCBzdGF0ZSB0cmVlLCBnaXZlblxuICogdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGFjdGlvbiB0byBoYW5kbGUuXG4gKlxuICogQHBhcmFtIHthbnl9IFtwcmVsb2FkZWRTdGF0ZV0gVGhlIGluaXRpYWwgc3RhdGUuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBoeWRyYXRlIHRoZSBzdGF0ZSBmcm9tIHRoZSBzZXJ2ZXIgaW4gdW5pdmVyc2FsIGFwcHMsIG9yIHRvIHJlc3RvcmUgYVxuICogcHJldmlvdXNseSBzZXJpYWxpemVkIHVzZXIgc2Vzc2lvbi5cbiAqIElmIHlvdSB1c2UgYGNvbWJpbmVSZWR1Y2Vyc2AgdG8gcHJvZHVjZSB0aGUgcm9vdCByZWR1Y2VyIGZ1bmN0aW9uLCB0aGlzIG11c3QgYmVcbiAqIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlIGFzIGBjb21iaW5lUmVkdWNlcnNgIGtleXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2VuaGFuY2VyXSBUaGUgc3RvcmUgZW5oYW5jZXIuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBlbmhhbmNlIHRoZSBzdG9yZSB3aXRoIHRoaXJkLXBhcnR5IGNhcGFiaWxpdGllcyBzdWNoIGFzIG1pZGRsZXdhcmUsXG4gKiB0aW1lIHRyYXZlbCwgcGVyc2lzdGVuY2UsIGV0Yy4gVGhlIG9ubHkgc3RvcmUgZW5oYW5jZXIgdGhhdCBzaGlwcyB3aXRoIFJlZHV4XG4gKiBpcyBgYXBwbHlNaWRkbGV3YXJlKClgLlxuICpcbiAqIEByZXR1cm5zIHtTdG9yZX0gQSBSZWR1eCBzdG9yZSB0aGF0IGxldHMgeW91IHJlYWQgdGhlIHN0YXRlLCBkaXNwYXRjaCBhY3Rpb25zXG4gKiBhbmQgc3Vic2NyaWJlIHRvIGNoYW5nZXMuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlU3RvcmUocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGVuaGFuY2VyKSB7XG4gIHZhciBfcmVmMjtcblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGFyZ3VtZW50c1szXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignSXQgbG9va3MgbGlrZSB5b3UgYXJlIHBhc3Npbmcgc2V2ZXJhbCBzdG9yZSBlbmhhbmNlcnMgdG8gJyArICdjcmVhdGVTdG9yZSgpLiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQuIEluc3RlYWQsIGNvbXBvc2UgdGhlbSAnICsgJ3RvZ2V0aGVyIHRvIGEgc2luZ2xlIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZW5oYW5jZXIgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgICBwcmVsb2FkZWRTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgZW5oYW5jZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW5oYW5jZXIoY3JlYXRlU3RvcmUpKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIHJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciBjdXJyZW50UmVkdWNlciA9IHJlZHVjZXI7XG4gIHZhciBjdXJyZW50U3RhdGUgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgdmFyIGN1cnJlbnRMaXN0ZW5lcnMgPSBbXTtcbiAgdmFyIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzO1xuICB2YXIgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAvKipcbiAgICogVGhpcyBtYWtlcyBhIHNoYWxsb3cgY29weSBvZiBjdXJyZW50TGlzdGVuZXJzIHNvIHdlIGNhbiB1c2VcbiAgICogbmV4dExpc3RlbmVycyBhcyBhIHRlbXBvcmFyeSBsaXN0IHdoaWxlIGRpc3BhdGNoaW5nLlxuICAgKlxuICAgKiBUaGlzIHByZXZlbnRzIGFueSBidWdzIGFyb3VuZCBjb25zdW1lcnMgY2FsbGluZ1xuICAgKiBzdWJzY3JpYmUvdW5zdWJzY3JpYmUgaW4gdGhlIG1pZGRsZSBvZiBhIGRpc3BhdGNoLlxuICAgKi9cblxuICBmdW5jdGlvbiBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCkge1xuICAgIGlmIChuZXh0TGlzdGVuZXJzID09PSBjdXJyZW50TGlzdGVuZXJzKSB7XG4gICAgICBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycy5zbGljZSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVhZHMgdGhlIHN0YXRlIHRyZWUgbWFuYWdlZCBieSB0aGUgc3RvcmUuXG4gICAqXG4gICAqIEByZXR1cm5zIHthbnl9IFRoZSBjdXJyZW50IHN0YXRlIHRyZWUgb2YgeW91ciBhcHBsaWNhdGlvbi5cbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRTdGF0ZSgpIHtcbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLmdldFN0YXRlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1RoZSByZWR1Y2VyIGhhcyBhbHJlYWR5IHJlY2VpdmVkIHRoZSBzdGF0ZSBhcyBhbiBhcmd1bWVudC4gJyArICdQYXNzIGl0IGRvd24gZnJvbSB0aGUgdG9wIHJlZHVjZXIgaW5zdGVhZCBvZiByZWFkaW5nIGl0IGZyb20gdGhlIHN0b3JlLicpO1xuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50U3RhdGU7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgYSBjaGFuZ2UgbGlzdGVuZXIuIEl0IHdpbGwgYmUgY2FsbGVkIGFueSB0aW1lIGFuIGFjdGlvbiBpcyBkaXNwYXRjaGVkLFxuICAgKiBhbmQgc29tZSBwYXJ0IG9mIHRoZSBzdGF0ZSB0cmVlIG1heSBwb3RlbnRpYWxseSBoYXZlIGNoYW5nZWQuIFlvdSBtYXkgdGhlblxuICAgKiBjYWxsIGBnZXRTdGF0ZSgpYCB0byByZWFkIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgaW5zaWRlIHRoZSBjYWxsYmFjay5cbiAgICpcbiAgICogWW91IG1heSBjYWxsIGBkaXNwYXRjaCgpYCBmcm9tIGEgY2hhbmdlIGxpc3RlbmVyLCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogY2F2ZWF0czpcbiAgICpcbiAgICogMS4gVGhlIHN1YnNjcmlwdGlvbnMgYXJlIHNuYXBzaG90dGVkIGp1c3QgYmVmb3JlIGV2ZXJ5IGBkaXNwYXRjaCgpYCBjYWxsLlxuICAgKiBJZiB5b3Ugc3Vic2NyaWJlIG9yIHVuc3Vic2NyaWJlIHdoaWxlIHRoZSBsaXN0ZW5lcnMgYXJlIGJlaW5nIGludm9rZWQsIHRoaXNcbiAgICogd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0IG9uIHRoZSBgZGlzcGF0Y2goKWAgdGhhdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuXG4gICAqIEhvd2V2ZXIsIHRoZSBuZXh0IGBkaXNwYXRjaCgpYCBjYWxsLCB3aGV0aGVyIG5lc3RlZCBvciBub3QsIHdpbGwgdXNlIGEgbW9yZVxuICAgKiByZWNlbnQgc25hcHNob3Qgb2YgdGhlIHN1YnNjcmlwdGlvbiBsaXN0LlxuICAgKlxuICAgKiAyLiBUaGUgbGlzdGVuZXIgc2hvdWxkIG5vdCBleHBlY3QgdG8gc2VlIGFsbCBzdGF0ZSBjaGFuZ2VzLCBhcyB0aGUgc3RhdGVcbiAgICogbWlnaHQgaGF2ZSBiZWVuIHVwZGF0ZWQgbXVsdGlwbGUgdGltZXMgZHVyaW5nIGEgbmVzdGVkIGBkaXNwYXRjaCgpYCBiZWZvcmVcbiAgICogdGhlIGxpc3RlbmVyIGlzIGNhbGxlZC4gSXQgaXMsIGhvd2V2ZXIsIGd1YXJhbnRlZWQgdGhhdCBhbGwgc3Vic2NyaWJlcnNcbiAgICogcmVnaXN0ZXJlZCBiZWZvcmUgdGhlIGBkaXNwYXRjaCgpYCBzdGFydGVkIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGxhdGVzdFxuICAgKiBzdGF0ZSBieSB0aGUgdGltZSBpdCBleGl0cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgQSBjYWxsYmFjayB0byBiZSBpbnZva2VkIG9uIGV2ZXJ5IGRpc3BhdGNoLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoaXMgY2hhbmdlIGxpc3RlbmVyLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5zdWJzY3JpYmUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgJyArICdjb21wb25lbnQgYW5kIGludm9rZSBzdG9yZS5nZXRTdGF0ZSgpIGluIHRoZSBjYWxsYmFjayB0byBhY2Nlc3MgdGhlIGxhdGVzdCBzdGF0ZS4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmVsaXN0ZW5lciBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgIH1cblxuICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgICB9XG5cbiAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIGN1cnJlbnRMaXN0ZW5lcnMgPSBudWxsO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG5cblxuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG11c3QgYmUgcGxhaW4gb2JqZWN0cy4gJyArICdVc2UgY3VzdG9tIG1pZGRsZXdhcmUgZm9yIGFzeW5jIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtYXkgbm90IGhhdmUgYW4gdW5kZWZpbmVkIFwidHlwZVwiIHByb3BlcnR5LiAnICsgJ0hhdmUgeW91IG1pc3NwZWxsZWQgYSBjb25zdGFudD8nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBjdXJyZW50UmVkdWNlciA9IG5leHRSZWR1Y2VyOyAvLyBUaGlzIGFjdGlvbiBoYXMgYSBzaW1pbGlhciBlZmZlY3QgdG8gQWN0aW9uVHlwZXMuSU5JVC5cbiAgICAvLyBBbnkgcmVkdWNlcnMgdGhhdCBleGlzdGVkIGluIGJvdGggdGhlIG5ldyBhbmQgb2xkIHJvb3RSZWR1Y2VyXG4gICAgLy8gd2lsbCByZWNlaXZlIHRoZSBwcmV2aW91cyBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgICAvLyB0aGUgbmV3IHN0YXRlIHRyZWUgd2l0aCBhbnkgcmVsZXZhbnQgZGF0YSBmcm9tIHRoZSBvbGQgb25lLlxuXG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUkVQTEFDRVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnRlcm9wZXJhYmlsaXR5IHBvaW50IGZvciBvYnNlcnZhYmxlL3JlYWN0aXZlIGxpYnJhcmllcy5cbiAgICogQHJldHVybnMge29ic2VydmFibGV9IEEgbWluaW1hbCBvYnNlcnZhYmxlIG9mIHN0YXRlIGNoYW5nZXMuXG4gICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIG9ic2VydmFibGUgcHJvcG9zYWw6XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9ic2VydmFibGVcbiAgICovXG5cblxuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JzZXJ2ZXIgIT09ICdvYmplY3QnIHx8IG9ic2VydmVyID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgdGhlIG9ic2VydmVyIHRvIGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9ic2VydmVTdGF0ZSgpIHtcbiAgICAgICAgICBpZiAob2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChnZXRTdGF0ZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvYnNlcnZlU3RhdGUoKTtcbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlID0gb3V0ZXJTdWJzY3JpYmUob2JzZXJ2ZVN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCBfcmVmWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfcmVmO1xuICB9IC8vIFdoZW4gYSBzdG9yZSBpcyBjcmVhdGVkLCBhbiBcIklOSVRcIiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCBzbyB0aGF0IGV2ZXJ5XG4gIC8vIHJlZHVjZXIgcmV0dXJucyB0aGVpciBpbml0aWFsIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAvLyB0aGUgaW5pdGlhbCBzdGF0ZSB0cmVlLlxuXG5cbiAgZGlzcGF0Y2goe1xuICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgfSk7XG4gIHJldHVybiBfcmVmMiA9IHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyOiByZXBsYWNlUmVkdWNlclxuICB9LCBfcmVmMlskJG9ic2VydmFibGVdID0gb2JzZXJ2YWJsZSwgX3JlZjI7XG59XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcblxufVxuXG5mdW5jdGlvbiBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShrZXksIGFjdGlvbikge1xuICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgdmFyIGFjdGlvbkRlc2NyaXB0aW9uID0gYWN0aW9uVHlwZSAmJiBcImFjdGlvbiBcXFwiXCIgKyBTdHJpbmcoYWN0aW9uVHlwZSkgKyBcIlxcXCJcIiB8fCAnYW4gYWN0aW9uJztcbiAgcmV0dXJuIFwiR2l2ZW4gXCIgKyBhY3Rpb25EZXNjcmlwdGlvbiArIFwiLCByZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQuIFwiICsgXCJUbyBpZ25vcmUgYW4gYWN0aW9uLCB5b3UgbXVzdCBleHBsaWNpdGx5IHJldHVybiB0aGUgcHJldmlvdXMgc3RhdGUuIFwiICsgXCJJZiB5b3Ugd2FudCB0aGlzIHJlZHVjZXIgdG8gaG9sZCBubyB2YWx1ZSwgeW91IGNhbiByZXR1cm4gbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIjtcbn1cblxuZnVuY3Rpb24gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShpbnB1dFN0YXRlLCByZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgYXJndW1lbnROYW1lID0gYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5JTklUID8gJ3ByZWxvYWRlZFN0YXRlIGFyZ3VtZW50IHBhc3NlZCB0byBjcmVhdGVTdG9yZScgOiAncHJldmlvdXMgc3RhdGUgcmVjZWl2ZWQgYnkgdGhlIHJlZHVjZXInO1xuXG4gIGlmIChyZWR1Y2VyS2V5cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJ1N0b3JlIGRvZXMgbm90IGhhdmUgYSB2YWxpZCByZWR1Y2VyLiBNYWtlIHN1cmUgdGhlIGFyZ3VtZW50IHBhc3NlZCAnICsgJ3RvIGNvbWJpbmVSZWR1Y2VycyBpcyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSByZWR1Y2Vycy4nO1xuICB9XG5cbiAgaWYgKCFpc1BsYWluT2JqZWN0KGlucHV0U3RhdGUpKSB7XG4gICAgcmV0dXJuIFwiVGhlIFwiICsgYXJndW1lbnROYW1lICsgXCIgaGFzIHVuZXhwZWN0ZWQgdHlwZSBvZiBcXFwiXCIgKyB7fS50b1N0cmluZy5jYWxsKGlucHV0U3RhdGUpLm1hdGNoKC9cXHMoW2EtenxBLVpdKykvKVsxXSArIFwiXFxcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBcIiArIChcImtleXM6IFxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiXCIpO1xuICB9XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldO1xuICB9KTtcbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFwiVW5leHBlY3RlZCBcIiArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgXCIgXCIgKyAoXCJcXFwiXCIgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIiBmb3VuZCBpbiBcIiArIGFyZ3VtZW50TmFtZSArIFwiLiBcIikgKyBcIkV4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogXCIgKyAoXCJcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCBkdXJpbmcgaW5pdGlhbGl6YXRpb24uIFwiICsgXCJJZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZSByZWR1Y2VyIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgXCIgKyBcImV4cGxpY2l0bHkgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgXCIgKyBcIm5vdCBiZSB1bmRlZmluZWQuIElmIHlvdSBkb24ndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsIFwiICsgXCJ5b3UgY2FuIHVzZSBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5QUk9CRV9VTktOT1dOX0FDVElPTigpXG4gICAgfSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgd2hlbiBwcm9iZWQgd2l0aCBhIHJhbmRvbSB0eXBlLiBcIiArIChcIkRvbid0IHRyeSB0byBoYW5kbGUgXCIgKyBBY3Rpb25UeXBlcy5JTklUICsgXCIgb3Igb3RoZXIgYWN0aW9ucyBpbiBcXFwicmVkdXgvKlxcXCIgXCIpICsgXCJuYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSBcIiArIFwiY3VycmVudCBzdGF0ZSBmb3IgYW55IHVua25vd24gYWN0aW9ucywgdW5sZXNzIGl0IGlzIHVuZGVmaW5lZCwgXCIgKyBcImluIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSBcIiArIFwiYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuXCIpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGRpZmZlcmVudCByZWR1Y2VyIGZ1bmN0aW9ucywgaW50byBhIHNpbmdsZVxuICogcmVkdWNlciBmdW5jdGlvbi4gSXQgd2lsbCBjYWxsIGV2ZXJ5IGNoaWxkIHJlZHVjZXIsIGFuZCBnYXRoZXIgdGhlaXIgcmVzdWx0c1xuICogaW50byBhIHNpbmdsZSBzdGF0ZSBvYmplY3QsIHdob3NlIGtleXMgY29ycmVzcG9uZCB0byB0aGUga2V5cyBvZiB0aGUgcGFzc2VkXG4gKiByZWR1Y2VyIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVkdWNlcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBjb3JyZXNwb25kIHRvIGRpZmZlcmVudFxuICogcmVkdWNlciBmdW5jdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNvbWJpbmVkIGludG8gb25lLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpblxuICogaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXMgcmVkdWNlcnNgIHN5bnRheC4gVGhlIHJlZHVjZXJzIG1heSBuZXZlciByZXR1cm5cbiAqIHVuZGVmaW5lZCBmb3IgYW55IGFjdGlvbi4gSW5zdGVhZCwgdGhleSBzaG91bGQgcmV0dXJuIHRoZWlyIGluaXRpYWwgc3RhdGVcbiAqIGlmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlbSB3YXMgdW5kZWZpbmVkLCBhbmQgdGhlIGN1cnJlbnQgc3RhdGUgZm9yIGFueVxuICogdW5yZWNvZ25pemVkIGFjdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgcmVkdWNlciBmdW5jdGlvbiB0aGF0IGludm9rZXMgZXZlcnkgcmVkdWNlciBpbnNpZGUgdGhlXG4gKiBwYXNzZWQgb2JqZWN0LCBhbmQgYnVpbGRzIGEgc3RhdGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUuXG4gKi9cblxuXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gcmVkdWNlcktleXNbaV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3YXJuaW5nKFwiTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTsgLy8gVGhpcyBpcyB1c2VkIHRvIG1ha2Ugc3VyZSB3ZSBkb24ndCB3YXJuIGFib3V0IHRoZSBzYW1lXG4gIC8vIGtleXMgbXVsdGlwbGUgdGltZXMuXG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG5cbiAgdHJ5IHtcbiAgICBhc3NlcnRSZWR1Y2VyU2hhcGUoZmluYWxSZWR1Y2Vycyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzaGFwZUFzc2VydGlvbkVycm9yID0gZTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfVxuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcblxuICAgICAgaWYgKHdhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgIHdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG5leHRTdGF0ZSA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UoX2tleSwgYWN0aW9uKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICB9XG5cbiAgICAgIG5leHRTdGF0ZVtfa2V5XSA9IG5leHRTdGF0ZUZvcktleTtcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IG5leHRTdGF0ZUZvcktleSAhPT0gcHJldmlvdXNTdGF0ZUZvcktleTtcbiAgICB9XG5cbiAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMoc3RhdGUpLmxlbmd0aDtcbiAgICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5leHRTdGF0ZSA6IHN0YXRlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb24gY3JlYXRvcnMsIGludG8gYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBzYW1lIGtleXMsIGJ1dCB3aXRoIGV2ZXJ5IGZ1bmN0aW9uIHdyYXBwZWQgaW50byBhIGBkaXNwYXRjaGAgY2FsbCBzbyB0aGV5XG4gKiBtYXkgYmUgaW52b2tlZCBkaXJlY3RseS4gVGhpcyBpcyBqdXN0IGEgY29udmVuaWVuY2UgbWV0aG9kLCBhcyB5b3UgY2FuIGNhbGxcbiAqIGBzdG9yZS5kaXNwYXRjaChNeUFjdGlvbkNyZWF0b3JzLmRvU29tZXRoaW5nKCkpYCB5b3Vyc2VsZiBqdXN0IGZpbmUuXG4gKlxuICogRm9yIGNvbnZlbmllbmNlLCB5b3UgY2FuIGFsc28gcGFzcyBhbiBhY3Rpb24gY3JlYXRvciBhcyB0aGUgZmlyc3QgYXJndW1lbnQsXG4gKiBhbmQgZ2V0IGEgZGlzcGF0Y2ggd3JhcHBlZCBmdW5jdGlvbiBpbiByZXR1cm4uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IGFjdGlvbkNyZWF0b3JzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvblxuICogY3JlYXRvciBmdW5jdGlvbnMuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzYFxuICogc3ludGF4LiBZb3UgbWF5IGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXNwYXRjaCBUaGUgYGRpc3BhdGNoYCBmdW5jdGlvbiBhdmFpbGFibGUgb24geW91ciBSZWR1eFxuICogc3RvcmUuXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gVGhlIG9iamVjdCBtaW1pY2tpbmcgdGhlIG9yaWdpbmFsIG9iamVjdCwgYnV0IHdpdGhcbiAqIGV2ZXJ5IGFjdGlvbiBjcmVhdG9yIHdyYXBwZWQgaW50byB0aGUgYGRpc3BhdGNoYCBjYWxsLiBJZiB5b3UgcGFzc2VkIGFcbiAqIGZ1bmN0aW9uIGFzIGBhY3Rpb25DcmVhdG9yc2AsIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBhbHNvIGJlIGEgc2luZ2xlXG4gKiBmdW5jdGlvbi5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9ycyhhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyAhPT0gJ29iamVjdCcgfHwgYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJiaW5kQWN0aW9uQ3JlYXRvcnMgZXhwZWN0ZWQgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24sIGluc3RlYWQgcmVjZWl2ZWQgXCIgKyAoYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgYWN0aW9uQ3JlYXRvcnMpICsgXCIuIFwiICsgXCJEaWQgeW91IHdyaXRlIFxcXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCIgaW5zdGVhZCBvZiBcXFwiaW1wb3J0ICogYXMgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCI/XCIpO1xuICB9XG5cbiAgdmFyIGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcblxuICBmb3IgKHZhciBrZXkgaW4gYWN0aW9uQ3JlYXRvcnMpIHtcbiAgICB2YXIgYWN0aW9uQ3JlYXRvciA9IGFjdGlvbkNyZWF0b3JzW2tleV07XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGJvdW5kQWN0aW9uQ3JlYXRvcnNba2V5XSA9IGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpKTtcbiAgfVxuXG4gIGlmIChlbnVtZXJhYmxlT25seSkga2V5cyA9IGtleXMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgfSk7XG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgIGlmIChpICUgMikge1xuICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG4vKipcbiAqIENvbXBvc2VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmlnaHRtb3N0XG4gKiBmdW5jdGlvbiBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMgYXMgaXQgcHJvdmlkZXMgdGhlIHNpZ25hdHVyZSBmb3JcbiAqIHRoZSByZXN1bHRpbmcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZ1bmNzIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiBvYnRhaW5lZCBieSBjb21wb3NpbmcgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uc1xuICogZnJvbSByaWdodCB0byBsZWZ0LiBGb3IgZXhhbXBsZSwgY29tcG9zZShmLCBnLCBoKSBpcyBpZGVudGljYWwgdG8gZG9pbmdcbiAqICguLi5hcmdzKSA9PiBmKGcoaCguLi5hcmdzKSkpLlxuICovXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cblxuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Rpc3BhdGNoaW5nIHdoaWxlIGNvbnN0cnVjdGluZyB5b3VyIG1pZGRsZXdhcmUgaXMgbm90IGFsbG93ZWQuICcgKyAnT3RoZXIgbWlkZGxld2FyZSB3b3VsZCBub3QgYmUgYXBwbGllZCB0byB0aGlzIGRpc3BhdGNoLicpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICAgIGdldFN0YXRlOiBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICAgIHJldHVybiBfZGlzcGF0Y2guYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGNoYWluID0gbWlkZGxld2FyZXMubWFwKGZ1bmN0aW9uIChtaWRkbGV3YXJlKSB7XG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKG1pZGRsZXdhcmVBUEkpO1xuICAgICAgfSk7XG4gICAgICBfZGlzcGF0Y2ggPSBjb21wb3NlLmFwcGx5KHZvaWQgMCwgY2hhaW4pKHN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkMih7fSwgc3RvcmUsIHtcbiAgICAgICAgZGlzcGF0Y2g6IF9kaXNwYXRjaFxuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuLypcbiAqIFRoaXMgaXMgYSBkdW1teSBmdW5jdGlvbiB0byBjaGVjayBpZiB0aGUgZnVuY3Rpb24gbmFtZSBoYXMgYmVlbiBhbHRlcmVkIGJ5IG1pbmlmaWNhdGlvbi5cbiAqIElmIHRoZSBmdW5jdGlvbiBoYXMgYmVlbiBtaW5pZmllZCBhbmQgTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJywgd2FybiB0aGUgdXNlci5cbiAqL1xuXG5mdW5jdGlvbiBpc0NydXNoZWQoKSB7fVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgaXNDcnVzaGVkLm5hbWUgPT09ICdzdHJpbmcnICYmIGlzQ3J1c2hlZC5uYW1lICE9PSAnaXNDcnVzaGVkJykge1xuICB3YXJuaW5nKCdZb3UgYXJlIGN1cnJlbnRseSB1c2luZyBtaW5pZmllZCBjb2RlIG91dHNpZGUgb2YgTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiLiAnICsgJ1RoaXMgbWVhbnMgdGhhdCB5b3UgYXJlIHJ1bm5pbmcgYSBzbG93ZXIgZGV2ZWxvcG1lbnQgYnVpbGQgb2YgUmVkdXguICcgKyAnWW91IGNhbiB1c2UgbG9vc2UtZW52aWZ5IChodHRwczovL2dpdGh1Yi5jb20vemVydG9zaC9sb29zZS1lbnZpZnkpIGZvciBicm93c2VyaWZ5ICcgKyAnb3Igc2V0dGluZyBtb2RlIHRvIHByb2R1Y3Rpb24gaW4gd2VicGFjayAoaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25jZXB0cy9tb2RlLykgJyArICd0byBlbnN1cmUgeW91IGhhdmUgdGhlIGNvcnJlY3QgY29kZSBmb3IgeW91ciBwcm9kdWN0aW9uIGJ1aWxkLicpO1xufVxuXG5leHBvcnQgeyBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzLCBhcHBseU1pZGRsZXdhcmUsIGJpbmRBY3Rpb25DcmVhdG9ycywgY29tYmluZVJlZHVjZXJzLCBjb21wb3NlLCBjcmVhdGVTdG9yZSB9O1xuIiwiaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGdldENvbnN0YW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0Q29uc3RhbnRTZWxlY3RvcihkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHZhciBjb25zdGFudCA9IGdldENvbnN0YW50KGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICAgIGZ1bmN0aW9uIGNvbnN0YW50U2VsZWN0b3IoKSB7XG4gICAgICByZXR1cm4gY29uc3RhbnQ7XG4gICAgfVxuXG4gICAgY29uc3RhbnRTZWxlY3Rvci5kZXBlbmRzT25Pd25Qcm9wcyA9IGZhbHNlO1xuICAgIHJldHVybiBjb25zdGFudFNlbGVjdG9yO1xuICB9O1xufSAvLyBkZXBlbmRzT25Pd25Qcm9wcyBpcyB1c2VkIGJ5IGNyZWF0ZU1hcFRvUHJvcHNQcm94eSB0byBkZXRlcm1pbmUgd2hldGhlciB0byBwYXNzIHByb3BzIGFzIGFyZ3Ncbi8vIHRvIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIHdyYXBwZWQuIEl0IGlzIGFsc28gdXNlZCBieSBtYWtlUHVyZVByb3BzU2VsZWN0b3IgdG8gZGV0ZXJtaW5lXG4vLyB3aGV0aGVyIG1hcFRvUHJvcHMgbmVlZHMgdG8gYmUgaW52b2tlZCB3aGVuIHByb3BzIGhhdmUgY2hhbmdlZC5cbi8vXG4vLyBBIGxlbmd0aCBvZiBvbmUgc2lnbmFscyB0aGF0IG1hcFRvUHJvcHMgZG9lcyBub3QgZGVwZW5kIG9uIHByb3BzIGZyb20gdGhlIHBhcmVudCBjb21wb25lbnQuXG4vLyBBIGxlbmd0aCBvZiB6ZXJvIGlzIGFzc3VtZWQgdG8gbWVhbiBtYXBUb1Byb3BzIGlzIGdldHRpbmcgYXJncyB2aWEgYXJndW1lbnRzIG9yIC4uLmFyZ3MgYW5kXG4vLyB0aGVyZWZvcmUgbm90IHJlcG9ydGluZyBpdHMgbGVuZ3RoIGFjY3VyYXRlbHkuLlxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcykge1xuICByZXR1cm4gbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gbnVsbCAmJiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSB1bmRlZmluZWQgPyBCb29sZWFuKG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIDogbWFwVG9Qcm9wcy5sZW5ndGggIT09IDE7XG59IC8vIFVzZWQgYnkgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24gYW5kIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLFxuLy8gdGhpcyBmdW5jdGlvbiB3cmFwcyBtYXBUb1Byb3BzIGluIGEgcHJveHkgZnVuY3Rpb24gd2hpY2ggZG9lcyBzZXZlcmFsIHRoaW5nczpcbi8vXG4vLyAgKiBEZXRlY3RzIHdoZXRoZXIgdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgY2FsbGVkIGRlcGVuZHMgb24gcHJvcHMsIHdoaWNoXG4vLyAgICBpcyB1c2VkIGJ5IHNlbGVjdG9yRmFjdG9yeSB0byBkZWNpZGUgaWYgaXQgc2hvdWxkIHJlaW52b2tlIG9uIHByb3BzIGNoYW5nZXMuXG4vL1xuLy8gICogT24gZmlyc3QgY2FsbCwgaGFuZGxlcyBtYXBUb1Byb3BzIGlmIHJldHVybnMgYW5vdGhlciBmdW5jdGlvbiwgYW5kIHRyZWF0cyB0aGF0XG4vLyAgICBuZXcgZnVuY3Rpb24gYXMgdGhlIHRydWUgbWFwVG9Qcm9wcyBmb3Igc3Vic2VxdWVudCBjYWxscy5cbi8vXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCB2ZXJpZmllcyB0aGUgZmlyc3QgcmVzdWx0IGlzIGEgcGxhaW4gb2JqZWN0LCBpbiBvcmRlciB0byB3YXJuXG4vLyAgICB0aGUgZGV2ZWxvcGVyIHRoYXQgdGhlaXIgbWFwVG9Qcm9wcyBmdW5jdGlvbiBpcyBub3QgcmV0dXJuaW5nIGEgdmFsaWQgcmVzdWx0LlxuLy9cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBUb1Byb3BzLCBtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0UHJveHlTZWxlY3RvcihkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWU7XG5cbiAgICB2YXIgcHJveHkgPSBmdW5jdGlvbiBtYXBUb1Byb3BzUHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcmV0dXJuIHByb3h5LmRlcGVuZHNPbk93blByb3BzID8gcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSA6IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoKTtcbiAgICB9OyAvLyBhbGxvdyBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5IHRvIGdldCBvd25Qcm9wc1xuXG5cbiAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IHRydWU7XG5cbiAgICBwcm94eS5tYXBUb1Byb3BzID0gZnVuY3Rpb24gZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICBwcm94eS5tYXBUb1Byb3BzID0gbWFwVG9Qcm9wcztcbiAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcyk7XG4gICAgICB2YXIgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgICAgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwcm94eS5tYXBUb1Byb3BzID0gcHJvcHM7XG4gICAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMocHJvcHMpO1xuICAgICAgICBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QocHJvcHMsIGRpc3BsYXlOYW1lLCBtZXRob2ROYW1lKTtcbiAgICAgIHJldHVybiBwcm9wcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb3h5O1xuICB9O1xufSIsImltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycyB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBEaXNwYXRjaFRvUHJvcHMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcERpc3BhdGNoVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3BhdGNoOiBkaXNwYXRjaFxuICAgIH07XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdChtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcERpc3BhdGNoVG9Qcm9wcyAmJiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnb2JqZWN0JyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyhtYXBEaXNwYXRjaFRvUHJvcHMsIGRpc3BhdGNoKTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcsIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdF07IiwiaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24obWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwU3RhdGVUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFN0YXRlVG9Qcm9wcywgJ21hcFN0YXRlVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmcobWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwU3RhdGVUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZ107IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRNZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3duUHJvcHMsIHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0TWVyZ2VQcm9wc1Byb3h5KGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZSxcbiAgICAgICAgcHVyZSA9IF9yZWYucHVyZSxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYuYXJlTWVyZ2VkUHJvcHNFcXVhbDtcbiAgICB2YXIgaGFzUnVuT25jZSA9IGZhbHNlO1xuICAgIHZhciBtZXJnZWRQcm9wcztcbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VQcm9wc1Byb3h5KHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gICAgICB2YXIgbmV4dE1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmIChoYXNSdW5PbmNlKSB7XG4gICAgICAgIGlmICghcHVyZSB8fCAhYXJlTWVyZ2VkUHJvcHNFcXVhbChuZXh0TWVyZ2VkUHJvcHMsIG1lcmdlZFByb3BzKSkgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYXNSdW5PbmNlID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChtZXJnZWRQcm9wcywgZGlzcGxheU5hbWUsICdtZXJnZVByb3BzJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgICB9O1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNGdW5jdGlvbihtZXJnZVByb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWVyZ2VQcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZChtZXJnZVByb3BzKSB7XG4gIHJldHVybiAhbWVyZ2VQcm9wcyA/IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1lcmdlUHJvcHM7XG4gIH0gOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZF07IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgdmVyaWZ5U3Vic2VsZWN0b3JzIGZyb20gJy4vdmVyaWZ5U3Vic2VsZWN0b3JzJztcbmV4cG9ydCBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yKHN0YXRlLCBvd25Qcm9wcykge1xuICAgIHJldHVybiBtZXJnZVByb3BzKG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpLCBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKSwgb3duUHJvcHMpO1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgX3JlZikge1xuICB2YXIgYXJlU3RhdGVzRXF1YWwgPSBfcmVmLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYuYXJlU3RhdGVQcm9wc0VxdWFsO1xuICB2YXIgaGFzUnVuQXRMZWFzdE9uY2UgPSBmYWxzZTtcbiAgdmFyIHN0YXRlO1xuICB2YXIgb3duUHJvcHM7XG4gIHZhciBzdGF0ZVByb3BzO1xuICB2YXIgZGlzcGF0Y2hQcm9wcztcbiAgdmFyIG1lcmdlZFByb3BzO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUZpcnN0Q2FsbChmaXJzdFN0YXRlLCBmaXJzdE93blByb3BzKSB7XG4gICAgc3RhdGUgPSBmaXJzdFN0YXRlO1xuICAgIG93blByb3BzID0gZmlyc3RPd25Qcm9wcztcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgaGFzUnVuQXRMZWFzdE9uY2UgPSB0cnVlO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKSB7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzKCkge1xuICAgIGlmIChtYXBTdGF0ZVRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdTdGF0ZSgpIHtcbiAgICB2YXIgbmV4dFN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVQcm9wc0NoYW5nZWQgPSAhYXJlU3RhdGVQcm9wc0VxdWFsKG5leHRTdGF0ZVByb3BzLCBzdGF0ZVByb3BzKTtcbiAgICBzdGF0ZVByb3BzID0gbmV4dFN0YXRlUHJvcHM7XG4gICAgaWYgKHN0YXRlUHJvcHNDaGFuZ2VkKSBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHZhciBwcm9wc0NoYW5nZWQgPSAhYXJlT3duUHJvcHNFcXVhbChuZXh0T3duUHJvcHMsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVDaGFuZ2VkID0gIWFyZVN0YXRlc0VxdWFsKG5leHRTdGF0ZSwgc3RhdGUpO1xuICAgIHN0YXRlID0gbmV4dFN0YXRlO1xuICAgIG93blByb3BzID0gbmV4dE93blByb3BzO1xuICAgIGlmIChwcm9wc0NoYW5nZWQgJiYgc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpO1xuICAgIGlmIChwcm9wc0NoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wcygpO1xuICAgIGlmIChzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdTdGF0ZSgpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgcmV0dXJuIGhhc1J1bkF0TGVhc3RPbmNlID8gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA6IGhhbmRsZUZpcnN0Q2FsbChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcyk7XG4gIH07XG59IC8vIFRPRE86IEFkZCBtb3JlIGNvbW1lbnRzXG4vLyBJZiBwdXJlIGlzIHRydWUsIHRoZSBzZWxlY3RvciByZXR1cm5lZCBieSBzZWxlY3RvckZhY3Rvcnkgd2lsbCBtZW1vaXplIGl0cyByZXN1bHRzLFxuLy8gYWxsb3dpbmcgY29ubmVjdEFkdmFuY2VkJ3Mgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHRvIHJldHVybiBmYWxzZSBpZiBmaW5hbFxuLy8gcHJvcHMgaGF2ZSBub3QgY2hhbmdlZC4gSWYgZmFsc2UsIHRoZSBzZWxlY3RvciB3aWxsIGFsd2F5cyByZXR1cm4gYSBuZXdcbi8vIG9iamVjdCBhbmQgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHdpbGwgYWx3YXlzIHJldHVybiB0cnVlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KGRpc3BhdGNoLCBfcmVmMikge1xuICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gX3JlZjIuaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzID0gX3JlZjIuaW5pdE1lcmdlUHJvcHMsXG4gICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImluaXRNYXBTdGF0ZVRvUHJvcHNcIiwgXCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzXCIsIFwiaW5pdE1lcmdlUHJvcHNcIl0pO1xuXG4gIHZhciBtYXBTdGF0ZVRvUHJvcHMgPSBpbml0TWFwU3RhdGVUb1Byb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcbiAgdmFyIG1hcERpc3BhdGNoVG9Qcm9wcyA9IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWVyZ2VQcm9wcyA9IGluaXRNZXJnZVByb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZlcmlmeVN1YnNlbGVjdG9ycyhtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgb3B0aW9ucy5kaXNwbGF5TmFtZSk7XG4gIH1cblxuICB2YXIgc2VsZWN0b3JGYWN0b3J5ID0gb3B0aW9ucy5wdXJlID8gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkgOiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5O1xuICByZXR1cm4gc2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgb3B0aW9ucyk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBjb25uZWN0QWR2YW5jZWQgZnJvbSAnLi4vY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQnO1xuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICcuLi91dGlscy9zaGFsbG93RXF1YWwnO1xuaW1wb3J0IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tYXBEaXNwYXRjaFRvUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tYXBTdGF0ZVRvUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIGZyb20gJy4vbWVyZ2VQcm9wcyc7XG5pbXBvcnQgZGVmYXVsdFNlbGVjdG9yRmFjdG9yeSBmcm9tICcuL3NlbGVjdG9yRmFjdG9yeSc7XG4vKlxuICBjb25uZWN0IGlzIGEgZmFjYWRlIG92ZXIgY29ubmVjdEFkdmFuY2VkLiBJdCB0dXJucyBpdHMgYXJncyBpbnRvIGEgY29tcGF0aWJsZVxuICBzZWxlY3RvckZhY3RvcnksIHdoaWNoIGhhcyB0aGUgc2lnbmF0dXJlOlxuXG4gICAgKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpID0+IG5leHRGaW5hbFByb3BzXG4gIFxuICBjb25uZWN0IHBhc3NlcyBpdHMgYXJncyB0byBjb25uZWN0QWR2YW5jZWQgYXMgb3B0aW9ucywgd2hpY2ggd2lsbCBpbiB0dXJuIHBhc3MgdGhlbSB0b1xuICBzZWxlY3RvckZhY3RvcnkgZWFjaCB0aW1lIGEgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2UgaXMgaW5zdGFudGlhdGVkIG9yIGhvdCByZWxvYWRlZC5cblxuICBzZWxlY3RvckZhY3RvcnkgcmV0dXJucyBhIGZpbmFsIHByb3BzIHNlbGVjdG9yIGZyb20gaXRzIG1hcFN0YXRlVG9Qcm9wcyxcbiAgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgbWVyZ2VQcm9wcyxcbiAgbWVyZ2VQcm9wc0ZhY3RvcmllcywgYW5kIHB1cmUgYXJncy5cblxuICBUaGUgcmVzdWx0aW5nIGZpbmFsIHByb3BzIHNlbGVjdG9yIGlzIGNhbGxlZCBieSB0aGUgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2Ugd2hlbmV2ZXJcbiAgaXQgcmVjZWl2ZXMgbmV3IHByb3BzIG9yIHN0b3JlIHN0YXRlLlxuICovXG5cbmZ1bmN0aW9uIG1hdGNoKGFyZywgZmFjdG9yaWVzLCBuYW1lKSB7XG4gIGZvciAodmFyIGkgPSBmYWN0b3JpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcmVzdWx0ID0gZmFjdG9yaWVzW2ldKGFyZyk7XG4gICAgaWYgKHJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHZhbHVlIG9mIHR5cGUgXCIgKyB0eXBlb2YgYXJnICsgXCIgZm9yIFwiICsgbmFtZSArIFwiIGFyZ3VtZW50IHdoZW4gY29ubmVjdGluZyBjb21wb25lbnQgXCIgKyBvcHRpb25zLndyYXBwZWRDb21wb25lbnROYW1lICsgXCIuXCIpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHJpY3RFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufSAvLyBjcmVhdGVDb25uZWN0IHdpdGggZGVmYXVsdCBhcmdzIGJ1aWxkcyB0aGUgJ29mZmljaWFsJyBjb25uZWN0IGJlaGF2aW9yLiBDYWxsaW5nIGl0IHdpdGhcbi8vIGRpZmZlcmVudCBvcHRpb25zIG9wZW5zIHVwIHNvbWUgdGVzdGluZyBhbmQgZXh0ZW5zaWJpbGl0eSBzY2VuYXJpb3NcblxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29ubmVjdChfdGVtcCkge1xuICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgX3JlZiRjb25uZWN0SE9DID0gX3JlZi5jb25uZWN0SE9DLFxuICAgICAgY29ubmVjdEhPQyA9IF9yZWYkY29ubmVjdEhPQyA9PT0gdm9pZCAwID8gY29ubmVjdEFkdmFuY2VkIDogX3JlZiRjb25uZWN0SE9DLFxuICAgICAgX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID0gX3JlZi5tYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPT09IHZvaWQgMCA/IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YsXG4gICAgICBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPSBfcmVmLm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9PT0gdm9pZCAwID8gZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyxcbiAgICAgIF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9IF9yZWYubWVyZ2VQcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1lcmdlUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPT09IHZvaWQgMCA/IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIDogX3JlZiRtZXJnZVByb3BzRmFjdG9yLFxuICAgICAgX3JlZiRzZWxlY3RvckZhY3RvcnkgPSBfcmVmLnNlbGVjdG9yRmFjdG9yeSxcbiAgICAgIHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYkc2VsZWN0b3JGYWN0b3J5ID09PSB2b2lkIDAgPyBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IDogX3JlZiRzZWxlY3RvckZhY3Rvcnk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIF9yZWYyKSB7XG4gICAgaWYgKF9yZWYyID09PSB2b2lkIDApIHtcbiAgICAgIF9yZWYyID0ge307XG4gICAgfVxuXG4gICAgdmFyIF9yZWYzID0gX3JlZjIsXG4gICAgICAgIF9yZWYzJHB1cmUgPSBfcmVmMy5wdXJlLFxuICAgICAgICBwdXJlID0gX3JlZjMkcHVyZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYzJHB1cmUsXG4gICAgICAgIF9yZWYzJGFyZVN0YXRlc0VxdWFsID0gX3JlZjMuYXJlU3RhdGVzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlc0VxdWFsID0gX3JlZjMkYXJlU3RhdGVzRXF1YWwgPT09IHZvaWQgMCA/IHN0cmljdEVxdWFsIDogX3JlZjMkYXJlU3RhdGVzRXF1YWwsXG4gICAgICAgIF9yZWYzJGFyZU93blByb3BzRXF1YSA9IF9yZWYzLmFyZU93blByb3BzRXF1YWwsXG4gICAgICAgIGFyZU93blByb3BzRXF1YWwgPSBfcmVmMyRhcmVPd25Qcm9wc0VxdWEgPT09IHZvaWQgMCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYzJGFyZU93blByb3BzRXF1YSxcbiAgICAgICAgX3JlZjMkYXJlU3RhdGVQcm9wc0VxID0gX3JlZjMuYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBfcmVmMyRhcmVTdGF0ZVByb3BzRXEgPT09IHZvaWQgMCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYzJGFyZVN0YXRlUHJvcHNFcSxcbiAgICAgICAgX3JlZjMkYXJlTWVyZ2VkUHJvcHNFID0gX3JlZjMuYXJlTWVyZ2VkUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYzJGFyZU1lcmdlZFByb3BzRSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlTWVyZ2VkUHJvcHNFLFxuICAgICAgICBleHRyYU9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMywgW1wicHVyZVwiLCBcImFyZVN0YXRlc0VxdWFsXCIsIFwiYXJlT3duUHJvcHNFcXVhbFwiLCBcImFyZVN0YXRlUHJvcHNFcXVhbFwiLCBcImFyZU1lcmdlZFByb3BzRXF1YWxcIl0pO1xuXG4gICAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBtYXRjaChtYXBTdGF0ZVRvUHJvcHMsIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgJ21hcFN0YXRlVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gbWF0Y2gobWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1lcmdlUHJvcHMgPSBtYXRjaChtZXJnZVByb3BzLCBtZXJnZVByb3BzRmFjdG9yaWVzLCAnbWVyZ2VQcm9wcycpO1xuICAgIHJldHVybiBjb25uZWN0SE9DKHNlbGVjdG9yRmFjdG9yeSwgX2V4dGVuZHMoe1xuICAgICAgLy8gdXNlZCBpbiBlcnJvciBtZXNzYWdlc1xuICAgICAgbWV0aG9kTmFtZTogJ2Nvbm5lY3QnLFxuICAgICAgLy8gdXNlZCB0byBjb21wdXRlIENvbm5lY3QncyBkaXNwbGF5TmFtZSBmcm9tIHRoZSB3cmFwcGVkIGNvbXBvbmVudCdzIGRpc3BsYXlOYW1lLlxuICAgICAgZ2V0RGlzcGxheU5hbWU6IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIFwiQ29ubmVjdChcIiArIG5hbWUgKyBcIilcIjtcbiAgICAgIH0sXG4gICAgICAvLyBpZiBtYXBTdGF0ZVRvUHJvcHMgaXMgZmFsc3ksIHRoZSBDb25uZWN0IGNvbXBvbmVudCBkb2Vzbid0IHN1YnNjcmliZSB0byBzdG9yZSBzdGF0ZSBjaGFuZ2VzXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IEJvb2xlYW4obWFwU3RhdGVUb1Byb3BzKSxcbiAgICAgIC8vIHBhc3NlZCB0aHJvdWdoIHRvIHNlbGVjdG9yRmFjdG9yeVxuICAgICAgaW5pdE1hcFN0YXRlVG9Qcm9wczogaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHM6IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wczogaW5pdE1lcmdlUHJvcHMsXG4gICAgICBwdXJlOiBwdXJlLFxuICAgICAgYXJlU3RhdGVzRXF1YWw6IGFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbDogYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbDogYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbDogYXJlTWVyZ2VkUHJvcHNFcXVhbFxuICAgIH0sIGV4dHJhT3B0aW9ucykpO1xuICB9O1xufVxuZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL2NyZWF0ZUNvbm5lY3QoKTsiLCJpbXBvcnQgeyB1c2VSZWR1Y2VyLCB1c2VSZWYsIHVzZU1lbW8sIHVzZUNvbnRleHQsIHVzZURlYnVnVmFsdWUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgYXMgdXNlRGVmYXVsdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vdXNlUmVkdXhDb250ZXh0JztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLi91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0JztcblxudmFyIHJlZkVxdWFsaXR5ID0gZnVuY3Rpb24gcmVmRXF1YWxpdHkoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn07XG5cbmZ1bmN0aW9uIHVzZVNlbGVjdG9yV2l0aFN0b3JlQW5kU3Vic2NyaXB0aW9uKHNlbGVjdG9yLCBlcXVhbGl0eUZuLCBzdG9yZSwgY29udGV4dFN1Yikge1xuICB2YXIgX3VzZVJlZHVjZXIgPSB1c2VSZWR1Y2VyKGZ1bmN0aW9uIChzKSB7XG4gICAgcmV0dXJuIHMgKyAxO1xuICB9LCAwKSxcbiAgICAgIGZvcmNlUmVuZGVyID0gX3VzZVJlZHVjZXJbMV07XG5cbiAgdmFyIHN1YnNjcmlwdGlvbiA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKHN0b3JlLCBjb250ZXh0U3ViKTtcbiAgfSwgW3N0b3JlLCBjb250ZXh0U3ViXSk7XG4gIHZhciBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yID0gdXNlUmVmKCk7XG4gIHZhciBsYXRlc3RTZWxlY3RvciA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U3RvcmVTdGF0ZSA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U2VsZWN0ZWRTdGF0ZSA9IHVzZVJlZigpO1xuICB2YXIgc3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gIHZhciBzZWxlY3RlZFN0YXRlO1xuXG4gIHRyeSB7XG4gICAgaWYgKHNlbGVjdG9yICE9PSBsYXRlc3RTZWxlY3Rvci5jdXJyZW50IHx8IHN0b3JlU3RhdGUgIT09IGxhdGVzdFN0b3JlU3RhdGUuY3VycmVudCB8fCBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgIHNlbGVjdGVkU3RhdGUgPSBzZWxlY3RvcihzdG9yZVN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0ZWRTdGF0ZSA9IGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudDtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgIGVyci5tZXNzYWdlICs9IFwiXFxuVGhlIGVycm9yIG1heSBiZSBjb3JyZWxhdGVkIHdpdGggdGhpcyBwcmV2aW91cyBlcnJvcjpcXG5cIiArIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudC5zdGFjayArIFwiXFxuXFxuXCI7XG4gICAgfVxuXG4gICAgdGhyb3cgZXJyO1xuICB9XG5cbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgbGF0ZXN0U2VsZWN0b3IuY3VycmVudCA9IHNlbGVjdG9yO1xuICAgIGxhdGVzdFN0b3JlU3RhdGUuY3VycmVudCA9IHN0b3JlU3RhdGU7XG4gICAgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50ID0gc2VsZWN0ZWRTdGF0ZTtcbiAgICBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gIH0pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBjaGVja0ZvclVwZGF0ZXMoKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbmV3U2VsZWN0ZWRTdGF0ZSA9IGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQoc3RvcmUuZ2V0U3RhdGUoKSk7XG5cbiAgICAgICAgaWYgKGVxdWFsaXR5Rm4obmV3U2VsZWN0ZWRTdGF0ZSwgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50KSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCA9IG5ld1NlbGVjdGVkU3RhdGU7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gd2UgaWdub3JlIGFsbCBlcnJvcnMgaGVyZSwgc2luY2Ugd2hlbiB0aGUgY29tcG9uZW50XG4gICAgICAgIC8vIGlzIHJlLXJlbmRlcmVkLCB0aGUgc2VsZWN0b3JzIGFyZSBjYWxsZWQgYWdhaW4sIGFuZFxuICAgICAgICAvLyB3aWxsIHRocm93IGFnYWluLCBpZiBuZWl0aGVyIHByb3BzIG5vciBzdG9yZSBzdGF0ZVxuICAgICAgICAvLyBjaGFuZ2VkXG4gICAgICAgIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCA9IGVycjtcbiAgICAgIH1cblxuICAgICAgZm9yY2VSZW5kZXIoKTtcbiAgICB9XG5cbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IGNoZWNrRm9yVXBkYXRlcztcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG4gICAgY2hlY2tGb3JVcGRhdGVzKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCBbc3RvcmUsIHN1YnNjcmlwdGlvbl0pO1xuICByZXR1cm4gc2VsZWN0ZWRTdGF0ZTtcbn1cbi8qKlxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZVNlbGVjdG9yYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0LkNvbnRleHR9IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlU2VsZWN0b3JgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9ySG9vayhjb250ZXh0KSB7XG4gIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICBjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQ7XG4gIH1cblxuICB2YXIgdXNlUmVkdXhDb250ZXh0ID0gY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpO1xuICB9O1xuICByZXR1cm4gZnVuY3Rpb24gdXNlU2VsZWN0b3Ioc2VsZWN0b3IsIGVxdWFsaXR5Rm4pIHtcbiAgICBpZiAoZXF1YWxpdHlGbiA9PT0gdm9pZCAwKSB7XG4gICAgICBlcXVhbGl0eUZuID0gcmVmRXF1YWxpdHk7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXNlbGVjdG9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbXVzdCBwYXNzIGEgc2VsZWN0b3IgdG8gdXNlU2VsZWN0b3JcIik7XG4gICAgfVxuXG4gICAgdmFyIF91c2VSZWR1eENvbnRleHQgPSB1c2VSZWR1eENvbnRleHQoKSxcbiAgICAgICAgc3RvcmUgPSBfdXNlUmVkdXhDb250ZXh0LnN0b3JlLFxuICAgICAgICBjb250ZXh0U3ViID0gX3VzZVJlZHV4Q29udGV4dC5zdWJzY3JpcHRpb247XG5cbiAgICB2YXIgc2VsZWN0ZWRTdGF0ZSA9IHVzZVNlbGVjdG9yV2l0aFN0b3JlQW5kU3Vic2NyaXB0aW9uKHNlbGVjdG9yLCBlcXVhbGl0eUZuLCBzdG9yZSwgY29udGV4dFN1Yik7XG4gICAgdXNlRGVidWdWYWx1ZShzZWxlY3RlZFN0YXRlKTtcbiAgICByZXR1cm4gc2VsZWN0ZWRTdGF0ZTtcbiAgfTtcbn1cbi8qKlxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggc3RvcmUncyBzdGF0ZS4gVGhpcyBob29rIHRha2VzIGEgc2VsZWN0b3IgZnVuY3Rpb25cbiAqIGFzIGFuIGFyZ3VtZW50LiBUaGUgc2VsZWN0b3IgaXMgY2FsbGVkIHdpdGggdGhlIHN0b3JlIHN0YXRlLlxuICpcbiAqIFRoaXMgaG9vayB0YWtlcyBhbiBvcHRpb25hbCBlcXVhbGl0eSBjb21wYXJpc29uIGZ1bmN0aW9uIGFzIHRoZSBzZWNvbmQgcGFyYW1ldGVyXG4gKiB0aGF0IGFsbG93cyB5b3UgdG8gY3VzdG9taXplIHRoZSB3YXkgdGhlIHNlbGVjdGVkIHN0YXRlIGlzIGNvbXBhcmVkIHRvIGRldGVybWluZVxuICogd2hldGhlciB0aGUgY29tcG9uZW50IG5lZWRzIHRvIGJlIHJlLXJlbmRlcmVkLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNlbGVjdG9yIHRoZSBzZWxlY3RvciBmdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbj19IGVxdWFsaXR5Rm4gdGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGRldGVybWluZSBlcXVhbGl0eVxuICpcbiAqIEByZXR1cm5zIHthbnl9IHRoZSBzZWxlY3RlZCBzdGF0ZVxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuICogaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCdcbiAqXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICgpID0+IHtcbiAqICAgY29uc3QgY291bnRlciA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHN0YXRlLmNvdW50ZXIpXG4gKiAgIHJldHVybiA8ZGl2Pntjb3VudGVyfTwvZGl2PlxuICogfVxuICovXG5cbmV4cG9ydCB2YXIgdXNlU2VsZWN0b3IgPSAvKiNfX1BVUkVfXyovY3JlYXRlU2VsZWN0b3JIb29rKCk7IiwiaW1wb3J0IFByb3ZpZGVyIGZyb20gJy4vY29tcG9uZW50cy9Qcm92aWRlcic7XG5pbXBvcnQgY29ubmVjdEFkdmFuY2VkIGZyb20gJy4vY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL2NvbXBvbmVudHMvQ29udGV4dCc7XG5pbXBvcnQgY29ubmVjdCBmcm9tICcuL2Nvbm5lY3QvY29ubmVjdCc7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgY3JlYXRlRGlzcGF0Y2hIb29rIH0gZnJvbSAnLi9ob29rcy91c2VEaXNwYXRjaCc7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciwgY3JlYXRlU2VsZWN0b3JIb29rIH0gZnJvbSAnLi9ob29rcy91c2VTZWxlY3Rvcic7XG5pbXBvcnQgeyB1c2VTdG9yZSwgY3JlYXRlU3RvcmVIb29rIH0gZnJvbSAnLi9ob29rcy91c2VTdG9yZSc7XG5pbXBvcnQgeyBzZXRCYXRjaCB9IGZyb20gJy4vdXRpbHMvYmF0Y2gnO1xuaW1wb3J0IHsgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgYXMgYmF0Y2ggfSBmcm9tICcuL3V0aWxzL3JlYWN0QmF0Y2hlZFVwZGF0ZXMnO1xuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICcuL3V0aWxzL3NoYWxsb3dFcXVhbCc7XG5zZXRCYXRjaChiYXRjaCk7XG5leHBvcnQgeyBQcm92aWRlciwgY29ubmVjdEFkdmFuY2VkLCBSZWFjdFJlZHV4Q29udGV4dCwgY29ubmVjdCwgYmF0Y2gsIHVzZURpc3BhdGNoLCBjcmVhdGVEaXNwYXRjaEhvb2ssIHVzZVNlbGVjdG9yLCBjcmVhdGVTZWxlY3Rvckhvb2ssIHVzZVN0b3JlLCBjcmVhdGVTdG9yZUhvb2ssIHNoYWxsb3dFcXVhbCB9OyIsImV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBpbml0aWFsU3RhdGUgPSB0eXBlb2YgYXJnc1thcmdzLmxlbmd0aCAtIDFdICE9PSAnZnVuY3Rpb24nICYmIGFyZ3MucG9wKCk7XG4gIHZhciByZWR1Y2VycyA9IGFyZ3M7XG5cbiAgaWYgKHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIGluaXRpYWwgc3RhdGUgbWF5IG5vdCBiZSB1bmRlZmluZWQuIElmIHlvdSBkbyBub3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCB5b3UgY2FuIHVzZSBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLicpO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChwcmV2U3RhdGUsIHZhbHVlKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIgPiAyID8gX2xlbjIgLSAyIDogMCksIF9rZXkyID0gMjsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5MiAtIDJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICB2YXIgcHJldlN0YXRlSXNVbmRlZmluZWQgPSB0eXBlb2YgcHJldlN0YXRlID09PSAndW5kZWZpbmVkJztcbiAgICB2YXIgdmFsdWVJc1VuZGVmaW5lZCA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCc7XG5cbiAgICBpZiAocHJldlN0YXRlSXNVbmRlZmluZWQgJiYgdmFsdWVJc1VuZGVmaW5lZCAmJiBpbml0aWFsU3RhdGUpIHtcbiAgICAgIHJldHVybiBpbml0aWFsU3RhdGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlZHVjZXJzLnJlZHVjZShmdW5jdGlvbiAobmV3U3RhdGUsIHJlZHVjZXIpIHtcbiAgICAgIHJldHVybiByZWR1Y2VyLmFwcGx5KHVuZGVmaW5lZCwgW25ld1N0YXRlLCB2YWx1ZV0uY29uY2F0KGFyZ3MpKTtcbiAgICB9LCBwcmV2U3RhdGVJc1VuZGVmaW5lZCAmJiAhdmFsdWVJc1VuZGVmaW5lZCAmJiBpbml0aWFsU3RhdGUgPyBpbml0aWFsU3RhdGUgOiBwcmV2U3RhdGUpO1xuICB9O1xufSk7IiwiaW1wb3J0IGlzUGxhaW5PYmplY3QgZnJvbSAnLi9pc1BsYWluT2JqZWN0JztcbmltcG9ydCBpc01hcCBmcm9tICcuL2lzTWFwJztcbmltcG9ydCBoYXNHZW5lcmF0b3JJbnRlcmZhY2UgZnJvbSAnLi9oYXNHZW5lcmF0b3JJbnRlcmZhY2UnO1xuaW1wb3J0IGZsYXR0ZW5XaGVuTm9kZSBmcm9tICcuL2ZsYXR0ZW5XaGVuTm9kZSc7XG5leHBvcnQgZGVmYXVsdCBmbGF0dGVuV2hlbk5vZGUoZnVuY3Rpb24gKG5vZGUpIHtcbiAgcmV0dXJuIChpc1BsYWluT2JqZWN0KG5vZGUpIHx8IGlzTWFwKG5vZGUpKSAmJiAhaGFzR2VuZXJhdG9ySW50ZXJmYWNlKG5vZGUpO1xufSk7IiwiaW1wb3J0IG93bktleXMgZnJvbSAnLi9vd25LZXlzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhc0dlbmVyYXRvckludGVyZmFjZShoYW5kbGVyKSB7XG4gIHZhciBrZXlzID0gb3duS2V5cyhoYW5kbGVyKTtcbiAgdmFyIGhhc09ubHlJbnRlcmZhY2VOYW1lcyA9IGtleXMuZXZlcnkoZnVuY3Rpb24gKG93bktleSkge1xuICAgIHJldHVybiBvd25LZXkgPT09ICduZXh0JyB8fCBvd25LZXkgPT09ICd0aHJvdyc7XG4gIH0pO1xuICByZXR1cm4ga2V5cy5sZW5ndGggJiYga2V5cy5sZW5ndGggPD0gMiAmJiBoYXNPbmx5SW50ZXJmYWNlTmFtZXM7XG59IiwiZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbn0pOyIsImV4cG9ydCBjb25zdCBteURhdGE9e1xyXG4gICAgbmFtZTogXCLQl9Cw0LPQu9Cw0LLQvdC+0LLQsCDQntC70YzQs9CwINCf0LXRgtGA0L7QstC90LBcIixcclxuICAgIGJpcnRoZGF0ZTogXCIxNSDRj9C90LLQsNGA0Y8gMTk3OdCzLlwiLFxyXG4gICAgd2lzaEpvYjoge1xyXG4gICAgICAgIG5hbWU6IFwiRnJvbnRlbmQt0YDQsNC30YDQsNCx0L7RgtGH0LjQulwiLFxyXG4gICAgICAgIGV4cGlyaWVuY2U6IFwi0LTQviAxINCz0L7QtNCwXCIsXHJcbiAgICAgICAgd29ya2RheTogXCLQp9Cw0YHRgtC40YfQvdCw0Y8g0LfQsNC90Y/RgtC+0YHRgtGMLCDQv9C+0LvQvdCw0Y8g0LfQsNC90Y/RgtC+0YHRgtGMXCIsXHJcbiAgICAgICAgc2NoZWR1bGU6IFwi0KPQtNCw0LvQtdC90L3QsNGPINGA0LDQsdC+0YLQsCwg0LPQuNCx0LrQuNC5INCz0YDQsNGE0LjQuiwg0L/QvtC70L3Ri9C5INC00LXQvdGMXCJcclxuICAgICAgICB9LFxyXG4gICAgYWJvdXRNZToge1xyXG4gICAgICAgIGNpdHk6IFwi0LMu0KfQtdCx0L7QutGB0LDRgNGLXCIsXHJcbiAgICAgICAgY2l0aXplbjogXCLQoNCkXCIsXHJcbiAgICAgICAgZ2VuZGVyOiBcItC20LXQvdGB0LrQuNC5XCIsXHJcbiAgICAgICAgc2VsZkluZm9ybWF0aW9uOiBcItCe0YLQstC10YLRgdGC0LLQtdC90L3QsNGPLCDQuNGB0L/QvtC70L3QuNGC0LXQu9GM0L3QsNGPLCDRhtC10LvQtdGD0YHRgtGA0LXQvNC70LXQvdC90LDRjy5cIlxyXG4gICAgfSxcclxuICAgIG1haW5FZHVjYXRpb246IHtcclxuICAgICAgICB5ZWFyOiBcIjE5OTYtMjAwMVwiLFxyXG4gICAgICAgIGluc3RpdHV0ZTogXCLQp9GD0LLQsNGI0YHQutC40Lkg0LPQvtGB0YPQtNCw0YDRgdGC0LLQtdC90L3Ri9C5INGD0L3QuNCy0LXRgNGB0LjRgtC10YIg0LjQvC4g0Jgu0J0uINCj0LvRjNGP0L3QvtCy0LAs0KfQtdCx0L7QutGB0LDRgNGLXCIsXHJcbiAgICAgICAgZmFjdWx0eTogXCLQpNCw0LrRg9C70YzRgtC10YIg0JjQvdGE0L7RgNC80LDRgtC40LrQuCDQuCDQstGL0YfQuNGB0LvQuNGC0LXQu9GM0L3QvtC5INGC0LXRhdC90LjQutC4LCDQn9GA0L7Qs9GA0LDQvNC80L3QvtC1INC+0LHQtdGB0L/QtdGH0LXQvdC40LUg0LLRi9GH0LjRgdC70LjRgtC10LvRjNC90L7QuSDRgtC10YXQvdC40LrQuCDQuCDQuNC90YTQvtGA0LzQsNGG0LjQvtC90L3Ri9GFINGB0LjRgdGC0LXQvFwiXHJcbiAgICB9LFxyXG4gICAgYWRkaXRpb25hbEVkdWNhdGlvbjoge1xyXG4gICAgICAgIDE6IHtcclxuICAgICAgICAgICAgeWVhcjogXCIyMDEzXCIsXHJcbiAgICAgICAgICAgIGluc3RpdHV0ZTogXCLQqNC60L7Qu9CwINGC0LXRhdC90L7Qu9C+0LPQuNC5INCx0LjQt9C90LXRgdCwXCIsXHJcbiAgICAgICAgICAgIGNvdXJzZU5hbWU6IFwi0KLRgNC10L3QuNC90LMuINCo0LrQvtC70LAg0YLQtdGF0L3QvtC70L7Qs9C40Lkg0LHQuNC30L3QtdGB0LAsINCg0LDQt9Cy0LjRgtC40LUg0YPQv9GA0LDQstC70LXQvdGH0LXRgdC60LjRhSDQutC+0LzQv9C10YLQtdC90YbQuNC5LiDQmNC90YHRgtGA0YPQvNC10L3RgtGLINGN0YTRhNC10LrRgtC40LLQvdC+0LPQviDRgNGD0LrQvtCy0L7QtNC40YLQtdC70Y8uXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIDI6IHtcclxuICAgICAgICAgICAgeWVhcjogXCLQsNCy0LPRg9GB0YIgMjAxOS3QuNGO0L3RjCAyMDIwXCIsXHJcbiAgICAgICAgICAgIGluc3RpdHV0ZTogXCJHZWVrQnJhaW5zXCIsXHJcbiAgICAgICAgICAgIGNvdXJzZU5hbWU6IFwiRnJvbnRlbmQt0YDQsNC30YDQsNCx0L7RgtGH0LjQulwiXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHF1YWxpZmljYXRpb246IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHllYXI6IFwi0L3QvtGP0LHRgNGMIDIwMTkgLSDQvdCw0YHRgtC+0Y/RidC10LUg0LLRgNC10LzRj1wiLFxyXG4gICAgICAgICAgICBjb21wYW55OiBcItCg0KLQodC+0YTRgiwg0JDQnlwiLFxyXG4gICAgICAgICAgICBjaXR5OiBcItCn0LXQsdC+0LrRgdCw0YDRi1wiLFxyXG4gICAgICAgICAgICBjb21wYW55TGluazogXCJodHRwOi8vcnRzb2Z0LnJ1XCIsXHJcbiAgICAgICAgICAgIGpvYjogXCLQk9C70LDQstC90YvQuSDRgdC/0LXRhtC40LDQu9C40YHRgiDQvtGC0LTQtdC70LAg0YHQuNGB0YLQtdC80L3QvtC5INC40L3RgtC10LPRgNCw0YbQuNC4XCIsXHJcbiAgICAgICAgICAgIGR1dHk6IFwi0J/QvtC00LPQvtGC0L7QstC60LAg0YLQtdGF0L3QuNC60L4t0LrQvtC80LzQtdGA0YfQtdGB0LrQuNGFINC/0YDQtdC00LvQvtC20LXQvdC40LkuXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgeWVhcjogXCLQodC10L3RgtGP0LHRgNGMIDIwMTYg4oCUINC90L7Rj9Cx0YDRjCAyMDE5LCAzINCz0L7QtNCwIDIg0LzQtdGB0Y/RhtCwXCIsXHJcbiAgICAgICAgICAgIGNvbXBhbnk6IFwi0KDQotCh0L7RhNGCLCDQkNCeXCIsXHJcbiAgICAgICAgICAgIGNpdHk6IFwi0KfQtdCx0L7QutGB0LDRgNGLXCIsXHJcbiAgICAgICAgICAgIGNvbXBhbnlMaW5rOiBcImh0dHA6Ly9ydHNvZnQucnVcIixcclxuICAgICAgICAgICAgam9iOiBcItCU0LXQutGA0LXRgtC90YvQuSDQvtGC0L/Rg9GB0Log0Lgg0L7RgtC/0YPRgdC6INC/0L4g0YPRhdC+0LTRgyDQt9CwINGA0LXQsdC10L3QutC+0LxcIixcclxuICAgICAgICAgICAgZHV0eTogXCLQo9GF0L7QtCwg0LrQvtGA0LzQu9C10L3QuNC1LCDQv9C10LvQtdC90LDQvdC40LUsINGB0YLQuNGA0LrQsCwg0LPQu9Cw0LbQutCwLCDQs9C+0YLQvtCy0LrQsCwg0YPQsdC+0YDQutCwLCDRgdC90L7QstCwINGD0YXQvtC0LCDQutC+0YDQvNC70LXQvdC40LUuLi4g0Jgg0LzQvdC+0LPQvi3QvNC90L7Qs9C+INGB0YfQsNGB0YLRjNGPXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgeWVhcjogXCLQkNC/0YDQtdC70YwgMjAxNSDigJQg0KHQtdC90YLRj9Cx0YDRjCAyMDE2LCAxINCz0L7QtCA2INC80LXRgdGP0YbQtdCyXCIsXHJcbiAgICAgICAgICAgIGNvbXBhbnk6IFwi0KDQotCh0L7RhNGCLCDQkNCeXCIsXHJcbiAgICAgICAgICAgIGNpdHk6IFwi0KfQtdCx0L7QutGB0LDRgNGLXCIsXHJcbiAgICAgICAgICAgIGNvbXBhbnlMaW5rOiBcImh0dHA6Ly9ydHNvZnQucnVcIixcclxuICAgICAgICAgICAgam9iOiBcItCT0LvQsNCy0L3Ri9C5INGB0L/QtdGG0LjQsNC70LjRgdGCINC+0YLQtNC10LvQsCDRgdC40YHRgtC10LzQvdC+0Lkg0LjQvdGC0LXQs9GA0LDRhtC40LhcIixcclxuICAgICAgICAgICAgZHV0eTogXCLQn9C+0LTQs9C+0YLQvtCy0LrQsCDRgtC10YXQvdC40LrQvi3QutC+0LzQvNC10YDRh9C10YHQutC40YUg0L/RgNC10LTQu9C+0LbQtdC90LjQuSwg0L/QvtC00LPQvtGC0L7QstC60LAg0YLQtdGF0L3QuNGH0LXRgdC60L7QuSwg0LrQvtC90LrRg9GA0YHQvdC+0Lkg0LTQvtC60YPQvNC10L3RgtCw0YbQuNC4INC00LvRjyDQotCa0J8sINC60L7QvdGE0LjQs9GD0YDQuNGA0L7QstCw0L3QuNC1IFNDQURBLdGB0LjRgdGC0LXQvNGLIFNQUkVDT04sINGA0LDQt9GA0LDQsdC+0YLQutCwINGN0LrRgdC/0LvRg9Cw0YLQsNGG0LjQvtC90L3QvtC5INC00L7QutGD0LzQtdC90YLQsNGG0LjQuCDQvdCwINGI0LrQsNGE0Ysg0Lgg0YHQuNGB0YLQtdC80YMg0JDQodCjINCi0J8sINGA0LDQt9GA0LDQsdC+0YLQutCwINGA0LDQt9C00LXQu9C+0LIg0YDQsNCx0L7Rh9C10Lkg0LTQvtC60YPQvNC10L3RgtCw0YbQuNC4LlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHllYXI6IFwi0J3QvtGP0LHRgNGMIDIwMTMg4oCUINCQ0L/RgNC10LvRjCAyMDE1LCAxINCz0L7QtCA2INC80LXRgdGP0YbQtdCyXCIsXHJcbiAgICAgICAgICAgIGNvbXBhbnk6IFwi0KDQotCh0L7RhNGCLCDQl9CQ0J5cIixcclxuICAgICAgICAgICAgY2l0eTogXCLQp9C10LHQvtC60YHQsNGA0YtcIixcclxuICAgICAgICAgICAgY29tcGFueUxpbms6IFwiaHR0cDovL3J0c29mdC5ydVwiLFxyXG4gICAgICAgICAgICBqb2I6IFwi0KDRg9C60L7QstC+0LTQuNGC0LXQu9GMINCz0YDRg9C/0L/RiyDQv9GA0LXQtNC/0YDQvtC10LrRgtC90L7QuSDQv9C+0LTQs9C+0YLQvtCy0LrQuFwiLFxyXG4gICAgICAgICAgICBkdXR5OiBcItCe0YDQs9Cw0L3QuNC30LDRhtC40Y8g0YDQsNCx0L7RgtGLINCz0YDRg9C/0L/RiyDQv9GA0LXQtNC/0YDQvtC10LrRgtC90L7QuSDQv9C+0LTQs9C+0YLQvtCy0LrQuCwg0L/QvtGB0YLQsNC90L7QstC60LAg0LfQsNC00LDRhywg0LrQvtC90YLRgNC+0LvRjCDQstGL0L/QvtC70L3QtdC90LjRjyDQv9C+0YHRgtCw0LLQu9C10L3QvdGL0YUg0LfQsNC00LDRhywg0L/QvtC00LPQvtGC0L7QstC60LAg0Lgg0L/RgNC+0LLQtdGA0LrQsCDRgtC10YXQvdC40LrQvi3QutC+0LzQvNC10YDRh9C10YHQutC40YUg0L/RgNC10LTQu9C+0LbQtdC90LjQuSwg0L/QvtC00LPQvtGC0L7QstC60LAg0Lgg0L/RgNC+0LLQtdGA0LrQsCDRgtC10YXQvdC40YfQtdGB0LrQvtC5LCDQutC+0L3QutGD0YDRgdC90L7QuSDQtNC+0LrRg9C80LXQvdGC0LDRhtC40Lgg0LTQu9GPINCi0JrQny5cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB5ZWFyOiBcItCY0Y7Qu9GMIDIwMDgg4oCUINCd0L7Rj9Cx0YDRjCAyMDEzLCA1INC70LXRgiA1INC80LXRgdGP0YbQtdCyXCIsXHJcbiAgICAgICAgICAgIGNvbXBhbnk6IFwi0KDQotCh0L7RhNGCLCDQl9CQ0J5cIixcclxuICAgICAgICAgICAgY2l0eTogXCLQp9C10LHQvtC60YHQsNGA0YtcIixcclxuICAgICAgICAgICAgY29tcGFueUxpbms6IFwiaHR0cDovL3J0c29mdC5ydVwiLFxyXG4gICAgICAgICAgICBqb2I6IFwi0KHRgtCw0YDRiNC40Lkg0LjQvdC20LXQvdC10YAg0L7RgtC00LXQu9CwINGB0LjRgdGC0LXQvNC90L7QuSDQuNC90YLQtdCz0YDQsNGG0LjQuFwiLFxyXG4gICAgICAgICAgICBkdXR5OiBcItCg0LDQt9GA0LDQsdC+0YLQutCwINGN0LrRgNCw0L3QvtCyINC/0YDQvtGG0LXRgdGB0LAsINGE0L7RgNC8INC+0YLRh9C10YLQvtCyINC00LvRjyBTQ0FEQS3RgdC40YHRgtC10LzRiyBTUFJFQ09OLCDRgNCw0LfRgNCw0LHQvtGC0LrQsCDRjdC60YHQv9C70YPQsNGC0LDRhtC40L7QvdC90L7QuSDQtNC+0LrRg9C80LXQvdGC0LDRhtC40Lgg0L3QsCDRiNC60LDRhNGLINC4INGB0LjRgdGC0LXQvNGDINCQ0KHQoyDQotCfLCDRgNCw0LfRgNCw0LHQvtGC0LrQsCDRgNCw0LfQtNC10LvQvtCyINGA0LDQsdC+0YfQtdC5INC00L7QutGD0LzQtdC90YLQsNGG0LjQuCwg0YDQsNC30YDQsNCx0L7RgtC60LAg0L/RgNC40LvQvtC20LXQvdC40Lkg0LTQu9GPIFNDQURBLdGB0LjRgdGC0LXQvNGLIFNQUkVDT04sIE1TIE9mZmljZSDQvdCwINGP0LfRi9C60LDRhSDQv9GA0L7Qs9GA0LDQvNC80LjRgNC+0LLQsNC90LjRjyBWQiwgVkJBLCBDIy5cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB5ZWFyOiBcItCh0LXQvdGC0Y/QsdGA0YwgMjAwNSDigJQg0JjRjtC70YwgMjAwOCwgMiDQs9C+0LTQsCAxMSDQvNC10YHRj9GG0LXQslwiLFxyXG4gICAgICAgICAgICBjb21wYW55OiBcItCg0KLQodC+0YTRgiwg0JfQkNCeXCIsXHJcbiAgICAgICAgICAgIGNpdHk6IFwi0KfQtdCx0L7QutGB0LDRgNGLXCIsXHJcbiAgICAgICAgICAgIGNvbXBhbnlMaW5rOiBcImh0dHA6Ly9ydHNvZnQucnVcIixcclxuICAgICAgICAgICAgam9iOiBcItCY0L3QttC10L3QtdGAXCIsXHJcbiAgICAgICAgICAgIGR1dHk6IFwi0J/QvtC00LPQvtGC0L7QstC60LAg0YLQtdGF0L3QuNC60L4t0LrQvtC80LzQtdGA0YfQtdGB0LrQuNGFINC/0YDQtdC00LvQvtC20LXQvdC40LkgKNCi0JrQnykg0L3QsCDQkNCh0KMg0KLQnyDQtNC70Y8g0Y3QvdC10YDQs9C+0L7QsdGK0LXQutGC0L7Qsiwg0L/QvtC00LPQvtGC0L7QstC60LAg0YLQtdGF0L3QuNGH0LXRgdC60L7QuSwg0LrQvtC90LrRg9GA0YHQvdC+0Lkg0LTQvtC60YPQvNC10L3RgtCw0YbQuNC4INC00LvRjyDQotCa0J9cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB5ZWFyOiBcItCv0L3QstCw0YDRjCAyMDA1IOKAlCDQodC10L3RgtGP0LHRgNGMIDIwMDUsIDkg0LzQtdGB0Y/RhtC10LJcIixcclxuICAgICAgICAgICAgY29tcGFueTogXCLQntCe0J4gwqvQkNCR0JEt0JDQstGC0L7QvNCw0YLQuNC30LDRhtC40Y/Cu1wiLFxyXG4gICAgICAgICAgICBjb21wYW55TGluazogXCJodHRwOi8vbmV3LmFiYi5jb20vcnVcIixcclxuICAgICAgICAgICAgY2l0eTogXCLQp9C10LHQvtC60YHQsNGA0YtcIixcclxuICAgICAgICAgICAgam9iOiBcItCY0L3QttC10L3QtdGAINC/0L4g0JDQodCjINCm0LXQvdGC0YDQsCDQuNC90LbQuNC90LjRgNC40L3Qs9CwINC4INCd0JjQntCa0KBcIixcclxuICAgICAgICAgICAgZHV0eTogXCLQoNCw0LfRgNCw0LHQvtGC0LrQsCDRjdC60YDQsNC90L7QsiDQv9GA0L7RhtC10YHRgdCwLCDRjdC60YDQsNC90L3Ri9GFINGE0L7RgNC8INC00LvRjyBTQ0FEQS3RgdC40YHRgtC10LzRiyBNaWNyb1NDQURBOyDRgNCw0LfRgNCw0LHQvtGC0LrQsCDQv9GA0LjQu9C+0LbQtdC90LjQuSDQtNC70Y8gU0NBREEt0YHQuNGB0YLQtdC80YsgTWljcm9TQ0FEQSwgTVMgT2ZmaWNlINC90LAg0LLRgdGC0YDQvtC10L3QvdC+0Lwg0Y/Qt9GL0LrQtSDQv9GA0L7Qs9GA0LDQvNC80LjRgNC+0LLQsNC90LjRjyBTQ0lMLCDRj9C30YvQutCw0YUg0L/RgNC+0LPRgNCw0LzQvNC40YDQvtCy0LDQvdC40Y8gVkIsIFZCQS5cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB5ZWFyOiBcItCv0L3QstCw0YDRjCAyMDAzIOKAlCDQlNC10LrQsNCx0YDRjCAyMDA0LCAyINCz0L7QtNCwXCIsXHJcbiAgICAgICAgICAgIGNvbXBhbnk6IFwi0J7QntCeIMKr0JrQvtC80L/QsNC90LjRjyDQnNCa0J3Cu1wiLFxyXG4gICAgICAgICAgICBjb21wYW55TGluazogXCJcIixcclxuICAgICAgICAgICAgY2l0eTogXCLQp9C10LHQvtC60YHQsNGA0YtcIixcclxuICAgICAgICAgICAgam9iOiBcItCY0L3QttC10L3QtdGAXCIsXHJcbiAgICAgICAgICAgIGR1dHk6IFwi0YDQsNC30YDQsNCx0L7RgtC60LAg0Y3QutGA0LDQvdC+0LIg0L/RgNC+0YbQtdGB0YHQsCwg0Y3QutGA0LDQvdC90YvRhSDRhNC+0YDQvCDQtNC70Y8gU0NBREEt0YHQuNGB0YLQtdC80YsgTWljcm9TQ0FEQSwg0YDQsNC30YDQsNCx0L7RgtC60LAg0L/RgNC40LvQvtC20LXQvdC40Lkg0LTQu9GPIFNDQURBLdGB0LjRgdGC0LXQvNGLIE1pY3JvU0NBREEsIE1TIE9mZmljZSDQvdCwINCy0YHRgtGA0L7QtdC90L3QvtC8INGP0LfRi9C60LUg0L/RgNC+0LPRgNCw0LzQvNC40YDQvtCy0LDQvdC40Y8gU0NJTCwg0Y/Qt9GL0LrQsNGFINC/0YDQvtCz0YDQsNC80LzQuNGA0L7QstCw0L3QuNGPIFZCLCBWQkEuXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgeWVhcjogXCLQkNCy0LPRg9GB0YIgMjAwMiDigJQg0JTQtdC60LDQsdGA0YwgMjAwMiwgNSDQvNC10YHRj9GG0LXQslwiLFxyXG4gICAgICAgICAgICBjb21wYW55OiBcItCe0J7QniDCq9CQ0JHQkS3QkNCy0YLQvtC80LDRgtC40LfQsNGG0LjRj8K7XCIsXHJcbiAgICAgICAgICAgIGNvbXBhbnlMaW5rOiBcImh0dHA6Ly9uZXcuYWJiLmNvbS9ydVwiLFxyXG4gICAgICAgICAgICBjaXR5OiBcItCn0LXQsdC+0LrRgdCw0YDRi1wiLFxyXG4gICAgICAgICAgICBqb2I6IFwi0JjQvdC20LXQvdC10YAg0L/QviDQkNCh0KMg0KbQtdC90YLRgNCwINC40L3QttC40L3QuNGA0LjQvdCz0LAg0Lgg0J3QmNCe0JrQoFwiLFxyXG4gICAgICAgICAgICBkdXR5OiBcItCg0LDQt9GA0LDQsdC+0YLQutCwINGN0LrRgNCw0L3QvtCyINC/0YDQvtGG0LXRgdGB0LAsINGN0LrRgNCw0L3QvdGL0YUg0YTQvtGA0Lwg0LTQu9GPIFNDQURBLdGB0LjRgdGC0LXQvNGLIE1pY3JvU0NBREEsINGA0LDQt9GA0LDQsdC+0YLQutCwINC/0YDQuNC70L7QttC10L3QuNC5INC00LvRjyBTQ0FEQS3RgdC40YHRgtC10LzRiyBNaWNyb1NDQURBLCBNUyBPZmZpY2Ug0L3QsCDQstGB0YLRgNC+0LXQvdC90L7QvCDRj9C30YvQutC1INC/0YDQvtCz0YDQsNC80LzQuNGA0L7QstCw0L3QuNGPIFNDSUwsINGP0LfRi9C60LDRhSDQv9GA0L7Qs9GA0LDQvNC80LjRgNC+0LLQsNC90LjRjyBWQiwgVkJBLlwiXHJcbiAgICAgICAgfSxcclxuICAgIF0sXHJcbiAgICBtYWluU2NpbGxzOiBbXCLQntC/0YvRgiDQv9GA0L7Qs9GA0LDQvNC80LjRgNC+0LLQsNC90LjRjyDQvdCwIEMjLCBWQiwgVkJBXCIsIFwiSFRNTDVcIiwgXCJDU1MzXCIsIFwiSmF2YVNjcmlwdFwiLCBcIlZ1ZUpTXCIsIFwiUmVhY3RKU1wiLCBcIlJFRFVYXCIsIFwiQm9vdHN0cmFwXCIsIFwiTEVTUywgU0FTUywgU0NTU1wiLCBcIkdpdFwiLCBcIlNRTFwiLCBcIkd1bHAsIFdlYnBhY2sg0L/QviDQtNC+0LrRg9C80LXQvdGC0LDRhtC40Lgg0Lgg0L/RgNC40LzQtdGA0LDQvFwiXSxcclxuICAgIGxhbmd1YWdlczoge1xyXG4gICAgICAgIHJ1c3NpYW46IFwi0KDRg9GB0YHQutC40LkgKNGA0L7QtNC90L7QuSlcIixcclxuICAgICAgICBlbmdsaXNoOiBcItCQ0L3Qs9C70LjQudGB0LrQuNC5IChwcmUtaW50ZXJtaWRpYXRlKVwiXHJcbiAgICB9LFxyXG4gICAgY2FyOiBcItCf0YDQsNCy0LAg0LrQsNGC0LXQs9C+0YDQuNC4IEIsINC+0L/Ri9GCINCy0L7QttC00LXQvdC40Y8g0YEgMjAwOCDQs9C+0LTQsCwg0LvQuNGH0L3Ri9C5INCw0LLRgtC+0LzQvtCx0LjQu9GMLlwiLFxyXG4gICAgY29udGFjdHM6IHtcclxuICAgICAgICBwaG9uZTogJys3ICg5MDUpIDM0Ni01Mi03NScsXHJcbiAgICAgICAgaWNxOiAnMTk1MDM2MzYwJyxcclxuICAgICAgICBza3lwZTogJ3NtaXJub3ZhLm9sZ2EuMTk3OScsXHJcbiAgICAgICAgZW1haWw6ICdvbGdhLnphZ2xhdm5vdmFAbWFpbC5ydScsXHJcbiAgICAgICAgdms6ICdAT2xnYVphZ2xhdm5vdmEnXHJcbiAgICB9LFxyXG4gICAgdGVzdHM6W1xyXG4gICAgICAgIFxyXG4gICAgXSxcclxuICAgIHNlcnRpZmljYXRlczpbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzY2hvb2w6ICfQmNC90YHRgtC40YLRg9GCINGB0LjRgdGC0LXQvCDQutCw0YfQtdGB0YLQstCwLCDQsy7QldC60LDRgtC10YDQuNC90LHRg9GA0LMnLFxyXG4gICAgICAgICAgICBmdWxsTmFtZTogYNCe0YHQvdC+0LLRiyDQodCc0Jog0Lgg0L/RgNC+0YbQtdGB0YHQvdGL0Lkg0L/QvtC00YXQvtC0INCyINGB0L7QvtGC0LLQtdGC0YHRgtCy0LjQuCDRgSDQmNCh0J4gOTAwMS0yMDA4YCxcclxuICAgICAgICAgICAgZGF0ZTogJzI0INGE0LXQstGA0LDQu9GPIDIwMTHQsy4nLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogW10sXHJcbiAgICAgICAgICAgIHNyYzogJy4vc3JjL2ltZy9zZXJ0aWZpY2F0ZXMvSVNPOTAwMS5qcGcnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNjaG9vbDogJ9Co0LrQvtC70LAg0YLQtdGF0L3QvtC70L7Qs9C40Lkg0LHQuNC30L3QtdGB0LAnLFxyXG4gICAgICAgICAgICBmdWxsTmFtZTogYNCg0LDQt9Cy0LjRgtC40LUg0YPQv9GA0LDQstC70LXQvdGH0LXRgdC60LjRhSDQutC+0LzQv9C10YLQtdC90YbQuNC5LiDQmNC90YHRgtGA0YPQvNC10L3RgtGLINGN0YTRhNC10LrRgtC40LLQvdC+0LPQviDRgNGD0LrQvtCy0L7QtNC40YLQtdC70Y9gLFxyXG4gICAgICAgICAgICBkYXRlOiAnMTMtMTQg0LTQtdC60LDQsdGA0Y8gMjAxM9CzLicsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBbXSxcclxuICAgICAgICAgICAgc3JjOiAnLi9zcmMvaW1nL3NlcnRpZmljYXRlcy9FZmZlY3RpdmVMZWFkZXIud2VicCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2Nob29sOiAnR2Vla0JyYWlucycsXHJcbiAgICAgICAgICAgIGZ1bGxOYW1lOiBgUEhQLiDQm9C40YfQvdGL0Lkg0LHQu9C+0LNgLFxyXG4gICAgICAgICAgICBkYXRlOiAnMTcg0L3QvtGP0LHRgNGPIDIwMTXQsy4nLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogW10sXHJcbiAgICAgICAgICAgIHNyYzogJy4vc3JjL2ltZy9zZXJ0aWZpY2F0ZXMvUGhwX2Jsb2cud2VicCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2Nob29sOiAnR2Vla0JyYWlucycsXHJcbiAgICAgICAgICAgIGZ1bGxOYW1lOiBgR2l0LiDQkdGL0YHRgtGA0YvQuSDRgdGC0LDRgNGCYCxcclxuICAgICAgICAgICAgZGF0ZTogJzIzINC90L7Rj9Cx0YDRjyAyMDE10LMuJyxcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFtdLFxyXG4gICAgICAgICAgICBzcmM6ICcuL3NyYy9pbWcvc2VydGlmaWNhdGVzL0dpdF9xdWlja1N0YXJ0LndlYnAnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNjaG9vbDogJ0dlZWtCcmFpbnMnLFxyXG4gICAgICAgICAgICBmdWxsTmFtZTogYNCe0YHQvdC+0LLRiyDQntCe0J9gLFxyXG4gICAgICAgICAgICBkYXRlOiAnMjcg0L3QvtGP0LHRgNGPIDIwMTXQsy4nLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogW10sXHJcbiAgICAgICAgICAgIHNyYzogJy4vc3JjL2ltZy9zZXJ0aWZpY2F0ZXMvT29wX2Jhc2Uud2VicCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2Nob29sOiAnR2Vla0JyYWlucycsXHJcbiAgICAgICAgICAgIGZ1bGxOYW1lOiBg0KEjLiDQnNC40L3QuC3Qv9GA0L7Qs9GA0LDQvNC80YtgLFxyXG4gICAgICAgICAgICBkYXRlOiAnMSDQtNC10LrQsNCx0YDRjyAyMDE10LMuJyxcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFtdLFxyXG4gICAgICAgICAgICBzcmM6ICcuL3NyYy9pbWcvc2VydGlmaWNhdGVzL0NzaGFycF9taW5pLndlYnAnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNjaG9vbDogJ0dlZWtCcmFpbnMnLFxyXG4gICAgICAgICAgICBmdWxsTmFtZTogYNCe0YHQvdC+0LLRiyDQv9GA0L7Qs9GA0LDQvNC80LjRgNC+0LLQsNC90LjRj2AsXHJcbiAgICAgICAgICAgIGRhdGU6ICc4INC00LXQutCw0LHRgNGPIDIwMTXQsy4nLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogW10sXHJcbiAgICAgICAgICAgIHNyYzogJy4vc3JjL2ltZy9zZXJ0aWZpY2F0ZXMvUHJvZ3JhbW1pbmdCYXNlLndlYnAnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNjaG9vbDogJ0dlZWtCcmFpbnMnLFxyXG4gICAgICAgICAgICBmdWxsTmFtZTogYEMjYCxcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFsn0JrQvtC70LvQtdC60YbQuNC4JyxcclxuICAgICAgICAgICAgICAgICfQn9C70LDRgtGE0L7RgNC80LAgbWljcm9zb2Z0IC5uZXQgZnJhbWV3b3JrINC4INGB0YDQtdC00LAgdmlzdWFsIHN0dWRpbyAubmV0JyxcclxuICAgICAgICAgICAgICAgICfQoNCw0LHQvtGC0LAg0YEg0YTQsNC50LvQvtCy0L7QuSDRgdC40YHRgtC10LzQvtC5INC4INC+0YDQs9Cw0L3QuNC30LDRhtC40Y8g0YTQsNC50LvQvtCy0L7Qs9C+INCy0LLQvtC00LAt0LLRi9Cy0L7QtNCwINC00LDQvdC90YvRhScsXHJcbiAgICAgICAgICAgICAgICAn0J7RgdC90L7QstC90YvQtSDQv9C+0L3Rj9GC0LjRjyDQuCDQvtC/0LXRgNCw0YLQvtGA0Ysg0Y/Qt9GL0LrQsCDRgSMnLFxyXG4gICAgICAgICAgICAgICAgJ9Ca0LvQsNGB0YHRiyDQuCDQvtCx0YrQtdC60YLRiycsXHJcbiAgICAgICAgICAgICAgICAn0JzQsNGB0YHQuNCy0Ysg0YHQuNC80LLQvtC70Ysg0Lgg0YHRgtGA0L7QutC4J10sXHJcbiAgICAgICAgICAgIGRhdGU6ICcyNSDRj9C90LLQsNGA0Y8gMjAxNtCzLicsXHJcbiAgICAgICAgICAgIHNyYzogJy4vc3JjL2ltZy90ZXN0cy90ZXN0X0NzaGFycC53ZWJwJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzY2hvb2w6ICdHZWVrQnJhaW5zJyxcclxuICAgICAgICAgICAgZnVsbE5hbWU6IGDQntGB0L3QvtCy0Ysg0L/RgNC+0LPRgNCw0LzQvNC40YDQvtCy0LDQvdC40Y9gLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogWyfQntGB0L3QvtCy0Ysg0L/RgNC+0LPRgNCw0LzQvNC40YDQvtCy0LDQvdC40Y8nLFxyXG4gICAgICAgICAgICAgICAgJ9Ce0L/QtdGA0LDRgtC+0YDRiyDQuCDRhNGD0L3QutGG0LjQuCcsXHJcbiAgICAgICAgICAgICAgICAn0J/QvtGB0YLQsNC90L7QstC60LAg0LfQsNC00LDRh9C4INC4INCw0LvQs9C+0YDQuNGC0LzQuNGA0L7QstCw0L3QuNC1JyxcclxuICAgICAgICAgICAgICAgICfQkdCw0LfQvtCy0YvQtSDQv9C+0L3Rj9GC0LjRjyddLFxyXG4gICAgICAgICAgICBkYXRlOiAnMjUg0Y/QvdCy0LDRgNGPIDIwMTbQsy4nLFxyXG4gICAgICAgICAgICBzcmM6ICcuL3NyYy9pbWcvdGVzdHMvdGVzdF9Qcm9ncmFtbWluZ0Jhc2Uud2VicCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2Nob29sOiAnR2Vla0JyYWlucycsXHJcbiAgICAgICAgICAgIGZ1bGxOYW1lOiBgQyMuINCS0LjQutGC0L7RgNC40L3QsCBcItCj0LPQsNC00LDQuSDQvNC10LvQvtC00LjRjlwiYCxcclxuICAgICAgICAgICAgZGF0ZTogJzI2INGP0L3QstCw0YDRjyAyMDE20LMuJyxcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFtdLFxyXG4gICAgICAgICAgICBzcmM6ICcuL3NyYy9pbWcvc2VydGlmaWNhdGVzL0NzaGFycF92aWN0LndlYnAnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNjaG9vbDogJ0dlZWtCcmFpbnMnLFxyXG4gICAgICAgICAgICBmdWxsTmFtZTogYEFuZHJvaWQuINCR0YvRgdGC0YDRi9C5INGB0YLQsNGA0YJgLFxyXG4gICAgICAgICAgICBkYXRlOiAnMTcg0YTQtdCy0YDQsNC70Y8gMjAxNtCzLicsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBbXSxcclxuICAgICAgICAgICAgc3JjOiAnLi9zcmMvaW1nL3NlcnRpZmljYXRlcy9BbmRyb2lkLndlYnAnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNjaG9vbDogJ0dlZWtCcmFpbnMnLFxyXG4gICAgICAgICAgICBmdWxsTmFtZTogYNCa0LDQuiDRgdC+0LfQtNCw0YLRjCDQu9C40YfQvdGL0Lkg0LHQu9C+0LM6INC60YPRgNGBIFwi0KHQvtC30LTQsNC90LjQtSDQsdC70L7Qs9CwINC90LAgV29yZHByZXNzXCJgLFxyXG4gICAgICAgICAgICBkYXRlOiAnMjYg0YTQtdCy0YDQsNC70Y8gMjAxNtCzLicsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBbXSxcclxuICAgICAgICAgICAgc3JjOiAnLi9zcmMvaW1nL3NlcnRpZmljYXRlcy9Xb3JkcHJlc3Mud2VicCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2Nob29sOiAnR2Vla0JyYWlucycsXHJcbiAgICAgICAgICAgIGZ1bGxOYW1lOiBg0JLQtdCxLdGA0LDQt9GA0LDQsdC+0YLQutCwLiDQkdGL0YHRgtGA0YvQuSDRgdGC0LDRgNGCYCxcclxuICAgICAgICAgICAgZGF0ZTogJzE2INCw0LLQs9GD0YHRgtCwIDIwMTjQsy4nLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogW10sXHJcbiAgICAgICAgICAgIHNyYzogJy4vc3JjL2ltZy9zZXJ0aWZpY2F0ZXMvV2ViRGV2X3F1aWNrU3RhcnQud2VicCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2Nob29sOiAnR2Vla0JyYWlucycsXHJcbiAgICAgICAgICAgIGZ1bGxOYW1lOiBgSFRNTC9DU1MuINCY0L3RgtC10YDQsNC60YLQuNCy0L3Ri9C5INC60YPRgNGBYCxcclxuICAgICAgICAgICAgZGF0ZTogJzIg0YHQtdC90YLRj9Cx0YDRjyAyMDE50LMuJyxcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFtdLFxyXG4gICAgICAgICAgICBzcmM6ICcuL3NyYy9pbWcvc2VydGlmaWNhdGVzL0hUTUxfQ1NTXzEud2VicCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2Nob29sOiAnR2Vla0JyYWlucycsXHJcbiAgICAgICAgICAgIGZ1bGxOYW1lOiBgSFRNTCZDU1NgLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogWyfQoNCw0LHQvtGC0LAg0YEg0LHQu9C+0LrQsNC80LgnLFxyXG4gICAgICAgICAgICAgICAgJ9Ck0L7RgNC80YsgaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAn0KLQtdCz0Lgg0Lgg0LDRgtGA0LjQsdGD0YLRiyBodG1sJyxcclxuICAgICAgICAgICAgICAgICfQntGB0L3QvtCy0YsgaHRtbCDQuCBjc3MnLFxyXG4gICAgICAgICAgICAgICAgJ9Ch0LXQu9C10LrRgtC+0YDRiyBjc3MnLFxyXG4gICAgICAgICAgICAgICAgJ9Cg0LDQsdC+0YLQsCDRgSDRgtC10LrRgdGC0L7QvCDQuCDRgtCw0LHQu9C40YbQsNC80LgnXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIGRhdGU6ICczINGB0LXQvdGC0Y/QsdGA0Y8gMjAxOdCzLicsXHJcbiAgICAgICAgICAgIHNyYzogJy4vc3JjL2ltZy90ZXN0cy90ZXN0X0hUTUxfQ1NTLndlYnAnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNjaG9vbDogJ0dlZWtCcmFpbnMnLFxyXG4gICAgICAgICAgICBmdWxsTmFtZTogYEhUTUw1INC4IENTUzNgLFxyXG4gICAgICAgICAgICBkYXRlOiAnMTkg0L7QutGC0Y/QsdGA0Y8gMjAxOdCzLicsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBbXSxcclxuICAgICAgICAgICAgc3JjOiAnLi9zcmMvaW1nL3NlcnRpZmljYXRlcy9IVE1MX0NTU18yLndlYnAnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNjaG9vbDogJ0dlZWtCcmFpbnMnLFxyXG4gICAgICAgICAgICBmdWxsTmFtZTogYNCa0LDQuiDRgdGC0LDRgtGMINC/0YDQvtCz0YDQsNC80LzQuNGB0YLQvtC8YCxcclxuICAgICAgICAgICAgZGF0ZTogJzIyINC+0LrRgtGP0LHRgNGPIDIwMTnQsy4nLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogW10sXHJcbiAgICAgICAgICAgIHNyYzogJy4vc3JjL2ltZy9zZXJ0aWZpY2F0ZXMvVG9CZVByb2dyYW1tZXIud2VicCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2Nob29sOiAnR2Vla0JyYWlucycsXHJcbiAgICAgICAgICAgIGZ1bGxOYW1lOiBgSmF2YVNjcmlwdC4g0KPRgNC+0LLQtdC90YwgMWAsXHJcbiAgICAgICAgICAgIGRhdGU6ICcxOCDQvdC+0Y/QsdGA0Y8gMjAxOdCzLicsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBbXSxcclxuICAgICAgICAgICAgc3JjOiAnLi9zcmMvaW1nL3NlcnRpZmljYXRlcy9KYXZhU2NyaXB0MS53ZWJwJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzY2hvb2w6ICdHZWVrQnJhaW5zJyxcclxuICAgICAgICAgICAgZnVsbE5hbWU6IGDQkNC90LPQu9C40LnRgdC60LjQuSDQtNC70Y8gSVQt0YHQv9C10YbQuNCw0LvQuNGB0YLQvtCyYCxcclxuICAgICAgICAgICAgZGF0ZTogJzIg0LTQtdC60LDQsdGA0Y8gMjAxOdCzLicsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBbXSxcclxuICAgICAgICAgICAgc3JjOiAnLi9zcmMvaW1nL3NlcnRpZmljYXRlcy9FbmdsaXNoRm9ySVQud2VicCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2Nob29sOiAnR2Vla0JyYWlucycsXHJcbiAgICAgICAgICAgIGZ1bGxOYW1lOiBg0J7RgdC90L7QstGLINCx0LDQtyDQtNCw0L3QvdGL0YVgLFxyXG4gICAgICAgICAgICBkYXRlOiAnMTIg0LTQtdC60LDQsdGA0Y8gMjAxOdCzLicsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBbXSxcclxuICAgICAgICAgICAgc3JjOiAnLi9zcmMvaW1nL3NlcnRpZmljYXRlcy9EQl9iYXNlLndlYnAnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNjaG9vbDogJ0dlZWtCcmFpbnMnLFxyXG4gICAgICAgICAgICBmdWxsTmFtZTogYEphdmFTY3JpcHQuINCj0YDQvtCy0LXQvdGMIDJgLFxyXG4gICAgICAgICAgICBkYXRlOiAnMTAg0Y/QvdCy0LDRgNGPIDIwMjDQsy4nLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogW10sXHJcbiAgICAgICAgICAgIHNyYzogJy4vc3JjL2ltZy9zZXJ0aWZpY2F0ZXMvSmF2YVNjcmlwdDIud2VicCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2Nob29sOiAnR2Vla0JyYWlucycsXHJcbiAgICAgICAgICAgIGZ1bGxOYW1lOiBg0JLRkdGA0YHRgtC60LAg0YHQsNC50YLQvtCyINC90LAg0L/RgNC40LzQtdGA0LUgTGFuZGluZyBQYWdlYCxcclxuICAgICAgICAgICAgZGF0ZTogJzEzINGP0L3QstCw0YDRjyAyMDIw0LMuJyxcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFtdLFxyXG4gICAgICAgICAgICBzcmM6ICcuL3NyYy9pbWcvc2VydGlmaWNhdGVzL0xhbmRpbmdQYWdlLndlYnAnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNjaG9vbDogJ0dlZWtCcmFpbnMnLFxyXG4gICAgICAgICAgICBmdWxsTmFtZTogYNCQ0LLRgtC+0LzQsNGC0LjQt9Cw0YbQuNGPINGBINC/0L7QvNC+0YnRjNGOIEd1bHBgLFxyXG4gICAgICAgICAgICBkYXRlOiAnMTQg0Y/QvdCy0LDRgNGPIDIwMjDQsy4nLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogW10sXHJcbiAgICAgICAgICAgIHNyYzogJy4vc3JjL2ltZy9zZXJ0aWZpY2F0ZXMvR3VscC53ZWJwJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzY2hvb2w6ICdHZWVrQnJhaW5zJyxcclxuICAgICAgICAgICAgZnVsbE5hbWU6IGDQktC10YDRgdGC0LDQtdC8IGxhbmRpbmcgcGFnZSDQvdCwIEhUTUw1YCxcclxuICAgICAgICAgICAgZGF0ZTogJzEwINGE0LXQstGA0LDQu9GPIDIwMjDQsy4nLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogW10sXHJcbiAgICAgICAgICAgIHNyYzogJy4vc3JjL2ltZy9zZXJ0aWZpY2F0ZXMvTGFuZGluZ1BhZ2VfSFRNTDUud2VicCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2Nob29sOiAnR2Vla0JyYWlucycsXHJcbiAgICAgICAgICAgIGZ1bGxOYW1lOiBgUmVhY3RKU2AsXHJcbiAgICAgICAgICAgIGRhdGU6ICc0INC80LDRgNGC0LAgMjAyMNCzLicsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBbXSxcclxuICAgICAgICAgICAgc3JjOiAnLi9zcmMvaW1nL3NlcnRpZmljYXRlcy9SZWFjdEpTLndlYnAnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNjaG9vbDogJ0dlZWtCcmFpbnMnLFxyXG4gICAgICAgICAgICBmdWxsTmFtZTogYNCX0LDQvdC40LzQsNGC0LXQu9GM0L3Ri9C1INGN0LvQtdC80LXQvdGC0Ysg0LjQvdGC0LXRgNGE0LXQudGB0LAg0LIgSFRNTC9DU1NgLFxyXG4gICAgICAgICAgICBkYXRlOiAnMjAg0LzQsNGA0YLQsCAyMDIw0LMuJyxcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFtdLFxyXG4gICAgICAgICAgICBzcmM6ICcuL3NyYy9pbWcvc2VydGlmaWNhdGVzL0ludGVyZmFjZUVsZW1lbnRzSFRNTENTUy53ZWJwJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzY2hvb2w6ICdHZWVrQnJhaW5zJyxcclxuICAgICAgICAgICAgZnVsbE5hbWU6IGBHaXQuINCR0LDQt9C+0LLRi9C5INC60YPRgNGBYCxcclxuICAgICAgICAgICAgZGF0ZTogJzI2INC80LDRgNGC0LAgMjAyMNCzLicsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBbXSxcclxuICAgICAgICAgICAgc3JjOiAnLi9zcmMvaW1nL3NlcnRpZmljYXRlcy9HaXRCYXNlLndlYnAnXHJcbiAgICAgICAgfSxcclxuICAgICAgICAge1xyXG4gICAgICAgICAgICBzY2hvb2w6ICdHZWVrQnJhaW5zJyxcclxuICAgICAgICAgICAgZnVsbE5hbWU6IGBGcm9udGVuZCBkZXZlbG9wZXIuINCh0LXRgNGC0LjRhNC40LrQsNGCYCxcclxuICAgICAgICAgICAgZGF0ZTogJzMwINC80LDRjyAyMDIw0LMuJyxcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFtdLFxyXG4gICAgICAgICAgICBzcmM6ICcuL3NyYy9pbWcvc2VydGlmaWNhdGVzL0Zyb250ZW5kRGV2ZWxvcGVyX09sZ2FaYWdsYXZub3ZhLndlYnAnXHJcbiAgICAgICAgfSxcclxuICAgIF0sXHJcbiAgICBwb3J0Zm9saW9fZ2Vla2JyYWluczogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2Nob29sOiAnR2Vla0JyYWlucycsXHJcbiAgICAgICAgICAgIGNvdXJzZTogJ0hUTUwvQ1NTLiDQmNC90YLQtdGA0LDQutGC0LjQstC90YvQuSDQutGD0YDRgScsXHJcbiAgICAgICAgICAgIHdvcmtOYW1lOiAn0JLQtdGA0YHRgtC60LAg0YHRgtGA0LDQvdC40YbRiycsXHJcbiAgICAgICAgICAgIGRlbW9saW5rOiAnaHR0cHM6Ly9vbGdhemFnbGF2bm92YS5naXRodWIuaW8vT1phZ2xhdm5vdmFfSFRNTENTUzFfbGVzc29uOCcsXHJcbiAgICAgICAgICAgIGNvZGVsaW5rOidodHRwczovL2dpdGh1Yi5jb20vT2xnYVphZ2xhdm5vdmEvT2xnYVphZ2xhdm5vdmEuZ2l0aHViLmlvL3RyZWUvbWFzdGVyL09aYWdsYXZub3ZhX0hUTUxDU1MxX2xlc3NvbjgnLFxyXG4gICAgICAgICAgICBzcmM6Jy4vc3JjL2ltZy9wb3J0Zm9saW8vSFRNTENTUzFfaHQ4LndlYnAnLFxyXG4gICAgICAgICAgICBjb21tZW50OifQoNCw0LHQvtGC0LDRjtGCINC/0YPQvdC60YLRiyDQvNC10L3RjiBIb21lLCBQcm9kdWN0cyDQuCBQcm9kdWN0cy9Ib21lJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzY2hvb2w6ICdHZWVrQnJhaW5zJyxcclxuICAgICAgICAgICAgY291cnNlOiAnSFRNTDUg0LggQ1NTMycsXHJcbiAgICAgICAgICAgIHdvcmtOYW1lOiAn0JLQtdGA0YHRgtC60LAg0YHRgtGA0LDQvdC40YbRiycsXHJcbiAgICAgICAgICAgIGRlbW9saW5rOiAnaHR0cHM6Ly9vbGdhemFnbGF2bm92YS5naXRodWIuaW8vT1phZ2xhdm5vdmFfSFRNTENTUzJfbGVzc29uMy8nLFxyXG4gICAgICAgICAgICBjb2RlbGluazonaHR0cHM6Ly9naXRodWIuY29tL09sZ2FaYWdsYXZub3ZhL09sZ2FaYWdsYXZub3ZhLmdpdGh1Yi5pby90cmVlL21hc3Rlci9PWmFnbGF2bm92YV9IVE1MQ1NTMl9sZXNzb24zJyxcclxuICAgICAgICAgICAgc3JjOicuL3NyYy9pbWcvcG9ydGZvbGlvL0hUTUxDU1MyX2h0My53ZWJwJyxcclxuICAgICAgICAgICAgY29tbWVudDogJ9CSINC/0L7QtNCy0LDQu9C1INGB0YLRgNCw0L3QuNGG0Ysg0YDQsNCx0L7RgtCw0Y7RgiDRgdGB0YvQu9C60Lgg0L3QsCDQvNC+0LTQsNC70YzQvdC+0LUg0L7QutC90L4g0Lgg0YHRgtGA0LDQvdC40YbRgyDRgSDRhNC+0L3QvtCy0YvQvCDQstC40LTQtdC+J1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzY2hvb2w6ICdHZWVrQnJhaW5zJyxcclxuICAgICAgICAgICAgY291cnNlOiAnSFRNTDUg0LggQ1NTMycsXHJcbiAgICAgICAgICAgIHdvcmtOYW1lOiAn0JLQtdGA0YHRgtC60LAg0YHRgtGA0LDQvdC40YbRiycsXHJcbiAgICAgICAgICAgIGRlbW9saW5rOiAnaHR0cHM6Ly9vbGdhemFnbGF2bm92YS5naXRodWIuaW8vT1phZ2xhdm5vdmFfSFRNTENTUzJfbGVzc29uNi8nLFxyXG4gICAgICAgICAgICBjb2RlbGluazonaHR0cHM6Ly9naXRodWIuY29tL09sZ2FaYWdsYXZub3ZhL09sZ2FaYWdsYXZub3ZhLmdpdGh1Yi5pby90cmVlL21hc3Rlci9PWmFnbGF2bm92YV9IVE1MQ1NTMl9sZXNzb242JyxcclxuICAgICAgICAgICAgc3JjOicuL3NyYy9pbWcvcG9ydGZvbGlvL0hUTUxDU1MyX2h0Ni53ZWJwJyxcclxuICAgICAgICAgICAgY29tbWVudDogJ9Cf0YDQuCDQvdCw0LLQtdC00LXQvdC40Lgg0L3QsCDRjdC70LXQvNC10L3RgtGLINCy0YvQv9C+0LvQvdGP0Y7RgtGB0Y8g0Y3RhNGE0LXQutGC0Ysg0YLRgNCw0L3RgdGE0L7RgNC80LDRhtC40LgnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNjaG9vbDogJ0dlZWtCcmFpbnMnLFxyXG4gICAgICAgICAgICBjb3Vyc2U6ICdIVE1MNSDQuCBDU1MzJyxcclxuICAgICAgICAgICAgd29ya05hbWU6ICfQktC10YDRgdGC0LrQsCDRgdGC0YDQsNC90LjRhtGLJyxcclxuICAgICAgICAgICAgZGVtb2xpbms6ICdodHRwczovL29sZ2F6YWdsYXZub3ZhLmdpdGh1Yi5pby9PWmFnbGF2bm92YV9IVE1MQ1NTMl9sZXNzb244LycsXHJcbiAgICAgICAgICAgIGNvZGVsaW5rOidodHRwczovL2dpdGh1Yi5jb20vT2xnYVphZ2xhdm5vdmEvT2xnYVphZ2xhdm5vdmEuZ2l0aHViLmlvL3RyZWUvbWFzdGVyL09aYWdsYXZub3ZhX0hUTUxDU1MyX2xlc3NvbjgnLFxyXG4gICAgICAgICAgICBzcmM6Jy4vc3JjL2ltZy9wb3J0Zm9saW8vSFRNTENTUzJfaHQ4LndlYnAnLFxyXG4gICAgICAgICAgICBjb21tZW50OiAnJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzY2hvb2w6ICdHZWVrQnJhaW5zJyxcclxuICAgICAgICAgICAgY291cnNlOiAnSmF2YVNjcmlwdC4g0KPRgNC+0LLQtdC90YwgMScsXHJcbiAgICAgICAgICAgIHdvcmtOYW1lOiAn0JDQvdC40LzQuNGA0L7QstCw0L3QvdC+0LUg0LzQvtC00LDQu9GM0L3QvtC1INC+0LrQvdC+JyxcclxuICAgICAgICAgICAgZGVtb2xpbms6ICdodHRwczovL29sZ2F6YWdsYXZub3ZhLmdpdGh1Yi5pby9ob21ldGFzazV0YXNrMy8nLFxyXG4gICAgICAgICAgICBjb2RlbGluazonaHR0cHM6Ly9naXRodWIuY29tL09sZ2FaYWdsYXZub3ZhL09sZ2FaYWdsYXZub3ZhLmdpdGh1Yi5pby90cmVlL21hc3Rlci9ob21ldGFzazV0YXNrMycsXHJcbiAgICAgICAgICAgIHNyYzonLi9zcmMvaW1nL3BvcnRmb2xpby9KUzFfaHQ1dDNfbmV3LnBuZycsXHJcbiAgICAgICAgICAgIGNvbW1lbnQ6IGDQndCw0LbQvNC40YLQtSDQvdCwINC60L3QvtC/0LrRgyBcItCe0YLQutGA0YvRgtGMINC80L7QtNCw0LvRjNC90L7QtSDQvtC60L3QvlwiYFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzY2hvb2w6ICdHZWVrQnJhaW5zJyxcclxuICAgICAgICAgICAgY291cnNlOiAnSmF2YVNjcmlwdC4g0KPRgNC+0LLQtdC90YwgMScsXHJcbiAgICAgICAgICAgIHdvcmtOYW1lOiAn0JrQsNGA0YLQvtGH0LrQuCDRgtC+0LLQsNGA0LAnLFxyXG4gICAgICAgICAgICBkZW1vbGluazogJ2h0dHBzOi8vb2xnYXphZ2xhdm5vdmEuZ2l0aHViLmlvL2hvbWV0YXNrNXRhc2s0LycsXHJcbiAgICAgICAgICAgIGNvZGVsaW5rOidodHRwczovL2dpdGh1Yi5jb20vT2xnYVphZ2xhdm5vdmEvT2xnYVphZ2xhdm5vdmEuZ2l0aHViLmlvL3RyZWUvbWFzdGVyL2hvbWV0YXNrNXRhc2s0JyxcclxuICAgICAgICAgICAgc3JjOicuL3NyYy9pbWcvcG9ydGZvbGlvL0pTMV9odDV0NC53ZWJwJyxcclxuICAgICAgICAgICAgY29tbWVudDogYNCf0YDQuCDQvdCw0LbQsNGC0LjQuCDQvdCwINC60L3QvtC/0LrRgyBcItCf0L7QtNGA0L7QsdC90LXQtVwiINCy0YvQstC+0LTQuNGC0YHRjyDRgtC10LrRgdGC0L7QstCw0Y8g0LjQvdGE0L7RgNC80LDRhtC40Y8g0L4g0YLQvtCy0LDRgNC1LCDQv9GA0Lgg0L3QsNC20LDRgtC40Lgg0L3QsCDQutC90L7Qv9C60YMgXCLQntGC0LzQtdC90LBcIiDQstC+0LfQstGA0LDRidCw0LXRgtGB0Y8g0LjQt9C+0LHRgNCw0LbQtdC90LjQtSDRgtC+0LLQsNGA0LAgYFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzY2hvb2w6ICdHZWVrQnJhaW5zJyxcclxuICAgICAgICAgICAgY291cnNlOiAnSmF2YVNjcmlwdC4g0KPRgNC+0LLQtdC90YwgMScsXHJcbiAgICAgICAgICAgIHdvcmtOYW1lOiAn0KjQsNGF0LzQsNGC0L3QsNGPINC00L7RgdC60LAnLFxyXG4gICAgICAgICAgICBkZW1vbGluazogJ2h0dHBzOi8vb2xnYXphZ2xhdm5vdmEuZ2l0aHViLmlvL2hvbWV0YXNrNXRhc2s1XzYvJyxcclxuICAgICAgICAgICAgY29kZWxpbms6J2h0dHBzOi8vZ2l0aHViLmNvbS9PbGdhWmFnbGF2bm92YS9PbGdhWmFnbGF2bm92YS5naXRodWIuaW8vdHJlZS9tYXN0ZXIvaG9tZXRhc2s1dGFzazVfNicsXHJcbiAgICAgICAgICAgIHNyYzonLi9zcmMvaW1nL3BvcnRmb2xpby9KUzFfaHQ1dDYud2VicCcsXHJcbiAgICAgICAgICAgIGNvbW1lbnQ6IGDQn9GA0Lgg0L3QsNC20LDRgtC40Lgg0L3QsCDQutC90L7Qv9C60YMgXCLQoNCw0YHRgdGC0LDQstC40YLRjCDRhNC40LPRg9GA0YtcIiDQvdCwINC00L7RgdC60LUg0YDQsNGB0YHRgtCw0LLQu9GP0Y7RgtGB0Y8g0YjQsNGF0LzQsNGC0L3Ri9C1INGE0LjQs9GD0YDRiyBgXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNjaG9vbDogJycsXHJcbiAgICAgICAgICAgIGNvdXJzZTogJ9Ci0LXRgdGC0L7QstC+0LUg0LfQsNC00LDQvdC40LUg0Log0L7QtNC90L7QuSDQuNC3INCy0LDQutCw0L3RgdC40LknLFxyXG4gICAgICAgICAgICB3b3JrTmFtZTogJ9Ci0LXRgdGC0L7QstC+0LUg0L/RgNC40LvQvtC20LXQvdC40LUg0LTQu9GPIEFuZHJvaWQsINC90LDQv9C40YHQsNC90L4g0L3QsCBSZWFjdCBOYXRpdmUnLFxyXG4gICAgICAgICAgICBkZW1vbGluazogJ2h0dHBzOi8veWFkaS5zay9kL3RzZzdYdk96ZHRsbXJ3JyxcclxuICAgICAgICAgICAgY29kZWxpbms6J2h0dHBzOi8vZ2l0aHViLmNvbS9PbGdhWmFnbGF2bm92YS9Cb2t1cy1UZXN0MicsXHJcbiAgICAgICAgICAgIHNyYzonLi9zcmMvaW1nL3BvcnRmb2xpby9ib2t1czIud2VicCcsXHJcbiAgICAgICAgICAgIGNvbW1lbnQ6IGDQlNC70Y8g0L/RgNC+0YHQvNC+0YLRgNCwINC90LXQvtCx0YXQvtC00LjQvNC+INGB0LrQsNGH0LDRgtGMINGE0LDQudC7IFwib2xnYXphZ2xhdm5vdmEtdGVzdFR3by5hcGtcIiDQvdCwIGFuZHJvaWQt0YLQtdC70LXRhNC+0L0g0Lgg0YPRgdGC0LDQvdC+0LLQuNGC0Ywg0L/RgNC40LvQvtC20LXQvdC40LUuYFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzY2hvb2w6ICcnLFxyXG4gICAgICAgICAgICBjb3Vyc2U6ICfQotC10YHRgtC+0LLQvtC1INC30LDQtNCw0L3QuNC1INC6INC+0LTQvdC+0Lkg0LjQtyDQstCw0LrQsNC90YHQuNC5JyxcclxuICAgICAgICAgICAgd29ya05hbWU6ICfQotC10YHRgtC+0LLQvtC1INC30LDQtNCw0L3QuNC1LCDQvdCw0L/QuNGB0LDQvdC+INC90LAgUmVhY3QrUmVkdXgrQW50IERlc2lnbicsXHJcbiAgICAgICAgICAgIGRlbW9saW5rOiAnaHR0cHM6Ly9vbGdhemFnbGF2bm92YS5naXRodWIuaW8vVGVzdDE3MDkyMDIwLycsXHJcbiAgICAgICAgICAgIGNvZGVsaW5rOidodHRwczovL2dpdGh1Yi5jb20vT2xnYVphZ2xhdm5vdmEvVGVzdDE3MDkyMDIwX2NvZGUnLFxyXG4gICAgICAgICAgICBzcmM6Jy4vc3JjL2ltZy9wb3J0Zm9saW8vdGVzdF8xNzA5MjAyMC53ZWJwJyxcclxuICAgICAgICAgICAgY29tbWVudDogYGBcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2Nob29sOiAnJyxcclxuICAgICAgICAgICAgY291cnNlOiAn0KLQtdGB0YLQvtCy0L7QtSDQt9Cw0LTQsNC90LjQtSDQuiDQvtC00L3QvtC5INC40Lcg0LLQsNC60LDQvdGB0LjQuScsXHJcbiAgICAgICAgICAgIHdvcmtOYW1lOiAn0KLQtdGB0YLQvtCy0L7QtSDQt9Cw0LTQsNC90LjQtSwg0L3QsNC/0LjRgdCw0L3QviDQvdCwIFJlYWN0K1JlZHV4JyxcclxuICAgICAgICAgICAgZGVtb2xpbms6ICdodHRwczovL29sZ2F6YWdsYXZub3ZhLmdpdGh1Yi5pby9GdW5Cb3hfZGVtby8nLFxyXG4gICAgICAgICAgICBjb2RlbGluazonaHR0cHM6Ly9naXRodWIuY29tL09sZ2FaYWdsYXZub3ZhL0Z1bkJveF90ZXN0JyxcclxuICAgICAgICAgICAgc3JjOicuL3NyYy9pbWcvcG9ydGZvbGlvL0Z1bkJveF90ZXN0LndlYnAnLFxyXG4gICAgICAgICAgICBjb21tZW50OiBgYFxyXG4gICAgICAgIH0sXHJcbiAgICBdLFxyXG59IiwiaW1wb3J0IHtoYW5kbGVBY3Rpb25zfSBmcm9tICdyZWR1eC1hY3Rpb25zJztcclxuaW1wb3J0IHsgbG9hZERhdGEsIHNldElzT3Blbiwgc2V0TmF2SXNIaWRkZW4gfSBmcm9tICcuL215QWN0aW9ucyc7XHJcbmltcG9ydCB7bXlEYXRhfSBmcm9tICcuL215RGF0YSc7XHJcblxyXG5jb25zdCBkZWZhdWx0U3RhdGU9e1xyXG4gICAgbXlEYXRhOiB7fVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgaGFuZGxlQWN0aW9ucyh7XHJcbiAgICBbbG9hZERhdGFdOihzdGF0ZSk9PntcclxuICAgICAgICByZXR1cm4gey4uLnN0YXRlLFxyXG4gICAgICAgICAgICBpc09wZW46IGZhbHNlLFxyXG4gICAgICAgICAgICBuYXZJc0hpZGRlbjogZmFsc2UsXHJcbiAgICAgICAgICAgICBteURhdGFcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgW3NldElzT3Blbl06KHN0YXRlLCB7cGF5bG9hZDp7aXNPcGVuVmFsfX0pPT57XHJcbiAgICAgICAgcmV0dXJuIHsuLi5zdGF0ZSxcclxuICAgICAgICAgICAgaXNPcGVuOiBpc09wZW5WYWwsXHJcbiAgICAgICAgICAgIG15RGF0YTogey4uLnN0YXRlLm15RGF0YX1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgW3NldE5hdklzSGlkZGVuXTooc3RhdGUsIHtwYXlsb2FkOntuYXZJc0hpZGRlblZhbH19KT0+e1xyXG4gICAgICAgIHJldHVybiB7Li4uc3RhdGUsXHJcbiAgICAgICAgICAgIG5hdklzSGlkZGVuOiBuYXZJc0hpZGRlblZhbCxcclxuICAgICAgICAgICAgbXlEYXRhOiB7Li4uc3RhdGUubXlEYXRhfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbn0sIGRlZmF1bHRTdGF0ZSk7IiwiaW1wb3J0IHJlZHVjZVJlZHVjZXJzIGZyb20gJ3JlZHVjZS1yZWR1Y2Vycyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgaXNQbGFpbk9iamVjdCBmcm9tICcuL3V0aWxzL2lzUGxhaW5PYmplY3QnO1xuaW1wb3J0IGlzTWFwIGZyb20gJy4vdXRpbHMvaXNNYXAnO1xuaW1wb3J0IG93bktleXMgZnJvbSAnLi91dGlscy9vd25LZXlzJztcbmltcG9ydCBmbGF0dGVuUmVkdWNlck1hcCBmcm9tICcuL3V0aWxzL2ZsYXR0ZW5SZWR1Y2VyTWFwJztcbmltcG9ydCBoYW5kbGVBY3Rpb24gZnJvbSAnLi9oYW5kbGVBY3Rpb24nO1xuaW1wb3J0IGdldCBmcm9tICcuL3V0aWxzL2dldCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYW5kbGVBY3Rpb25zKGhhbmRsZXJzLCBkZWZhdWx0U3RhdGUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGludmFyaWFudChpc1BsYWluT2JqZWN0KGhhbmRsZXJzKSB8fCBpc01hcChoYW5kbGVycyksICdFeHBlY3RlZCBoYW5kbGVycyB0byBiZSBhIHBsYWluIG9iamVjdC4nKTtcbiAgdmFyIGZsYXR0ZW5lZFJlZHVjZXJNYXAgPSBmbGF0dGVuUmVkdWNlck1hcChoYW5kbGVycywgb3B0aW9ucyk7XG4gIHZhciByZWR1Y2VycyA9IG93bktleXMoZmxhdHRlbmVkUmVkdWNlck1hcCkubWFwKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgcmV0dXJuIGhhbmRsZUFjdGlvbih0eXBlLCBnZXQodHlwZSwgZmxhdHRlbmVkUmVkdWNlck1hcCksIGRlZmF1bHRTdGF0ZSk7XG4gIH0pO1xuICB2YXIgcmVkdWNlciA9IHJlZHVjZVJlZHVjZXJzLmFwcGx5KHZvaWQgMCwgcmVkdWNlcnMuY29uY2F0KFtkZWZhdWx0U3RhdGVdKSk7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbikge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IGRlZmF1bHRTdGF0ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVkdWNlcihzdGF0ZSwgYWN0aW9uKTtcbiAgfTtcbn0iLCJpbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuL3V0aWxzL2lzRnVuY3Rpb24nO1xuaW1wb3J0IGlzUGxhaW5PYmplY3QgZnJvbSAnLi91dGlscy9pc1BsYWluT2JqZWN0JztcbmltcG9ydCBpZGVudGl0eSBmcm9tICcuL3V0aWxzL2lkZW50aXR5JztcbmltcG9ydCBpc05pbCBmcm9tICcuL3V0aWxzL2lzTmlsJztcbmltcG9ydCBpc1VuZGVmaW5lZCBmcm9tICcuL3V0aWxzL2lzVW5kZWZpbmVkJztcbmltcG9ydCB0b1N0cmluZyBmcm9tICcuL3V0aWxzL3RvU3RyaW5nJztcbmltcG9ydCB7IEFDVElPTl9UWVBFX0RFTElNSVRFUiB9IGZyb20gJy4vY29uc3RhbnRzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhbmRsZUFjdGlvbih0eXBlLCByZWR1Y2VyLCBkZWZhdWx0U3RhdGUpIHtcbiAgaWYgKHJlZHVjZXIgPT09IHZvaWQgMCkge1xuICAgIHJlZHVjZXIgPSBpZGVudGl0eTtcbiAgfVxuXG4gIHZhciB0eXBlcyA9IHRvU3RyaW5nKHR5cGUpLnNwbGl0KEFDVElPTl9UWVBFX0RFTElNSVRFUik7XG4gIGludmFyaWFudCghaXNVbmRlZmluZWQoZGVmYXVsdFN0YXRlKSwgXCJkZWZhdWx0U3RhdGUgZm9yIHJlZHVjZXIgaGFuZGxpbmcgXCIgKyB0eXBlcy5qb2luKCcsICcpICsgXCIgc2hvdWxkIGJlIGRlZmluZWRcIik7XG4gIGludmFyaWFudChpc0Z1bmN0aW9uKHJlZHVjZXIpIHx8IGlzUGxhaW5PYmplY3QocmVkdWNlciksICdFeHBlY3RlZCByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24gb3Igb2JqZWN0IHdpdGggbmV4dCBhbmQgdGhyb3cgcmVkdWNlcnMnKTtcblxuICB2YXIgX3JlZiA9IGlzRnVuY3Rpb24ocmVkdWNlcikgPyBbcmVkdWNlciwgcmVkdWNlcl0gOiBbcmVkdWNlci5uZXh0LCByZWR1Y2VyLnRocm93XS5tYXAoZnVuY3Rpb24gKGFSZWR1Y2VyKSB7XG4gICAgcmV0dXJuIGlzTmlsKGFSZWR1Y2VyKSA/IGlkZW50aXR5IDogYVJlZHVjZXI7XG4gIH0pLFxuICAgICAgbmV4dFJlZHVjZXIgPSBfcmVmWzBdLFxuICAgICAgdGhyb3dSZWR1Y2VyID0gX3JlZlsxXTtcblxuICByZXR1cm4gZnVuY3Rpb24gKHN0YXRlLCBhY3Rpb24pIHtcbiAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgc3RhdGUgPSBkZWZhdWx0U3RhdGU7XG4gICAgfVxuXG4gICAgdmFyIGFjdGlvblR5cGUgPSBhY3Rpb24udHlwZTtcblxuICAgIGlmICghYWN0aW9uVHlwZSB8fCB0eXBlcy5pbmRleE9mKHRvU3RyaW5nKGFjdGlvblR5cGUpKSA9PT0gLTEpIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gKGFjdGlvbi5lcnJvciA9PT0gdHJ1ZSA/IHRocm93UmVkdWNlciA6IG5leHRSZWR1Y2VyKShzdGF0ZSwgYWN0aW9uKTtcbiAgfTtcbn0iLCJleHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xufSk7IiwiLyoqXG4gKiBUaGlzIGFjdGlvbiB0eXBlIHdpbGwgYmUgZGlzcGF0Y2hlZCB3aGVuIHlvdXIgaGlzdG9yeVxuICogcmVjZWl2ZXMgYSBsb2NhdGlvbiBjaGFuZ2UuXG4gKi9cbmV4cG9ydCB2YXIgTE9DQVRJT05fQ0hBTkdFID0gJ0BAcm91dGVyL0xPQ0FUSU9OX0NIQU5HRSc7XG5leHBvcnQgdmFyIG9uTG9jYXRpb25DaGFuZ2VkID0gZnVuY3Rpb24gb25Mb2NhdGlvbkNoYW5nZWQobG9jYXRpb24sIGFjdGlvbikge1xuICB2YXIgaXNGaXJzdFJlbmRlcmluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG4gIHJldHVybiB7XG4gICAgdHlwZTogTE9DQVRJT05fQ0hBTkdFLFxuICAgIHBheWxvYWQ6IHtcbiAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgaXNGaXJzdFJlbmRlcmluZzogaXNGaXJzdFJlbmRlcmluZ1xuICAgIH1cbiAgfTtcbn07XG4vKipcbiAqIFRoaXMgYWN0aW9uIHR5cGUgd2lsbCBiZSBkaXNwYXRjaGVkIGJ5IHRoZSBoaXN0b3J5IGFjdGlvbnMgYmVsb3cuXG4gKiBJZiB5b3UncmUgd3JpdGluZyBhIG1pZGRsZXdhcmUgdG8gd2F0Y2ggZm9yIG5hdmlnYXRpb24gZXZlbnRzLCBiZSBzdXJlIHRvXG4gKiBsb29rIGZvciBhY3Rpb25zIG9mIHRoaXMgdHlwZS5cbiAqL1xuXG5leHBvcnQgdmFyIENBTExfSElTVE9SWV9NRVRIT0QgPSAnQEByb3V0ZXIvQ0FMTF9ISVNUT1JZX01FVEhPRCc7XG5cbnZhciB1cGRhdGVMb2NhdGlvbiA9IGZ1bmN0aW9uIHVwZGF0ZUxvY2F0aW9uKG1ldGhvZCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogQ0FMTF9ISVNUT1JZX01FVEhPRCxcbiAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgIGFyZ3M6IGFyZ3NcbiAgICAgIH1cbiAgICB9O1xuICB9O1xufTtcbi8qKlxuICogVGhlc2UgYWN0aW9ucyBjb3JyZXNwb25kIHRvIHRoZSBoaXN0b3J5IEFQSS5cbiAqIFRoZSBhc3NvY2lhdGVkIHJvdXRlck1pZGRsZXdhcmUgd2lsbCBjYXB0dXJlIHRoZXNlIGV2ZW50cyBiZWZvcmUgdGhleSBnZXQgdG9cbiAqIHlvdXIgcmVkdWNlciBhbmQgcmVpc3N1ZSB0aGVtIGFzIHRoZSBtYXRjaGluZyBmdW5jdGlvbiBvbiB5b3VyIGhpc3RvcnkuXG4gKi9cblxuXG5leHBvcnQgdmFyIHB1c2ggPSB1cGRhdGVMb2NhdGlvbigncHVzaCcpO1xuZXhwb3J0IHZhciByZXBsYWNlID0gdXBkYXRlTG9jYXRpb24oJ3JlcGxhY2UnKTtcbmV4cG9ydCB2YXIgZ28gPSB1cGRhdGVMb2NhdGlvbignZ28nKTtcbmV4cG9ydCB2YXIgZ29CYWNrID0gdXBkYXRlTG9jYXRpb24oJ2dvQmFjaycpO1xuZXhwb3J0IHZhciBnb0ZvcndhcmQgPSB1cGRhdGVMb2NhdGlvbignZ29Gb3J3YXJkJyk7XG5leHBvcnQgdmFyIHJvdXRlckFjdGlvbnMgPSB7XG4gIHB1c2g6IHB1c2gsXG4gIHJlcGxhY2U6IHJlcGxhY2UsXG4gIGdvOiBnbyxcbiAgZ29CYWNrOiBnb0JhY2ssXG4gIGdvRm9yd2FyZDogZ29Gb3J3YXJkXG59OyIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuaW1wb3J0IHsgbWF0Y2hQYXRoIH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xuXG52YXIgY3JlYXRlU2VsZWN0b3JzID0gZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JzKHN0cnVjdHVyZSkge1xuICB2YXIgZ2V0SW4gPSBzdHJ1Y3R1cmUuZ2V0SW4sXG4gICAgICB0b0pTID0gc3RydWN0dXJlLnRvSlM7XG5cbiAgdmFyIGlzUm91dGVyID0gZnVuY3Rpb24gaXNSb3V0ZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBfdHlwZW9mKHZhbHVlKSA9PT0gJ29iamVjdCcgJiYgZ2V0SW4odmFsdWUsIFsnbG9jYXRpb24nXSkgJiYgZ2V0SW4odmFsdWUsIFsnYWN0aW9uJ10pO1xuICB9O1xuXG4gIHZhciBnZXRSb3V0ZXIgPSBmdW5jdGlvbiBnZXRSb3V0ZXIoc3RhdGUpIHtcbiAgICB2YXIgcm91dGVyID0gdG9KUyhnZXRJbihzdGF0ZSwgWydyb3V0ZXInXSkpO1xuXG4gICAgaWYgKCFpc1JvdXRlcihyb3V0ZXIpKSB7XG4gICAgICB0aHJvdyAnQ291bGQgbm90IGZpbmQgcm91dGVyIHJlZHVjZXIgaW4gc3RhdGUgdHJlZSwgaXQgbXVzdCBiZSBtb3VudGVkIHVuZGVyIFwicm91dGVyXCInO1xuICAgIH1cblxuICAgIHJldHVybiByb3V0ZXI7XG4gIH07XG5cbiAgdmFyIGdldExvY2F0aW9uID0gZnVuY3Rpb24gZ2V0TG9jYXRpb24oc3RhdGUpIHtcbiAgICByZXR1cm4gdG9KUyhnZXRJbihnZXRSb3V0ZXIoc3RhdGUpLCBbJ2xvY2F0aW9uJ10pKTtcbiAgfTtcblxuICB2YXIgZ2V0QWN0aW9uID0gZnVuY3Rpb24gZ2V0QWN0aW9uKHN0YXRlKSB7XG4gICAgcmV0dXJuIHRvSlMoZ2V0SW4oZ2V0Um91dGVyKHN0YXRlKSwgWydhY3Rpb24nXSkpO1xuICB9O1xuXG4gIHZhciBnZXRTZWFyY2ggPSBmdW5jdGlvbiBnZXRTZWFyY2goc3RhdGUpIHtcbiAgICByZXR1cm4gdG9KUyhnZXRJbihnZXRSb3V0ZXIoc3RhdGUpLCBbJ2xvY2F0aW9uJywgJ3NlYXJjaCddKSk7XG4gIH07XG5cbiAgdmFyIGdldEhhc2ggPSBmdW5jdGlvbiBnZXRIYXNoKHN0YXRlKSB7XG4gICAgcmV0dXJuIHRvSlMoZ2V0SW4oZ2V0Um91dGVyKHN0YXRlKSwgWydsb2NhdGlvbicsICdoYXNoJ10pKTtcbiAgfTsgLy8gSXQgb25seSBtYWtlcyBzZW5zZSB0byByZWNhbGN1bGF0ZSB0aGUgYG1hdGNoUGF0aGAgd2hlbmV2ZXIgdGhlIHBhdGhuYW1lXG4gIC8vIG9mIHRoZSBsb2NhdGlvbiBjaGFuZ2VzLiBUaGF0J3Mgd2h5IGBjcmVhdGVNYXRjaFNlbGVjdG9yYCBtZW1vaXplc1xuICAvLyB0aGUgbGF0ZXN0IHJlc3VsdCBiYXNlZCBvbiB0aGUgbG9jYXRpb24ncyBwYXRobmFtZS5cblxuXG4gIHZhciBjcmVhdGVNYXRjaFNlbGVjdG9yID0gZnVuY3Rpb24gY3JlYXRlTWF0Y2hTZWxlY3RvcihwYXRoKSB7XG4gICAgdmFyIGxhc3RQYXRobmFtZSA9IG51bGw7XG4gICAgdmFyIGxhc3RNYXRjaCA9IG51bGw7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgdmFyIF9yZWYgPSBnZXRMb2NhdGlvbihzdGF0ZSkgfHwge30sXG4gICAgICAgICAgcGF0aG5hbWUgPSBfcmVmLnBhdGhuYW1lO1xuXG4gICAgICBpZiAocGF0aG5hbWUgPT09IGxhc3RQYXRobmFtZSkge1xuICAgICAgICByZXR1cm4gbGFzdE1hdGNoO1xuICAgICAgfVxuXG4gICAgICBsYXN0UGF0aG5hbWUgPSBwYXRobmFtZTtcbiAgICAgIHZhciBtYXRjaCA9IG1hdGNoUGF0aChwYXRobmFtZSwgcGF0aCk7XG5cbiAgICAgIGlmICghbWF0Y2ggfHwgIWxhc3RNYXRjaCB8fCBtYXRjaC51cmwgIT09IGxhc3RNYXRjaC51cmwgLy8gV2hlbiBVUkwgbWF0Y2hlZCBmb3IgbmVzdGVkIHJvdXRlcywgVVJMIGlzIHRoZSBzYW1lIGJ1dCBpc0V4YWN0IGlzIG5vdC5cbiAgICAgIHx8IG1hdGNoLmlzRXhhY3QgIT09IGxhc3RNYXRjaC5pc0V4YWN0KSB7XG4gICAgICAgIGxhc3RNYXRjaCA9IG1hdGNoO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGFzdE1hdGNoO1xuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRMb2NhdGlvbjogZ2V0TG9jYXRpb24sXG4gICAgZ2V0QWN0aW9uOiBnZXRBY3Rpb24sXG4gICAgZ2V0Um91dGVyOiBnZXRSb3V0ZXIsXG4gICAgZ2V0U2VhcmNoOiBnZXRTZWFyY2gsXG4gICAgZ2V0SGFzaDogZ2V0SGFzaCxcbiAgICBjcmVhdGVNYXRjaFNlbGVjdG9yOiBjcmVhdGVNYXRjaFNlbGVjdG9yXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTZWxlY3RvcnM7IiwiZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyBpZiAoIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpKSB7IHJldHVybjsgfSB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgeyBMT0NBVElPTl9DSEFOR0UgfSBmcm9tICcuL2FjdGlvbnMnO1xuLyoqXG4gKiBBZGRzIHF1ZXJ5IHRvIGxvY2F0aW9uLlxuICogVXRpbGlzZXMgdGhlIHNlYXJjaCBwcm9wIG9mIGxvY2F0aW9uIHRvIGNvbnN0cnVjdCBxdWVyeS5cbiAqL1xuXG52YXIgaW5qZWN0UXVlcnkgPSBmdW5jdGlvbiBpbmplY3RRdWVyeShsb2NhdGlvbikge1xuICBpZiAobG9jYXRpb24gJiYgbG9jYXRpb24ucXVlcnkpIHtcbiAgICAvLyBEb24ndCBpbmplY3QgcXVlcnkgaWYgaXQgYWxyZWFkeSBleGlzdHMgaW4gaGlzdG9yeVxuICAgIHJldHVybiBsb2NhdGlvbjtcbiAgfVxuXG4gIHZhciBzZWFyY2hRdWVyeSA9IGxvY2F0aW9uICYmIGxvY2F0aW9uLnNlYXJjaDtcblxuICBpZiAodHlwZW9mIHNlYXJjaFF1ZXJ5ICE9PSAnc3RyaW5nJyB8fCBzZWFyY2hRdWVyeS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgbG9jYXRpb24sIHtcbiAgICAgIHF1ZXJ5OiB7fVxuICAgIH0pO1xuICB9IC8vIElnbm9yZSB0aGUgYD9gIHBhcnQgb2YgdGhlIHNlYXJjaCBzdHJpbmcgZS5nLiA/dXNlcm5hbWU9Y29kZWpvY2tpZVxuXG5cbiAgdmFyIHNlYXJjaCA9IHNlYXJjaFF1ZXJ5LnN1YnN0cmluZygxKTsgLy8gU3BsaXQgdGhlIHF1ZXJ5IHN0cmluZyBvbiBgJmAgZS5nLiA/dXNlcm5hbWU9Y29kZWpvY2tpZSZuYW1lPUtlbm5lZHlcblxuICB2YXIgcXVlcmllcyA9IHNlYXJjaC5zcGxpdCgnJicpOyAvLyBDb250cnVjdCBxdWVyeVxuXG4gIHZhciBxdWVyeSA9IHF1ZXJpZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGN1cnJlbnRRdWVyeSkge1xuICAgIC8vIFNwbGl0IG9uIGA9YCwgdG8gZ2V0IGtleSBhbmQgdmFsdWVcbiAgICB2YXIgX2N1cnJlbnRRdWVyeSRzcGxpdCA9IGN1cnJlbnRRdWVyeS5zcGxpdCgnPScpLFxuICAgICAgICBfY3VycmVudFF1ZXJ5JHNwbGl0MiA9IF9zbGljZWRUb0FycmF5KF9jdXJyZW50UXVlcnkkc3BsaXQsIDIpLFxuICAgICAgICBxdWVyeUtleSA9IF9jdXJyZW50UXVlcnkkc3BsaXQyWzBdLFxuICAgICAgICBxdWVyeVZhbHVlID0gX2N1cnJlbnRRdWVyeSRzcGxpdDJbMV07XG5cbiAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgYWNjLCBfZGVmaW5lUHJvcGVydHkoe30sIHF1ZXJ5S2V5LCBxdWVyeVZhbHVlKSk7XG4gIH0sIHt9KTtcbiAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIGxvY2F0aW9uLCB7XG4gICAgcXVlcnk6IHF1ZXJ5XG4gIH0pO1xufTtcblxudmFyIGNyZWF0ZUNvbm5lY3RSb3V0ZXIgPSBmdW5jdGlvbiBjcmVhdGVDb25uZWN0Um91dGVyKHN0cnVjdHVyZSkge1xuICB2YXIgZnJvbUpTID0gc3RydWN0dXJlLmZyb21KUyxcbiAgICAgIG1lcmdlID0gc3RydWN0dXJlLm1lcmdlO1xuXG4gIHZhciBjcmVhdGVSb3V0ZXJSZWR1Y2VyID0gZnVuY3Rpb24gY3JlYXRlUm91dGVyUmVkdWNlcihoaXN0b3J5KSB7XG4gICAgdmFyIGluaXRpYWxSb3V0ZXJTdGF0ZSA9IGZyb21KUyh7XG4gICAgICBsb2NhdGlvbjogaW5qZWN0UXVlcnkoaGlzdG9yeS5sb2NhdGlvbiksXG4gICAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uXG4gICAgfSk7XG4gICAgLypcbiAgICAqIFRoaXMgcmVkdWNlciB3aWxsIHVwZGF0ZSB0aGUgc3RhdGUgd2l0aCB0aGUgbW9zdCByZWNlbnQgbG9jYXRpb24gaGlzdG9yeVxuICAgICogaGFzIHRyYW5zaXRpb25lZCB0by5cbiAgICAqL1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogaW5pdGlhbFJvdXRlclN0YXRlO1xuXG4gICAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXG4gICAgICAgICAgdHlwZSA9IF9yZWYudHlwZSxcbiAgICAgICAgICBwYXlsb2FkID0gX3JlZi5wYXlsb2FkO1xuXG4gICAgICBpZiAodHlwZSA9PT0gTE9DQVRJT05fQ0hBTkdFKSB7XG4gICAgICAgIHZhciBsb2NhdGlvbiA9IHBheWxvYWQubG9jYXRpb24sXG4gICAgICAgICAgICBhY3Rpb24gPSBwYXlsb2FkLmFjdGlvbixcbiAgICAgICAgICAgIGlzRmlyc3RSZW5kZXJpbmcgPSBwYXlsb2FkLmlzRmlyc3RSZW5kZXJpbmc7IC8vIERvbid0IHVwZGF0ZSB0aGUgc3RhdGUgcmVmIGZvciB0aGUgZmlyc3QgcmVuZGVyaW5nXG4gICAgICAgIC8vIHRvIHByZXZlbnQgdGhlIGRvdWJsZS1yZW5kZXJpbmcgaXNzdWUgb24gaW5pdGlsaXphdGlvblxuXG4gICAgICAgIHJldHVybiBpc0ZpcnN0UmVuZGVyaW5nID8gc3RhdGUgOiBtZXJnZShzdGF0ZSwge1xuICAgICAgICAgIGxvY2F0aW9uOiBmcm9tSlMoaW5qZWN0UXVlcnkobG9jYXRpb24pKSxcbiAgICAgICAgICBhY3Rpb246IGFjdGlvblxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIGNyZWF0ZVJvdXRlclJlZHVjZXI7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDb25uZWN0Um91dGVyOyIsImZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgZ2V0SW4gZnJvbSAnLi9nZXRJbic7XG52YXIgc3RydWN0dXJlID0ge1xuICBmcm9tSlM6IGZ1bmN0aW9uIGZyb21KUyh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgZ2V0SW46IGdldEluLFxuICBtZXJnZTogZnVuY3Rpb24gbWVyZ2Uoc3RhdGUsIHBheWxvYWQpIHtcbiAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgc3RhdGUsIHt9LCBwYXlsb2FkKTtcbiAgfSxcbiAgdG9KUzogZnVuY3Rpb24gdG9KUyh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IHN0cnVjdHVyZTsiLCIvKiBDb2RlIGZyb20gZ2l0aHViLmNvbS9lcmlrcmFzL3JlZHV4LWZvcm0gYnkgRXJpayBSYXNtdXNzZW4gKi9cbnZhciBnZXRJbiA9IGZ1bmN0aW9uIGdldEluKHN0YXRlLCBwYXRoKSB7XG4gIGlmICghc3RhdGUpIHtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICB2YXIgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgaWYgKCFsZW5ndGgpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9IHN0YXRlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoICYmICEhcmVzdWx0OyArK2kpIHtcbiAgICByZXN1bHQgPSByZXN1bHRbcGF0aFtpXV07XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0SW47IiwiaW1wb3J0IGNyZWF0ZUNvbm5lY3RlZFJvdXRlciBmcm9tIFwiLi9Db25uZWN0ZWRSb3V0ZXJcIjtcbmltcG9ydCBjcmVhdGVDb25uZWN0Um91dGVyIGZyb20gXCIuL3JlZHVjZXJcIjtcbmltcG9ydCBjcmVhdGVTZWxlY3RvcnMgZnJvbSBcIi4vc2VsZWN0b3JzXCI7XG5pbXBvcnQgcGxhaW5TdHJ1Y3R1cmUgZnJvbSBcIi4vc3RydWN0dXJlL3BsYWluXCI7XG5leHBvcnQgeyBMT0NBVElPTl9DSEFOR0UsIENBTExfSElTVE9SWV9NRVRIT0QsIG9uTG9jYXRpb25DaGFuZ2VkLCBwdXNoLCByZXBsYWNlLCBnbywgZ29CYWNrLCBnb0ZvcndhcmQsIHJvdXRlckFjdGlvbnMgfSBmcm9tIFwiLi9hY3Rpb25zXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHJvdXRlck1pZGRsZXdhcmUgfSBmcm9tIFwiLi9taWRkbGV3YXJlXCI7XG5leHBvcnQgdmFyIENvbm5lY3RlZFJvdXRlciA9IC8qI19fUFVSRV9fKi9jcmVhdGVDb25uZWN0ZWRSb3V0ZXIocGxhaW5TdHJ1Y3R1cmUpO1xuZXhwb3J0IHZhciBjb25uZWN0Um91dGVyID0gLyojX19QVVJFX18qL2NyZWF0ZUNvbm5lY3RSb3V0ZXIocGxhaW5TdHJ1Y3R1cmUpO1xuXG52YXIgX2NyZWF0ZVNlbGVjdG9ycyA9IC8qI19fUFVSRV9fKi9jcmVhdGVTZWxlY3RvcnMocGxhaW5TdHJ1Y3R1cmUpLFxuICAgIGdldExvY2F0aW9uID0gX2NyZWF0ZVNlbGVjdG9ycy5nZXRMb2NhdGlvbixcbiAgICBnZXRBY3Rpb24gPSBfY3JlYXRlU2VsZWN0b3JzLmdldEFjdGlvbixcbiAgICBnZXRIYXNoID0gX2NyZWF0ZVNlbGVjdG9ycy5nZXRIYXNoLFxuICAgIGdldFNlYXJjaCA9IF9jcmVhdGVTZWxlY3RvcnMuZ2V0U2VhcmNoLFxuICAgIGNyZWF0ZU1hdGNoU2VsZWN0b3IgPSBfY3JlYXRlU2VsZWN0b3JzLmNyZWF0ZU1hdGNoU2VsZWN0b3I7XG5cbmV4cG9ydCB7IGdldExvY2F0aW9uLCBnZXRBY3Rpb24sIGdldEhhc2gsIGdldFNlYXJjaCwgY3JlYXRlTWF0Y2hTZWxlY3RvciB9OyIsImltcG9ydCB7Y3JlYXRlU3RvcmUsIGNvbWJpbmVSZWR1Y2Vyc30gZnJvbSBcInJlZHV4XCI7XHJcbmltcG9ydCBteVJlZHVjZXIgZnJvbSBcIi4vbXlSZWR1Y2VyXCI7XHJcbmltcG9ydCB7Y3JlYXRlQnJvd3Nlckhpc3Rvcnl9IGZyb20gJ2hpc3RvcnknO1xyXG5pbXBvcnQge2Nvbm5lY3RSb3V0ZXJ9IGZyb20gJ2Nvbm5lY3RlZC1yZWFjdC1yb3V0ZXInO1xyXG5cclxuZXhwb3J0IGNvbnN0IGhpc3RvcnkgPSBjcmVhdGVCcm93c2VySGlzdG9yeSgpO1xyXG5cclxuY29uc3QgcmVkdWNlciA9IGNvbWJpbmVSZWR1Y2Vycyh7XHJcbiAgICBteVJlZHVjZXIsXHJcbiAgICByb3V0ZXI6IGNvbm5lY3RSb3V0ZXIoaGlzdG9yeSksXHJcbn0pO1xyXG5cclxuZXhwb3J0IGNvbnN0IGluaXRTdG9yZSA9KHByZWxvYWRlZFN0YXRlID0ge30pID0+IHtcclxuICAgcmV0dXJuIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlKTtcclxufSIsIlxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuXHJcbmltcG9ydCAnLi9SZXNpemFibGVQYW5lbC5jc3MnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVzaXphYmxlUGFuZWxzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgIGV2ZW50SGFuZGxlciA9IG51bGxcclxuICBcclxuICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgc3VwZXIoKVxyXG4gICAgICBcclxuICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICBpc0RyYWdnaW5nOiBmYWxzZSxcclxuICAgICAgICBwYW5lbHM6IFszMDAsIDcwMCwgMF1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIFxyXG4gICAgY29tcG9uZW50RGlkTW91bnQgKCkge1xyXG4gICAgICBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLnJlc2l6ZVBhbmVsKVxyXG4gICAgICBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5zdG9wUmVzaXplKVxyXG4gICAgICBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgdGhpcy5zdG9wUmVzaXplKVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBzdGFydFJlc2l6ZSA9IChldmVudCwgaW5kZXgpID0+IHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgaXNEcmFnZ2luZzogdHJ1ZSxcclxuICAgICAgICBjdXJyZW50UGFuZWw6IGluZGV4LFxyXG4gICAgICAgIGluaXRpYWxQb3M6IGV2ZW50LmNsaWVudFhcclxuICAgICAgfSlcclxuICAgIH1cclxuICAgIFxyXG4gICAgc3RvcFJlc2l6ZSA9ICgpID0+IHtcclxuICAgICAgaWYgKHRoaXMuc3RhdGUuaXNEcmFnZ2luZykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuc3RhdGUpXHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSgoe3BhbmVscywgY3VycmVudFBhbmVsLCBkZWx0YX0pID0+ICh7XHJcbiAgICAgICAgICBpc0RyYWdnaW5nOiBmYWxzZSxcclxuICAgICAgICAgIHBhbmVsczoge1xyXG4gICAgICAgICAgICAuLi5wYW5lbHMsXHJcbiAgICAgICAgICAgIFtjdXJyZW50UGFuZWxdOiAocGFuZWxzW2N1cnJlbnRQYW5lbF0gfHwgMCkgLSBkZWx0YSxcclxuICAgICAgICAgICAgW2N1cnJlbnRQYW5lbCAtIDFdOiAocGFuZWxzW2N1cnJlbnRQYW5lbCAtIDFdIHx8IDApICsgZGVsdGFcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBkZWx0YTogMCxcclxuICAgICAgICAgIGN1cnJlbnRQYW5lbDogbnVsbFxyXG4gICAgICAgIH0pKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJlc2l6ZVBhbmVsID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLnN0YXRlLmlzRHJhZ2dpbmcpIHtcclxuICAgICAgICBjb25zdCBkZWx0YSA9IGV2ZW50LmNsaWVudFggLSB0aGlzLnN0YXRlLmluaXRpYWxQb3NcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIGRlbHRhOiBkZWx0YVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICBjb25zdCByZXN0ID0gdGhpcy5wcm9wcy5jaGlsZHJlbi5zbGljZSgxKVxyXG4gICAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFuZWwtY29udGFpbmVyXCIgb25Nb3VzZVVwPXsoKSA9PiB0aGlzLnN0b3BSZXNpemUoKX0+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhbmVsXCIgc3R5bGU9e3t3aWR0aDogYGNhbGMoMTAwJSAtICR7dGhpcy5zdGF0ZS5wYW5lbHNbMV19cHggLSAke3RoaXMuc3RhdGUucGFuZWxzWzJdfXB4KWB9fT5cclxuICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW5bMF19XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIHtbXS5jb25jYXQoLi4ucmVzdC5tYXAoKGNoaWxkLCBpKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICAgPGRpdiBvbk1vdXNlRG93bj17KGUpID0+IHRoaXMuc3RhcnRSZXNpemUoZSwgaSArIDEpfVxyXG4gICAgICAgICAgICAgICAga2V5PXtcInJlc2l6ZXJfXCIgKyBpfVxyXG4gICAgICAgICAgICAgICAgc3R5bGU9e3RoaXMuc3RhdGUuY3VycmVudFBhbmVsID09PSBpKzEgPyB7bGVmdDogdGhpcy5zdGF0ZS5kZWx0YX0gOiB7fX1cclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInJlc2l6ZXJcIj48L2Rpdj4sXHJcbiAgICAgICAgICAgICAgPGRpdiBrZXk9e1wicGFuZWxfXCIgKyBpfSBjbGFzc05hbWU9XCJwYW5lbFwiIHN0eWxlPXt7d2lkdGg6IHRoaXMuc3RhdGUucGFuZWxzW2kgKyAxXX19PlxyXG4gICAgICAgICAgICAgICAge2NoaWxkfVxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgICB9KSl9XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIClcclxuICAgIH1cclxuICB9IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHtjb25uZWN0fSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcbmltcG9ydCB7YmluZEFjdGlvbkNyZWF0b3JzfSBmcm9tICdyZWR1eCc7XHJcbmltcG9ydCB7c2V0SXNPcGVufSBmcm9tICcuLi9zdG9yZS9teUFjdGlvbnMnO1xyXG5pbXBvcnQge0xlZnROYXZCYXJ9IGZyb20gJy4uL2NvbXBvbmVudHMvTGVmdE5hdkJhci9MZWZ0TmF2QmFyJztcclxuXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcz0oe215UmVkdWNlcn0sIHByb3BzKT0+e1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBteURhdGE6IG15UmVkdWNlci5teURhdGEsXHJcbiAgICAgICAgaXNPcGVuOiBteVJlZHVjZXIuaXNPcGVuLFxyXG4gICAgICAgIG5hdklzSGlkZGVuOiBteVJlZHVjZXIubmF2SXNIaWRkZW5cclxuICAgIH07XHJcbn07XHJcblxyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHM9KGRpc3BhdGNoKT0+e1xyXG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyh7c2V0SXNPcGVufSwgZGlzcGF0Y2gpO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcykoTGVmdE5hdkJhcik7IiwiaW1wb3J0IFJlYWN0LCB7dXNlU3RhdGV9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHtOYXZMaW5rfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcclxuaW1wb3J0IEljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zJztcclxuaW1wb3J0IHt1c2VNZWRpYVF1ZXJ5fSBmcm9tICdyZWFjdC1yZXNwb25zaXZlJztcclxuLy/QntCx0L4g0LzQvdC1XHJcbmltcG9ydCBGb2xkZXJTaGFyZWRUd29Ub25lSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvRm9sZGVyU2hhcmVkVHdvVG9uZSc7XHJcbi8v0J7QsdGA0LDQt9C+0LLQsNC90LjQtVxyXG5pbXBvcnQgTWVudUJvb2tUd29Ub25lSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvTWVudUJvb2tUd29Ub25lJztcclxuLy/QvtGB0L3QvtCy0L3QvtC1XHJcbmltcG9ydCBBY2NvdW50QmFsYW5jZUljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL0FjY291bnRCYWxhbmNlJztcclxuLy/QtNC+0L/QvtC70L3QuNGC0LXQu9GM0L3QvtC1XHJcbmltcG9ydCBDYXN0Rm9yRWR1Y2F0aW9uSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvQ2FzdEZvckVkdWNhdGlvbic7XHJcbi8v0J3QsNCy0YvQutC4XHJcbmltcG9ydCBCdWlsZFR3b1RvbmVJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9CdWlsZFR3b1RvbmUnO1xyXG4vLyDQntC/0YvRgiDRgNCw0LHQvtGC0YtcclxuaW1wb3J0IFRpbWVsYXBzZVR3b1RvbmVJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9UaW1lbGFwc2VUd29Ub25lJztcclxuLy8g0J/QvtGA0YLRhNC+0LvQuNC+XHJcbmltcG9ydCBXb3JrVHdvVG9uZUljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL1dvcmtUd29Ub25lJztcclxuLy/QodC10YDRgtC40YTQuNC60LDRgtGLXHJcbmltcG9ydCBSZWNlaXB0VHdvVG9uZUljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL1JlY2VpcHRUd29Ub25lJztcclxuLy/QmtC+0L3RgtCw0LrRgtGLXHJcbmltcG9ydCBTcGVha2VyUGhvbmVUd29Ub25lSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvU3BlYWtlclBob25lVHdvVG9uZSc7XHJcbi8v0JLQtdGA0YHQuNGPINC00LvRjyDQv9C10YfQsNGC0LhcclxuaW1wb3J0IFByaW50SWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvUHJpbnQnO1xyXG5cclxuaW1wb3J0ICcuL0xlZnROYXZCYXIuY3NzJztcclxuXHJcbmNvbnN0IGxlZnRIYW5kID0gXCLimJxcIjtcclxuY29uc3QgcmlnaHRIYW5kID0gXCLimJ5cIjtcclxuZXhwb3J0IGNvbnN0IExlZnROYXZCYXIgPSAoe215RGF0YSwgaXNPcGVuLCBzZXRJc09wZW4sIG5hdklzSGlkZGVufSkgPT57XHJcbiAgICAvL2NvbnN0IFtpc09wZW4sIHNldElzT3Blbl0gPSB1c2VTdGF0ZSh0cnVlKTtcclxuXHJcbiAgIC8vIGNvbnNvbGUubG9nKCdMZWZ0TmF2QmFyIGlzU2Nyb2xsZWREb3duPScsIGlzU2Nyb2xsZWREb3duKTtcclxuXHJcbiAgICAvL2xldCBoZWFkZXJDbGFzc05hbWUgPSBcImhlYWRlclwiKyAoaXNPcGVuIHx8ICFpc1NtYWxsV2luZG93ID8gXCJcIiA6IFwiIGhlYWRlci0taGFtYnVyZ2VyXCIpO1xyXG4gICAgXHJcbiAgICBjb25zdCBpc1NtYWxsV2luZG93ID0gdXNlTWVkaWFRdWVyeSh7IHF1ZXJ5OiAnKG1heC13aWR0aDogNjAwcHgpJyB9KTtcclxuICAgIGxldCBoZWFkZXJDbGFzc05hbWUgPSBcImhlYWRlclwiO1xyXG4gICAgbGV0IGhlYWRlck5hdkNsYXNzTmFtZSA9IFwiaGVhZGVyX19uYXZcIjtcclxuICAgIGlmIChpc1NtYWxsV2luZG93ICkge1xyXG4gICAgICAgIGlmIChuYXZJc0hpZGRlbil7XHJcbiAgICAgICAgICAgIGhlYWRlckNsYXNzTmFtZSA9IFwiaGVhZGVyIGhlYWRlci0tdXBoaWRkZW5cIjtcclxuICAgICAgICAgICAgaGVhZGVyTmF2Q2xhc3NOYW1lID0gXCJoZWFkZXJfX25hdiBoZWFkZXItLWhpZGRlblwiO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICghaXNPcGVuKSB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXJDbGFzc05hbWUgPSBcImhlYWRlciBoZWFkZXItLWhhbWJ1cmdlclwiO1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyTmF2Q2xhc3NOYW1lID0gXCJoZWFkZXJfX25hdiBoZWFkZXItLWhpZGRlblwiO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyQ2xhc3NOYW1lID0gXCJoZWFkZXIgaGVhZGVyLS1oYW1idXJnZXJcIjtcclxuICAgICAgICAgICAgICAgIGhlYWRlck5hdkNsYXNzTmFtZSA9IFwiaGVhZGVyX19uYXZcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKCdpc1NtYWxsV2luZG93PScsIGlzU21hbGxXaW5kb3csICduYXZJc0hpZGRlbj0nLCBuYXZJc0hpZGRlbiwgJ2lzT3Blbj0nLCBpc09wZW4pO1xyXG4gICAgLy8gY29uc29sZS5sb2coJ2hlYWRlckNsYXNzTmFtZT0nLCBoZWFkZXJDbGFzc05hbWUsICdoZWFkZXJOYXZDbGFzc05hbWU9JywgaGVhZGVyTmF2Q2xhc3NOYW1lKTtcclxuXHJcbiAgICAvL2NvbnNvbGUubG9nKCdMZWZ0TmF2QmFyIGlzU21hbGxXaW5kb3c9JywgaXNTbWFsbFdpbmRvdyk7XHJcbiAgICAvL2xldCBoZWFkZXJOYXZDbGFzc05hbWUgPSBcImhlYWRlcl9fbmF2XCIgKyAoaXNPcGVuIHx8ICFpc1NtYWxsV2luZG93ID8gXCJcIiA6IFwiIGhlYWRlci0taGlkZGVuXCIpO1xyXG5cclxuICAgIC8vY29uc3QgZWR1Y2F0aW9uU3ViaXRlbXNDbGFzc05hbWUgPSBpc09wZW4gPyBcIlwiIDogXCIgaGVhZGVyLS1oaWRkZW5cIjtcclxuICAgIGNvbnN0IG9uQ2xpY2tIYW5kbGVyID0gKGUpID0+IHtcclxuICAgICAgICAvL2lmIChlLnRhcmdldC5jbGFzc05hbWUgPT09IFwiaGVhZGVyX19oaWRlQnRuXCIpIHtcclxuICAgICAgICAgICAgc2V0SXNPcGVuKCFpc09wZW4pXHJcbiAgICAgICAgLy99IGVsc2Uge1xyXG4gICAgICAgIC8vICAgIHNldElzT3Blbih0cnVlKVxyXG4gICAgICAgIC8vfVxyXG4gICAgfTtcclxuXHJcbiAgICBcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2hlYWRlckNsYXNzTmFtZX0+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaGVhZGVyX19oaWRlQnRuXCIgb25DbGljaz17b25DbGlja0hhbmRsZXJ9PjxpIGNsYXNzTmFtZT1cImZhIGZhLWJhcnNcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+PC9kaXY+XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICA8bmF2IGNsYXNzTmFtZT17aGVhZGVyTmF2Q2xhc3NOYW1lfT5cclxuICAgICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJoZWFkZXJfX25hdi0tZmlyc3RsZXZlbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaSBvbkNsaWNrPXtvbkNsaWNrSGFuZGxlcn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZMaW5rIHRvPScvYWJvdXRNZScgY2xhc3NOYW1lPVwiaGVhZGVyX19uYXZfX2xpbmtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxGb2xkZXJTaGFyZWRUd29Ub25lSWNvbiBjbGFzc05hbWU9XCJoZWFkZXJfX2ljb25cIiAvPjxkaXYgY2xhc3NOYW1lPVwiaGVhZGVyX19uYXZpdGVtXCI+INCe0LHQviDQvNC90LU8L2Rpdj48YnIvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L05hdkxpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGkgb25DbGljaz17b25DbGlja0hhbmRsZXJ9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8TmF2TGluayB0bz0nL2VkdWNhdGlvbicgY2xhc3NOYW1lPVwiaGVhZGVyX19uYXZfX2xpbmtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNZW51Qm9va1R3b1RvbmVJY29uIGNsYXNzTmFtZT1cImhlYWRlcl9faWNvblwiIC8+IDxkaXYgY2xhc3NOYW1lPVwiaGVhZGVyX19uYXZpdGVtXCI+0J7QsdGA0LDQt9C+0LLQsNC90LjQtTo8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9OYXZMaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGkgb25DbGljaz17b25DbGlja0hhbmRsZXJ9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8TmF2TGluayB0bz0nL3F1YWxpZmljYXRpb24nIGNsYXNzTmFtZT1cImhlYWRlcl9fbmF2X19saW5rXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGltZWxhcHNlVHdvVG9uZUljb24gY2xhc3NOYW1lPVwiaGVhZGVyX19pY29uXCIgLz4gPGRpdiBjbGFzc05hbWU9XCJoZWFkZXJfX25hdml0ZW1cIj7QntC/0YvRgiDRgNCw0LHQvtGC0Ys8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9OYXZMaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpIG9uQ2xpY2s9e29uQ2xpY2tIYW5kbGVyfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPE5hdkxpbmsgdG89Jy9zY2lsbHMnIGNsYXNzTmFtZT1cImhlYWRlcl9fbmF2X19saW5rXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QnVpbGRUd29Ub25lSWNvbiBjbGFzc05hbWU9XCJoZWFkZXJfX2ljb25cIiAvPiA8ZGl2IGNsYXNzTmFtZT1cImhlYWRlcl9fbmF2aXRlbVwiPtCd0LDQstGL0LrQuDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L05hdkxpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGkgb25DbGljaz17b25DbGlja0hhbmRsZXJ9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8TmF2TGluayB0bz0nL3BvcnRmb2xpbycgY2xhc3NOYW1lPVwiaGVhZGVyX19uYXZfX2xpbmtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxXb3JrVHdvVG9uZUljb24gY2xhc3NOYW1lPVwiaGVhZGVyX19pY29uXCIgLz4gPGRpdiBjbGFzc05hbWU9XCJoZWFkZXJfX25hdml0ZW1cIj7Qn9C+0YDRgtGE0L7Qu9C40L48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9OYXZMaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpIG9uQ2xpY2s9e29uQ2xpY2tIYW5kbGVyfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPE5hdkxpbmsgdG89Jy9zZXJ0aWZpY2F0ZXMnIGNsYXNzTmFtZT1cImhlYWRlcl9fbmF2X19saW5rXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UmVjZWlwdFR3b1RvbmVJY29uIGNsYXNzTmFtZT1cImhlYWRlcl9faWNvblwiIC8+IDxkaXYgY2xhc3NOYW1lPVwiaGVhZGVyX19uYXZpdGVtXCI+0KHQtdGA0YLQuNGE0LjQutCw0YLRizwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L05hdkxpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGkgb25DbGljaz17b25DbGlja0hhbmRsZXJ9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8TmF2TGluayB0bz0nL2NvbnRhY3RzJyBjbGFzc05hbWU9XCJoZWFkZXJfX25hdl9fbGlua1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNwZWFrZXJQaG9uZVR3b1RvbmVJY29uIGNsYXNzTmFtZT1cImhlYWRlcl9faWNvblwiIC8+IDxkaXYgY2xhc3NOYW1lPVwiaGVhZGVyX19uYXZpdGVtXCI+0JrQvtC90YLQsNC60YLRizwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L05hdkxpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGkgb25DbGljaz17b25DbGlja0hhbmRsZXJ9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWUgPSBcImhlYWRlcl9fbmF2X19saW5rXCIgaHJlZj1cIi4vc3JjL3ByaW50VmVyc2lvbi9QcmludFZlcnNpb25fT2xnYVphZ2xhdm5vdmFfUmVzdW1lLnBkZlwiIHRhcmdldD1cIl9ibGFua1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFByaW50SWNvbiBjbGFzc05hbWU9XCJoZWFkZXJfX2ljb25cIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWFkZXJfX25hdml0ZW1cIj7QktC10YDRgdC40Y8g0LTQu9GPINC/0LXRh9Cw0YLQuDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgIDwvbmF2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxufVxyXG57LyogPHVsIGNsYXNzTmFtZT1cImhlYWRlcl9fbmF2LS1zZWNvbmRsZXZlbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5hdkxpbmsgdG89Jy9SZXN1bWUvZWR1Y2F0aW9uL21haW4nIGNsYXNzTmFtZT1cImhlYWRlcl9fbmF2X19saW5rXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPiA8QWNjb3VudEJhbGFuY2VJY29uIGNsYXNzTmFtZT1cImhlYWRlcl9faWNvbi0tc21hbGxcIiAvPiA8c3BhbiBjbGFzc05hbWU9XCJoZWFkZXJfX25hdml0ZW1cIj7QntGB0L3QvtCy0L3QvtC1PC9zcGFuPjwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L05hdkxpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TmF2TGluayB0bz0nL1Jlc3VtZS9lZHVjYXRpb24vYWRkaXRpb25hbCcgY2xhc3NOYW1lPVwiaGVhZGVyX19uYXZfX2xpbmtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+IDxDYXN0Rm9yRWR1Y2F0aW9uSWNvbiBjbGFzc05hbWU9XCJoZWFkZXJfX2ljb24tLXNtYWxsXCIgLz4gPHNwYW4gY2xhc3NOYW1lPVwiaGVhZGVyX19uYXZpdGVtXCI+0JTQvtC/0L7Qu9C90LjRgtC10LvRjNC90L7QtTwvc3Bhbj48L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9OYXZMaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3VsPiAqL30iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge2Nvbm5lY3R9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuaW1wb3J0IHtiaW5kQWN0aW9uQ3JlYXRvcnN9IGZyb20gJ3JlZHV4JztcclxuaW1wb3J0IHtsb2FkRGF0YX0gZnJvbSAnLi4vc3RvcmUvbXlBY3Rpb25zJztcclxuaW1wb3J0IHtSaWdodFRpdGxlfSBmcm9tICcuLi9jb21wb25lbnRzL1JpZ2h0VGl0bGUvUmlnaHRUaXRsZSc7XHJcblxyXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHM9KHtteVJlZHVjZXJ9LCBwcm9wcyk9PntcclxuICAgIC8vIGNvbnNvbGUubG9nKCdSaWdodFRpdGxlQ29udGFpbmVyJywgbXlSZWR1Y2VyKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbmFtZTogbXlSZWR1Y2VyLm15RGF0YS5uYW1lLFxyXG4gICAgICAgIGJpcnRoZGF0ZTogbXlSZWR1Y2VyLm15RGF0YS5iaXJ0aGRhdGUsXHJcbiAgICAgICAgd2lzaEpvYjogbXlSZWR1Y2VyLm15RGF0YS53aXNoSm9iLFxyXG4gICAgICAgIGlzT3BlbjogbXlSZWR1Y2VyLmlzT3BlblxyXG4gICAgfTtcclxufTtcclxuXHJcbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcz0oZGlzcGF0Y2gpPT57XHJcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3JzKHtsb2FkRGF0YX0sIGRpc3BhdGNoKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKFJpZ2h0VGl0bGUpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5pbXBvcnQgJy4vUmlnaHRUaXRsZS5jc3MnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFJpZ2h0VGl0bGUgPSAoe25hbWUsIGJpcnRoZGF0ZSwgd2lzaEpvYiwgaXNPcGVufSkgPT57XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJpZ2h0VGl0bGVcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyaWdodFRpdGxlX19waG90b1wiPlxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJpZ2h0VGl0bGVfX3BlcnNvbmFsXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJpZ2h0VGl0bGVfX25hbWVcIj57bmFtZX08L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmlnaHRUaXRsZV9fYWdlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwicmlnaHRUaXRsZV9fYWdlLS10aXRsZVwiPtC00LDRgtCwINGA0L7QttC00LXQvdC40Y86IDwvc3Bhbj48YnIvPntiaXJ0aGRhdGV9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmlnaHRUaXRsZV9faW5mb1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0YWJsZT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9J3JpZ2h0VGl0bGUtLXNtYWxsRm9udCByaWdodFRpdGxlLS10YWJsZUxlZnQnPtCW0LXQu9Cw0LXQvNCw0Y8g0LTQvtC70LbQvdC+0YHRgtGMOjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT0ncmlnaHRUaXRsZS0tYmlnRm9udCc+e3dpc2hKb2IubmFtZX08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPSdyaWdodFRpdGxlLS1zbWFsbEZvbnQgcmlnaHRUaXRsZS0tdGFibGVMZWZ0Jz7QntC/0YvRgiDRgNCw0LHQvtGC0Ys6PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPSdyaWdodFRpdGxlLS1iaWdGb250Jz57d2lzaEpvYi5leHBpcmllbmNlfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9J3JpZ2h0VGl0bGUtLXNtYWxsRm9udCByaWdodFRpdGxlLS10YWJsZUxlZnQnPtCX0LDQvdGP0YLQvtGB0YLRjDo8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9J3JpZ2h0VGl0bGUtLWJpZ0ZvbnQnPnt3aXNoSm9iLndvcmtkYXl9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT0ncmlnaHRUaXRsZS0tc21hbGxGb250IHJpZ2h0VGl0bGUtLXRhYmxlTGVmdCc+0JPRgNCw0YTQuNC6INGA0LDQsdC+0YLRizo8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9J3JpZ2h0VGl0bGUtLWJpZ0ZvbnQnPnt3aXNoSm9iLnNjaGVkdWxlfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdGFibGU+XHJcbiAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBcclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcbn1cclxuXHJcbnsvKiA8aW1nIGNsYXNzTmFtZT1cInJpZ2h0VGl0bGVfX3Bob3RvLS1pbWdcIiBzcmM9XCIuL3NyYy9pbWcvbXlQaG90bzEuanBnXCIgYWx0PVwibXlQaG90b1wiIC8+ICovfSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7TmF2TGlua30gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcblxyXG5leHBvcnQgY29uc3QgU2VydGlmaWNhdGVJdGVtID0gKHtzZXJ0aWZpY2F0ZUl0ZW0sIGlkeH0pID0+IHtcclxuICAgIGNvbnN0IHNlcnRpZmljYXRlUGF0aCA9ICcvc2VydGlmaWNhdGVzLycgKyBpZHg7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnU2VydGlmaWNhdGVJdGVtJywgaWR4LCBzZXJ0aWZpY2F0ZVBhdGgpO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlcnRpZmljYXRlc19faXRlbVwiPlxyXG4gICAgICAgICAgICAgPE5hdkxpbmsgdG89e3NlcnRpZmljYXRlUGF0aH0+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlcnRpZmljYXRlc19faW1nXCI+PGltZyBzcmM9e3NlcnRpZmljYXRlSXRlbS5zcmN9IGFsdD1cInNlcnRpZmljYXRlXCIgY2xhc3NOYW1lPVwic2VydGlmaWNhdGVzX19pbWctLXNpemVcIiAvPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiA+e3NlcnRpZmljYXRlSXRlbS5zY2hvb2x9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlcnRpZmljYXRlc19faXRlbS0tZGF0ZVwiPntzZXJ0aWZpY2F0ZUl0ZW0uZGF0ZX08L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VydGlmaWNhdGVzX19pdGVtLS1uYW1lXCI+e3NlcnRpZmljYXRlSXRlbS5mdWxsTmFtZX08L2Rpdj5cclxuICAgICAgICAgICAgPC9OYXZMaW5rPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgU2VydGlmaWNhdGVJdGVtIH0gZnJvbSAnLi4vU2VydGlmaWNhdGVzUGFnZS9TZXJ0aWZpY2F0ZUl0ZW0nO1xyXG5cclxuZXhwb3J0IGNvbnN0IFN0YXJ0UGFnZSA9ICh7c2VydGlmaWNhdGVzLCBpc09wZW59KSA9PiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5mb1BhZ2Ugc2Nyb2xsLXlcIj5cclxuICAgICAgICAgICAgPGRpdj7Ql9C00YDQsNCy0YHRgtCy0YPQudGC0LUsINC00L7RgNC+0LPQuNC1INGC0L7QstCw0YDQuNGJ0LghINCU0L7QsdGA0L4g0L/QvtC20LDQu9C+0LLQsNGC0Ywg0LIg0LzQvtC1INGA0LXQt9GO0LzQtSA9KTwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2PkhlbGxvLCBNciBvciBNcnMhIFlvdSBhcmUgd2VsY29tZSB0byBteSBDVjwvZGl2PjxiciAvPlxyXG4gICAgICAgICAgICA8ZGl2PtCd0L7QstC+0YHRgtC4OiA8Yj7RjyDQt9Cw0LrQvtC90YfQuNC70LAg0LrRg9GA0YHRiyBGcm9udGVuZC3RgNCw0LfRgNCw0LHQvtGH0LjQuiDQvdCwIEdlZWtCcmFpbnMucnUg0Lgg0L/QvtC70YPRh9C40LvQsCDRgdC10YDRgtC40YTQuNC60LDRgjo8L2I+XHJcbiAgICAgICAgICAgICAgICA8U2VydGlmaWNhdGVJdGVtIHsuLi57c2VydGlmaWNhdGVJdGVtOiBzZXJ0aWZpY2F0ZXNbc2VydGlmaWNhdGVzLmxlbmd0aCAtIDFdfX0gaWR4PXtzZXJ0aWZpY2F0ZXMubGVuZ3RoIC0gMX0gLz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge2Nvbm5lY3R9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuaW1wb3J0IHtiaW5kQWN0aW9uQ3JlYXRvcnN9IGZyb20gJ3JlZHV4JztcclxuaW1wb3J0IHtsb2FkRGF0YX0gZnJvbSAnLi4vc3RvcmUvbXlBY3Rpb25zJztcclxuaW1wb3J0IHsgU3RhcnRQYWdlIH0gZnJvbSAnLi4vY29tcG9uZW50cy9TdGFydFBhZ2UvU3RhcnRQYWdlJztcclxuXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcz0oe215UmVkdWNlcn0sIHByb3BzKT0+e1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBzZXJ0aWZpY2F0ZXM6IG15UmVkdWNlci5teURhdGEuc2VydGlmaWNhdGVzLFxyXG4gICAgICAgIGlzT3BlbjogbXlSZWR1Y2VyLmlzT3BlblxyXG4gICAgfTtcclxufTtcclxuXHJcbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcz0oZGlzcGF0Y2gpPT57XHJcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3JzKHtsb2FkRGF0YX0sIGRpc3BhdGNoKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKFN0YXJ0UGFnZSk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHtjb25uZWN0fSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcbmltcG9ydCB7YmluZEFjdGlvbkNyZWF0b3JzfSBmcm9tICdyZWR1eCc7XHJcbmltcG9ydCB7bG9hZERhdGF9IGZyb20gJy4uL3N0b3JlL215QWN0aW9ucyc7XHJcbmltcG9ydCB7IEFib3V0TWUgfSBmcm9tICcuLi9jb21wb25lbnRzL0Fib3V0TWUvQWJvdXRNZSc7XHJcblxyXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHM9KHtteVJlZHVjZXJ9LCBwcm9wcyk9PntcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgYWJvdXRNZTogbXlSZWR1Y2VyLm15RGF0YS5hYm91dE1lLFxyXG4gICAgICAgIGxhbmd1YWdlczogbXlSZWR1Y2VyLm15RGF0YS5sYW5ndWFnZXMsXHJcbiAgICAgICAgY2FyOiBteVJlZHVjZXIubXlEYXRhLmNhcixcclxuICAgICAgICBpc09wZW46IG15UmVkdWNlci5pc09wZW5cclxuICAgIH07XHJcbn07XHJcblxyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHM9KGRpc3BhdGNoKT0+e1xyXG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyh7bG9hZERhdGF9LCBkaXNwYXRjaCk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShBYm91dE1lKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgJy4vQWJvdXRNZS5jc3MnO1xyXG5cclxuZXhwb3J0IGNvbnN0IEFib3V0TWUgPSAoe2Fib3V0TWUsIGxhbmd1YWdlcywgY2FyLCBpc09wZW59KSA9PiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5mb1BhZ2VcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbmZvUGFnZV9faGVhZGVyXCI+0J7QsdC+INC80L3QtTwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkFib3V0TWUgc2Nyb2xsLXlcIj5cclxuICAgICAgICAgICAgICAgIDx0YWJsZT5cclxuICAgICAgICAgICAgICAgICAgICA8dGJvZHk+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwiQWJvdXRNZS0tbGFiZWxcIj7QnNC10YHRgtC+INC20LjRgtC10LvRjNGB0YLQstCwOiA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e2Fib3V0TWUuY2l0eX08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwiQWJvdXRNZS0tbGFiZWxcIj7Qk9GA0LDQttC00LDQvdGB0YLQstC+OjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57YWJvdXRNZS5jaXRpemVufTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJBYm91dE1lLS1sYWJlbFwiPtCf0L7Quzo8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e2Fib3V0TWUuZ2VuZGVyfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJBYm91dE1lLS1sYWJlbFwiPtCeINGB0LXQsdC1OjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57YWJvdXRNZS5zZWxmSW5mb3JtYXRpb259PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIkFib3V0TWUtLWxhYmVsXCI+0K/Qt9GL0LrQuDo8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e2xhbmd1YWdlcy5ydXNzaWFufTxici8+e2xhbmd1YWdlcy5lbmdsaXNofTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJBYm91dE1lLS1sYWJlbFwiPtCQ0LLRgtC+OjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57Y2FyfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PlxyXG4gICAgICAgICAgICAgICAgPC90YWJsZT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgJy4vRWR1Y2F0aW9uUGFnZS5jc3MnO1xyXG5cclxuZXhwb3J0IGNvbnN0IE1haW5FZHVjYXRpb25JdGVtID0gKHttYWluRWR1Y2F0aW9ufSkgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJFZHVjYXRpb25JdGVtIHNjcm9sbC15XCIgPiBcclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiRWR1Y2F0aW9uSXRlbV9fdGl0bGVcIj7QktGL0YHRiNC10LU8L2Rpdj4gXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkVkdWNhdGlvbkl0ZW0tLWl0ZW1ib3JkZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkVkdWNhdGlvbkl0ZW1fX2l0ZW1cIj57bWFpbkVkdWNhdGlvbi55ZWFyfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiRWR1Y2F0aW9uSXRlbV9faXRlbVwiPnttYWluRWR1Y2F0aW9uLmluc3RpdHV0ZX08L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkVkdWNhdGlvbkl0ZW1fX2l0ZW1cIj57bWFpbkVkdWNhdGlvbi5mYWN1bHR5fTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmV4cG9ydCBjb25zdCBBZGRpdGlvbmFsRWR1Y2F0aW9uSXRlbSA9ICh7YWRkaXRpb25hbEVkdWNhdGlvbkl0ZW19KSA9PiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiRWR1Y2F0aW9uSXRlbS0taXRlbWJvcmRlclwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkVkdWNhdGlvbkl0ZW1fX2l0ZW1cIj57YWRkaXRpb25hbEVkdWNhdGlvbkl0ZW0ueWVhcn08L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJFZHVjYXRpb25JdGVtX19pdGVtXCI+e2FkZGl0aW9uYWxFZHVjYXRpb25JdGVtLmluc3RpdHV0ZX08L2Rpdj4gICBcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJFZHVjYXRpb25JdGVtX19pdGVtXCI+e2FkZGl0aW9uYWxFZHVjYXRpb25JdGVtLmNvdXJzZU5hbWV9PC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuaW1wb3J0IHtNYWluRWR1Y2F0aW9uSXRlbX0gZnJvbSAnLi9NYWluRWR1Y2F0aW9uSXRlbSc7XHJcbmltcG9ydCB7QWRkaXRpb25hbEVkdWNhdGlvbkl0ZW19IGZyb20gJy4vQWRkaXRpb25hbEVkdWNhdGlvbkl0ZW0nO1xyXG5cclxuZXhwb3J0IGNvbnN0IEVkdWNhdGlvblBhZ2UgPSAoe21haW5FZHVjYXRpb24sIGFkZGl0aW9uYWxFZHVjYXRpb24sIGlzT3Blbn0pID0+IHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwiTWFpbkVkdWNhdGlvblBhZ2UgbWFpbkVkdWNhdGlvbj1cIiwgbWFpbkVkdWNhdGlvbiwgJ2FkZGl0aW9uYWxFZHVjYXRpb249JywgYWRkaXRpb25hbEVkdWNhdGlvbik7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5mb1BhZ2VcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbmZvUGFnZV9faGVhZGVyXCI+0J7QsdGA0LDQt9C+0LLQsNC90LjQtTwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkVkdWNhdGlvbiBzY3JvbGwteVwiPlxyXG4gICAgICAgICAgICAgICAgPE1haW5FZHVjYXRpb25JdGVtIG1haW5FZHVjYXRpb249e21haW5FZHVjYXRpb259Lz5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiRWR1Y2F0aW9uSXRlbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiRWR1Y2F0aW9uSXRlbV9fdGl0bGVcIj7QlNC+0L/QvtC70L3QuNGC0LXQu9GM0L3QvtC1OjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIHtPYmplY3Qua2V5cyhhZGRpdGlvbmFsRWR1Y2F0aW9uKS5tYXAoKEl0ZW1JZCwgaWR4KSA9PiA8QWRkaXRpb25hbEVkdWNhdGlvbkl0ZW0gey4uLnthZGRpdGlvbmFsRWR1Y2F0aW9uSXRlbTogYWRkaXRpb25hbEVkdWNhdGlvbltJdGVtSWRdfX0gaWR4PXtpZHh9IGtleT17aWR4fSAvPil9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge2Nvbm5lY3R9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuaW1wb3J0IHtiaW5kQWN0aW9uQ3JlYXRvcnN9IGZyb20gJ3JlZHV4JztcclxuaW1wb3J0IHtsb2FkRGF0YX0gZnJvbSAnLi4vc3RvcmUvbXlBY3Rpb25zJztcclxuaW1wb3J0IHsgRWR1Y2F0aW9uUGFnZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvRWR1Y2F0aW9uUGFnZS9FZHVjYXRpb25QYWdlJztcclxuXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcz0oe215UmVkdWNlcn0sIHByb3BzKT0+e1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBtYWluRWR1Y2F0aW9uOiBteVJlZHVjZXIubXlEYXRhLm1haW5FZHVjYXRpb24sXHJcbiAgICAgICAgYWRkaXRpb25hbEVkdWNhdGlvbjogbXlSZWR1Y2VyLm15RGF0YS5hZGRpdGlvbmFsRWR1Y2F0aW9uLFxyXG4gICAgICAgIGlzT3BlbjogbXlSZWR1Y2VyLmlzT3BlblxyXG4gICAgfTtcclxufTtcclxuXHJcbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcz0oZGlzcGF0Y2gpPT57XHJcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3JzKHtsb2FkRGF0YX0sIGRpc3BhdGNoKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKEVkdWNhdGlvblBhZ2UpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7Y29ubmVjdH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5pbXBvcnQge2JpbmRBY3Rpb25DcmVhdG9yc30gZnJvbSAncmVkdXgnO1xyXG5pbXBvcnQge2xvYWREYXRhfSBmcm9tICcuLi9zdG9yZS9teUFjdGlvbnMnO1xyXG5pbXBvcnQgeyBNYWluRWR1Y2F0aW9uUGFnZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvRWR1Y2F0aW9uUGFnZS9NYWluRWR1Y2F0aW9uUGFnZSc7XHJcblxyXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHM9KHtteVJlZHVjZXJ9LCBwcm9wcyk9PntcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbWFpbkVkdWNhdGlvbjogbXlSZWR1Y2VyLm15RGF0YS5tYWluRWR1Y2F0aW9uLFxyXG4gICAgICAgIGlzT3BlbjogbXlSZWR1Y2VyLmlzT3BlblxyXG4gICAgfTtcclxufTtcclxuXHJcbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcz0oZGlzcGF0Y2gpPT57XHJcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3JzKHtsb2FkRGF0YX0sIGRpc3BhdGNoKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKE1haW5FZHVjYXRpb25QYWdlKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge01haW5FZHVjYXRpb25JdGVtfSBmcm9tICcuL01haW5FZHVjYXRpb25JdGVtJztcclxuXHJcbmV4cG9ydCBjb25zdCBNYWluRWR1Y2F0aW9uUGFnZSA9ICh7bWFpbkVkdWNhdGlvbiwgaXNPcGVufSkgPT4ge1xyXG4gICAgY29uc3QgaW5mb1BhZ2VDbGFzc05hbWUgPSBcImluZm9QYWdlXCI7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtpbmZvUGFnZUNsYXNzTmFtZX0+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5mb1BhZ2VfX2hlYWRlclwiPtCR0LDQt9C+0LLQvtC1INC+0LHRgNCw0LfQvtCy0LDQvdC40LU8L2Rpdj5cclxuICAgICAgICAgICAgPE1haW5FZHVjYXRpb25JdGVtIG1haW5FZHVjYXRpb249e21haW5FZHVjYXRpb259IC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge0FkZGl0aW9uYWxFZHVjYXRpb25JdGVtfSBmcm9tICcuL0FkZGl0aW9uYWxFZHVjYXRpb25JdGVtJztcclxuXHJcbmV4cG9ydCBjb25zdCBBZGRpdGlvbmFsRWR1Y2F0aW9uUGFnZSA9ICh7YWRkaXRpb25hbEVkdWNhdGlvbiwgaXNPcGVufSkgPT4ge1xyXG4gICAgY29uc3QgaW5mb1BhZ2VDbGFzc05hbWUgPSBcImluZm9QYWdlXCI7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtpbmZvUGFnZUNsYXNzTmFtZX0+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5mb1BhZ2VfX2hlYWRlclwiPtCU0L7Qv9C+0LvQvdC40YLQtdC70YzQvdC+0LUg0L7QsdGA0LDQt9C+0LLQsNC90LjQtTwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNjcm9sbC15XCI+XHJcbiAgICAgICAgICAgICAgICB7T2JqZWN0LmtleXMoYWRkaXRpb25hbEVkdWNhdGlvbikubWFwKChJdGVtSWQsIGlkeCkgPT4gPEFkZGl0aW9uYWxFZHVjYXRpb25JdGVtIHsuLi57YWRkaXRpb25hbEVkdWNhdGlvbkl0ZW06IGFkZGl0aW9uYWxFZHVjYXRpb25bSXRlbUlkXX19IGlkeD17aWR4fSBrZXk9e2lkeH0gLz4pfVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIClcclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7Y29ubmVjdH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5pbXBvcnQge2JpbmRBY3Rpb25DcmVhdG9yc30gZnJvbSAncmVkdXgnO1xyXG5pbXBvcnQge2xvYWREYXRhfSBmcm9tICcuLi9zdG9yZS9teUFjdGlvbnMnO1xyXG5pbXBvcnQgeyBBZGRpdGlvbmFsRWR1Y2F0aW9uUGFnZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvRWR1Y2F0aW9uUGFnZS9BZGRpdGlvbmFsRWR1Y2F0aW9uUGFnZSc7XHJcblxyXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHM9KHtteVJlZHVjZXJ9LCBwcm9wcyk9PntcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgYWRkaXRpb25hbEVkdWNhdGlvbjogbXlSZWR1Y2VyLm15RGF0YS5hZGRpdGlvbmFsRWR1Y2F0aW9uLFxyXG4gICAgICAgIGlzT3BlbjogbXlSZWR1Y2VyLmlzT3BlblxyXG4gICAgfTtcclxufTtcclxuXHJcbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcz0oZGlzcGF0Y2gpPT57XHJcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3JzKHtsb2FkRGF0YX0sIGRpc3BhdGNoKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKEFkZGl0aW9uYWxFZHVjYXRpb25QYWdlKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFF1YWxpZmljYXRpb25JdGVtID0gKHtxdWFsaWZpY2F0aW9uSXRlbX0pID0+IHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJFZHVjYXRpb25JdGVtLS1pdGVtYm9yZGVyXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiRWR1Y2F0aW9uSXRlbV9faXRlbVwiPntxdWFsaWZpY2F0aW9uSXRlbS55ZWFyfTwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkVkdWNhdGlvbkl0ZW1fX2l0ZW1cIj48c3Ryb25nPntxdWFsaWZpY2F0aW9uSXRlbS5jb21wYW55fTwvc3Ryb25nPjwvZGl2PiAgIFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkVkdWNhdGlvbkl0ZW1fX2l0ZW1cIj48YSBocmVmPXtxdWFsaWZpY2F0aW9uSXRlbS5jb21wYW55TGlua30gdGFyZ2V0PVwiX2JsYW5rXCI+e3F1YWxpZmljYXRpb25JdGVtLmNvbXBhbnlMaW5rfTwvYT48L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJFZHVjYXRpb25JdGVtX19pdGVtXCI+e3F1YWxpZmljYXRpb25JdGVtLmNpdHl9PC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiRWR1Y2F0aW9uSXRlbV9faXRlbVwiPjxzcGFuIGNsYXNzTmFtZT1cIlF1YWxpZmljYXRpb25zLS1zbWFsbEZvbnRcIj7QtNC+0LvQttC90L7RgdGC0Yw6IDwvc3Bhbj57cXVhbGlmaWNhdGlvbkl0ZW0uam9ifTwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkVkdWNhdGlvbkl0ZW1fX2l0ZW1cIj48c3BhbiBjbGFzc05hbWU9XCJRdWFsaWZpY2F0aW9ucy0tc21hbGxGb250XCI+0L7QsdGP0LfQsNC90L3QvtGB0YLQuDogPC9zcGFuPntxdWFsaWZpY2F0aW9uSXRlbS5kdXR5fTwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHtRdWFsaWZpY2F0aW9uSXRlbX0gZnJvbSAnLi9RdWFsaWZpY2F0aW9uSXRlbSc7XHJcbmltcG9ydCAnLi9RdWFsaWZpY2F0aW9uUGFnZS5jc3MnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFF1YWxpZmljYXRpb25QYWdlID0gKHtxdWFsaWZpY2F0aW9uLCBpc09wZW59KSA9PiB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnUXVhbGlmaWNhdGlvblBhZ2UnLCBxdWFsaWZpY2F0aW9uKTtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbmZvUGFnZVwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImluZm9QYWdlX19oZWFkZXJcIj7QntC/0YvRgiDRgNCw0LHQvtGC0Ys6PC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiUXVhbGlmaWNhdGlvbnMgc2Nyb2xsLXlcIj5cclxuICAgICAgICAgICAgICAgIHtPYmplY3Qua2V5cyhxdWFsaWZpY2F0aW9uKS5tYXAoKEl0ZW1JZCwgaWR4KSA9PiA8UXVhbGlmaWNhdGlvbkl0ZW0gey4uLntxdWFsaWZpY2F0aW9uSXRlbTogcXVhbGlmaWNhdGlvbltJdGVtSWRdfX0gaWR4PXtpZHh9IGtleT17aWR4fSAvPil9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHtjb25uZWN0fSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcbmltcG9ydCB7YmluZEFjdGlvbkNyZWF0b3JzfSBmcm9tICdyZWR1eCc7XHJcbmltcG9ydCB7bG9hZERhdGF9IGZyb20gJy4uL3N0b3JlL215QWN0aW9ucyc7XHJcbmltcG9ydCB7IFF1YWxpZmljYXRpb25QYWdlIH0gZnJvbSAnLi4vY29tcG9uZW50cy9RdWFsaWZpY2F0aW9uUGFnZS9RdWFsaWZpY2F0aW9uUGFnZSc7XHJcblxyXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHM9KHtteVJlZHVjZXJ9LCBwcm9wcyk9PntcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcXVhbGlmaWNhdGlvbjogbXlSZWR1Y2VyLm15RGF0YS5xdWFsaWZpY2F0aW9uLFxyXG4gICAgICAgIGlzT3BlbjogbXlSZWR1Y2VyLmlzT3BlblxyXG4gICAgfTtcclxufTtcclxuXHJcbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcz0oZGlzcGF0Y2gpPT57XHJcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3JzKHtsb2FkRGF0YX0sIGRpc3BhdGNoKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKFF1YWxpZmljYXRpb25QYWdlKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNjaWxsc0l0ZW0gPSAoe3NjaWxsc0l0ZW19KSA9PiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiRWR1Y2F0aW9uSXRlbS0taXRlbWJvcmRlclwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkVkdWNhdGlvbkl0ZW1fX2l0ZW1cIj57c2NpbGxzSXRlbX08L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIClcclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7U2NpbGxzSXRlbX0gZnJvbSAnLi9TY2lsbHNJdGVtJztcclxuXHJcbmV4cG9ydCBjb25zdCBTY2lsbHNQYWdlID0gKHtzY2lsbHMsIGlzT3Blbn0pID0+IHtcclxuICAgIC8vY29uc29sZS5sb2coJ1NjaWxsc1BhZ2UnLCBzY2lsbHMpO1xyXG4gICAgY29uc3QgaW5mb1BhZ2VDbGFzc05hbWUgPSBcImluZm9QYWdlXCI7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtpbmZvUGFnZUNsYXNzTmFtZX0+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5mb1BhZ2VfX2hlYWRlclwiPtCd0LDQstGL0LrQuDo8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzY3JvbGwteSBzY3JvbGxcIj5cclxuICAgICAgICAgICAgICAgIHtPYmplY3Qua2V5cyhzY2lsbHMpLm1hcCgoaXRlbSwgaWR4KSA9PiA8U2NpbGxzSXRlbSB7Li4ue3NjaWxsc0l0ZW06IHNjaWxsc1tpdGVtXX19IGlkeD17aWR4fSBrZXk9e2lkeH0gLz4pfVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIClcclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7Y29ubmVjdH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5pbXBvcnQge2JpbmRBY3Rpb25DcmVhdG9yc30gZnJvbSAncmVkdXgnO1xyXG5pbXBvcnQge2xvYWREYXRhfSBmcm9tICcuLi9zdG9yZS9teUFjdGlvbnMnO1xyXG5pbXBvcnQgeyBTY2lsbHNQYWdlIH0gZnJvbSAnLi4vY29tcG9uZW50cy9TY2lsbHNQYWdlL1NjaWxsc1BhZ2UnO1xyXG5cclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzPSh7bXlSZWR1Y2VyfSwgcHJvcHMpPT57XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHNjaWxsczogbXlSZWR1Y2VyLm15RGF0YS5tYWluU2NpbGxzLFxyXG4gICAgICAgIGlzT3BlbjogbXlSZWR1Y2VyLmlzT3BlblxyXG4gICAgfTtcclxufTtcclxuXHJcbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcz0oZGlzcGF0Y2gpPT57XHJcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3JzKHtsb2FkRGF0YX0sIGRpc3BhdGNoKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKFNjaWxsc1BhZ2UpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7U2VydGlmaWNhdGVJdGVtfSBmcm9tICcuL1NlcnRpZmljYXRlSXRlbSc7XHJcbmltcG9ydCAnLi9TZXJ0aWZpY2F0ZXNQYWdlLmNzcyc7XHJcblxyXG5leHBvcnQgY29uc3QgU2VydGlmaWNhdGVzUGFnZSA9ICh7c2VydGlmaWNhdGVzLCBpc09wZW59KSA9PiB7XHJcbiAgICBjb25zdCBpbmZvUGFnZUNsYXNzTmFtZSA9IFwiaW5mb1BhZ2VcIjtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2luZm9QYWdlQ2xhc3NOYW1lfT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbmZvUGFnZV9faGVhZGVyXCI+0KHQtdGA0YLQuNGE0LjQutCw0YLRizo8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZXJ0aWZpY2F0ZXMgc2Nyb2xsXCI+XHJcbiAgICAgICAgICAgICB7c2VydGlmaWNhdGVzLm1hcCgoaXRlbSwgaWR4KSA9PiA8U2VydGlmaWNhdGVJdGVtIHsuLi57c2VydGlmaWNhdGVJdGVtOiBpdGVtfX0gaWR4PXtpZHh9IGtleT17aWR4fSAvPil9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHtjb25uZWN0fSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcbmltcG9ydCB7YmluZEFjdGlvbkNyZWF0b3JzfSBmcm9tICdyZWR1eCc7XHJcbmltcG9ydCB7bG9hZERhdGF9IGZyb20gJy4uL3N0b3JlL215QWN0aW9ucyc7XHJcbmltcG9ydCB7IFNlcnRpZmljYXRlc1BhZ2UgfSBmcm9tICcuLi9jb21wb25lbnRzL1NlcnRpZmljYXRlc1BhZ2UvU2VydGlmaWNhdGVzUGFnZSc7XHJcblxyXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHM9KHtteVJlZHVjZXJ9LCBwcm9wcyk9PntcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgc2VydGlmaWNhdGVzOiBteVJlZHVjZXIubXlEYXRhLnNlcnRpZmljYXRlcyxcclxuICAgICAgICBpc09wZW46IG15UmVkdWNlci5pc09wZW5cclxuICAgIH07XHJcbn07XHJcblxyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHM9KGRpc3BhdGNoKT0+e1xyXG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyh7bG9hZERhdGF9LCBkaXNwYXRjaCk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShTZXJ0aWZpY2F0ZXNQYWdlKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge2Nvbm5lY3R9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuaW1wb3J0IHtiaW5kQWN0aW9uQ3JlYXRvcnN9IGZyb20gJ3JlZHV4JztcclxuaW1wb3J0IHtsb2FkRGF0YX0gZnJvbSAnLi4vc3RvcmUvbXlBY3Rpb25zJztcclxuaW1wb3J0IHsgU2VydGlmaWNhdGVQYWdlIH0gZnJvbSAnLi4vY29tcG9uZW50cy9TZXJ0aWZpY2F0ZXNQYWdlL1NlcnRpZmljYXRlUGFnZSc7XHJcblxyXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHM9KHtteVJlZHVjZXJ9LCBwcm9wcyk9PntcclxuICAgIC8vY29uc29sZS5sb2coJ1NlcnRpZmljYXRlUGFnZUNvbnRhaW5lciBwcm9wcz0nLCBwcm9wcyk7XHJcbiAgICBjb25zdCBpZD0gcHJvcHMubWF0Y2gucGFyYW1zLmlkO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBzZXJ0aWZpY2F0ZTogbXlSZWR1Y2VyLm15RGF0YS5zZXJ0aWZpY2F0ZXNbaWRdLFxyXG4gICAgICAgIGlzT3BlbjogbXlSZWR1Y2VyLmlzT3BlblxyXG4gICAgfTtcclxufTtcclxuXHJcbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcz0oZGlzcGF0Y2gpPT57XHJcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3JzKHtsb2FkRGF0YX0sIGRpc3BhdGNoKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKFNlcnRpZmljYXRlUGFnZSk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0ICcuL1NlcnRpZmljYXRlc1BhZ2UuY3NzJztcclxuXHJcbmltcG9ydCB7TmF2TGlua30gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcblxyXG5leHBvcnQgY29uc3QgU2VydGlmaWNhdGVQYWdlID0oe3NlcnRpZmljYXRlLCBpc09wZW59KSA9PiB7XHJcbiAgICAvL2NvbnNvbGUubG9nKCdTZXJ0aWZpY2F0ZXNQYWdlIHNlcnRpZmljYXRlPScsIHNlcnRpZmljYXRlKTtcclxuICAgIGNvbnN0IGluZm9QYWdlQ2xhc3NOYW1lID0gXCJpbmZvUGFnZVwiO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17aW5mb1BhZ2VDbGFzc05hbWV9PlxyXG4gICAgICAgICAgICA8TmF2TGluayB0bz0nL3NlcnRpZmljYXRlcycgY2xhc3NOYW1lPVwic2VydGlmaWNhdGVzX19saW5rXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlcnRpZmljYXRlc19fY2xvc2VcIj48aSBjbGFzc05hbWU9XCJmYSBmYS10aW1lc1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT48L2Rpdj5cclxuICAgICAgICAgICAgPC9OYXZMaW5rPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImluZm9QYWdlX19oZWFkZXJcIj57c2VydGlmaWNhdGUuZnVsbE5hbWV9PC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VydGlmaWNhdGVzX19pbWFnZSBzY3JvbGxcIj5cclxuICAgICAgICAgICAgICAgIDxhIGhyZWY9e3NlcnRpZmljYXRlLnNyY30gdGFyZ2V0PVwiX2JsYW5rXCI+PGltZyBzcmM9e3NlcnRpZmljYXRlLnNyY30gYWx0PVwiU2VydGlmaWNhdGVcIiBjbGFzc05hbWU9XCJzZXJ0aWZpY2F0ZXNfX2xhcmdlXCIgLz48L2E+XHJcblxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZXJ0aWZpY2F0ZXNfX2Rlc2NyaXB0aW9uXCI+XHJcbiAgICAgICAgICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgICAgICAgICAge3NlcnRpZmljYXRlLmRlc2NyaXB0aW9uLm1hcCgoaXRlbSwgaWR4KSA9PiAoPGxpIGtleT17aWR4fT57aXRlbX08L2xpPikpfVxyXG4gICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge2Nvbm5lY3R9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuaW1wb3J0IHtiaW5kQWN0aW9uQ3JlYXRvcnN9IGZyb20gJ3JlZHV4JztcclxuaW1wb3J0IHtsb2FkRGF0YX0gZnJvbSAnLi4vc3RvcmUvbXlBY3Rpb25zJztcclxuaW1wb3J0IHsgQ29udGFjdHNQYWdlIH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250YWN0c1BhZ2UvQ29udGFjdHNQYWdlJztcclxuXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcz0oe215UmVkdWNlcn0sIHByb3BzKT0+e1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBjb250YWN0czogbXlSZWR1Y2VyLm15RGF0YS5jb250YWN0cyxcclxuICAgICAgICBpc09wZW46IG15UmVkdWNlci5pc09wZW5cclxuICAgIH07XHJcbn07XHJcblxyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHM9KGRpc3BhdGNoKT0+e1xyXG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyh7bG9hZERhdGF9LCBkaXNwYXRjaCk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShDb250YWN0c1BhZ2UpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5pbXBvcnQgUGhvbmVBbmRyb2lkSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvUGhvbmVBbmRyb2lkJztcclxuaW1wb3J0IFRlbGVncmFtSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvVGVsZWdyYW0nO1xyXG5cclxuaW1wb3J0ICcuL0NvbnRhY3RzUGFnZS5jc3MnO1xyXG5cclxuZXhwb3J0IGNvbnN0IENvbnRhY3RzUGFnZSA9ICh7Y29udGFjdHMsIGlzT3Blbn0pID0+IHtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdRdWFsaWZpY2F0aW9uUGFnZScsIHF1YWxpZmljYXRpb24pO1xyXG4gICAgXHJcbiAgICBjb25zdCBpbmZvUGFnZUNsYXNzTmFtZSA9IFwiaW5mb1BhZ2VcIjtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2luZm9QYWdlQ2xhc3NOYW1lfT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbmZvUGFnZV9faGVhZGVyXCI+0JrQvtC90YLQsNC60YLRizo8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzY3JvbGwteVwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWN0c19faXRlbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPVwiY29udGFjdHNfaWNvblwiIHNyYz1cIi4vc3JjL2ltZy9waG9uZS53ZWJwXCIgYWx0PVwicGhvbmVcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPVwiY29udGFjdHNfaWNvblwiIHNyYz1cIi4vc3JjL2ltZy92aWJlci53ZWJwXCIgYWx0PVwidmliZXJcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPVwiY29udGFjdHNfaWNvblwiIHNyYz1cIi4vc3JjL2ltZy9XaGF0c2FwcC53ZWJwXCIgYWx0PVwid2F0dHNhcHBcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPVwiY29udGFjdHNfaWNvblwiIHNyYz1cIi4vc3JjL2ltZy90ZWxlZ3JhbS53ZWJwXCIgYWx0PVwidGVsZWdyYW1cIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIHtjb250YWN0cy5waG9uZX1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWN0c19faXRlbVwiPjxpbWcgY2xhc3NOYW1lPVwiY29udGFjdHNfaWNvblwiIHNyYz1cIi4vc3JjL2ltZy9lbWFpbC53ZWJwXCIgYWx0PVwiZW1haWxcIiAvPntjb250YWN0cy5lbWFpbH08L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFjdHNfX2l0ZW1cIj48aW1nIGNsYXNzTmFtZT1cImNvbnRhY3RzX2ljb25cIiBzcmM9XCIuL3NyYy9pbWcvc2t5cGUud2VicFwiIGFsdD1cInNreXBlXCIgLz57Y29udGFjdHMuc2t5cGV9PC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHtOYXZMaW5rfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcclxuXHJcbmV4cG9ydCBjb25zdCBQb3J0Zm9saW9JdGVtID0gKHtwb3J0Zm9saW9JdGVtLCBpZHh9KSA9PiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9ydGZvbGlvX19pdGVtXCI+XHJcbiAgICAgICAgICAgICAgICA8YSBocmVmPXtwb3J0Zm9saW9JdGVtLmRlbW9saW5rfSB0YXJnZXQ9XCJfYmxhbmtcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvcnRmb2xpb19faW1nXCI+PGltZyBzcmM9e3BvcnRmb2xpb0l0ZW0uc3JjfSBhbHQ9XCJwb3J0Zm9saW8td29ya1wiIGNsYXNzTmFtZT1cInBvcnRmb2xpb19faW1nLS1zaXplXCIgLz48L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICAgIDxkaXYgPntwb3J0Zm9saW9JdGVtLnNjaG9vbH08L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9ydGZvbGlvX19pdGVtLS1kYXRlXCI+e3BvcnRmb2xpb0l0ZW0uY291cnNlfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3J0Zm9saW9fX2l0ZW0tLW5hbWVcIj57cG9ydGZvbGlvSXRlbS53b3JrTmFtZX08L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9ydGZvbGlvX19pdGVtLS1saW5rXCI+PGEgaHJlZj17cG9ydGZvbGlvSXRlbS5kZW1vbGlua30gdGFyZ2V0PVwiX2JsYW5rXCI+0JTQtdC80L7QvdGB0YLRgNCw0YbQuNGPPC9hPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3J0Zm9saW9fX2l0ZW0tLWxpbmtcIj48YSBocmVmPXtwb3J0Zm9saW9JdGVtLmNvZGVsaW5rfSB0YXJnZXQ9XCJfYmxhbmtcIj7QmNGB0YXQvtC00L3Ri9C5INC60L7QtDwvYT48L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9ydGZvbGlvX19pdGVtLS1jb21tZW50XCI+e3BvcnRmb2xpb0l0ZW0uY29tbWVudH08L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIClcclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7UG9ydGZvbGlvSXRlbX0gZnJvbSAnLi9Qb3J0Zm9saW9JdGVtJztcclxuaW1wb3J0ICcuL1BvcnRmb2xpb1BhZ2UuY3NzJztcclxuXHJcbmV4cG9ydCBjb25zdCBQb3J0Zm9saW9QYWdlID0gKHtwb3J0Zm9saW9fZ2Vla2JyYWlucywgaXNPcGVufSkgPT4ge1xyXG4gICAgY29uc3QgaW5mb1BhZ2VDbGFzc05hbWUgPSBcImluZm9QYWdlXCI7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtpbmZvUGFnZUNsYXNzTmFtZX0+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5mb1BhZ2VfX2hlYWRlclwiPtCf0L7RgNGC0YTQvtC70LjQvjo8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3J0Zm9saW8gc2Nyb2xsXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvcnRmb2xpb19faGVhZGVyXCI+0KPRh9C10LHQvdGL0LUg0YDQsNCx0L7RgtGLOjwvZGl2PlxyXG4gICAgICAgICAgICAge3BvcnRmb2xpb19nZWVrYnJhaW5zLm1hcCgoaXRlbSwgaWR4KSA9PiA8UG9ydGZvbGlvSXRlbSB7Li4ue3BvcnRmb2xpb0l0ZW06IGl0ZW19fSBpZHg9e2lkeH0ga2V5PXtpZHh9IC8+KX1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge2Nvbm5lY3R9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuaW1wb3J0IHtiaW5kQWN0aW9uQ3JlYXRvcnN9IGZyb20gJ3JlZHV4JztcclxuaW1wb3J0IHtsb2FkRGF0YX0gZnJvbSAnLi4vc3RvcmUvbXlBY3Rpb25zJztcclxuaW1wb3J0IHsgUG9ydGZvbGlvUGFnZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvUG9ydGZvbGlvUGFnZS9Qb3J0Zm9saW9QYWdlJztcclxuXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcz0oe215UmVkdWNlcn0sIHByb3BzKT0+e1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBwb3J0Zm9saW9fZ2Vla2JyYWluczogbXlSZWR1Y2VyLm15RGF0YS5wb3J0Zm9saW9fZ2Vla2JyYWlucyxcclxuICAgICAgICBpc09wZW46IG15UmVkdWNlci5pc09wZW5cclxuICAgIH07XHJcbn07XHJcblxyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHM9KGRpc3BhdGNoKT0+e1xyXG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyh7bG9hZERhdGF9LCBkaXNwYXRjaCk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShQb3J0Zm9saW9QYWdlKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUmVhY3REb20gZnJvbSAncmVhY3QtZG9tJztcclxuaW1wb3J0IHtSb3V0ZXIsIFN3aXRjaCwgUm91dGUsIEhhc2hSb3V0ZXJ9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xyXG5pbXBvcnQge2xvYWREYXRhLCBzZXRJc09wZW4sIHNldE5hdklzSGlkZGVufSBmcm9tICcuL3N0b3JlL215QWN0aW9ucyc7XHJcbmltcG9ydCB7Y3JlYXRlQnJvd3Nlckhpc3Rvcnl9IGZyb20gJ2hpc3RvcnknO1xyXG5cclxuaW1wb3J0IHtwdXNofSBmcm9tICdjb25uZWN0ZWQtcmVhY3Qtcm91dGVyJztcclxuXHJcbmltcG9ydCB7UHJvdmlkZXJ9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuaW1wb3J0IHtpbml0U3RvcmV9IGZyb20gJy4vc3RvcmUvc3RvcmUnO1xyXG5cclxuaW1wb3J0IFJlc2l6YWJsZVBhbmVscyBmcm9tICcuL2NvbXBvbmVudHMvUmVzaXphYmxlUGFuZWwvUmVzaXphYmxlUGFuZWwnO1xyXG5cclxuLy9pbXBvcnQgTGVmdE5hdkJhciBmcm9tICcuL2NvbXBvbmVudHMvTGVmdE5hdkJhci9MZWZ0TmF2QmFyJztcclxuaW1wb3J0IExlZnROYXZCYXJDb250YWluZXIgZnJvbSAnLi9jb250YWluZXJzL0xlZnROYXZCYXJDb250YWluZXInO1xyXG5pbXBvcnQgUmlnaHRUaXRsZUNvbnRhaW5lciBmcm9tICcuL2NvbnRhaW5lcnMvUmlnaHRUaXRsZUNvbnRhaW5lcic7XHJcbmltcG9ydCBTdGFydFBhZ2VDb250YWluZXIgZnJvbSAnLi9jb250YWluZXJzL1N0YXJ0UGFnZUNvbnRhaW5lcic7XHJcbmltcG9ydCBBYm91dE1lQ29udGFpbmVyIGZyb20gJy4vY29udGFpbmVycy9BYm91dE1lQ29udGFpbmVyJztcclxuaW1wb3J0IEVkdWNhdGlvblBhZ2VDb250YWluZXIgZnJvbSAnLi9jb250YWluZXJzL0VkdWNhdGlvblBhZ2VDb250YWluZXInO1xyXG5pbXBvcnQgTWFpbkVkdWNhdGlvblBhZ2VDb250YWluZXIgZnJvbSAnLi9jb250YWluZXJzL01haW5FZHVjYXRpb25QYWdlQ29udGFpbmVyJztcclxuaW1wb3J0IEFkZGl0aW9uYWxFZHVjYXRpb25QYWdlQ29udGFpbmVyIGZyb20gJy4vY29udGFpbmVycy9BZGRpdGlvbmFsRWR1Y2F0aW9uUGFnZUNvbnRhaW5lcic7XHJcbmltcG9ydCBRdWFsaWZpY2F0aW9uUGFnZUNvbnRhaW5lciBmcm9tICcuL2NvbnRhaW5lcnMvUXVhbGlmaWNhdGlvblBhZ2VDb250YWluZXInO1xyXG5pbXBvcnQgU2NpbGxzUGFnZUNvbnRhaW5lciBmcm9tICcuL2NvbnRhaW5lcnMvU2NpbGxzUGFnZUNvbnRhaW5lcic7XHJcbmltcG9ydCBTZXJ0aWZpY2F0ZXNQYWdlQ29udGFpbmVyIGZyb20gJy4vY29udGFpbmVycy9TZXJ0aWZpY2F0ZXNQYWdlQ29udGFpbmVyJztcclxuaW1wb3J0IFNlcnRpZmljYXRlUGFnZUNvbnRhaW5lciBmcm9tICcuL2NvbnRhaW5lcnMvU2VydGlmaWNhdGVQYWdlQ29udGFpbmVyJztcclxuaW1wb3J0IENvbnRhY3RzUGFnZUNvbnRhaW5lciBmcm9tICcuL2NvbnRhaW5lcnMvQ29udGFjdHNQYWdlQ29udGFpbmVyJztcclxuaW1wb3J0IFBvcnRmb2xpb1BhZ2VDb250YWluZXIgZnJvbSAnLi9jb250YWluZXJzL1BvcnRmb2xpb1BhZ2VDb250YWluZXInO1xyXG5cclxuY29uc3Qgc3RvcmUgPSBpbml0U3RvcmUoKTtcclxuY29uc3QgaGlzdG9yeSA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KCk7XHJcbnN0b3JlLmRpc3BhdGNoKGxvYWREYXRhKCkpO1xyXG5jb25zdCBNYWluT25DbGlja0hhbmRsZXIgPSgpID0+IHtcclxuICAgIHN0b3JlLmRpc3BhdGNoKHNldElzT3BlbihmYWxzZSkpO1xyXG59XHJcbmNvbnN0IGdvVG9wQ2xpY2tIYW5kbGVyID0gKCkgPT4ge1xyXG4gICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xyXG59XHJcblxyXG4vL01BSU5cclxuY2xhc3MgTWFpbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcyl7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgICAgIHRoaXMud2luZG93UG9zID0gMDtcclxuICAgICAgICB0aGlzLnNjcm9sbGVkRG93bj0gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgLy8gY29tcG9uZW50RGlkTW91bnQoKXtcclxuICAgIC8vICAgICAvL2NvbnNvbGUubG9nKCdNYWluIGRpZCBtb3VudCcsIHN0b3JlLmRpc3BhdGNoKGxvYWREYXRhKCkpKTtcclxuICAgIC8vICAgICBoaXN0b3J5LnB1c2goJy9SZXN1bWUnKTtcclxuICAgIC8vIH07XHJcbiAgICBzY3JvbGxIYW5kbGVyKGUpe1xyXG4gICAgICAgIC8vY29uc29sZS5sb2coJ2luZGV4LmpzIHNjcm9sbEhhbmRsZXInLCB0aGlzLnNjcm9sbGVkRG93biwgd2luZG93LnBhZ2VZT2Zmc2V0KTtcclxuICAgICAgICBsZXQgdG1wU2Nyb2xsZWREb3duID0gdGhpcy5zY3JvbGxlZERvd247XHJcbiAgICAgICAgaWYgKHdpbmRvdy5wYWdlWU9mZnNldCA+IHRoaXMud2luZG93UG9zKXtcclxuICAgICAgICAgICAgdG1wU2Nyb2xsZWREb3duID0gdHJ1ZTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgdG1wU2Nyb2xsZWREb3duID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMud2luZG93UG9zID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xyXG4gICAgICAgIGlmICh0bXBTY3JvbGxlZERvd24gIT0gdGhpcy5zY3JvbGxlZERvd24pe1xyXG4gICAgICAgICAgICB0aGlzLnNjcm9sbGVkRG93biA9IHRtcFNjcm9sbGVkRG93bjtcclxuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goc2V0TmF2SXNIaWRkZW4odGhpcy5zY3JvbGxlZERvd24pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICB9O1xyXG4gICAgY29tcG9uZW50RGlkTW91bnQgKCkge1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLnNjcm9sbEhhbmRsZXIpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgcmVuZGVyKCl7XHJcbiAgICAgICAgcmV0dXJuIDxkaXY+XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1haW5cIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ29Ub3BcIiBvbkNsaWNrPXtnb1RvcENsaWNrSGFuZGxlcn0+PGkgY2xhc3NOYW1lPVwiZmEgZmEtaGFuZC1wb2ludGVyLW9cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8UmlnaHRUaXRsZUNvbnRhaW5lciBuYW1lPVwidG9wXCIgLz5cclxuICAgICAgICAgICAgICAgIHshdGhpcy5zY3JvbGxlZERvd24gJiYgPExlZnROYXZCYXJDb250YWluZXIgaXNTY3JvbGxlZERvd24gPSB7dGhpcy5zY3JvbGxlZERvd259Lz59XHJcbiAgICAgICAgICAgICAgICA8U3dpdGNoPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL1wiIGNvbXBvbmVudD17U3RhcnRQYWdlQ29udGFpbmVyfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL2Fib3V0TWVcIiBjb21wb25lbnQ9e0Fib3V0TWVDb250YWluZXJ9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvZWR1Y2F0aW9uXCIgY29tcG9uZW50PXtFZHVjYXRpb25QYWdlQ29udGFpbmVyfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2VkdWNhdGlvbi9tYWluXCIgY29tcG9uZW50PXtNYWluRWR1Y2F0aW9uUGFnZUNvbnRhaW5lcn0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9lZHVjYXRpb24vYWRkaXRpb25hbFwiIGNvbXBvbmVudD17QWRkaXRpb25hbEVkdWNhdGlvblBhZ2VDb250YWluZXJ9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvcXVhbGlmaWNhdGlvblwiIGNvbXBvbmVudD17UXVhbGlmaWNhdGlvblBhZ2VDb250YWluZXJ9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvc2NpbGxzXCIgY29tcG9uZW50PXtTY2lsbHNQYWdlQ29udGFpbmVyfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3BvcnRmb2xpb1wiIGNvbXBvbmVudD17UG9ydGZvbGlvUGFnZUNvbnRhaW5lcn0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD1cIi9zZXJ0aWZpY2F0ZXNcIiBjb21wb25lbnQ9e1NlcnRpZmljYXRlc1BhZ2VDb250YWluZXJ9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvc2VydGlmaWNhdGVzLzppZFwiIGNvbXBvbmVudD17U2VydGlmaWNhdGVQYWdlQ29udGFpbmVyfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2NvbnRhY3RzXCIgY29tcG9uZW50PXtDb250YWN0c1BhZ2VDb250YWluZXJ9IC8+XHJcbiAgICAgICAgICAgICAgICA8L1N3aXRjaD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICB9O1xyXG59XHJcblxyXG5SZWFjdERvbS5yZW5kZXIoXHJcbiAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cclxuICAgICAgICA8SGFzaFJvdXRlcj5cclxuICAgICAgICAgICA8TWFpbiAvPlxyXG4gICAgICAgIDwvSGFzaFJvdXRlcj5cclxuICAgIDwvUHJvdmlkZXI+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpKTtcclxuXHJcbiAgICAvLyA8UmVzaXphYmxlUGFuZWxzPjwvUmVzaXphYmxlUGFuZWxzPiIsImltcG9ydCBvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCIuL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0gb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcbiAgdmFyIGtleSwgaTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJmdW5jdGlvbiB0b1ZhbChtaXgpIHtcblx0dmFyIGssIHksIHN0cj0nJztcblxuXHRpZiAodHlwZW9mIG1peCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG1peCA9PT0gJ251bWJlcicpIHtcblx0XHRzdHIgKz0gbWl4O1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBtaXggPT09ICdvYmplY3QnKSB7XG5cdFx0aWYgKEFycmF5LmlzQXJyYXkobWl4KSkge1xuXHRcdFx0Zm9yIChrPTA7IGsgPCBtaXgubGVuZ3RoOyBrKyspIHtcblx0XHRcdFx0aWYgKG1peFtrXSkge1xuXHRcdFx0XHRcdGlmICh5ID0gdG9WYWwobWl4W2tdKSkge1xuXHRcdFx0XHRcdFx0c3RyICYmIChzdHIgKz0gJyAnKTtcblx0XHRcdFx0XHRcdHN0ciArPSB5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKGsgaW4gbWl4KSB7XG5cdFx0XHRcdGlmIChtaXhba10pIHtcblx0XHRcdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0XHRcdHN0ciArPSBrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHN0cjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xuXHR2YXIgaT0wLCB0bXAsIHgsIHN0cj0nJztcblx0d2hpbGUgKGkgPCBhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0aWYgKHRtcCA9IGFyZ3VtZW50c1tpKytdKSB7XG5cdFx0XHRpZiAoeCA9IHRvVmFsKHRtcCkpIHtcblx0XHRcdFx0c3RyICYmIChzdHIgKz0gJyAnKTtcblx0XHRcdFx0c3RyICs9IHhcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIHN0cjtcbn1cbiIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZXhwb3J0IHZhciBpc0Jyb3dzZXIgPSAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHdpbmRvdykpID09PSBcIm9iamVjdFwiICYmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihkb2N1bWVudCkpID09PSAnb2JqZWN0JyAmJiBkb2N1bWVudC5ub2RlVHlwZSA9PT0gOTtcblxuZXhwb3J0IGRlZmF1bHQgaXNCcm93c2VyO1xuIiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IGlzSW5Ccm93c2VyIGZyb20gJ2lzLWluLWJyb3dzZXInO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MnO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcblxudmFyIHBsYWluT2JqZWN0Q29uc3RydXJjdG9yID0ge30uY29uc3RydWN0b3I7XG5mdW5jdGlvbiBjbG9uZVN0eWxlKHN0eWxlKSB7XG4gIGlmIChzdHlsZSA9PSBudWxsIHx8IHR5cGVvZiBzdHlsZSAhPT0gJ29iamVjdCcpIHJldHVybiBzdHlsZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoc3R5bGUpKSByZXR1cm4gc3R5bGUubWFwKGNsb25lU3R5bGUpO1xuICBpZiAoc3R5bGUuY29uc3RydWN0b3IgIT09IHBsYWluT2JqZWN0Q29uc3RydXJjdG9yKSByZXR1cm4gc3R5bGU7XG4gIHZhciBuZXdTdHlsZSA9IHt9O1xuXG4gIGZvciAodmFyIG5hbWUgaW4gc3R5bGUpIHtcbiAgICBuZXdTdHlsZVtuYW1lXSA9IGNsb25lU3R5bGUoc3R5bGVbbmFtZV0pO1xuICB9XG5cbiAgcmV0dXJuIG5ld1N0eWxlO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIHJ1bGUgaW5zdGFuY2UuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlUnVsZShuYW1lLCBkZWNsLCBvcHRpb25zKSB7XG4gIGlmIChuYW1lID09PSB2b2lkIDApIHtcbiAgICBuYW1lID0gJ3VubmFtZWQnO1xuICB9XG5cbiAgdmFyIGpzcyA9IG9wdGlvbnMuanNzO1xuICB2YXIgZGVjbENvcHkgPSBjbG9uZVN0eWxlKGRlY2wpO1xuICB2YXIgcnVsZSA9IGpzcy5wbHVnaW5zLm9uQ3JlYXRlUnVsZShuYW1lLCBkZWNsQ29weSwgb3B0aW9ucyk7XG4gIGlmIChydWxlKSByZXR1cm4gcnVsZTsgLy8gSXQgaXMgYW4gYXQtcnVsZSBhbmQgaXQgaGFzIG5vIGluc3RhbmNlLlxuXG4gIGlmIChuYW1lWzBdID09PSAnQCcpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIFVua25vd24gcnVsZSBcIiArIG5hbWUpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbnZhciBqb2luID0gZnVuY3Rpb24gam9pbih2YWx1ZSwgYnkpIHtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAvLyBSZW1vdmUgIWltcG9ydGFudCBmcm9tIHRoZSB2YWx1ZSwgaXQgd2lsbCBiZSByZWFkZGVkIGxhdGVyLlxuICAgIGlmICh2YWx1ZVtpXSA9PT0gJyFpbXBvcnRhbnQnKSBicmVhaztcbiAgICBpZiAocmVzdWx0KSByZXN1bHQgKz0gYnk7XG4gICAgcmVzdWx0ICs9IHZhbHVlW2ldO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4vKipcbiAqIENvbnZlcnRzIGFycmF5IHZhbHVlcyB0byBzdHJpbmcuXG4gKlxuICogYG1hcmdpbjogW1snNXB4JywgJzEwcHgnXV1gID4gYG1hcmdpbjogNXB4IDEwcHg7YFxuICogYGJvcmRlcjogWycxcHgnLCAnMnB4J11gID4gYGJvcmRlcjogMXB4LCAycHg7YFxuICogYG1hcmdpbjogW1snNXB4JywgJzEwcHgnXSwgJyFpbXBvcnRhbnQnXWAgPiBgbWFyZ2luOiA1cHggMTBweCAhaW1wb3J0YW50O2BcbiAqIGBjb2xvcjogWydyZWQnLCAhaW1wb3J0YW50XWAgPiBgY29sb3I6IHJlZCAhaW1wb3J0YW50O2BcbiAqL1xuXG5cbmZ1bmN0aW9uIHRvQ3NzVmFsdWUodmFsdWUsIGlnbm9yZUltcG9ydGFudCkge1xuICBpZiAoaWdub3JlSW1wb3J0YW50ID09PSB2b2lkIDApIHtcbiAgICBpZ25vcmVJbXBvcnRhbnQgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgdmFyIGNzc1ZhbHVlID0gJyc7IC8vIFN1cHBvcnQgc3BhY2Ugc2VwYXJhdGVkIHZhbHVlcyB2aWEgYFtbJzVweCcsICcxMHB4J11dYC5cblxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZVswXSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodmFsdWVbaV0gPT09ICchaW1wb3J0YW50JykgYnJlYWs7XG4gICAgICBpZiAoY3NzVmFsdWUpIGNzc1ZhbHVlICs9ICcsICc7XG4gICAgICBjc3NWYWx1ZSArPSBqb2luKHZhbHVlW2ldLCAnICcpO1xuICAgIH1cbiAgfSBlbHNlIGNzc1ZhbHVlID0gam9pbih2YWx1ZSwgJywgJyk7IC8vIEFkZCAhaW1wb3J0YW50LCBiZWNhdXNlIGl0IHdhcyBpZ25vcmVkLlxuXG5cbiAgaWYgKCFpZ25vcmVJbXBvcnRhbnQgJiYgdmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0gPT09ICchaW1wb3J0YW50Jykge1xuICAgIGNzc1ZhbHVlICs9ICcgIWltcG9ydGFudCc7XG4gIH1cblxuICByZXR1cm4gY3NzVmFsdWU7XG59XG5cbi8qKlxuICogSW5kZW50IGEgc3RyaW5nLlxuICogaHR0cDovL2pzcGVyZi5jb20vYXJyYXktam9pbi12cy1mb3JcbiAqL1xuZnVuY3Rpb24gaW5kZW50U3RyKHN0ciwgaW5kZW50KSB7XG4gIHZhciByZXN1bHQgPSAnJztcblxuICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgaW5kZW50OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ICs9ICcgICc7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0ICsgc3RyO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIFJ1bGUgdG8gQ1NTIHN0cmluZy5cbiAqL1xuXG5cbmZ1bmN0aW9uIHRvQ3NzKHNlbGVjdG9yLCBzdHlsZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAoIXN0eWxlKSByZXR1cm4gcmVzdWx0O1xuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkaW5kZW50ID0gX29wdGlvbnMuaW5kZW50LFxuICAgICAgaW5kZW50ID0gX29wdGlvbnMkaW5kZW50ID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkaW5kZW50O1xuICB2YXIgZmFsbGJhY2tzID0gc3R5bGUuZmFsbGJhY2tzO1xuICBpZiAoc2VsZWN0b3IpIGluZGVudCsrOyAvLyBBcHBseSBmYWxsYmFja3MgZmlyc3QuXG5cbiAgaWYgKGZhbGxiYWNrcykge1xuICAgIC8vIEFycmF5IHN5bnRheCB7ZmFsbGJhY2tzOiBbe3Byb3A6IHZhbHVlfV19XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZmFsbGJhY2tzKSkge1xuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGZhbGxiYWNrcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgdmFyIGZhbGxiYWNrID0gZmFsbGJhY2tzW2luZGV4XTtcblxuICAgICAgICBmb3IgKHZhciBwcm9wIGluIGZhbGxiYWNrKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gZmFsbGJhY2tbcHJvcF07XG5cbiAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9ICdcXG4nO1xuICAgICAgICAgICAgcmVzdWx0ICs9IFwiXCIgKyBpbmRlbnRTdHIocHJvcCArIFwiOiBcIiArIHRvQ3NzVmFsdWUodmFsdWUpICsgXCI7XCIsIGluZGVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9iamVjdCBzeW50YXgge2ZhbGxiYWNrczoge3Byb3A6IHZhbHVlfX1cbiAgICAgIGZvciAodmFyIF9wcm9wIGluIGZhbGxiYWNrcykge1xuICAgICAgICB2YXIgX3ZhbHVlID0gZmFsbGJhY2tzW19wcm9wXTtcblxuICAgICAgICBpZiAoX3ZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICBpZiAocmVzdWx0KSByZXN1bHQgKz0gJ1xcbic7XG4gICAgICAgICAgcmVzdWx0ICs9IFwiXCIgKyBpbmRlbnRTdHIoX3Byb3AgKyBcIjogXCIgKyB0b0Nzc1ZhbHVlKF92YWx1ZSkgKyBcIjtcIiwgaW5kZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIF9wcm9wMiBpbiBzdHlsZSkge1xuICAgIHZhciBfdmFsdWUyID0gc3R5bGVbX3Byb3AyXTtcblxuICAgIGlmIChfdmFsdWUyICE9IG51bGwgJiYgX3Byb3AyICE9PSAnZmFsbGJhY2tzJykge1xuICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9ICdcXG4nO1xuICAgICAgcmVzdWx0ICs9IFwiXCIgKyBpbmRlbnRTdHIoX3Byb3AyICsgXCI6IFwiICsgdG9Dc3NWYWx1ZShfdmFsdWUyKSArIFwiO1wiLCBpbmRlbnQpO1xuICAgIH1cbiAgfSAvLyBBbGxvdyBlbXB0eSBzdHlsZSBpbiB0aGlzIGNhc2UsIGJlY2F1c2UgcHJvcGVydGllcyB3aWxsIGJlIGFkZGVkIGR5bmFtaWNhbGx5LlxuXG5cbiAgaWYgKCFyZXN1bHQgJiYgIW9wdGlvbnMuYWxsb3dFbXB0eSkgcmV0dXJuIHJlc3VsdDsgLy8gV2hlbiBydWxlIGlzIGJlaW5nIHN0cmluZ2lmaWVkIGJlZm9yZSBzZWxlY3RvciB3YXMgZGVmaW5lZC5cblxuICBpZiAoIXNlbGVjdG9yKSByZXR1cm4gcmVzdWx0O1xuICBpbmRlbnQtLTtcbiAgaWYgKHJlc3VsdCkgcmVzdWx0ID0gXCJcXG5cIiArIHJlc3VsdCArIFwiXFxuXCI7XG4gIHJldHVybiBpbmRlbnRTdHIoc2VsZWN0b3IgKyBcIiB7XCIgKyByZXN1bHQsIGluZGVudCkgKyBpbmRlbnRTdHIoJ30nLCBpbmRlbnQpO1xufVxuXG52YXIgZXNjYXBlUmVnZXggPSAvKFtbXFxdLiMqJD48K349fF46KCksXCInYFxcc10pL2c7XG52YXIgbmF0aXZlRXNjYXBlID0gdHlwZW9mIENTUyAhPT0gJ3VuZGVmaW5lZCcgJiYgQ1NTLmVzY2FwZTtcbnZhciBlc2NhcGUgPSAoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gbmF0aXZlRXNjYXBlID8gbmF0aXZlRXNjYXBlKHN0cikgOiBzdHIucmVwbGFjZShlc2NhcGVSZWdleCwgJ1xcXFwkMScpO1xufSk7XG5cbnZhciBCYXNlU3R5bGVSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQmFzZVN0eWxlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ3N0eWxlJztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5zdHlsZSA9IHZvaWQgMDtcbiAgICB0aGlzLnJlbmRlcmVyID0gdm9pZCAwO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdmFyIHNoZWV0ID0gb3B0aW9ucy5zaGVldCxcbiAgICAgICAgUmVuZGVyZXIgPSBvcHRpb25zLlJlbmRlcmVyO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlO1xuICAgIGlmIChzaGVldCkgdGhpcy5yZW5kZXJlciA9IHNoZWV0LnJlbmRlcmVyO2Vsc2UgaWYgKFJlbmRlcmVyKSB0aGlzLnJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBvciBzZXQgYSBzdHlsZSBwcm9wZXJ0eS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gQmFzZVN0eWxlUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnByb3AgPSBmdW5jdGlvbiBwcm9wKG5hbWUsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgLy8gSXQncyBhIGdldHRlci5cbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRoaXMuc3R5bGVbbmFtZV07IC8vIERvbid0IGRvIGFueXRoaW5nIGlmIHRoZSB2YWx1ZSBoYXMgbm90IGNoYW5nZWQuXG5cbiAgICB2YXIgZm9yY2UgPSBvcHRpb25zID8gb3B0aW9ucy5mb3JjZSA6IGZhbHNlO1xuICAgIGlmICghZm9yY2UgJiYgdGhpcy5zdHlsZVtuYW1lXSA9PT0gdmFsdWUpIHJldHVybiB0aGlzO1xuICAgIHZhciBuZXdWYWx1ZSA9IHZhbHVlO1xuXG4gICAgaWYgKCFvcHRpb25zIHx8IG9wdGlvbnMucHJvY2VzcyAhPT0gZmFsc2UpIHtcbiAgICAgIG5ld1ZhbHVlID0gdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uQ2hhbmdlVmFsdWUodmFsdWUsIG5hbWUsIHRoaXMpO1xuICAgIH1cblxuICAgIHZhciBpc0VtcHR5ID0gbmV3VmFsdWUgPT0gbnVsbCB8fCBuZXdWYWx1ZSA9PT0gZmFsc2U7XG4gICAgdmFyIGlzRGVmaW5lZCA9IG5hbWUgaW4gdGhpcy5zdHlsZTsgLy8gVmFsdWUgaXMgZW1wdHkgYW5kIHdhc24ndCBkZWZpbmVkIGJlZm9yZS5cblxuICAgIGlmIChpc0VtcHR5ICYmICFpc0RlZmluZWQgJiYgIWZvcmNlKSByZXR1cm4gdGhpczsgLy8gV2UgYXJlIGdvaW5nIHRvIHJlbW92ZSB0aGlzIHZhbHVlLlxuXG4gICAgdmFyIHJlbW92ZSA9IGlzRW1wdHkgJiYgaXNEZWZpbmVkO1xuICAgIGlmIChyZW1vdmUpIGRlbGV0ZSB0aGlzLnN0eWxlW25hbWVdO2Vsc2UgdGhpcy5zdHlsZVtuYW1lXSA9IG5ld1ZhbHVlOyAvLyBSZW5kZXJhYmxlIGlzIGRlZmluZWQgaWYgU3R5bGVTaGVldCBvcHRpb24gYGxpbmtgIGlzIHRydWUuXG5cbiAgICBpZiAodGhpcy5yZW5kZXJhYmxlICYmIHRoaXMucmVuZGVyZXIpIHtcbiAgICAgIGlmIChyZW1vdmUpIHRoaXMucmVuZGVyZXIucmVtb3ZlUHJvcGVydHkodGhpcy5yZW5kZXJhYmxlLCBuYW1lKTtlbHNlIHRoaXMucmVuZGVyZXIuc2V0UHJvcGVydHkodGhpcy5yZW5kZXJhYmxlLCBuYW1lLCBuZXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG5cbiAgICBpZiAoc2hlZXQgJiYgc2hlZXQuYXR0YWNoZWQpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdbSlNTXSBSdWxlIGlzIG5vdCBsaW5rZWQuIE1pc3Npbmcgc2hlZXQgb3B0aW9uIFwibGluazogdHJ1ZVwiLicpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHJldHVybiBCYXNlU3R5bGVSdWxlO1xufSgpO1xudmFyIFN0eWxlUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0Jhc2VTdHlsZVJ1bGUpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3R5bGVSdWxlLCBfQmFzZVN0eWxlUnVsZSk7XG5cbiAgZnVuY3Rpb24gU3R5bGVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9CYXNlU3R5bGVSdWxlLmNhbGwodGhpcywga2V5LCBzdHlsZSwgb3B0aW9ucykgfHwgdGhpcztcbiAgICBfdGhpcy5zZWxlY3RvclRleHQgPSB2b2lkIDA7XG4gICAgX3RoaXMuaWQgPSB2b2lkIDA7XG4gICAgX3RoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB2YXIgc2VsZWN0b3IgPSBvcHRpb25zLnNlbGVjdG9yLFxuICAgICAgICBzY29wZWQgPSBvcHRpb25zLnNjb3BlZCxcbiAgICAgICAgc2hlZXQgPSBvcHRpb25zLnNoZWV0LFxuICAgICAgICBnZW5lcmF0ZUlkID0gb3B0aW9ucy5nZW5lcmF0ZUlkO1xuXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBfdGhpcy5zZWxlY3RvclRleHQgPSBzZWxlY3RvcjtcbiAgICB9IGVsc2UgaWYgKHNjb3BlZCAhPT0gZmFsc2UpIHtcbiAgICAgIF90aGlzLmlkID0gZ2VuZXJhdGVJZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgc2hlZXQpO1xuICAgICAgX3RoaXMuc2VsZWN0b3JUZXh0ID0gXCIuXCIgKyBlc2NhcGUoX3RoaXMuaWQpO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogU2V0IHNlbGVjdG9yIHN0cmluZy5cbiAgICogQXR0ZW50aW9uOiB1c2UgdGhpcyB3aXRoIGNhdXRpb24uIE1vc3QgYnJvd3NlcnMgZGlkbid0IGltcGxlbWVudFxuICAgKiBzZWxlY3RvclRleHQgc2V0dGVyLCBzbyB0aGlzIG1heSByZXN1bHQgaW4gcmVyZW5kZXJpbmcgb2YgZW50aXJlIFN0eWxlIFNoZWV0LlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8yID0gU3R5bGVSdWxlLnByb3RvdHlwZTtcblxuICAvKipcbiAgICogQXBwbHkgcnVsZSB0byBhbiBlbGVtZW50IGlubGluZS5cbiAgICovXG4gIF9wcm90bzIuYXBwbHlUbyA9IGZ1bmN0aW9uIGFwcGx5VG8ocmVuZGVyYWJsZSkge1xuICAgIHZhciByZW5kZXJlciA9IHRoaXMucmVuZGVyZXI7XG5cbiAgICBpZiAocmVuZGVyZXIpIHtcbiAgICAgIHZhciBqc29uID0gdGhpcy50b0pTT04oKTtcblxuICAgICAgZm9yICh2YXIgcHJvcCBpbiBqc29uKSB7XG4gICAgICAgIHJlbmRlcmVyLnNldFByb3BlcnR5KHJlbmRlcmFibGUsIHByb3AsIGpzb25bcHJvcF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlIHJ1bGUuXG4gICAqIEZhbGxiYWNrcyBhcmUgbm90IHN1cHBvcnRlZC5cbiAgICogVXNlZnVsIGZvciBpbmxpbmUgc3R5bGVzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90bzIudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHZhciBqc29uID0ge307XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIHRoaXMuc3R5bGUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuc3R5bGVbcHJvcF07XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JykganNvbltwcm9wXSA9IHZhbHVlO2Vsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSBqc29uW3Byb3BdID0gdG9Dc3NWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGpzb247XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvMi50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG4gICAgdmFyIGxpbmsgPSBzaGVldCA/IHNoZWV0Lm9wdGlvbnMubGluayA6IGZhbHNlO1xuICAgIHZhciBvcHRzID0gbGluayA/IF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBhbGxvd0VtcHR5OiB0cnVlXG4gICAgfSkgOiBvcHRpb25zO1xuICAgIHJldHVybiB0b0Nzcyh0aGlzLnNlbGVjdG9yVGV4dCwgdGhpcy5zdHlsZSwgb3B0cyk7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKFN0eWxlUnVsZSwgW3tcbiAgICBrZXk6IFwic2VsZWN0b3JcIixcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChzZWxlY3Rvcikge1xuICAgICAgaWYgKHNlbGVjdG9yID09PSB0aGlzLnNlbGVjdG9yVGV4dCkgcmV0dXJuO1xuICAgICAgdGhpcy5zZWxlY3RvclRleHQgPSBzZWxlY3RvcjtcbiAgICAgIHZhciByZW5kZXJlciA9IHRoaXMucmVuZGVyZXIsXG4gICAgICAgICAgcmVuZGVyYWJsZSA9IHRoaXMucmVuZGVyYWJsZTtcbiAgICAgIGlmICghcmVuZGVyYWJsZSB8fCAhcmVuZGVyZXIpIHJldHVybjtcbiAgICAgIHZhciBoYXNDaGFuZ2VkID0gcmVuZGVyZXIuc2V0U2VsZWN0b3IocmVuZGVyYWJsZSwgc2VsZWN0b3IpOyAvLyBJZiBzZWxlY3RvciBzZXR0ZXIgaXMgbm90IGltcGxlbWVudGVkLCByZXJlbmRlciB0aGUgcnVsZS5cblxuICAgICAgaWYgKCFoYXNDaGFuZ2VkKSB7XG4gICAgICAgIHJlbmRlcmVyLnJlcGxhY2VSdWxlKHJlbmRlcmFibGUsIHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgc2VsZWN0b3Igc3RyaW5nLlxuICAgICAqL1xuICAgICxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnNlbGVjdG9yVGV4dDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3R5bGVSdWxlO1xufShCYXNlU3R5bGVSdWxlKTtcbnZhciBwbHVnaW5TdHlsZVJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKG5hbWVbMF0gPT09ICdAJyB8fCBvcHRpb25zLnBhcmVudCAmJiBvcHRpb25zLnBhcmVudC50eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBTdHlsZVJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpO1xuICB9XG59O1xuXG52YXIgZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyA9IHtcbiAgaW5kZW50OiAxLFxuICBjaGlsZHJlbjogdHJ1ZVxufTtcbnZhciBhdFJlZ0V4cCA9IC9AKFtcXHctXSspLztcbi8qKlxuICogQ29uZGl0aW9uYWwgcnVsZSBmb3IgQG1lZGlhLCBAc3VwcG9ydHNcbiAqL1xuXG52YXIgQ29uZGl0aW9uYWxSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29uZGl0aW9uYWxSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2NvbmRpdGlvbmFsJztcbiAgICB0aGlzLmF0ID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMucXVlcnkgPSB2b2lkIDA7XG4gICAgdGhpcy5ydWxlcyA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IGtleTsgLy8gS2V5IG1pZ2h0IGNvbnRhaW4gYSB1bmlxdWUgc3VmZml4IGluIGNhc2UgdGhlIGBuYW1lYCBwYXNzZWQgYnkgdXNlciB3YXMgZHVwbGljYXRlLlxuXG4gICAgdGhpcy5xdWVyeSA9IG9wdGlvbnMubmFtZTtcbiAgICB2YXIgYXRNYXRjaCA9IGtleS5tYXRjaChhdFJlZ0V4cCk7XG4gICAgdGhpcy5hdCA9IGF0TWF0Y2ggPyBhdE1hdGNoWzFdIDogJ3Vua25vd24nO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5ydWxlcyA9IG5ldyBSdWxlTGlzdChfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzXG4gICAgfSkpO1xuXG4gICAgZm9yICh2YXIgbmFtZSBpbiBzdHlsZXMpIHtcbiAgICAgIHRoaXMucnVsZXMuYWRkKG5hbWUsIHN0eWxlc1tuYW1lXSk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcy5wcm9jZXNzKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIHJ1bGUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IENvbmRpdGlvbmFsUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldFJ1bGUgPSBmdW5jdGlvbiBnZXRSdWxlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5nZXQobmFtZSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5pbmRleE9mKHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYW5kIHJlZ2lzdGVyIHJ1bGUsIHJ1biBwbHVnaW5zLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hZGRSdWxlID0gZnVuY3Rpb24gYWRkUnVsZShuYW1lLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHZhciBydWxlID0gdGhpcy5ydWxlcy5hZGQobmFtZSwgc3R5bGUsIG9wdGlvbnMpO1xuICAgIGlmICghcnVsZSkgcmV0dXJuIG51bGw7XG4gICAgdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmluZGVudCA9PSBudWxsKSBvcHRpb25zLmluZGVudCA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMuaW5kZW50O1xuICAgIGlmIChvcHRpb25zLmNoaWxkcmVuID09IG51bGwpIG9wdGlvbnMuY2hpbGRyZW4gPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zLmNoaWxkcmVuO1xuXG4gICAgaWYgKG9wdGlvbnMuY2hpbGRyZW4gPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5xdWVyeSArIFwiIHt9XCI7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5ydWxlcy50b1N0cmluZyhvcHRpb25zKTtcbiAgICByZXR1cm4gY2hpbGRyZW4gPyB0aGlzLnF1ZXJ5ICsgXCIge1xcblwiICsgY2hpbGRyZW4gKyBcIlxcbn1cIiA6ICcnO1xuICB9O1xuXG4gIHJldHVybiBDb25kaXRpb25hbFJ1bGU7XG59KCk7XG52YXIga2V5UmVnRXhwID0gL0BtZWRpYXxAc3VwcG9ydHNcXHMrLztcbnZhciBwbHVnaW5Db25kaXRpb25hbFJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleVJlZ0V4cC50ZXN0KGtleSkgPyBuZXcgQ29uZGl0aW9uYWxSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSA6IG51bGw7XG4gIH1cbn07XG5cbnZhciBkZWZhdWx0VG9TdHJpbmdPcHRpb25zJDEgPSB7XG4gIGluZGVudDogMSxcbiAgY2hpbGRyZW46IHRydWVcbn07XG52YXIgbmFtZVJlZ0V4cCA9IC9Aa2V5ZnJhbWVzXFxzKyhbXFx3LV0rKS87XG4vKipcbiAqIFJ1bGUgZm9yIEBrZXlmcmFtZXNcbiAqL1xuXG52YXIgS2V5ZnJhbWVzUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEtleWZyYW1lc1J1bGUoa2V5LCBmcmFtZXMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAna2V5ZnJhbWVzJztcbiAgICB0aGlzLmF0ID0gJ0BrZXlmcmFtZXMnO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMubmFtZSA9IHZvaWQgMDtcbiAgICB0aGlzLmlkID0gdm9pZCAwO1xuICAgIHRoaXMucnVsZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcmFibGUgPSB2b2lkIDA7XG4gICAgdmFyIG5hbWVNYXRjaCA9IGtleS5tYXRjaChuYW1lUmVnRXhwKTtcblxuICAgIGlmIChuYW1lTWF0Y2ggJiYgbmFtZU1hdGNoWzFdKSB7XG4gICAgICB0aGlzLm5hbWUgPSBuYW1lTWF0Y2hbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubmFtZSA9ICdub25hbWUnO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBCYWQga2V5ZnJhbWVzIG5hbWUgXCIgKyBrZXkpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHRoaXMua2V5ID0gdGhpcy50eXBlICsgXCItXCIgKyB0aGlzLm5hbWU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB2YXIgc2NvcGVkID0gb3B0aW9ucy5zY29wZWQsXG4gICAgICAgIHNoZWV0ID0gb3B0aW9ucy5zaGVldCxcbiAgICAgICAgZ2VuZXJhdGVJZCA9IG9wdGlvbnMuZ2VuZXJhdGVJZDtcbiAgICB0aGlzLmlkID0gc2NvcGVkID09PSBmYWxzZSA/IHRoaXMubmFtZSA6IGVzY2FwZShnZW5lcmF0ZUlkKHRoaXMsIHNoZWV0KSk7XG4gICAgdGhpcy5ydWxlcyA9IG5ldyBSdWxlTGlzdChfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzXG4gICAgfSkpO1xuXG4gICAgZm9yICh2YXIgbmFtZSBpbiBmcmFtZXMpIHtcbiAgICAgIHRoaXMucnVsZXMuYWRkKG5hbWUsIGZyYW1lc1tuYW1lXSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgICAgcGFyZW50OiB0aGlzXG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcy5wcm9jZXNzKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEtleWZyYW1lc1J1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyQxO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmluZGVudCA9PSBudWxsKSBvcHRpb25zLmluZGVudCA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMkMS5pbmRlbnQ7XG4gICAgaWYgKG9wdGlvbnMuY2hpbGRyZW4gPT0gbnVsbCkgb3B0aW9ucy5jaGlsZHJlbiA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMkMS5jaGlsZHJlbjtcblxuICAgIGlmIChvcHRpb25zLmNoaWxkcmVuID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIHRoaXMuYXQgKyBcIiBcIiArIHRoaXMuaWQgKyBcIiB7fVwiO1xuICAgIH1cblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucnVsZXMudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgaWYgKGNoaWxkcmVuKSBjaGlsZHJlbiA9IFwiXFxuXCIgKyBjaGlsZHJlbiArIFwiXFxuXCI7XG4gICAgcmV0dXJuIHRoaXMuYXQgKyBcIiBcIiArIHRoaXMuaWQgKyBcIiB7XCIgKyBjaGlsZHJlbiArIFwifVwiO1xuICB9O1xuXG4gIHJldHVybiBLZXlmcmFtZXNSdWxlO1xufSgpO1xudmFyIGtleVJlZ0V4cCQxID0gL0BrZXlmcmFtZXNcXHMrLztcbnZhciByZWZSZWdFeHAgPSAvXFwkKFtcXHctXSspL2c7XG5cbnZhciBmaW5kUmVmZXJlbmNlZEtleWZyYW1lID0gZnVuY3Rpb24gZmluZFJlZmVyZW5jZWRLZXlmcmFtZSh2YWwsIGtleWZyYW1lcykge1xuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsLnJlcGxhY2UocmVmUmVnRXhwLCBmdW5jdGlvbiAobWF0Y2gsIG5hbWUpIHtcbiAgICAgIGlmIChuYW1lIGluIGtleWZyYW1lcykge1xuICAgICAgICByZXR1cm4ga2V5ZnJhbWVzW25hbWVdO1xuICAgICAgfVxuXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIFJlZmVyZW5jZWQga2V5ZnJhbWVzIHJ1bGUgXFxcIlwiICsgbmFtZSArIFwiXFxcIiBpcyBub3QgZGVmaW5lZC5cIikgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufTtcbi8qKlxuICogUmVwbGFjZSB0aGUgcmVmZXJlbmNlIGZvciBhIGFuaW1hdGlvbiBuYW1lLlxuICovXG5cblxudmFyIHJlcGxhY2VSZWYgPSBmdW5jdGlvbiByZXBsYWNlUmVmKHN0eWxlLCBwcm9wLCBrZXlmcmFtZXMpIHtcbiAgdmFyIHZhbHVlID0gc3R5bGVbcHJvcF07XG4gIHZhciByZWZLZXlmcmFtZSA9IGZpbmRSZWZlcmVuY2VkS2V5ZnJhbWUodmFsdWUsIGtleWZyYW1lcyk7XG5cbiAgaWYgKHJlZktleWZyYW1lICE9PSB2YWx1ZSkge1xuICAgIHN0eWxlW3Byb3BdID0gcmVmS2V5ZnJhbWU7XG4gIH1cbn07XG5cbnZhciBwbHVnaW4gPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgZnJhbWVzLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleVJlZ0V4cCQxLnRlc3Qoa2V5KSA/IG5ldyBLZXlmcmFtZXNSdWxlKGtleSwgZnJhbWVzLCBvcHRpb25zKSA6IG51bGw7XG4gIH0sXG4gIC8vIEFuaW1hdGlvbiBuYW1lIHJlZiByZXBsYWNlci5cbiAgb25Qcm9jZXNzU3R5bGU6IGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlLCBzaGVldCkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScgfHwgIXNoZWV0KSByZXR1cm4gc3R5bGU7XG4gICAgaWYgKCdhbmltYXRpb24tbmFtZScgaW4gc3R5bGUpIHJlcGxhY2VSZWYoc3R5bGUsICdhbmltYXRpb24tbmFtZScsIHNoZWV0LmtleWZyYW1lcyk7XG4gICAgaWYgKCdhbmltYXRpb24nIGluIHN0eWxlKSByZXBsYWNlUmVmKHN0eWxlLCAnYW5pbWF0aW9uJywgc2hlZXQua2V5ZnJhbWVzKTtcbiAgICByZXR1cm4gc3R5bGU7XG4gIH0sXG4gIG9uQ2hhbmdlVmFsdWU6IGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsLCBwcm9wLCBydWxlKSB7XG4gICAgdmFyIHNoZWV0ID0gcnVsZS5vcHRpb25zLnNoZWV0O1xuXG4gICAgaWYgKCFzaGVldCkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHByb3ApIHtcbiAgICAgIGNhc2UgJ2FuaW1hdGlvbic6XG4gICAgICAgIHJldHVybiBmaW5kUmVmZXJlbmNlZEtleWZyYW1lKHZhbCwgc2hlZXQua2V5ZnJhbWVzKTtcblxuICAgICAgY2FzZSAnYW5pbWF0aW9uLW5hbWUnOlxuICAgICAgICByZXR1cm4gZmluZFJlZmVyZW5jZWRLZXlmcmFtZSh2YWwsIHNoZWV0LmtleWZyYW1lcyk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICB9XG59O1xuXG52YXIgS2V5ZnJhbWVSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQmFzZVN0eWxlUnVsZSkge1xuICBfaW5oZXJpdHNMb29zZShLZXlmcmFtZVJ1bGUsIF9CYXNlU3R5bGVSdWxlKTtcblxuICBmdW5jdGlvbiBLZXlmcmFtZVJ1bGUoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX0Jhc2VTdHlsZVJ1bGUuY2FsbC5hcHBseShfQmFzZVN0eWxlUnVsZSwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBLZXlmcmFtZVJ1bGUucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIHZhciBzaGVldCA9IHRoaXMub3B0aW9ucy5zaGVldDtcbiAgICB2YXIgbGluayA9IHNoZWV0ID8gc2hlZXQub3B0aW9ucy5saW5rIDogZmFsc2U7XG4gICAgdmFyIG9wdHMgPSBsaW5rID8gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIGFsbG93RW1wdHk6IHRydWVcbiAgICB9KSA6IG9wdGlvbnM7XG4gICAgcmV0dXJuIHRvQ3NzKHRoaXMua2V5LCB0aGlzLnN0eWxlLCBvcHRzKTtcbiAgfTtcblxuICByZXR1cm4gS2V5ZnJhbWVSdWxlO1xufShCYXNlU3R5bGVSdWxlKTtcbnZhciBwbHVnaW5LZXlmcmFtZVJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5wYXJlbnQgJiYgb3B0aW9ucy5wYXJlbnQudHlwZSA9PT0gJ2tleWZyYW1lcycpIHtcbiAgICAgIHJldHVybiBuZXcgS2V5ZnJhbWVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG52YXIgRm9udEZhY2VSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRm9udEZhY2VSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnZm9udC1mYWNlJztcbiAgICB0aGlzLmF0ID0gJ0Bmb250LWZhY2UnO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMuc3R5bGUgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcmFibGUgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEZvbnRGYWNlUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuc3R5bGUpKSB7XG4gICAgICB2YXIgc3RyID0gJyc7XG5cbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnN0eWxlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBzdHIgKz0gdG9Dc3ModGhpcy5hdCwgdGhpcy5zdHlsZVtpbmRleF0pO1xuICAgICAgICBpZiAodGhpcy5zdHlsZVtpbmRleCArIDFdKSBzdHIgKz0gJ1xcbic7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRvQ3NzKHRoaXMuYXQsIHRoaXMuc3R5bGUsIG9wdGlvbnMpO1xuICB9O1xuXG4gIHJldHVybiBGb250RmFjZVJ1bGU7XG59KCk7XG52YXIga2V5UmVnRXhwJDIgPSAvQGZvbnQtZmFjZS87XG52YXIgcGx1Z2luRm9udEZhY2VSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleVJlZ0V4cCQyLnRlc3Qoa2V5KSA/IG5ldyBGb250RmFjZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykgOiBudWxsO1xuICB9XG59O1xuXG52YXIgVmlld3BvcnRSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVmlld3BvcnRSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAndmlld3BvcnQnO1xuICAgIHRoaXMuYXQgPSAnQHZpZXdwb3J0JztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLnN0eWxlID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMuc3R5bGUgPSBzdHlsZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBWaWV3cG9ydFJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdG9Dc3ModGhpcy5rZXksIHRoaXMuc3R5bGUsIG9wdGlvbnMpO1xuICB9O1xuXG4gIHJldHVybiBWaWV3cG9ydFJ1bGU7XG59KCk7XG52YXIgcGx1Z2luVmlld3BvcnRSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleSA9PT0gJ0B2aWV3cG9ydCcgfHwga2V5ID09PSAnQC1tcy12aWV3cG9ydCcgPyBuZXcgVmlld3BvcnRSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIDogbnVsbDtcbiAgfVxufTtcblxudmFyIFNpbXBsZVJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTaW1wbGVSdWxlKGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnc2ltcGxlJztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLnZhbHVlID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG5cblxuICB2YXIgX3Byb3RvID0gU2ltcGxlUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMudmFsdWUpKSB7XG4gICAgICB2YXIgc3RyID0gJyc7XG5cbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnZhbHVlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBzdHIgKz0gdGhpcy5rZXkgKyBcIiBcIiArIHRoaXMudmFsdWVbaW5kZXhdICsgXCI7XCI7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlW2luZGV4ICsgMV0pIHN0ciArPSAnXFxuJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5rZXkgKyBcIiBcIiArIHRoaXMudmFsdWUgKyBcIjtcIjtcbiAgfTtcblxuICByZXR1cm4gU2ltcGxlUnVsZTtcbn0oKTtcbnZhciBrZXlzTWFwID0ge1xuICAnQGNoYXJzZXQnOiB0cnVlLFxuICAnQGltcG9ydCc6IHRydWUsXG4gICdAbmFtZXNwYWNlJzogdHJ1ZVxufTtcbnZhciBwbHVnaW5TaW1wbGVSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleSBpbiBrZXlzTWFwID8gbmV3IFNpbXBsZVJ1bGUoa2V5LCB2YWx1ZSwgb3B0aW9ucykgOiBudWxsO1xuICB9XG59O1xuXG52YXIgcGx1Z2lucyA9IFtwbHVnaW5TdHlsZVJ1bGUsIHBsdWdpbkNvbmRpdGlvbmFsUnVsZSwgcGx1Z2luLCBwbHVnaW5LZXlmcmFtZVJ1bGUsIHBsdWdpbkZvbnRGYWNlUnVsZSwgcGx1Z2luVmlld3BvcnRSdWxlLCBwbHVnaW5TaW1wbGVSdWxlXTtcblxudmFyIGRlZmF1bHRVcGRhdGVPcHRpb25zID0ge1xuICBwcm9jZXNzOiB0cnVlXG59O1xudmFyIGZvcmNlVXBkYXRlT3B0aW9ucyA9IHtcbiAgZm9yY2U6IHRydWUsXG4gIHByb2Nlc3M6IHRydWVcbiAgLyoqXG4gICAqIENvbnRhaW5zIHJ1bGVzIG9iamVjdHMgYW5kIGFsbG93cyBhZGRpbmcvcmVtb3ZpbmcgZXRjLlxuICAgKiBJcyB1c2VkIGZvciBlLmcuIGJ5IGBTdHlsZVNoZWV0YCBvciBgQ29uZGl0aW9uYWxSdWxlYC5cbiAgICovXG5cbn07XG5cbnZhciBSdWxlTGlzdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8vIFJ1bGVzIHJlZ2lzdHJ5IGZvciBhY2Nlc3MgYnkgLmdldCgpIG1ldGhvZC5cbiAgLy8gSXQgY29udGFpbnMgdGhlIHNhbWUgcnVsZSByZWdpc3RlcmVkIGJ5IG5hbWUgYW5kIGJ5IHNlbGVjdG9yLlxuICAvLyBPcmlnaW5hbCBzdHlsZXMgb2JqZWN0LlxuICAvLyBVc2VkIHRvIGVuc3VyZSBjb3JyZWN0IHJ1bGVzIG9yZGVyLlxuICBmdW5jdGlvbiBSdWxlTGlzdChvcHRpb25zKSB7XG4gICAgdGhpcy5tYXAgPSB7fTtcbiAgICB0aGlzLnJhdyA9IHt9O1xuICAgIHRoaXMuaW5kZXggPSBbXTtcbiAgICB0aGlzLmNvdW50ZXIgPSAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmNsYXNzZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXlmcmFtZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLmNsYXNzZXMgPSBvcHRpb25zLmNsYXNzZXM7XG4gICAgdGhpcy5rZXlmcmFtZXMgPSBvcHRpb25zLmtleWZyYW1lcztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuZCByZWdpc3RlciBydWxlLlxuICAgKlxuICAgKiBXaWxsIG5vdCByZW5kZXIgYWZ0ZXIgU3R5bGUgU2hlZXQgd2FzIHJlbmRlcmVkIHRoZSBmaXJzdCB0aW1lLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBSdWxlTGlzdC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmFkZCA9IGZ1bmN0aW9uIGFkZChuYW1lLCBkZWNsLCBydWxlT3B0aW9ucykge1xuICAgIHZhciBfdGhpcyRvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICBwYXJlbnQgPSBfdGhpcyRvcHRpb25zLnBhcmVudCxcbiAgICAgICAgc2hlZXQgPSBfdGhpcyRvcHRpb25zLnNoZWV0LFxuICAgICAgICBqc3MgPSBfdGhpcyRvcHRpb25zLmpzcyxcbiAgICAgICAgUmVuZGVyZXIgPSBfdGhpcyRvcHRpb25zLlJlbmRlcmVyLFxuICAgICAgICBnZW5lcmF0ZUlkID0gX3RoaXMkb3B0aW9ucy5nZW5lcmF0ZUlkLFxuICAgICAgICBzY29wZWQgPSBfdGhpcyRvcHRpb25zLnNjb3BlZDtcblxuICAgIHZhciBvcHRpb25zID0gX2V4dGVuZHMoe1xuICAgICAgY2xhc3NlczogdGhpcy5jbGFzc2VzLFxuICAgICAgcGFyZW50OiBwYXJlbnQsXG4gICAgICBzaGVldDogc2hlZXQsXG4gICAgICBqc3M6IGpzcyxcbiAgICAgIFJlbmRlcmVyOiBSZW5kZXJlcixcbiAgICAgIGdlbmVyYXRlSWQ6IGdlbmVyYXRlSWQsXG4gICAgICBzY29wZWQ6IHNjb3BlZCxcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBrZXlmcmFtZXM6IHRoaXMua2V5ZnJhbWVzLFxuICAgICAgc2VsZWN0b3I6IHVuZGVmaW5lZFxuICAgIH0sIHJ1bGVPcHRpb25zKTsgLy8gV2hlbiB1c2VyIHVzZXMgLmNyZWF0ZVN0eWxlU2hlZXQoKSwgZHVwbGljYXRlIG5hbWVzIGFyZSBub3QgcG9zc2libGUsIGJ1dFxuICAgIC8vIGBzaGVldC5hZGRSdWxlKClgIG9wZW5zIHRoZSBkb29yIGZvciBhbnkgZHVwbGljYXRlIHJ1bGUgbmFtZS4gV2hlbiB0aGlzIGhhcHBlbnNcbiAgICAvLyB3ZSBuZWVkIHRvIG1ha2UgdGhlIGtleSB1bmlxdWUgd2l0aGluIHRoaXMgUnVsZUxpc3QgaW5zdGFuY2Ugc2NvcGUuXG5cblxuICAgIHZhciBrZXkgPSBuYW1lO1xuXG4gICAgaWYgKG5hbWUgaW4gdGhpcy5yYXcpIHtcbiAgICAgIGtleSA9IG5hbWUgKyBcIi1kXCIgKyB0aGlzLmNvdW50ZXIrKztcbiAgICB9IC8vIFdlIG5lZWQgdG8gc2F2ZSB0aGUgb3JpZ2luYWwgZGVjbCBiZWZvcmUgY3JlYXRpbmcgdGhlIHJ1bGVcbiAgICAvLyBiZWNhdXNlIGNhY2hlIHBsdWdpbiBuZWVkcyB0byB1c2UgaXQgYXMgYSBrZXkgdG8gcmV0dXJuIGEgY2FjaGVkIHJ1bGUuXG5cblxuICAgIHRoaXMucmF3W2tleV0gPSBkZWNsO1xuXG4gICAgaWYgKGtleSBpbiB0aGlzLmNsYXNzZXMpIHtcbiAgICAgIC8vIEUuZy4gcnVsZXMgaW5zaWRlIG9mIEBtZWRpYSBjb250YWluZXJcbiAgICAgIG9wdGlvbnMuc2VsZWN0b3IgPSBcIi5cIiArIGVzY2FwZSh0aGlzLmNsYXNzZXNba2V5XSk7XG4gICAgfVxuXG4gICAgdmFyIHJ1bGUgPSBjcmVhdGVSdWxlKGtleSwgZGVjbCwgb3B0aW9ucyk7XG4gICAgaWYgKCFydWxlKSByZXR1cm4gbnVsbDtcbiAgICB0aGlzLnJlZ2lzdGVyKHJ1bGUpO1xuICAgIHZhciBpbmRleCA9IG9wdGlvbnMuaW5kZXggPT09IHVuZGVmaW5lZCA/IHRoaXMuaW5kZXgubGVuZ3RoIDogb3B0aW9ucy5pbmRleDtcbiAgICB0aGlzLmluZGV4LnNwbGljZShpbmRleCwgMCwgcnVsZSk7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldCA9IGZ1bmN0aW9uIGdldChuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwW25hbWVdO1xuICB9XG4gIC8qKlxuICAgKiBEZWxldGUgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUocnVsZSkge1xuICAgIHRoaXMudW5yZWdpc3RlcihydWxlKTtcbiAgICBkZWxldGUgdGhpcy5yYXdbcnVsZS5rZXldO1xuICAgIHRoaXMuaW5kZXguc3BsaWNlKHRoaXMuaW5kZXguaW5kZXhPZihydWxlKSwgMSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5pbmRleC5pbmRleE9mKHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBSdW4gYG9uUHJvY2Vzc1J1bGUoKWAgcGx1Z2lucyBvbiBldmVyeSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wcm9jZXNzID0gZnVuY3Rpb24gcHJvY2VzcygpIHtcbiAgICB2YXIgcGx1Z2lucyA9IHRoaXMub3B0aW9ucy5qc3MucGx1Z2luczsgLy8gV2UgbmVlZCB0byBjbG9uZSBhcnJheSBiZWNhdXNlIGlmIHdlIG1vZGlmeSB0aGUgaW5kZXggc29tZXdoZXJlIGVsc2UgZHVyaW5nIGEgbG9vcFxuICAgIC8vIHdlIGVuZCB1cCB3aXRoIHZlcnkgaGFyZC10by10cmFjay1kb3duIHNpZGUgZWZmZWN0cy5cblxuICAgIHRoaXMuaW5kZXguc2xpY2UoMCkuZm9yRWFjaChwbHVnaW5zLm9uUHJvY2Vzc1J1bGUsIHBsdWdpbnMpO1xuICB9XG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIHJ1bGUgaW4gYC5tYXBgLCBgLmNsYXNzZXNgIGFuZCBgLmtleWZyYW1lc2AgbWFwcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVnaXN0ZXIgPSBmdW5jdGlvbiByZWdpc3RlcihydWxlKSB7XG4gICAgdGhpcy5tYXBbcnVsZS5rZXldID0gcnVsZTtcblxuICAgIGlmIChydWxlIGluc3RhbmNlb2YgU3R5bGVSdWxlKSB7XG4gICAgICB0aGlzLm1hcFtydWxlLnNlbGVjdG9yXSA9IHJ1bGU7XG4gICAgICBpZiAocnVsZS5pZCkgdGhpcy5jbGFzc2VzW3J1bGUua2V5XSA9IHJ1bGUuaWQ7XG4gICAgfSBlbHNlIGlmIChydWxlIGluc3RhbmNlb2YgS2V5ZnJhbWVzUnVsZSAmJiB0aGlzLmtleWZyYW1lcykge1xuICAgICAgdGhpcy5rZXlmcmFtZXNbcnVsZS5uYW1lXSA9IHJ1bGUuaWQ7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBVbnJlZ2lzdGVyIGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udW5yZWdpc3RlciA9IGZ1bmN0aW9uIHVucmVnaXN0ZXIocnVsZSkge1xuICAgIGRlbGV0ZSB0aGlzLm1hcFtydWxlLmtleV07XG5cbiAgICBpZiAocnVsZSBpbnN0YW5jZW9mIFN0eWxlUnVsZSkge1xuICAgICAgZGVsZXRlIHRoaXMubWFwW3J1bGUuc2VsZWN0b3JdO1xuICAgICAgZGVsZXRlIHRoaXMuY2xhc3Nlc1tydWxlLmtleV07XG4gICAgfSBlbHNlIGlmIChydWxlIGluc3RhbmNlb2YgS2V5ZnJhbWVzUnVsZSkge1xuICAgICAgZGVsZXRlIHRoaXMua2V5ZnJhbWVzW3J1bGUubmFtZV07XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGZ1bmN0aW9uIHZhbHVlcyB3aXRoIGEgbmV3IGRhdGEuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICB2YXIgbmFtZTtcbiAgICB2YXIgZGF0YTtcbiAgICB2YXIgb3B0aW9ucztcblxuICAgIGlmICh0eXBlb2YgKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgPT09ICdzdHJpbmcnKSB7XG4gICAgICBuYW1lID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdOyAvLyAkRmxvd0ZpeE1lXG5cbiAgICAgIGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV07IC8vICRGbG93Rml4TWVcblxuICAgICAgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMiA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1syXTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXTsgLy8gJEZsb3dGaXhNZVxuXG4gICAgICBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdO1xuICAgICAgbmFtZSA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHRoaXMudXBkYXRlT25lKHRoaXMubWFwW25hbWVdLCBkYXRhLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuaW5kZXgubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHRoaXMudXBkYXRlT25lKHRoaXMuaW5kZXhbaW5kZXhdLCBkYXRhLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEV4ZWN1dGUgcGx1Z2lucywgdXBkYXRlIHJ1bGUgcHJvcHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZU9uZSA9IGZ1bmN0aW9uIHVwZGF0ZU9uZShydWxlLCBkYXRhLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IGRlZmF1bHRVcGRhdGVPcHRpb25zO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyRvcHRpb25zMiA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgcGx1Z2lucyA9IF90aGlzJG9wdGlvbnMyLmpzcy5wbHVnaW5zLFxuICAgICAgICBzaGVldCA9IF90aGlzJG9wdGlvbnMyLnNoZWV0OyAvLyBJdCBpcyBhIHJ1bGVzIGNvbnRhaW5lciBsaWtlIGZvciBlLmcuIENvbmRpdGlvbmFsUnVsZS5cblxuICAgIGlmIChydWxlLnJ1bGVzIGluc3RhbmNlb2YgUnVsZUxpc3QpIHtcbiAgICAgIHJ1bGUucnVsZXMudXBkYXRlKGRhdGEsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzdHlsZVJ1bGUgPSBydWxlO1xuICAgIHZhciBzdHlsZSA9IHN0eWxlUnVsZS5zdHlsZTtcbiAgICBwbHVnaW5zLm9uVXBkYXRlKGRhdGEsIHJ1bGUsIHNoZWV0LCBvcHRpb25zKTsgLy8gV2UgcmVseSBvbiBhIG5ldyBgc3R5bGVgIHJlZiBpbiBjYXNlIGl0IHdhcyBtdXRhdGVkIGR1cmluZyBvblVwZGF0ZSBob29rLlxuXG4gICAgaWYgKG9wdGlvbnMucHJvY2VzcyAmJiBzdHlsZSAmJiBzdHlsZSAhPT0gc3R5bGVSdWxlLnN0eWxlKSB7XG4gICAgICAvLyBXZSBuZWVkIHRvIHJ1biB0aGUgcGx1Z2lucyBpbiBjYXNlIG5ldyBgc3R5bGVgIHJlbGllcyBvbiBzeW50YXggcGx1Z2lucy5cbiAgICAgIHBsdWdpbnMub25Qcm9jZXNzU3R5bGUoc3R5bGVSdWxlLnN0eWxlLCBzdHlsZVJ1bGUsIHNoZWV0KTsgLy8gVXBkYXRlIGFuZCBhZGQgcHJvcHMuXG5cbiAgICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGVSdWxlLnN0eWxlKSB7XG4gICAgICAgIHZhciBuZXh0VmFsdWUgPSBzdHlsZVJ1bGUuc3R5bGVbcHJvcF07XG4gICAgICAgIHZhciBwcmV2VmFsdWUgPSBzdHlsZVtwcm9wXTsgLy8gV2UgbmVlZCB0byB1c2UgYGZvcmNlOiB0cnVlYCBiZWNhdXNlIGBydWxlLnN0eWxlYCBoYXMgYmVlbiB1cGRhdGVkIGR1cmluZyBvblVwZGF0ZSBob29rLCBzbyBgcnVsZS5wcm9wKClgIHdpbGwgbm90IHVwZGF0ZSB0aGUgQ1NTT00gcnVsZS5cbiAgICAgICAgLy8gV2UgZG8gdGhpcyBjb21wYXJpc29uIHRvIGF2b2lkIHVubmVlZGVkIGBydWxlLnByb3AoKWAgY2FsbHMsIHNpbmNlIHdlIGhhdmUgdGhlIG9sZCBgc3R5bGVgIG9iamVjdCBoZXJlLlxuXG4gICAgICAgIGlmIChuZXh0VmFsdWUgIT09IHByZXZWYWx1ZSkge1xuICAgICAgICAgIHN0eWxlUnVsZS5wcm9wKHByb3AsIG5leHRWYWx1ZSwgZm9yY2VVcGRhdGVPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBSZW1vdmUgcHJvcHMuXG5cblxuICAgICAgZm9yICh2YXIgX3Byb3AgaW4gc3R5bGUpIHtcbiAgICAgICAgdmFyIF9uZXh0VmFsdWUgPSBzdHlsZVJ1bGUuc3R5bGVbX3Byb3BdO1xuICAgICAgICB2YXIgX3ByZXZWYWx1ZSA9IHN0eWxlW19wcm9wXTsgLy8gV2UgbmVlZCB0byB1c2UgYGZvcmNlOiB0cnVlYCBiZWNhdXNlIGBydWxlLnN0eWxlYCBoYXMgYmVlbiB1cGRhdGVkIGR1cmluZyBvblVwZGF0ZSBob29rLCBzbyBgcnVsZS5wcm9wKClgIHdpbGwgbm90IHVwZGF0ZSB0aGUgQ1NTT00gcnVsZS5cbiAgICAgICAgLy8gV2UgZG8gdGhpcyBjb21wYXJpc29uIHRvIGF2b2lkIHVubmVlZGVkIGBydWxlLnByb3AoKWAgY2FsbHMsIHNpbmNlIHdlIGhhdmUgdGhlIG9sZCBgc3R5bGVgIG9iamVjdCBoZXJlLlxuXG4gICAgICAgIGlmIChfbmV4dFZhbHVlID09IG51bGwgJiYgX25leHRWYWx1ZSAhPT0gX3ByZXZWYWx1ZSkge1xuICAgICAgICAgIHN0eWxlUnVsZS5wcm9wKF9wcm9wLCBudWxsLCBmb3JjZVVwZGF0ZU9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0IHJ1bGVzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgdmFyIHN0ciA9ICcnO1xuICAgIHZhciBzaGVldCA9IHRoaXMub3B0aW9ucy5zaGVldDtcbiAgICB2YXIgbGluayA9IHNoZWV0ID8gc2hlZXQub3B0aW9ucy5saW5rIDogZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5pbmRleC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBydWxlID0gdGhpcy5pbmRleFtpbmRleF07XG4gICAgICB2YXIgY3NzID0gcnVsZS50b1N0cmluZyhvcHRpb25zKTsgLy8gTm8gbmVlZCB0byByZW5kZXIgYW4gZW1wdHkgcnVsZS5cblxuICAgICAgaWYgKCFjc3MgJiYgIWxpbmspIGNvbnRpbnVlO1xuICAgICAgaWYgKHN0cikgc3RyICs9ICdcXG4nO1xuICAgICAgc3RyICs9IGNzcztcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyO1xuICB9O1xuXG4gIHJldHVybiBSdWxlTGlzdDtcbn0oKTtcblxudmFyIFN0eWxlU2hlZXQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdHlsZVNoZWV0KHN0eWxlcywgb3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmRlcGxveWVkID0gdm9pZCAwO1xuICAgIHRoaXMuYXR0YWNoZWQgPSB2b2lkIDA7XG4gICAgdGhpcy5ydWxlcyA9IHZvaWQgMDtcbiAgICB0aGlzLnJlbmRlcmVyID0gdm9pZCAwO1xuICAgIHRoaXMuY2xhc3NlcyA9IHZvaWQgMDtcbiAgICB0aGlzLmtleWZyYW1lcyA9IHZvaWQgMDtcbiAgICB0aGlzLnF1ZXVlID0gdm9pZCAwO1xuICAgIHRoaXMuYXR0YWNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLmRlcGxveWVkID0gZmFsc2U7XG4gICAgdGhpcy5jbGFzc2VzID0ge307XG4gICAgdGhpcy5rZXlmcmFtZXMgPSB7fTtcbiAgICB0aGlzLm9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgc2hlZXQ6IHRoaXMsXG4gICAgICBwYXJlbnQ6IHRoaXMsXG4gICAgICBjbGFzc2VzOiB0aGlzLmNsYXNzZXMsXG4gICAgICBrZXlmcmFtZXM6IHRoaXMua2V5ZnJhbWVzXG4gICAgfSk7XG5cbiAgICBpZiAob3B0aW9ucy5SZW5kZXJlcikge1xuICAgICAgdGhpcy5yZW5kZXJlciA9IG5ldyBvcHRpb25zLlJlbmRlcmVyKHRoaXMpO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMgPSBuZXcgUnVsZUxpc3QodGhpcy5vcHRpb25zKTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICB0aGlzLnJ1bGVzLmFkZChuYW1lLCBzdHlsZXNbbmFtZV0pO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG4gIC8qKlxuICAgKiBBdHRhY2ggcmVuZGVyYWJsZSB0byB0aGUgcmVuZGVyIHRyZWUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFN0eWxlU2hlZXQucHJvdG90eXBlO1xuXG4gIF9wcm90by5hdHRhY2ggPSBmdW5jdGlvbiBhdHRhY2goKSB7XG4gICAgaWYgKHRoaXMuYXR0YWNoZWQpIHJldHVybiB0aGlzO1xuICAgIGlmICh0aGlzLnJlbmRlcmVyKSB0aGlzLnJlbmRlcmVyLmF0dGFjaCgpO1xuICAgIHRoaXMuYXR0YWNoZWQgPSB0cnVlOyAvLyBPcmRlciBpcyBpbXBvcnRhbnQsIGJlY2F1c2Ugd2UgY2FuJ3QgdXNlIGluc2VydFJ1bGUgQVBJIGlmIHN0eWxlIGVsZW1lbnQgaXMgbm90IGF0dGFjaGVkLlxuXG4gICAgaWYgKCF0aGlzLmRlcGxveWVkKSB0aGlzLmRlcGxveSgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgcmVuZGVyYWJsZSBmcm9tIHJlbmRlciB0cmVlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZXRhY2ggPSBmdW5jdGlvbiBkZXRhY2goKSB7XG4gICAgaWYgKCF0aGlzLmF0dGFjaGVkKSByZXR1cm4gdGhpcztcbiAgICBpZiAodGhpcy5yZW5kZXJlcikgdGhpcy5yZW5kZXJlci5kZXRhY2goKTtcbiAgICB0aGlzLmF0dGFjaGVkID0gZmFsc2U7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEFkZCBhIHJ1bGUgdG8gdGhlIGN1cnJlbnQgc3R5bGVzaGVldC5cbiAgICogV2lsbCBpbnNlcnQgYSBydWxlIGFsc28gYWZ0ZXIgdGhlIHN0eWxlc2hlZXQgaGFzIGJlZW4gcmVuZGVyZWQgZmlyc3QgdGltZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUnVsZSA9IGZ1bmN0aW9uIGFkZFJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICAgIHZhciBxdWV1ZSA9IHRoaXMucXVldWU7IC8vIFBsdWdpbnMgY2FuIGNyZWF0ZSBydWxlcy5cbiAgICAvLyBJbiBvcmRlciB0byBwcmVzZXJ2ZSB0aGUgcmlnaHQgb3JkZXIsIHdlIG5lZWQgdG8gcXVldWUgYWxsIGAuYWRkUnVsZWAgY2FsbHMsXG4gICAgLy8gd2hpY2ggaGFwcGVuIGFmdGVyIHRoZSBmaXJzdCBgcnVsZXMuYWRkKClgIGNhbGwuXG5cbiAgICBpZiAodGhpcy5hdHRhY2hlZCAmJiAhcXVldWUpIHRoaXMucXVldWUgPSBbXTtcbiAgICB2YXIgcnVsZSA9IHRoaXMucnVsZXMuYWRkKG5hbWUsIGRlY2wsIG9wdGlvbnMpO1xuICAgIGlmICghcnVsZSkgcmV0dXJuIG51bGw7XG4gICAgdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG5cbiAgICBpZiAodGhpcy5hdHRhY2hlZCkge1xuICAgICAgaWYgKCF0aGlzLmRlcGxveWVkKSByZXR1cm4gcnVsZTsgLy8gRG9uJ3QgaW5zZXJ0IHJ1bGUgZGlyZWN0bHkgaWYgdGhlcmUgaXMgbm8gc3RyaW5naWZpZWQgdmVyc2lvbiB5ZXQuXG4gICAgICAvLyBJdCB3aWxsIGJlIGluc2VydGVkIGFsbCB0b2dldGhlciB3aGVuIC5hdHRhY2ggaXMgY2FsbGVkLlxuXG4gICAgICBpZiAocXVldWUpIHF1ZXVlLnB1c2gocnVsZSk7ZWxzZSB7XG4gICAgICAgIHRoaXMuaW5zZXJ0UnVsZShydWxlKTtcblxuICAgICAgICBpZiAodGhpcy5xdWV1ZSkge1xuICAgICAgICAgIHRoaXMucXVldWUuZm9yRWFjaCh0aGlzLmluc2VydFJ1bGUsIHRoaXMpO1xuICAgICAgICAgIHRoaXMucXVldWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBydWxlO1xuICAgIH0gLy8gV2UgY2FuJ3QgYWRkIHJ1bGVzIHRvIGEgZGV0YWNoZWQgc3R5bGUgbm9kZS5cbiAgICAvLyBXZSB3aWxsIHJlZGVwbG95IHRoZSBzaGVldCBvbmNlIHVzZXIgd2lsbCBhdHRhY2ggaXQuXG5cblxuICAgIHRoaXMuZGVwbG95ZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gcnVsZTtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IHJ1bGUgaW50byB0aGUgU3R5bGVTaGVldFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbnNlcnRSdWxlID0gZnVuY3Rpb24gaW5zZXJ0UnVsZShydWxlKSB7XG4gICAgaWYgKHRoaXMucmVuZGVyZXIpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuaW5zZXJ0UnVsZShydWxlKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgYWRkIHJ1bGVzLlxuICAgKiBXaWxsIHJlbmRlciBhbHNvIGFmdGVyIFN0eWxlIFNoZWV0IHdhcyByZW5kZXJlZCB0aGUgZmlyc3QgdGltZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUnVsZXMgPSBmdW5jdGlvbiBhZGRSdWxlcyhzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICB2YXIgYWRkZWQgPSBbXTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICB2YXIgcnVsZSA9IHRoaXMuYWRkUnVsZShuYW1lLCBzdHlsZXNbbmFtZV0sIG9wdGlvbnMpO1xuICAgICAgaWYgKHJ1bGUpIGFkZGVkLnB1c2gocnVsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZGVkO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBydWxlIGJ5IG5hbWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldFJ1bGUgPSBmdW5jdGlvbiBnZXRSdWxlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5nZXQobmFtZSk7XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHJ1bGUgYnkgbmFtZS5cbiAgICogUmV0dXJucyBgdHJ1ZWA6IGlmIHJ1bGUgaGFzIGJlZW4gZGVsZXRlZCBmcm9tIHRoZSBET00uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRlbGV0ZVJ1bGUgPSBmdW5jdGlvbiBkZWxldGVSdWxlKG5hbWUpIHtcbiAgICB2YXIgcnVsZSA9IHR5cGVvZiBuYW1lID09PSAnb2JqZWN0JyA/IG5hbWUgOiB0aGlzLnJ1bGVzLmdldChuYW1lKTtcbiAgICBpZiAoIXJ1bGUpIHJldHVybiBmYWxzZTtcbiAgICB0aGlzLnJ1bGVzLnJlbW92ZShydWxlKTtcblxuICAgIGlmICh0aGlzLmF0dGFjaGVkICYmIHJ1bGUucmVuZGVyYWJsZSAmJiB0aGlzLnJlbmRlcmVyKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5kZWxldGVSdWxlKHJ1bGUucmVuZGVyYWJsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5pbmRleE9mKHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBEZXBsb3kgcHVyZSBDU1Mgc3RyaW5nIHRvIGEgcmVuZGVyYWJsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGVwbG95ID0gZnVuY3Rpb24gZGVwbG95KCkge1xuICAgIGlmICh0aGlzLnJlbmRlcmVyKSB0aGlzLnJlbmRlcmVyLmRlcGxveSgpO1xuICAgIHRoaXMuZGVwbG95ZWQgPSB0cnVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGZ1bmN0aW9uIHZhbHVlcyB3aXRoIGEgbmV3IGRhdGEuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICB2YXIgX3RoaXMkcnVsZXM7XG5cbiAgICAoX3RoaXMkcnVsZXMgPSB0aGlzLnJ1bGVzKS51cGRhdGUuYXBwbHkoX3RoaXMkcnVsZXMsIGFyZ3VtZW50cyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogVXBkYXRlcyBhIHNpbmdsZSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGVPbmUgPSBmdW5jdGlvbiB1cGRhdGVPbmUocnVsZSwgZGF0YSwgb3B0aW9ucykge1xuICAgIHRoaXMucnVsZXMudXBkYXRlT25lKHJ1bGUsIGRhdGEsIG9wdGlvbnMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0IHJ1bGVzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMudG9TdHJpbmcob3B0aW9ucyk7XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlU2hlZXQ7XG59KCk7XG5cbnZhciBQbHVnaW5zUmVnaXN0cnkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQbHVnaW5zUmVnaXN0cnkoKSB7XG4gICAgdGhpcy5wbHVnaW5zID0ge1xuICAgICAgaW50ZXJuYWw6IFtdLFxuICAgICAgZXh0ZXJuYWw6IFtdXG4gICAgfTtcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gdm9pZCAwO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFBsdWdpbnNSZWdpc3RyeS5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIENhbGwgYG9uQ3JlYXRlUnVsZWAgaG9va3MgYW5kIHJldHVybiBhbiBvYmplY3QgaWYgcmV0dXJuZWQgYnkgYSBob29rLlxuICAgKi9cbiAgX3Byb3RvLm9uQ3JlYXRlUnVsZSA9IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShuYW1lLCBkZWNsLCBvcHRpb25zKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uQ3JlYXRlUnVsZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHJ1bGUgPSB0aGlzLnJlZ2lzdHJ5Lm9uQ3JlYXRlUnVsZVtpXShuYW1lLCBkZWNsLCBvcHRpb25zKTtcbiAgICAgIGlmIChydWxlKSByZXR1cm4gcnVsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25Qcm9jZXNzUnVsZWAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uUHJvY2Vzc1J1bGUgPSBmdW5jdGlvbiBvblByb2Nlc3NSdWxlKHJ1bGUpIHtcbiAgICBpZiAocnVsZS5pc1Byb2Nlc3NlZCkgcmV0dXJuO1xuICAgIHZhciBzaGVldCA9IHJ1bGUub3B0aW9ucy5zaGVldDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NSdWxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1J1bGVbaV0ocnVsZSwgc2hlZXQpO1xuICAgIH1cblxuICAgIGlmIChydWxlLnN0eWxlKSB0aGlzLm9uUHJvY2Vzc1N0eWxlKHJ1bGUuc3R5bGUsIHJ1bGUsIHNoZWV0KTtcbiAgICBydWxlLmlzUHJvY2Vzc2VkID0gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25Qcm9jZXNzU3R5bGVgIGhvb2tzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vblByb2Nlc3NTdHlsZSA9IGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlLCBzaGVldCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NTdHlsZS5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgcnVsZS5zdHlsZSA9IHRoaXMucmVnaXN0cnkub25Qcm9jZXNzU3R5bGVbaV0ocnVsZS5zdHlsZSwgcnVsZSwgc2hlZXQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25Qcm9jZXNzU2hlZXRgIGhvb2tzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vblByb2Nlc3NTaGVldCA9IGZ1bmN0aW9uIG9uUHJvY2Vzc1NoZWV0KHNoZWV0KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1NoZWV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1NoZWV0W2ldKHNoZWV0KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENhbGwgYG9uVXBkYXRlYCBob29rcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25VcGRhdGUgPSBmdW5jdGlvbiBvblVwZGF0ZShkYXRhLCBydWxlLCBzaGVldCwgb3B0aW9ucykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vblVwZGF0ZS5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5yZWdpc3RyeS5vblVwZGF0ZVtpXShkYXRhLCBydWxlLCBzaGVldCwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDYWxsIGBvbkNoYW5nZVZhbHVlYCBob29rcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25DaGFuZ2VWYWx1ZSA9IGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsdWUsIHByb3AsIHJ1bGUpIHtcbiAgICB2YXIgcHJvY2Vzc2VkVmFsdWUgPSB2YWx1ZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vbkNoYW5nZVZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBwcm9jZXNzZWRWYWx1ZSA9IHRoaXMucmVnaXN0cnkub25DaGFuZ2VWYWx1ZVtpXShwcm9jZXNzZWRWYWx1ZSwgcHJvcCwgcnVsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb2Nlc3NlZFZhbHVlO1xuICB9XG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIHBsdWdpbi5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udXNlID0gZnVuY3Rpb24gdXNlKG5ld1BsdWdpbiwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgIHF1ZXVlOiAnZXh0ZXJuYWwnXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBwbHVnaW5zID0gdGhpcy5wbHVnaW5zW29wdGlvbnMucXVldWVdOyAvLyBBdm9pZHMgYXBwbHlpbmcgc2FtZSBwbHVnaW4gdHdpY2UsIGF0IGxlYXN0IGJhc2VkIG9uIHJlZi5cblxuICAgIGlmIChwbHVnaW5zLmluZGV4T2YobmV3UGx1Z2luKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBwbHVnaW5zLnB1c2gobmV3UGx1Z2luKTtcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gW10uY29uY2F0KHRoaXMucGx1Z2lucy5leHRlcm5hbCwgdGhpcy5wbHVnaW5zLmludGVybmFsKS5yZWR1Y2UoZnVuY3Rpb24gKHJlZ2lzdHJ5LCBwbHVnaW4pIHtcbiAgICAgIGZvciAodmFyIG5hbWUgaW4gcGx1Z2luKSB7XG4gICAgICAgIGlmIChuYW1lIGluIHJlZ2lzdHJ5KSB7XG4gICAgICAgICAgcmVnaXN0cnlbbmFtZV0ucHVzaChwbHVnaW5bbmFtZV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gVW5rbm93biBob29rIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIuXCIpIDogdm9pZCAwO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZWdpc3RyeTtcbiAgICB9LCB7XG4gICAgICBvbkNyZWF0ZVJ1bGU6IFtdLFxuICAgICAgb25Qcm9jZXNzUnVsZTogW10sXG4gICAgICBvblByb2Nlc3NTdHlsZTogW10sXG4gICAgICBvblByb2Nlc3NTaGVldDogW10sXG4gICAgICBvbkNoYW5nZVZhbHVlOiBbXSxcbiAgICAgIG9uVXBkYXRlOiBbXVxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBQbHVnaW5zUmVnaXN0cnk7XG59KCk7XG5cbi8qKlxuICogU2hlZXRzIHJlZ2lzdHJ5IHRvIGFjY2VzcyB0aGVtIGFsbCBhdCBvbmUgcGxhY2UuXG4gKi9cbnZhciBTaGVldHNSZWdpc3RyeSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNoZWV0c1JlZ2lzdHJ5KCkge1xuICAgIHRoaXMucmVnaXN0cnkgPSBbXTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTaGVldHNSZWdpc3RyeS5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgU3R5bGUgU2hlZXQuXG4gICAqL1xuICBfcHJvdG8uYWRkID0gZnVuY3Rpb24gYWRkKHNoZWV0KSB7XG4gICAgdmFyIHJlZ2lzdHJ5ID0gdGhpcy5yZWdpc3RyeTtcbiAgICB2YXIgaW5kZXggPSBzaGVldC5vcHRpb25zLmluZGV4O1xuICAgIGlmIChyZWdpc3RyeS5pbmRleE9mKHNoZWV0KSAhPT0gLTEpIHJldHVybjtcblxuICAgIGlmIChyZWdpc3RyeS5sZW5ndGggPT09IDAgfHwgaW5kZXggPj0gdGhpcy5pbmRleCkge1xuICAgICAgcmVnaXN0cnkucHVzaChzaGVldCk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBGaW5kIGEgcG9zaXRpb24uXG5cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVnaXN0cnkubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWdpc3RyeVtpXS5vcHRpb25zLmluZGV4ID4gaW5kZXgpIHtcbiAgICAgICAgcmVnaXN0cnkuc3BsaWNlKGksIDAsIHNoZWV0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVzZXQgdGhlIHJlZ2lzdHJ5LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZXNldCA9IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIHRoaXMucmVnaXN0cnkgPSBbXTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIGEgU3R5bGUgU2hlZXQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShzaGVldCkge1xuICAgIHZhciBpbmRleCA9IHRoaXMucmVnaXN0cnkuaW5kZXhPZihzaGVldCk7XG4gICAgdGhpcy5yZWdpc3RyeS5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0IGFsbCBhdHRhY2hlZCBzaGVldHMgdG8gYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKF90ZW1wKSB7XG4gICAgdmFyIF9yZWYgPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCxcbiAgICAgICAgYXR0YWNoZWQgPSBfcmVmLmF0dGFjaGVkLFxuICAgICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiYXR0YWNoZWRcIl0pO1xuXG4gICAgdmFyIGNzcyA9ICcnO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc2hlZXQgPSB0aGlzLnJlZ2lzdHJ5W2ldO1xuXG4gICAgICBpZiAoYXR0YWNoZWQgIT0gbnVsbCAmJiBzaGVldC5hdHRhY2hlZCAhPT0gYXR0YWNoZWQpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjc3MpIGNzcyArPSAnXFxuJztcbiAgICAgIGNzcyArPSBzaGVldC50b1N0cmluZyhvcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3NzO1xuICB9O1xuXG4gIF9jcmVhdGVDbGFzcyhTaGVldHNSZWdpc3RyeSwgW3tcbiAgICBrZXk6IFwiaW5kZXhcIixcblxuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgaGlnaGVzdCBpbmRleCBudW1iZXIuXG4gICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZWdpc3RyeS5sZW5ndGggPT09IDAgPyAwIDogdGhpcy5yZWdpc3RyeVt0aGlzLnJlZ2lzdHJ5Lmxlbmd0aCAtIDFdLm9wdGlvbnMuaW5kZXg7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNoZWV0c1JlZ2lzdHJ5O1xufSgpO1xuXG4vKipcbiAqIFRoaXMgaXMgYSBnbG9iYWwgc2hlZXRzIHJlZ2lzdHJ5LiBPbmx5IERvbVJlbmRlcmVyIHdpbGwgYWRkIHNoZWV0cyB0byBpdC5cbiAqIE9uIHRoZSBzZXJ2ZXIgb25lIHNob3VsZCB1c2UgYW4gb3duIFNoZWV0c1JlZ2lzdHJ5IGluc3RhbmNlIGFuZCBhZGQgdGhlXG4gKiBzaGVldHMgdG8gaXQsIGJlY2F1c2UgeW91IG5lZWQgdG8gbWFrZSBzdXJlIHRvIGNyZWF0ZSBhIG5ldyByZWdpc3RyeSBmb3JcbiAqIGVhY2ggcmVxdWVzdCBpbiBvcmRlciB0byBub3QgbGVhayBzaGVldHMgYWNyb3NzIHJlcXVlc3RzLlxuICovXG5cbnZhciBzaGVldHMgPSBuZXcgU2hlZXRzUmVnaXN0cnkoKTtcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsVGhpcyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aCA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZiA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbnZhciBucyA9ICcyZjFhY2M2YzNhNjA2YjA4MmU1ZWVmNWU1NDQxNGZmYic7XG5pZiAoZ2xvYmFsVGhpc1tuc10gPT0gbnVsbCkgZ2xvYmFsVGhpc1tuc10gPSAwOyAvLyBCdW5kbGUgbWF5IGNvbnRhaW4gbXVsdGlwbGUgSlNTIHZlcnNpb25zIGF0IHRoZSBzYW1lIHRpbWUuIEluIG9yZGVyIHRvIGlkZW50aWZ5XG4vLyB0aGUgY3VycmVudCB2ZXJzaW9uIHdpdGgganVzdCBvbmUgc2hvcnQgbnVtYmVyIGFuZCB1c2UgaXQgZm9yIGNsYXNzZXMgZ2VuZXJhdGlvblxuLy8gd2UgdXNlIGEgY291bnRlci4gQWxzbyBpdCBpcyBtb3JlIGFjY3VyYXRlLCBiZWNhdXNlIHVzZXIgY2FuIG1hbnVhbGx5IHJlZXZhbHVhdGVcbi8vIHRoZSBtb2R1bGUuXG5cbnZhciBtb2R1bGVJZCA9IGdsb2JhbFRoaXNbbnNdKys7XG5cbnZhciBtYXhSdWxlcyA9IDFlMTA7XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoIGdlbmVyYXRlcyB1bmlxdWUgY2xhc3MgbmFtZXMgYmFzZWQgb24gY291bnRlcnMuXG4gKiBXaGVuIG5ldyBnZW5lcmF0b3IgZnVuY3Rpb24gaXMgY3JlYXRlZCwgcnVsZSBjb3VudGVyIGlzIHJlc2V0ZWQuXG4gKiBXZSBuZWVkIHRvIHJlc2V0IHRoZSBydWxlIGNvdW50ZXIgZm9yIFNTUiBmb3IgZWFjaCByZXF1ZXN0LlxuICovXG52YXIgY3JlYXRlR2VuZXJhdGVJZCA9IGZ1bmN0aW9uIGNyZWF0ZUdlbmVyYXRlSWQob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIHJ1bGVDb3VudGVyID0gMDtcbiAgcmV0dXJuIGZ1bmN0aW9uIChydWxlLCBzaGVldCkge1xuICAgIHJ1bGVDb3VudGVyICs9IDE7XG5cbiAgICBpZiAocnVsZUNvdW50ZXIgPiBtYXhSdWxlcykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBZb3UgbWlnaHQgaGF2ZSBhIG1lbW9yeSBsZWFrLiBSdWxlIGNvdW50ZXIgaXMgYXQgXCIgKyBydWxlQ291bnRlciArIFwiLlwiKSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICB2YXIganNzSWQgPSAnJztcbiAgICB2YXIgcHJlZml4ID0gJyc7XG5cbiAgICBpZiAoc2hlZXQpIHtcbiAgICAgIGlmIChzaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeCkge1xuICAgICAgICBwcmVmaXggPSBzaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeDtcbiAgICAgIH1cblxuICAgICAgaWYgKHNoZWV0Lm9wdGlvbnMuanNzLmlkICE9IG51bGwpIHtcbiAgICAgICAganNzSWQgPSBTdHJpbmcoc2hlZXQub3B0aW9ucy5qc3MuaWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLm1pbmlmeSkge1xuICAgICAgLy8gVXNpbmcgXCJjXCIgYmVjYXVzZSBhIG51bWJlciBjYW4ndCBiZSB0aGUgZmlyc3QgY2hhciBpbiBhIGNsYXNzIG5hbWUuXG4gICAgICByZXR1cm4gXCJcIiArIChwcmVmaXggfHwgJ2MnKSArIG1vZHVsZUlkICsganNzSWQgKyBydWxlQ291bnRlcjtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJlZml4ICsgcnVsZS5rZXkgKyBcIi1cIiArIG1vZHVsZUlkICsgKGpzc0lkID8gXCItXCIgKyBqc3NJZCA6ICcnKSArIFwiLVwiICsgcnVsZUNvdW50ZXI7XG4gIH07XG59O1xuXG4vKipcbiAqIENhY2hlIHRoZSB2YWx1ZSBmcm9tIHRoZSBmaXJzdCB0aW1lIGEgZnVuY3Rpb24gaXMgY2FsbGVkLlxuICovXG52YXIgbWVtb2l6ZSA9IGZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIHZhbHVlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdmFsdWUpIHZhbHVlID0gZm4oKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG59O1xuLyoqXG4gKiBHZXQgYSBzdHlsZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFByb3BlcnR5VmFsdWUoY3NzUnVsZSwgcHJvcCkge1xuICB0cnkge1xuICAgIC8vIFN1cHBvcnQgQ1NTVE9NLlxuICAgIGlmIChjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwKSB7XG4gICAgICByZXR1cm4gY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcC5nZXQocHJvcCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNzc1J1bGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShwcm9wKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gSUUgbWF5IHRocm93IGlmIHByb3BlcnR5IGlzIHVua25vd24uXG4gICAgcmV0dXJuICcnO1xuICB9XG59XG4vKipcbiAqIFNldCBhIHN0eWxlIHByb3BlcnR5LlxuICovXG5cblxuZnVuY3Rpb24gc2V0UHJvcGVydHkoY3NzUnVsZSwgcHJvcCwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICB2YXIgY3NzVmFsdWUgPSB2YWx1ZTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgY3NzVmFsdWUgPSB0b0Nzc1ZhbHVlKHZhbHVlLCB0cnVlKTtcblxuICAgICAgaWYgKHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdID09PSAnIWltcG9ydGFudCcpIHtcbiAgICAgICAgY3NzUnVsZS5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wLCBjc3NWYWx1ZSwgJ2ltcG9ydGFudCcpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IC8vIFN1cHBvcnQgQ1NTVE9NLlxuXG5cbiAgICBpZiAoY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcCkge1xuICAgICAgY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcC5zZXQocHJvcCwgY3NzVmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjc3NSdWxlLnN0eWxlLnNldFByb3BlcnR5KHByb3AsIGNzc1ZhbHVlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIElFIG1heSB0aHJvdyBpZiBwcm9wZXJ0eSBpcyB1bmtub3duLlxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuLyoqXG4gKiBSZW1vdmUgYSBzdHlsZSBwcm9wZXJ0eS5cbiAqL1xuXG5cbmZ1bmN0aW9uIHJlbW92ZVByb3BlcnR5KGNzc1J1bGUsIHByb3ApIHtcbiAgdHJ5IHtcbiAgICAvLyBTdXBwb3J0IENTU1RPTS5cbiAgICBpZiAoY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcCkge1xuICAgICAgY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcC5kZWxldGUocHJvcCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNzc1J1bGUuc3R5bGUucmVtb3ZlUHJvcGVydHkocHJvcCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIERPTUV4Y2VwdGlvbiBcXFwiXCIgKyBlcnIubWVzc2FnZSArIFwiXFxcIiB3YXMgdGhyb3duLiBUcmllZCB0byByZW1vdmUgcHJvcGVydHkgXFxcIlwiICsgcHJvcCArIFwiXFxcIi5cIikgOiB2b2lkIDA7XG4gIH1cbn1cbi8qKlxuICogU2V0IHRoZSBzZWxlY3Rvci5cbiAqL1xuXG5cbmZ1bmN0aW9uIHNldFNlbGVjdG9yKGNzc1J1bGUsIHNlbGVjdG9yVGV4dCkge1xuICBjc3NSdWxlLnNlbGVjdG9yVGV4dCA9IHNlbGVjdG9yVGV4dDsgLy8gUmV0dXJuIGZhbHNlIGlmIHNldHRlciB3YXMgbm90IHN1Y2Nlc3NmdWwuXG4gIC8vIEN1cnJlbnRseSB3b3JrcyBpbiBjaHJvbWUgb25seS5cblxuICByZXR1cm4gY3NzUnVsZS5zZWxlY3RvclRleHQgPT09IHNlbGVjdG9yVGV4dDtcbn1cbi8qKlxuICogR2V0cyB0aGUgYGhlYWRgIGVsZW1lbnQgdXBvbiB0aGUgZmlyc3QgY2FsbCBhbmQgY2FjaGVzIGl0LlxuICogV2UgYXNzdW1lIGl0IGNhbid0IGJlIG51bGwuXG4gKi9cblxuXG52YXIgZ2V0SGVhZCA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaGVhZCcpO1xufSk7XG4vKipcbiAqIEZpbmQgYXR0YWNoZWQgc2hlZXQgd2l0aCBhbiBpbmRleCBoaWdoZXIgdGhhbiB0aGUgcGFzc2VkIG9uZS5cbiAqL1xuXG5mdW5jdGlvbiBmaW5kSGlnaGVyU2hlZXQocmVnaXN0cnksIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWdpc3RyeS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzaGVldCA9IHJlZ2lzdHJ5W2ldO1xuXG4gICAgaWYgKHNoZWV0LmF0dGFjaGVkICYmIHNoZWV0Lm9wdGlvbnMuaW5kZXggPiBvcHRpb25zLmluZGV4ICYmIHNoZWV0Lm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgPT09IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQpIHtcbiAgICAgIHJldHVybiBzaGVldDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogRmluZCBhdHRhY2hlZCBzaGVldCB3aXRoIHRoZSBoaWdoZXN0IGluZGV4LlxuICovXG5cblxuZnVuY3Rpb24gZmluZEhpZ2hlc3RTaGVldChyZWdpc3RyeSwgb3B0aW9ucykge1xuICBmb3IgKHZhciBpID0gcmVnaXN0cnkubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgc2hlZXQgPSByZWdpc3RyeVtpXTtcblxuICAgIGlmIChzaGVldC5hdHRhY2hlZCAmJiBzaGVldC5vcHRpb25zLmluc2VydGlvblBvaW50ID09PSBvcHRpb25zLmluc2VydGlvblBvaW50KSB7XG4gICAgICByZXR1cm4gc2hlZXQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIEZpbmQgYSBjb21tZW50IHdpdGggXCJqc3NcIiBpbnNpZGUuXG4gKi9cblxuXG5mdW5jdGlvbiBmaW5kQ29tbWVudE5vZGUodGV4dCkge1xuICB2YXIgaGVhZCA9IGdldEhlYWQoKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGhlYWQuY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBub2RlID0gaGVhZC5jaGlsZE5vZGVzW2ldO1xuXG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDggJiYgbm9kZS5ub2RlVmFsdWUudHJpbSgpID09PSB0ZXh0KSB7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBGaW5kIGEgbm9kZSBiZWZvcmUgd2hpY2ggd2UgY2FuIGluc2VydCB0aGUgc2hlZXQuXG4gKi9cbmZ1bmN0aW9uIGZpbmRQcmV2Tm9kZShvcHRpb25zKSB7XG4gIHZhciByZWdpc3RyeSA9IHNoZWV0cy5yZWdpc3RyeTtcblxuICBpZiAocmVnaXN0cnkubGVuZ3RoID4gMCkge1xuICAgIC8vIFRyeSB0byBpbnNlcnQgYmVmb3JlIHRoZSBuZXh0IGhpZ2hlciBzaGVldC5cbiAgICB2YXIgc2hlZXQgPSBmaW5kSGlnaGVyU2hlZXQocmVnaXN0cnksIG9wdGlvbnMpO1xuXG4gICAgaWYgKHNoZWV0ICYmIHNoZWV0LnJlbmRlcmVyKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXJlbnQ6IHNoZWV0LnJlbmRlcmVyLmVsZW1lbnQucGFyZW50Tm9kZSxcbiAgICAgICAgbm9kZTogc2hlZXQucmVuZGVyZXIuZWxlbWVudFxuICAgICAgfTtcbiAgICB9IC8vIE90aGVyd2lzZSBpbnNlcnQgYWZ0ZXIgdGhlIGxhc3QgYXR0YWNoZWQuXG5cblxuICAgIHNoZWV0ID0gZmluZEhpZ2hlc3RTaGVldChyZWdpc3RyeSwgb3B0aW9ucyk7XG5cbiAgICBpZiAoc2hlZXQgJiYgc2hlZXQucmVuZGVyZXIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhcmVudDogc2hlZXQucmVuZGVyZXIuZWxlbWVudC5wYXJlbnROb2RlLFxuICAgICAgICBub2RlOiBzaGVldC5yZW5kZXJlci5lbGVtZW50Lm5leHRTaWJsaW5nXG4gICAgICB9O1xuICAgIH1cbiAgfSAvLyBUcnkgdG8gZmluZCBhIGNvbW1lbnQgcGxhY2Vob2xkZXIgaWYgcmVnaXN0cnkgaXMgZW1wdHkuXG5cblxuICB2YXIgaW5zZXJ0aW9uUG9pbnQgPSBvcHRpb25zLmluc2VydGlvblBvaW50O1xuXG4gIGlmIChpbnNlcnRpb25Qb2ludCAmJiB0eXBlb2YgaW5zZXJ0aW9uUG9pbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIGNvbW1lbnQgPSBmaW5kQ29tbWVudE5vZGUoaW5zZXJ0aW9uUG9pbnQpO1xuXG4gICAgaWYgKGNvbW1lbnQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhcmVudDogY29tbWVudC5wYXJlbnROb2RlLFxuICAgICAgICBub2RlOiBjb21tZW50Lm5leHRTaWJsaW5nXG4gICAgICB9O1xuICAgIH0gLy8gSWYgdXNlciBzcGVjaWZpZXMgYW4gaW5zZXJ0aW9uIHBvaW50IGFuZCBpdCBjYW4ndCBiZSBmb3VuZCBpbiB0aGUgZG9jdW1lbnQgLVxuICAgIC8vIGJhZCBzcGVjaWZpY2l0eSBpc3N1ZXMgbWF5IGFwcGVhci5cblxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBJbnNlcnRpb24gcG9pbnQgXFxcIlwiICsgaW5zZXJ0aW9uUG9pbnQgKyBcIlxcXCIgbm90IGZvdW5kLlwiKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbi8qKlxuICogSW5zZXJ0IHN0eWxlIGVsZW1lbnQgaW50byB0aGUgRE9NLlxuICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGUoc3R5bGUsIG9wdGlvbnMpIHtcbiAgdmFyIGluc2VydGlvblBvaW50ID0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludDtcbiAgdmFyIG5leHROb2RlID0gZmluZFByZXZOb2RlKG9wdGlvbnMpO1xuXG4gIGlmIChuZXh0Tm9kZSAhPT0gZmFsc2UgJiYgbmV4dE5vZGUucGFyZW50KSB7XG4gICAgbmV4dE5vZGUucGFyZW50Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dE5vZGUubm9kZSk7XG4gICAgcmV0dXJuO1xuICB9IC8vIFdvcmtzIHdpdGggaWZyYW1lcyBhbmQgYW55IG5vZGUgdHlwZXMuXG5cblxuICBpZiAoaW5zZXJ0aW9uUG9pbnQgJiYgdHlwZW9mIGluc2VydGlvblBvaW50Lm5vZGVUeXBlID09PSAnbnVtYmVyJykge1xuICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQxMzI4NzI4L2ZvcmNlLWNhc3RpbmctaW4tZmxvd1xuICAgIHZhciBpbnNlcnRpb25Qb2ludEVsZW1lbnQgPSBpbnNlcnRpb25Qb2ludDtcbiAgICB2YXIgcGFyZW50Tm9kZSA9IGluc2VydGlvblBvaW50RWxlbWVudC5wYXJlbnROb2RlO1xuICAgIGlmIChwYXJlbnROb2RlKSBwYXJlbnROb2RlLmluc2VydEJlZm9yZShzdHlsZSwgaW5zZXJ0aW9uUG9pbnRFbGVtZW50Lm5leHRTaWJsaW5nKTtlbHNlIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdbSlNTXSBJbnNlcnRpb24gcG9pbnQgaXMgbm90IGluIHRoZSBET00uJykgOiB2b2lkIDA7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZ2V0SGVhZCgpLmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbi8qKlxuICogUmVhZCBqc3Mgbm9uY2Ugc2V0dGluZyBmcm9tIHRoZSBwYWdlIGlmIHRoZSB1c2VyIGhhcyBzZXQgaXQuXG4gKi9cblxuXG52YXIgZ2V0Tm9uY2UgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcbiAgdmFyIG5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtZXRhW3Byb3BlcnR5PVwiY3NwLW5vbmNlXCJdJyk7XG4gIHJldHVybiBub2RlID8gbm9kZS5nZXRBdHRyaWJ1dGUoJ2NvbnRlbnQnKSA6IG51bGw7XG59KTtcblxudmFyIF9pbnNlcnRSdWxlID0gZnVuY3Rpb24gaW5zZXJ0UnVsZShjb250YWluZXIsIHJ1bGUsIGluZGV4KSB7XG4gIHZhciBtYXhJbmRleCA9IGNvbnRhaW5lci5jc3NSdWxlcy5sZW5ndGg7IC8vIEluIGNhc2UgcHJldmlvdXMgaW5zZXJ0aW9uIGZhaWxzLCBwYXNzZWQgaW5kZXggbWlnaHQgYmUgd3JvbmdcblxuICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCB8fCBpbmRleCA+IG1heEluZGV4KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgaW5kZXggPSBtYXhJbmRleDtcbiAgfVxuXG4gIHRyeSB7XG4gICAgaWYgKCdpbnNlcnRSdWxlJyBpbiBjb250YWluZXIpIHtcbiAgICAgIHZhciBjID0gY29udGFpbmVyO1xuICAgICAgYy5pbnNlcnRSdWxlKHJ1bGUsIGluZGV4KTtcbiAgICB9IC8vIEtleWZyYW1lcyBydWxlLlxuICAgIGVsc2UgaWYgKCdhcHBlbmRSdWxlJyBpbiBjb250YWluZXIpIHtcbiAgICAgICAgdmFyIF9jID0gY29udGFpbmVyO1xuXG4gICAgICAgIF9jLmFwcGVuZFJ1bGUocnVsZSk7XG4gICAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gXCIgKyBlcnIubWVzc2FnZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRhaW5lci5jc3NSdWxlc1tpbmRleF07XG59O1xuXG52YXIgY3JlYXRlU3R5bGUgPSBmdW5jdGlvbiBjcmVhdGVTdHlsZSgpIHtcbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTsgLy8gV2l0aG91dCBpdCwgSUUgd2lsbCBoYXZlIGEgYnJva2VuIHNvdXJjZSBvcmRlciBzcGVjaWZpY2l0eSBpZiB3ZVxuICAvLyBpbnNlcnQgcnVsZXMgYWZ0ZXIgd2UgaW5zZXJ0IHRoZSBzdHlsZSB0YWcuXG4gIC8vIEl0IHNlZW1zIHRvIGtpY2stb2ZmIHRoZSBzb3VyY2Ugb3JkZXIgc3BlY2lmaWNpdHkgYWxnb3JpdGhtLlxuXG4gIGVsLnRleHRDb250ZW50ID0gJ1xcbic7XG4gIHJldHVybiBlbDtcbn07XG5cbnZhciBEb21SZW5kZXJlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8vIEhUTUxTdHlsZUVsZW1lbnQgbmVlZHMgZml4aW5nIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8yNjk2XG4gIGZ1bmN0aW9uIERvbVJlbmRlcmVyKHNoZWV0KSB7XG4gICAgdGhpcy5nZXRQcm9wZXJ0eVZhbHVlID0gZ2V0UHJvcGVydHlWYWx1ZTtcbiAgICB0aGlzLnNldFByb3BlcnR5ID0gc2V0UHJvcGVydHk7XG4gICAgdGhpcy5yZW1vdmVQcm9wZXJ0eSA9IHJlbW92ZVByb3BlcnR5O1xuICAgIHRoaXMuc2V0U2VsZWN0b3IgPSBzZXRTZWxlY3RvcjtcbiAgICB0aGlzLmVsZW1lbnQgPSB2b2lkIDA7XG4gICAgdGhpcy5zaGVldCA9IHZvaWQgMDtcbiAgICB0aGlzLmhhc0luc2VydGVkUnVsZXMgPSBmYWxzZTtcbiAgICAvLyBUaGVyZSBpcyBubyBzaGVldCB3aGVuIHRoZSByZW5kZXJlciBpcyB1c2VkIGZyb20gYSBzdGFuZGFsb25lIFN0eWxlUnVsZS5cbiAgICBpZiAoc2hlZXQpIHNoZWV0cy5hZGQoc2hlZXQpO1xuICAgIHRoaXMuc2hlZXQgPSBzaGVldDtcblxuICAgIHZhciBfcmVmID0gdGhpcy5zaGVldCA/IHRoaXMuc2hlZXQub3B0aW9ucyA6IHt9LFxuICAgICAgICBtZWRpYSA9IF9yZWYubWVkaWEsXG4gICAgICAgIG1ldGEgPSBfcmVmLm1ldGEsXG4gICAgICAgIGVsZW1lbnQgPSBfcmVmLmVsZW1lbnQ7XG5cbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50IHx8IGNyZWF0ZVN0eWxlKCk7XG4gICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1qc3MnLCAnJyk7XG4gICAgaWYgKG1lZGlhKSB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgICBpZiAobWV0YSkgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1tZXRhJywgbWV0YSk7XG4gICAgdmFyIG5vbmNlID0gZ2V0Tm9uY2UoKTtcbiAgICBpZiAobm9uY2UpIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ25vbmNlJywgbm9uY2UpO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgc3R5bGUgZWxlbWVudCBpbnRvIHJlbmRlciB0cmVlLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBEb21SZW5kZXJlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmF0dGFjaCA9IGZ1bmN0aW9uIGF0dGFjaCgpIHtcbiAgICAvLyBJbiB0aGUgY2FzZSB0aGUgZWxlbWVudCBub2RlIGlzIGV4dGVybmFsIGFuZCBpdCBpcyBhbHJlYWR5IGluIHRoZSBET00uXG4gICAgaWYgKHRoaXMuZWxlbWVudC5wYXJlbnROb2RlIHx8ICF0aGlzLnNoZWV0KSByZXR1cm47XG4gICAgaW5zZXJ0U3R5bGUodGhpcy5lbGVtZW50LCB0aGlzLnNoZWV0Lm9wdGlvbnMpOyAvLyBXaGVuIHJ1bGVzIGFyZSBpbnNlcnRlZCB1c2luZyBgaW5zZXJ0UnVsZWAgQVBJLCBhZnRlciBgc2hlZXQuZGV0YWNoKCkuYXR0YWNoKClgXG4gICAgLy8gbW9zdCBicm93c2VycyBjcmVhdGUgYSBuZXcgQ1NTU3R5bGVTaGVldCwgZXhjZXB0IG9mIGFsbCBJRXMuXG5cbiAgICB2YXIgZGVwbG95ZWQgPSBCb29sZWFuKHRoaXMuc2hlZXQgJiYgdGhpcy5zaGVldC5kZXBsb3llZCk7XG5cbiAgICBpZiAodGhpcy5oYXNJbnNlcnRlZFJ1bGVzICYmIGRlcGxveWVkKSB7XG4gICAgICB0aGlzLmhhc0luc2VydGVkUnVsZXMgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVwbG95KCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgc3R5bGUgZWxlbWVudCBmcm9tIHJlbmRlciB0cmVlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZXRhY2ggPSBmdW5jdGlvbiBkZXRhY2goKSB7XG4gICAgdmFyIHBhcmVudE5vZGUgPSB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICBpZiAocGFyZW50Tm9kZSkgcGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpO1xuICB9XG4gIC8qKlxuICAgKiBJbmplY3QgQ1NTIHN0cmluZyBpbnRvIGVsZW1lbnQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRlcGxveSA9IGZ1bmN0aW9uIGRlcGxveSgpIHtcbiAgICB2YXIgc2hlZXQgPSB0aGlzLnNoZWV0O1xuICAgIGlmICghc2hlZXQpIHJldHVybjtcblxuICAgIGlmIChzaGVldC5vcHRpb25zLmxpbmspIHtcbiAgICAgIHRoaXMuaW5zZXJ0UnVsZXMoc2hlZXQucnVsZXMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZWxlbWVudC50ZXh0Q29udGVudCA9IFwiXFxuXCIgKyBzaGVldC50b1N0cmluZygpICsgXCJcXG5cIjtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IFJ1bGVMaXN0IGludG8gYW4gZWxlbWVudC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5zZXJ0UnVsZXMgPSBmdW5jdGlvbiBpbnNlcnRSdWxlcyhydWxlcywgbmF0aXZlUGFyZW50KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBydWxlcy5pbmRleC5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5pbnNlcnRSdWxlKHJ1bGVzLmluZGV4W2ldLCBpLCBuYXRpdmVQYXJlbnQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IGEgcnVsZSBpbnRvIGVsZW1lbnQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluc2VydFJ1bGUgPSBmdW5jdGlvbiBpbnNlcnRSdWxlKHJ1bGUsIGluZGV4LCBuYXRpdmVQYXJlbnQpIHtcbiAgICBpZiAobmF0aXZlUGFyZW50ID09PSB2b2lkIDApIHtcbiAgICAgIG5hdGl2ZVBhcmVudCA9IHRoaXMuZWxlbWVudC5zaGVldDtcbiAgICB9XG5cbiAgICBpZiAocnVsZS5ydWxlcykge1xuICAgICAgdmFyIHBhcmVudCA9IHJ1bGU7XG4gICAgICB2YXIgbGF0ZXN0TmF0aXZlUGFyZW50ID0gbmF0aXZlUGFyZW50O1xuXG4gICAgICBpZiAocnVsZS50eXBlID09PSAnY29uZGl0aW9uYWwnIHx8IHJ1bGUudHlwZSA9PT0gJ2tleWZyYW1lcycpIHtcbiAgICAgICAgLy8gV2UgbmVlZCB0byByZW5kZXIgdGhlIGNvbnRhaW5lciB3aXRob3V0IGNoaWxkcmVuIGZpcnN0LlxuICAgICAgICBsYXRlc3ROYXRpdmVQYXJlbnQgPSBfaW5zZXJ0UnVsZShuYXRpdmVQYXJlbnQsIHBhcmVudC50b1N0cmluZyh7XG4gICAgICAgICAgY2hpbGRyZW46IGZhbHNlXG4gICAgICAgIH0pLCBpbmRleCk7XG5cbiAgICAgICAgaWYgKGxhdGVzdE5hdGl2ZVBhcmVudCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5pbnNlcnRSdWxlcyhwYXJlbnQucnVsZXMsIGxhdGVzdE5hdGl2ZVBhcmVudCk7XG4gICAgICByZXR1cm4gbGF0ZXN0TmF0aXZlUGFyZW50O1xuICAgIH0gLy8gSUUga2VlcHMgdGhlIENTU1N0eWxlU2hlZXQgYWZ0ZXIgc3R5bGUgbm9kZSBoYXMgYmVlbiByZWF0dGFjaGVkLFxuICAgIC8vIHNvIHdlIG5lZWQgdG8gY2hlY2sgaWYgdGhlIGByZW5kZXJhYmxlYCByZWZlcmVuY2UgdGhlIHJpZ2h0IHN0eWxlIHNoZWV0IGFuZCBub3RcbiAgICAvLyByZXJlbmRlciB0aG9zZSBydWxlcy5cblxuXG4gICAgaWYgKHJ1bGUucmVuZGVyYWJsZSAmJiBydWxlLnJlbmRlcmFibGUucGFyZW50U3R5bGVTaGVldCA9PT0gdGhpcy5lbGVtZW50LnNoZWV0KSB7XG4gICAgICByZXR1cm4gcnVsZS5yZW5kZXJhYmxlO1xuICAgIH1cblxuICAgIHZhciBydWxlU3RyID0gcnVsZS50b1N0cmluZygpO1xuICAgIGlmICghcnVsZVN0cikgcmV0dXJuIGZhbHNlO1xuXG4gICAgdmFyIG5hdGl2ZVJ1bGUgPSBfaW5zZXJ0UnVsZShuYXRpdmVQYXJlbnQsIHJ1bGVTdHIsIGluZGV4KTtcblxuICAgIGlmIChuYXRpdmVSdWxlID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuaGFzSW5zZXJ0ZWRSdWxlcyA9IHRydWU7XG4gICAgcnVsZS5yZW5kZXJhYmxlID0gbmF0aXZlUnVsZTtcbiAgICByZXR1cm4gbmF0aXZlUnVsZTtcbiAgfVxuICAvKipcbiAgICogRGVsZXRlIGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGVsZXRlUnVsZSA9IGZ1bmN0aW9uIGRlbGV0ZVJ1bGUoY3NzUnVsZSkge1xuICAgIHZhciBzaGVldCA9IHRoaXMuZWxlbWVudC5zaGVldDtcbiAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4T2YoY3NzUnVsZSk7XG4gICAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICAgIHNoZWV0LmRlbGV0ZVJ1bGUoaW5kZXgpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgaW5kZXggb2YgYSBDU1MgUnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YoY3NzUnVsZSkge1xuICAgIHZhciBjc3NSdWxlcyA9IHRoaXMuZWxlbWVudC5zaGVldC5jc3NSdWxlcztcblxuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBjc3NSdWxlcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGlmIChjc3NSdWxlID09PSBjc3NSdWxlc1tpbmRleF0pIHJldHVybiBpbmRleDtcbiAgICB9XG5cbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGEgbmV3IENTUyBydWxlIGFuZCByZXBsYWNlIHRoZSBleGlzdGluZyBvbmUuXG4gICAqXG4gICAqIE9ubHkgdXNlZCBmb3Igc29tZSBvbGQgYnJvd3NlcnMgYmVjYXVzZSB0aGV5IGNhbid0IHNldCBhIHNlbGVjdG9yLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZXBsYWNlUnVsZSA9IGZ1bmN0aW9uIHJlcGxhY2VSdWxlKGNzc1J1bGUsIHJ1bGUpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4T2YoY3NzUnVsZSk7XG4gICAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICAgIHRoaXMuZWxlbWVudC5zaGVldC5kZWxldGVSdWxlKGluZGV4KTtcbiAgICByZXR1cm4gdGhpcy5pbnNlcnRSdWxlKHJ1bGUsIGluZGV4KTtcbiAgfVxuICAvKipcbiAgICogR2V0IGFsbCBydWxlcyBlbGVtZW50cy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZ2V0UnVsZXMgPSBmdW5jdGlvbiBnZXRSdWxlcygpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LnNoZWV0LmNzc1J1bGVzO1xuICB9O1xuXG4gIHJldHVybiBEb21SZW5kZXJlcjtcbn0oKTtcblxudmFyIGluc3RhbmNlQ291bnRlciA9IDA7XG5cbnZhciBKc3MgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBKc3Mob3B0aW9ucykge1xuICAgIHRoaXMuaWQgPSBpbnN0YW5jZUNvdW50ZXIrKztcbiAgICB0aGlzLnZlcnNpb24gPSBcIjEwLjQuMFwiO1xuICAgIHRoaXMucGx1Z2lucyA9IG5ldyBQbHVnaW5zUmVnaXN0cnkoKTtcbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICBpZDoge1xuICAgICAgICBtaW5pZnk6IGZhbHNlXG4gICAgICB9LFxuICAgICAgY3JlYXRlR2VuZXJhdGVJZDogY3JlYXRlR2VuZXJhdGVJZCxcbiAgICAgIFJlbmRlcmVyOiBpc0luQnJvd3NlciA/IERvbVJlbmRlcmVyIDogbnVsbCxcbiAgICAgIHBsdWdpbnM6IFtdXG4gICAgfTtcbiAgICB0aGlzLmdlbmVyYXRlSWQgPSBjcmVhdGVHZW5lcmF0ZUlkKHtcbiAgICAgIG1pbmlmeTogZmFsc2VcbiAgICB9KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGx1Z2lucy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5wbHVnaW5zLnVzZShwbHVnaW5zW2ldLCB7XG4gICAgICAgIHF1ZXVlOiAnaW50ZXJuYWwnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLnNldHVwKG9wdGlvbnMpO1xuICB9XG4gIC8qKlxuICAgKiBQcmVwYXJlcyB2YXJpb3VzIG9wdGlvbnMsIGFwcGxpZXMgcGx1Z2lucy5cbiAgICogU2hvdWxkIG5vdCBiZSB1c2VkIHR3aWNlIG9uIHRoZSBzYW1lIGluc3RhbmNlLCBiZWNhdXNlIHRoZXJlIGlzIG5vIHBsdWdpbnNcbiAgICogZGVkdXBsaWNhdGlvbiBsb2dpYy5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gSnNzLnByb3RvdHlwZTtcblxuICBfcHJvdG8uc2V0dXAgPSBmdW5jdGlvbiBzZXR1cChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmNyZWF0ZUdlbmVyYXRlSWQpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkID0gb3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmlkKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuaWQgPSBfZXh0ZW5kcyh7fSwgdGhpcy5vcHRpb25zLmlkLCBvcHRpb25zLmlkKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkIHx8IG9wdGlvbnMuaWQpIHtcbiAgICAgIHRoaXMuZ2VuZXJhdGVJZCA9IHRoaXMub3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkKHRoaXMub3B0aW9ucy5pZCk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgIT0gbnVsbCkgdGhpcy5vcHRpb25zLmluc2VydGlvblBvaW50ID0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludDtcblxuICAgIGlmICgnUmVuZGVyZXInIGluIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5SZW5kZXJlciA9IG9wdGlvbnMuUmVuZGVyZXI7XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXNwcmVhZFxuXG5cbiAgICBpZiAob3B0aW9ucy5wbHVnaW5zKSB0aGlzLnVzZS5hcHBseSh0aGlzLCBvcHRpb25zLnBsdWdpbnMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBTdHlsZSBTaGVldC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlU3R5bGVTaGVldCA9IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlU2hlZXQoc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICAgIGluZGV4ID0gX29wdGlvbnMuaW5kZXg7XG5cbiAgICBpZiAodHlwZW9mIGluZGV4ICE9PSAnbnVtYmVyJykge1xuICAgICAgaW5kZXggPSBzaGVldHMuaW5kZXggPT09IDAgPyAwIDogc2hlZXRzLmluZGV4ICsgMTtcbiAgICB9XG5cbiAgICB2YXIgc2hlZXQgPSBuZXcgU3R5bGVTaGVldChzdHlsZXMsIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBqc3M6IHRoaXMsXG4gICAgICBnZW5lcmF0ZUlkOiBvcHRpb25zLmdlbmVyYXRlSWQgfHwgdGhpcy5nZW5lcmF0ZUlkLFxuICAgICAgaW5zZXJ0aW9uUG9pbnQ6IHRoaXMub3B0aW9ucy5pbnNlcnRpb25Qb2ludCxcbiAgICAgIFJlbmRlcmVyOiB0aGlzLm9wdGlvbnMuUmVuZGVyZXIsXG4gICAgICBpbmRleDogaW5kZXhcbiAgICB9KSk7XG4gICAgdGhpcy5wbHVnaW5zLm9uUHJvY2Vzc1NoZWV0KHNoZWV0KTtcbiAgICByZXR1cm4gc2hlZXQ7XG4gIH1cbiAgLyoqXG4gICAqIERldGFjaCB0aGUgU3R5bGUgU2hlZXQgYW5kIHJlbW92ZSBpdCBmcm9tIHRoZSByZWdpc3RyeS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtb3ZlU3R5bGVTaGVldCA9IGZ1bmN0aW9uIHJlbW92ZVN0eWxlU2hlZXQoc2hlZXQpIHtcbiAgICBzaGVldC5kZXRhY2goKTtcbiAgICBzaGVldHMucmVtb3ZlKHNoZWV0KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgcnVsZSB3aXRob3V0IGEgU3R5bGUgU2hlZXQuXG4gICAqIFtEZXByZWNhdGVkXSB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbi5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlUnVsZSA9IGZ1bmN0aW9uIGNyZWF0ZVJ1bGUkMShuYW1lLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIGlmIChzdHlsZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdHlsZSA9IHt9O1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICAvLyBFbmFibGUgcnVsZSB3aXRob3V0IG5hbWUgZm9yIGlubGluZSBzdHlsZXMuXG4gICAgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0Jykge1xuICAgICAgLy8gJEZsb3dJZ25vcmVcbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVJ1bGUodW5kZWZpbmVkLCBuYW1lLCBzdHlsZSk7XG4gICAgfSAvLyAkRmxvd0lnbm9yZVxuXG5cbiAgICB2YXIgcnVsZU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGpzczogdGhpcyxcbiAgICAgIFJlbmRlcmVyOiB0aGlzLm9wdGlvbnMuUmVuZGVyZXJcbiAgICB9KTtcblxuICAgIGlmICghcnVsZU9wdGlvbnMuZ2VuZXJhdGVJZCkgcnVsZU9wdGlvbnMuZ2VuZXJhdGVJZCA9IHRoaXMuZ2VuZXJhdGVJZDtcbiAgICBpZiAoIXJ1bGVPcHRpb25zLmNsYXNzZXMpIHJ1bGVPcHRpb25zLmNsYXNzZXMgPSB7fTtcbiAgICBpZiAoIXJ1bGVPcHRpb25zLmtleWZyYW1lcykgcnVsZU9wdGlvbnMua2V5ZnJhbWVzID0ge307XG5cbiAgICB2YXIgcnVsZSA9IGNyZWF0ZVJ1bGUobmFtZSwgc3R5bGUsIHJ1bGVPcHRpb25zKTtcblxuICAgIGlmIChydWxlKSB0aGlzLnBsdWdpbnMub25Qcm9jZXNzUnVsZShydWxlKTtcbiAgICByZXR1cm4gcnVsZTtcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgcGx1Z2luLiBQYXNzZWQgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIHdpdGggYSBydWxlIGluc3RhbmNlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51c2UgPSBmdW5jdGlvbiB1c2UoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBwbHVnaW5zID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgcGx1Z2luc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgICAgX3RoaXMucGx1Z2lucy51c2UocGx1Z2luKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICByZXR1cm4gSnNzO1xufSgpO1xuXG4vKipcbiAqIEV4dHJhY3RzIGEgc3R5bGVzIG9iamVjdCB3aXRoIG9ubHkgcHJvcHMgdGhhdCBjb250YWluIGZ1bmN0aW9uIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gZ2V0RHluYW1pY1N0eWxlcyhzdHlsZXMpIHtcbiAgdmFyIHRvID0gbnVsbDtcblxuICBmb3IgKHZhciBrZXkgaW4gc3R5bGVzKSB7XG4gICAgdmFyIHZhbHVlID0gc3R5bGVzW2tleV07XG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cbiAgICBpZiAodHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKCF0bykgdG8gPSB7fTtcbiAgICAgIHRvW2tleV0gPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgdmFyIGV4dHJhY3RlZCA9IGdldER5bmFtaWNTdHlsZXModmFsdWUpO1xuXG4gICAgICBpZiAoZXh0cmFjdGVkKSB7XG4gICAgICAgIGlmICghdG8pIHRvID0ge307XG4gICAgICAgIHRvW2tleV0gPSBleHRyYWN0ZWQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRvO1xufVxuXG4vKipcbiAqIFNoZWV0c01hbmFnZXIgaXMgbGlrZSBhIFdlYWtNYXAgd2hpY2ggaXMgZGVzaWduZWQgdG8gY291bnQgU3R5bGVTaGVldFxuICogaW5zdGFuY2VzIGFuZCBhdHRhY2gvZGV0YWNoIGF1dG9tYXRpY2FsbHkuXG4gKi9cbnZhciBTaGVldHNNYW5hZ2VyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2hlZXRzTWFuYWdlcigpIHtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5zaGVldHMgPSBuZXcgV2Vha01hcCgpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFNoZWV0c01hbmFnZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXQgPSBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gdGhpcy5zaGVldHMuZ2V0KGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnNoZWV0O1xuICB9O1xuXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQoa2V5LCBzaGVldCkge1xuICAgIGlmICh0aGlzLnNoZWV0cy5oYXMoa2V5KSkgcmV0dXJuO1xuICAgIHRoaXMubGVuZ3RoKys7XG4gICAgdGhpcy5zaGVldHMuc2V0KGtleSwge1xuICAgICAgc2hlZXQ6IHNoZWV0LFxuICAgICAgcmVmczogMFxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5tYW5hZ2UgPSBmdW5jdGlvbiBtYW5hZ2Uoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gdGhpcy5zaGVldHMuZ2V0KGtleSk7XG5cbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGlmIChlbnRyeS5yZWZzID09PSAwKSB7XG4gICAgICAgIGVudHJ5LnNoZWV0LmF0dGFjaCgpO1xuICAgICAgfVxuXG4gICAgICBlbnRyeS5yZWZzKys7XG4gICAgICByZXR1cm4gZW50cnkuc2hlZXQ7XG4gICAgfVxuXG4gICAgd2FybmluZyhmYWxzZSwgXCJbSlNTXSBTaGVldHNNYW5hZ2VyOiBjYW4ndCBmaW5kIHNoZWV0IHRvIG1hbmFnZVwiKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xuXG4gIF9wcm90by51bm1hbmFnZSA9IGZ1bmN0aW9uIHVubWFuYWdlKGtleSkge1xuICAgIHZhciBlbnRyeSA9IHRoaXMuc2hlZXRzLmdldChrZXkpO1xuXG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBpZiAoZW50cnkucmVmcyA+IDApIHtcbiAgICAgICAgZW50cnkucmVmcy0tO1xuICAgICAgICBpZiAoZW50cnkucmVmcyA9PT0gMCkgZW50cnkuc2hlZXQuZGV0YWNoKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsIFwiU2hlZXRzTWFuYWdlcjogY2FuJ3QgZmluZCBzaGVldCB0byB1bm1hbmFnZVwiKTtcbiAgICB9XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKFNoZWV0c01hbmFnZXIsIFt7XG4gICAga2V5OiBcInNpemVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmxlbmd0aDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2hlZXRzTWFuYWdlcjtcbn0oKTtcblxuLyoqXG4gKiBBIGJldHRlciBhYnN0cmFjdGlvbiBvdmVyIENTUy5cbiAqXG4gKiBAY29weXJpZ2h0IE9sZWcgSXNvbmVuIChTbG9ib2Rza29pKSAvIElzb25lbiAyMDE0LXByZXNlbnRcbiAqIEB3ZWJzaXRlIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzc1xuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuLyoqXG4gKiBFeHBvcnQgYSBjb25zdGFudCBpbmRpY2F0aW5nIGlmIHRoaXMgYnJvd3NlciBoYXMgQ1NTVE9NIHN1cHBvcnQuXG4gKiBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS93ZWIvdXBkYXRlcy8yMDE4LzAzL2Nzc29tXG4gKi9cbnZhciBoYXNDU1NUT01TdXBwb3J0ID0gdHlwZW9mIENTUyAhPT0gJ3VuZGVmaW5lZCcgJiYgQ1NTICYmICdudW1iZXInIGluIENTUztcbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBKc3MuXG4gKi9cblxudmFyIGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgSnNzKG9wdGlvbnMpO1xufTtcbi8qKlxuICogQSBnbG9iYWwgSnNzIGluc3RhbmNlLlxuICovXG5cbnZhciBpbmRleCA9IGNyZWF0ZSgpO1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbmV4cG9ydCB7IFJ1bGVMaXN0LCBTaGVldHNNYW5hZ2VyLCBTaGVldHNSZWdpc3RyeSwgY3JlYXRlLCBjcmVhdGVHZW5lcmF0ZUlkLCBjcmVhdGVSdWxlLCBnZXREeW5hbWljU3R5bGVzLCBoYXNDU1NUT01TdXBwb3J0LCBzaGVldHMsIHRvQ3NzVmFsdWUgfTtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHsgZ2V0RGlzcGxheU5hbWUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VDbGFzc2VzKCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBiYXNlQ2xhc3NlcyA9IG9wdGlvbnMuYmFzZUNsYXNzZXMsXG4gICAgICBuZXdDbGFzc2VzID0gb3B0aW9ucy5uZXdDbGFzc2VzLFxuICAgICAgQ29tcG9uZW50ID0gb3B0aW9ucy5Db21wb25lbnQ7XG5cbiAgaWYgKCFuZXdDbGFzc2VzKSB7XG4gICAgcmV0dXJuIGJhc2VDbGFzc2VzO1xuICB9XG5cbiAgdmFyIG5leHRDbGFzc2VzID0gX2V4dGVuZHMoe30sIGJhc2VDbGFzc2VzKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0eXBlb2YgbmV3Q2xhc3NlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFRoZSB2YWx1ZSBgXCIuY29uY2F0KG5ld0NsYXNzZXMsIFwiYCBcIikgKyBcInByb3ZpZGVkIHRvIHRoZSBjbGFzc2VzIHByb3Agb2YgXCIuY29uY2F0KGdldERpc3BsYXlOYW1lKENvbXBvbmVudCksIFwiIGlzIGluY29ycmVjdC5cIiksICdZb3UgbWlnaHQgd2FudCB0byB1c2UgdGhlIGNsYXNzTmFtZSBwcm9wIGluc3RlYWQuJ10uam9pbignXFxuJykpO1xuICAgICAgcmV0dXJuIGJhc2VDbGFzc2VzO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKG5ld0NsYXNzZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIWJhc2VDbGFzc2VzW2tleV0gJiYgbmV3Q2xhc3Nlc1trZXldKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFRoZSBrZXkgYFwiLmNvbmNhdChrZXksIFwiYCBcIikgKyBcInByb3ZpZGVkIHRvIHRoZSBjbGFzc2VzIHByb3AgaXMgbm90IGltcGxlbWVudGVkIGluIFwiLmNvbmNhdChnZXREaXNwbGF5TmFtZShDb21wb25lbnQpLCBcIi5cIiksIFwiWW91IGNhbiBvbmx5IG92ZXJyaWRlIG9uZSBvZiB0aGUgZm9sbG93aW5nOiBcIi5jb25jYXQoT2JqZWN0LmtleXMoYmFzZUNsYXNzZXMpLmpvaW4oJywnKSwgXCIuXCIpXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZXdDbGFzc2VzW2tleV0gJiYgdHlwZW9mIG5ld0NsYXNzZXNba2V5XSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbXCJNYXRlcmlhbC1VSTogVGhlIGtleSBgXCIuY29uY2F0KGtleSwgXCJgIFwiKSArIFwicHJvdmlkZWQgdG8gdGhlIGNsYXNzZXMgcHJvcCBpcyBub3QgdmFsaWQgZm9yIFwiLmNvbmNhdChnZXREaXNwbGF5TmFtZShDb21wb25lbnQpLCBcIi5cIiksIFwiWW91IG5lZWQgdG8gcHJvdmlkZSBhIG5vbiBlbXB0eSBzdHJpbmcgaW5zdGVhZCBvZjogXCIuY29uY2F0KG5ld0NsYXNzZXNba2V5XSwgXCIuXCIpXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG5ld0NsYXNzZXNba2V5XSkge1xuICAgICAgbmV4dENsYXNzZXNba2V5XSA9IFwiXCIuY29uY2F0KGJhc2VDbGFzc2VzW2tleV0sIFwiIFwiKS5jb25jYXQobmV3Q2xhc3Nlc1trZXldKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbmV4dENsYXNzZXM7XG59IiwiLy8gVXNlZCBodHRwczovL2dpdGh1Yi5jb20vdGhpbmtsb29wL211bHRpLWtleS1jYWNoZSBhcyBpbnNwaXJhdGlvblxudmFyIG11bHRpS2V5U3RvcmUgPSB7XG4gIHNldDogZnVuY3Rpb24gc2V0KGNhY2hlLCBrZXkxLCBrZXkyLCB2YWx1ZSkge1xuICAgIHZhciBzdWJDYWNoZSA9IGNhY2hlLmdldChrZXkxKTtcblxuICAgIGlmICghc3ViQ2FjaGUpIHtcbiAgICAgIHN1YkNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgY2FjaGUuc2V0KGtleTEsIHN1YkNhY2hlKTtcbiAgICB9XG5cbiAgICBzdWJDYWNoZS5zZXQoa2V5MiwgdmFsdWUpO1xuICB9LFxuICBnZXQ6IGZ1bmN0aW9uIGdldChjYWNoZSwga2V5MSwga2V5Mikge1xuICAgIHZhciBzdWJDYWNoZSA9IGNhY2hlLmdldChrZXkxKTtcbiAgICByZXR1cm4gc3ViQ2FjaGUgPyBzdWJDYWNoZS5nZXQoa2V5MikgOiB1bmRlZmluZWQ7XG4gIH0sXG4gIGRlbGV0ZTogZnVuY3Rpb24gX2RlbGV0ZShjYWNoZSwga2V5MSwga2V5Mikge1xuICAgIHZhciBzdWJDYWNoZSA9IGNhY2hlLmdldChrZXkxKTtcbiAgICBzdWJDYWNoZS5kZWxldGUoa2V5Mik7XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBtdWx0aUtleVN0b3JlOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG52YXIgVGhlbWVDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgVGhlbWVDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1RoZW1lQ29udGV4dCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRoZW1lQ29udGV4dDsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRoZW1lQ29udGV4dCBmcm9tICcuL1RoZW1lQ29udGV4dCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VUaGVtZSgpIHtcbiAgdmFyIHRoZW1lID0gUmVhY3QudXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRGVidWdWYWx1ZSh0aGVtZSk7XG4gIH1cblxuICByZXR1cm4gdGhlbWU7XG59IiwidmFyIGhhc1N5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmZvcjtcbmV4cG9ydCBkZWZhdWx0IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ211aS5uZXN0ZWQnKSA6ICdfX1RIRU1FX05FU1RFRF9fJzsiLCJpbXBvcnQgbmVzdGVkIGZyb20gJy4uL1RoZW1lUHJvdmlkZXIvbmVzdGVkJztcbi8qKlxuICogVGhpcyBpcyB0aGUgbGlzdCBvZiB0aGUgc3R5bGUgcnVsZSBuYW1lIHdlIHVzZSBhcyBkcm9wIGluIHJlcGxhY2VtZW50IGZvciB0aGUgYnVpbHQtaW5cbiAqIHBzZXVkbyBjbGFzc2VzICg6Y2hlY2tlZCwgOmRpc2FibGVkLCA6Zm9jdXNlZCwgZXRjLikuXG4gKlxuICogV2h5IGRvIHRoZXkgZXhpc3QgaW4gdGhlIGZpcnN0IHBsYWNlP1xuICogVGhlc2UgY2xhc3NlcyBhcmUgdXNlZCBhdCBhIHNwZWNpZmljaXR5IG9mIDIuXG4gKiBJdCBhbGxvd3MgdGhlbSB0byBvdmVycmlkZSBwcmV2aW91c2x5IGRlZmluaWVkIHN0eWxlcyBhcyB3ZWxsIGFzXG4gKiBiZWluZyB1bnRvdWNoZWQgYnkgc2ltcGxlIHVzZXIgb3ZlcnJpZGVzLlxuICovXG5cbnZhciBwc2V1ZG9DbGFzc2VzID0gWydjaGVja2VkJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2ZvY3VzZWQnLCAnZm9jdXNWaXNpYmxlJywgJ3JlcXVpcmVkJywgJ2V4cGFuZGVkJywgJ3NlbGVjdGVkJ107IC8vIFJldHVybnMgYSBmdW5jdGlvbiB3aGljaCBnZW5lcmF0ZXMgdW5pcXVlIGNsYXNzIG5hbWVzIGJhc2VkIG9uIGNvdW50ZXJzLlxuLy8gV2hlbiBuZXcgZ2VuZXJhdG9yIGZ1bmN0aW9uIGlzIGNyZWF0ZWQsIHJ1bGUgY291bnRlciBpcyByZXNldC5cbi8vIFdlIG5lZWQgdG8gcmVzZXQgdGhlIHJ1bGUgY291bnRlciBmb3IgU1NSIGZvciBlYWNoIHJlcXVlc3QuXG4vL1xuLy8gSXQncyBpbnNwaXJlZCBieVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2Jsb2IvNGU2YTA1ZGQzZjdiNjU3MmZkZDNhYjIxNjg2MWQ5ZTQ0NmMyMDMzMS9zcmMvdXRpbHMvY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUuanNcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUoKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIF9vcHRpb25zJGRpc2FibGVHbG9iYSA9IG9wdGlvbnMuZGlzYWJsZUdsb2JhbCxcbiAgICAgIGRpc2FibGVHbG9iYWwgPSBfb3B0aW9ucyRkaXNhYmxlR2xvYmEgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkZGlzYWJsZUdsb2JhLFxuICAgICAgX29wdGlvbnMkcHJvZHVjdGlvblByID0gb3B0aW9ucy5wcm9kdWN0aW9uUHJlZml4LFxuICAgICAgcHJvZHVjdGlvblByZWZpeCA9IF9vcHRpb25zJHByb2R1Y3Rpb25QciA9PT0gdm9pZCAwID8gJ2pzcycgOiBfb3B0aW9ucyRwcm9kdWN0aW9uUHIsXG4gICAgICBfb3B0aW9ucyRzZWVkID0gb3B0aW9ucy5zZWVkLFxuICAgICAgc2VlZCA9IF9vcHRpb25zJHNlZWQgPT09IHZvaWQgMCA/ICcnIDogX29wdGlvbnMkc2VlZDtcbiAgdmFyIHNlZWRQcmVmaXggPSBzZWVkID09PSAnJyA/ICcnIDogXCJcIi5jb25jYXQoc2VlZCwgXCItXCIpO1xuICB2YXIgcnVsZUNvdW50ZXIgPSAwO1xuXG4gIHZhciBnZXROZXh0Q291bnRlcklkID0gZnVuY3Rpb24gZ2V0TmV4dENvdW50ZXJJZCgpIHtcbiAgICBydWxlQ291bnRlciArPSAxO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChydWxlQ291bnRlciA+PSAxZTEwKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihbJ01hdGVyaWFsLVVJOiBZb3UgbWlnaHQgaGF2ZSBhIG1lbW9yeSBsZWFrLicsICdUaGUgcnVsZUNvdW50ZXIgaXMgbm90IHN1cHBvc2VkIHRvIGdyb3cgdGhhdCBtdWNoLiddLmpvaW4oJycpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcnVsZUNvdW50ZXI7XG4gIH07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChydWxlLCBzdHlsZVNoZWV0KSB7XG4gICAgdmFyIG5hbWUgPSBzdHlsZVNoZWV0Lm9wdGlvbnMubmFtZTsgLy8gSXMgYSBnbG9iYWwgc3RhdGljIE1VSSBzdHlsZT9cblxuICAgIGlmIChuYW1lICYmIG5hbWUuaW5kZXhPZignTXVpJykgPT09IDAgJiYgIXN0eWxlU2hlZXQub3B0aW9ucy5saW5rICYmICFkaXNhYmxlR2xvYmFsKSB7XG4gICAgICAvLyBXZSBjYW4gdXNlIGEgc2hvcnRoYW5kIGNsYXNzIG5hbWUsIHdlIG5ldmVyIHVzZSB0aGUga2V5cyB0byBzdHlsZSB0aGUgY29tcG9uZW50cy5cbiAgICAgIGlmIChwc2V1ZG9DbGFzc2VzLmluZGV4T2YocnVsZS5rZXkpICE9PSAtMSkge1xuICAgICAgICByZXR1cm4gXCJNdWktXCIuY29uY2F0KHJ1bGUua2V5KTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZWZpeCA9IFwiXCIuY29uY2F0KHNlZWRQcmVmaXgpLmNvbmNhdChuYW1lLCBcIi1cIikuY29uY2F0KHJ1bGUua2V5KTtcblxuICAgICAgaWYgKCFzdHlsZVNoZWV0Lm9wdGlvbnMudGhlbWVbbmVzdGVkXSB8fCBzZWVkICE9PSAnJykge1xuICAgICAgICByZXR1cm4gcHJlZml4O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQocHJlZml4LCBcIi1cIikuY29uY2F0KGdldE5leHRDb3VudGVySWQoKSk7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChzZWVkUHJlZml4KS5jb25jYXQocHJvZHVjdGlvblByZWZpeCkuY29uY2F0KGdldE5leHRDb3VudGVySWQoKSk7XG4gICAgfVxuXG4gICAgdmFyIHN1ZmZpeCA9IFwiXCIuY29uY2F0KHJ1bGUua2V5LCBcIi1cIikuY29uY2F0KGdldE5leHRDb3VudGVySWQoKSk7IC8vIEhlbHAgd2l0aCBkZWJ1Z2dhYmlsaXR5LlxuXG4gICAgaWYgKHN0eWxlU2hlZXQub3B0aW9ucy5jbGFzc05hbWVQcmVmaXgpIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChzZWVkUHJlZml4KS5jb25jYXQoc3R5bGVTaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeCwgXCItXCIpLmNvbmNhdChzdWZmaXgpO1xuICAgIH1cblxuICAgIHJldHVybiBcIlwiLmNvbmNhdChzZWVkUHJlZml4KS5jb25jYXQoc3VmZml4KTtcbiAgfTtcbn0iLCJpbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IHsgY3JlYXRlUnVsZSB9IGZyb20gJ2pzcyc7XG5cbnZhciBub3cgPSBEYXRlLm5vdygpO1xudmFyIGZuVmFsdWVzTnMgPSBcImZuVmFsdWVzXCIgKyBub3c7XG52YXIgZm5SdWxlTnMgPSBcImZuU3R5bGVcIiArICsrbm93O1xuZnVuY3Rpb24gZnVuY3Rpb25QbHVnaW4oKSB7XG4gIHJldHVybiB7XG4gICAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICAgICAgaWYgKHR5cGVvZiBkZWNsICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gbnVsbDtcbiAgICAgIHZhciBydWxlID0gY3JlYXRlUnVsZShuYW1lLCB7fSwgb3B0aW9ucyk7XG4gICAgICBydWxlW2ZuUnVsZU5zXSA9IGRlY2w7XG4gICAgICByZXR1cm4gcnVsZTtcbiAgICB9LFxuICAgIG9uUHJvY2Vzc1N0eWxlOiBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSkge1xuICAgICAgLy8gV2UgbmVlZCB0byBleHRyYWN0IGZ1bmN0aW9uIHZhbHVlcyBmcm9tIHRoZSBkZWNsYXJhdGlvbiwgc28gdGhhdCB3ZSBjYW4ga2VlcCBjb3JlIHVuYXdhcmUgb2YgdGhlbS5cbiAgICAgIC8vIFdlIG5lZWQgdG8gZG8gdGhhdCBvbmx5IG9uY2UuXG4gICAgICAvLyBXZSBkb24ndCBuZWVkIHRvIGV4dHJhY3QgZnVuY3Rpb25zIG9uIGVhY2ggc3R5bGUgdXBkYXRlLCBzaW5jZSB0aGlzIGNhbiBoYXBwZW4gb25seSBvbmNlLlxuICAgICAgLy8gV2UgZG9uJ3Qgc3VwcG9ydCBmdW5jdGlvbiB2YWx1ZXMgaW5zaWRlIG9mIGZ1bmN0aW9uIHJ1bGVzLlxuICAgICAgaWYgKGZuVmFsdWVzTnMgaW4gcnVsZSB8fCBmblJ1bGVOcyBpbiBydWxlKSByZXR1cm4gc3R5bGU7XG4gICAgICB2YXIgZm5WYWx1ZXMgPSB7fTtcblxuICAgICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBzdHlsZVtwcm9wXTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJykgY29udGludWU7XG4gICAgICAgIGRlbGV0ZSBzdHlsZVtwcm9wXTtcbiAgICAgICAgZm5WYWx1ZXNbcHJvcF0gPSB2YWx1ZTtcbiAgICAgIH0gLy8gJEZsb3dGaXhNZVxuXG5cbiAgICAgIHJ1bGVbZm5WYWx1ZXNOc10gPSBmblZhbHVlcztcbiAgICAgIHJldHVybiBzdHlsZTtcbiAgICB9LFxuICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShkYXRhLCBydWxlLCBzaGVldCwgb3B0aW9ucykge1xuICAgICAgdmFyIHN0eWxlUnVsZSA9IHJ1bGU7XG4gICAgICB2YXIgZm5SdWxlID0gc3R5bGVSdWxlW2ZuUnVsZU5zXTsgLy8gSWYgd2UgaGF2ZSBhIHN0eWxlIGZ1bmN0aW9uLCB0aGUgZW50aXJlIHJ1bGUgaXMgZHluYW1pYyBhbmQgc3R5bGUgb2JqZWN0XG4gICAgICAvLyB3aWxsIGJlIHJldHVybmVkIGZyb20gdGhhdCBmdW5jdGlvbi5cblxuICAgICAgaWYgKGZuUnVsZSkge1xuICAgICAgICAvLyBFbXB0eSBvYmplY3Qgd2lsbCByZW1vdmUgYWxsIGN1cnJlbnRseSBkZWZpbmVkIHByb3BzXG4gICAgICAgIC8vIGluIGNhc2UgZnVuY3Rpb24gcnVsZSByZXR1cm5zIGEgZmFsc3kgdmFsdWUuXG4gICAgICAgIHN0eWxlUnVsZS5zdHlsZSA9IGZuUnVsZShkYXRhKSB8fCB7fTtcblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlUnVsZS5zdHlsZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdHlsZVJ1bGUuc3R5bGVbcHJvcF0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1tKU1NdIEZ1bmN0aW9uIHZhbHVlcyBpbnNpZGUgZnVuY3Rpb24gcnVsZXMgYXJlIG5vdCBzdXBwb3J0ZWQuJykgOiB2b2lkIDA7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgZm5WYWx1ZXMgPSBzdHlsZVJ1bGVbZm5WYWx1ZXNOc107IC8vIElmIHdlIGhhdmUgYSBmbiB2YWx1ZXMgbWFwLCBpdCBpcyBhIHJ1bGUgd2l0aCBmdW5jdGlvbiB2YWx1ZXMuXG5cbiAgICAgIGlmIChmblZhbHVlcykge1xuICAgICAgICBmb3IgKHZhciBfcHJvcCBpbiBmblZhbHVlcykge1xuICAgICAgICAgIHN0eWxlUnVsZS5wcm9wKF9wcm9wLCBmblZhbHVlc1tfcHJvcF0oZGF0YSksIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvblBsdWdpbjtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCB7IFJ1bGVMaXN0IH0gZnJvbSAnanNzJztcblxudmFyIGF0ID0gJ0BnbG9iYWwnO1xudmFyIGF0UHJlZml4ID0gJ0BnbG9iYWwgJztcblxudmFyIEdsb2JhbENvbnRhaW5lclJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBHbG9iYWxDb250YWluZXJSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2dsb2JhbCc7XG4gICAgdGhpcy5hdCA9IGF0O1xuICAgIHRoaXMucnVsZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMucnVsZXMgPSBuZXcgUnVsZUxpc3QoX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHBhcmVudDogdGhpc1xuICAgIH0pKTtcblxuICAgIGZvciAodmFyIHNlbGVjdG9yIGluIHN0eWxlcykge1xuICAgICAgdGhpcy5ydWxlcy5hZGQoc2VsZWN0b3IsIHN0eWxlc1tzZWxlY3Rvcl0pO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBydWxlLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBHbG9iYWxDb250YWluZXJSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0UnVsZSA9IGZ1bmN0aW9uIGdldFJ1bGUobmFtZSkge1xuICAgIHJldHVybiB0aGlzLnJ1bGVzLmdldChuYW1lKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuZCByZWdpc3RlciBydWxlLCBydW4gcGx1Z2lucy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUnVsZSA9IGZ1bmN0aW9uIGFkZFJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgcnVsZSA9IHRoaXMucnVsZXMuYWRkKG5hbWUsIHN0eWxlLCBvcHRpb25zKTtcbiAgICB0aGlzLm9wdGlvbnMuanNzLnBsdWdpbnMub25Qcm9jZXNzUnVsZShydWxlKTtcbiAgICByZXR1cm4gcnVsZTtcbiAgfVxuICAvKipcbiAgICogR2V0IGluZGV4IG9mIGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YocnVsZSkge1xuICAgIHJldHVybiB0aGlzLnJ1bGVzLmluZGV4T2YocnVsZSk7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMudG9TdHJpbmcoKTtcbiAgfTtcblxuICByZXR1cm4gR2xvYmFsQ29udGFpbmVyUnVsZTtcbn0oKTtcblxudmFyIEdsb2JhbFByZWZpeGVkUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEdsb2JhbFByZWZpeGVkUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2dsb2JhbCc7XG4gICAgdGhpcy5hdCA9IGF0O1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLnJ1bGUgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdmFyIHNlbGVjdG9yID0ga2V5LnN1YnN0cihhdFByZWZpeC5sZW5ndGgpO1xuICAgIHRoaXMucnVsZSA9IG9wdGlvbnMuanNzLmNyZWF0ZVJ1bGUoc2VsZWN0b3IsIHN0eWxlLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzXG4gICAgfSkpO1xuICB9XG5cbiAgdmFyIF9wcm90bzIgPSBHbG9iYWxQcmVmaXhlZFJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90bzIudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZSA/IHRoaXMucnVsZS50b1N0cmluZyhvcHRpb25zKSA6ICcnO1xuICB9O1xuXG4gIHJldHVybiBHbG9iYWxQcmVmaXhlZFJ1bGU7XG59KCk7XG5cbnZhciBzZXBhcmF0b3JSZWdFeHAgPSAvXFxzKixcXHMqL2c7XG5cbmZ1bmN0aW9uIGFkZFNjb3BlKHNlbGVjdG9yLCBzY29wZSkge1xuICB2YXIgcGFydHMgPSBzZWxlY3Rvci5zcGxpdChzZXBhcmF0b3JSZWdFeHApO1xuICB2YXIgc2NvcGVkID0gJyc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgIHNjb3BlZCArPSBzY29wZSArIFwiIFwiICsgcGFydHNbaV0udHJpbSgpO1xuICAgIGlmIChwYXJ0c1tpICsgMV0pIHNjb3BlZCArPSAnLCAnO1xuICB9XG5cbiAgcmV0dXJuIHNjb3BlZDtcbn1cblxuZnVuY3Rpb24gaGFuZGxlTmVzdGVkR2xvYmFsQ29udGFpbmVyUnVsZShydWxlKSB7XG4gIHZhciBvcHRpb25zID0gcnVsZS5vcHRpb25zLFxuICAgICAgc3R5bGUgPSBydWxlLnN0eWxlO1xuICB2YXIgcnVsZXMgPSBzdHlsZSA/IHN0eWxlW2F0XSA6IG51bGw7XG4gIGlmICghcnVsZXMpIHJldHVybjtcblxuICBmb3IgKHZhciBuYW1lIGluIHJ1bGVzKSB7XG4gICAgb3B0aW9ucy5zaGVldC5hZGRSdWxlKG5hbWUsIHJ1bGVzW25hbWVdLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgc2VsZWN0b3I6IGFkZFNjb3BlKG5hbWUsIHJ1bGUuc2VsZWN0b3IpXG4gICAgfSkpO1xuICB9XG5cbiAgZGVsZXRlIHN0eWxlW2F0XTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlUHJlZml4ZWRHbG9iYWxSdWxlKHJ1bGUpIHtcbiAgdmFyIG9wdGlvbnMgPSBydWxlLm9wdGlvbnMsXG4gICAgICBzdHlsZSA9IHJ1bGUuc3R5bGU7XG5cbiAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgIGlmIChwcm9wWzBdICE9PSAnQCcgfHwgcHJvcC5zdWJzdHIoMCwgYXQubGVuZ3RoKSAhPT0gYXQpIGNvbnRpbnVlO1xuICAgIHZhciBzZWxlY3RvciA9IGFkZFNjb3BlKHByb3Auc3Vic3RyKGF0Lmxlbmd0aCksIHJ1bGUuc2VsZWN0b3IpO1xuICAgIG9wdGlvbnMuc2hlZXQuYWRkUnVsZShzZWxlY3Rvciwgc3R5bGVbcHJvcF0sIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBzZWxlY3Rvcjogc2VsZWN0b3JcbiAgICB9KSk7XG4gICAgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICB9XG59XG4vKipcbiAqIENvbnZlcnQgbmVzdGVkIHJ1bGVzIHRvIHNlcGFyYXRlLCByZW1vdmUgdGhlbSBmcm9tIG9yaWdpbmFsIHN0eWxlcy5cbiAqXG4gKiBAcGFyYW0ge1J1bGV9IHJ1bGVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuXG5mdW5jdGlvbiBqc3NHbG9iYWwoKSB7XG4gIGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShuYW1lLCBzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW5hbWUpIHJldHVybiBudWxsO1xuXG4gICAgaWYgKG5hbWUgPT09IGF0KSB7XG4gICAgICByZXR1cm4gbmV3IEdsb2JhbENvbnRhaW5lclJ1bGUobmFtZSwgc3R5bGVzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAobmFtZVswXSA9PT0gJ0AnICYmIG5hbWUuc3Vic3RyKDAsIGF0UHJlZml4Lmxlbmd0aCkgPT09IGF0UHJlZml4KSB7XG4gICAgICByZXR1cm4gbmV3IEdsb2JhbFByZWZpeGVkUnVsZShuYW1lLCBzdHlsZXMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHZhciBwYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcblxuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIGlmIChwYXJlbnQudHlwZSA9PT0gJ2dsb2JhbCcgfHwgcGFyZW50Lm9wdGlvbnMucGFyZW50ICYmIHBhcmVudC5vcHRpb25zLnBhcmVudC50eXBlID09PSAnZ2xvYmFsJykge1xuICAgICAgICBvcHRpb25zLnNjb3BlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnNjb3BlZCA9PT0gZmFsc2UpIHtcbiAgICAgIG9wdGlvbnMuc2VsZWN0b3IgPSBuYW1lO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzUnVsZShydWxlKSB7XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJykgcmV0dXJuO1xuICAgIGhhbmRsZU5lc3RlZEdsb2JhbENvbnRhaW5lclJ1bGUocnVsZSk7XG4gICAgaGFuZGxlUHJlZml4ZWRHbG9iYWxSdWxlKHJ1bGUpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvbkNyZWF0ZVJ1bGU6IG9uQ3JlYXRlUnVsZSxcbiAgICBvblByb2Nlc3NSdWxlOiBvblByb2Nlc3NSdWxlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGpzc0dsb2JhbDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5cbnZhciBzZXBhcmF0b3JSZWdFeHAgPSAvXFxzKixcXHMqL2c7XG52YXIgcGFyZW50UmVnRXhwID0gLyYvZztcbnZhciByZWZSZWdFeHAgPSAvXFwkKFtcXHctXSspL2c7XG4vKipcbiAqIENvbnZlcnQgbmVzdGVkIHJ1bGVzIHRvIHNlcGFyYXRlLCByZW1vdmUgdGhlbSBmcm9tIG9yaWdpbmFsIHN0eWxlcy5cbiAqXG4gKiBAcGFyYW0ge1J1bGV9IHJ1bGVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24ganNzTmVzdGVkKCkge1xuICAvLyBHZXQgYSBmdW5jdGlvbiB0byBiZSB1c2VkIGZvciAkcmVmIHJlcGxhY2VtZW50LlxuICBmdW5jdGlvbiBnZXRSZXBsYWNlUmVmKGNvbnRhaW5lciwgc2hlZXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1hdGNoLCBrZXkpIHtcbiAgICAgIHZhciBydWxlID0gY29udGFpbmVyLmdldFJ1bGUoa2V5KSB8fCBzaGVldCAmJiBzaGVldC5nZXRSdWxlKGtleSk7XG5cbiAgICAgIGlmIChydWxlKSB7XG4gICAgICAgIHJ1bGUgPSBydWxlO1xuICAgICAgICByZXR1cm4gcnVsZS5zZWxlY3RvcjtcbiAgICAgIH1cblxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBDb3VsZCBub3QgZmluZCB0aGUgcmVmZXJlbmNlZCBydWxlIFxcXCJcIiArIGtleSArIFwiXFxcIiBpbiBcXFwiXCIgKyAoY29udGFpbmVyLm9wdGlvbnMubWV0YSB8fCBjb250YWluZXIudG9TdHJpbmcoKSkgKyBcIlxcXCIuXCIpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZVBhcmVudFJlZnMobmVzdGVkUHJvcCwgcGFyZW50UHJvcCkge1xuICAgIHZhciBwYXJlbnRTZWxlY3RvcnMgPSBwYXJlbnRQcm9wLnNwbGl0KHNlcGFyYXRvclJlZ0V4cCk7XG4gICAgdmFyIG5lc3RlZFNlbGVjdG9ycyA9IG5lc3RlZFByb3Auc3BsaXQoc2VwYXJhdG9yUmVnRXhwKTtcbiAgICB2YXIgcmVzdWx0ID0gJyc7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmVudFNlbGVjdG9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHBhcmVudCA9IHBhcmVudFNlbGVjdG9yc1tpXTtcblxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBuZXN0ZWRTZWxlY3RvcnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgdmFyIG5lc3RlZCA9IG5lc3RlZFNlbGVjdG9yc1tqXTtcbiAgICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9ICcsICc7IC8vIFJlcGxhY2UgYWxsICYgYnkgdGhlIHBhcmVudCBvciBwcmVmaXggJiB3aXRoIHRoZSBwYXJlbnQuXG5cbiAgICAgICAgcmVzdWx0ICs9IG5lc3RlZC5pbmRleE9mKCcmJykgIT09IC0xID8gbmVzdGVkLnJlcGxhY2UocGFyZW50UmVnRXhwLCBwYXJlbnQpIDogcGFyZW50ICsgXCIgXCIgKyBuZXN0ZWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE9wdGlvbnMocnVsZSwgY29udGFpbmVyLCBwcmV2T3B0aW9ucykge1xuICAgIC8vIE9wdGlvbnMgaGFzIGJlZW4gYWxyZWFkeSBjcmVhdGVkLCBub3cgd2Ugb25seSBpbmNyZWFzZSBpbmRleC5cbiAgICBpZiAocHJldk9wdGlvbnMpIHJldHVybiBfZXh0ZW5kcyh7fSwgcHJldk9wdGlvbnMsIHtcbiAgICAgIGluZGV4OiBwcmV2T3B0aW9ucy5pbmRleCArIDFcbiAgICB9KTtcbiAgICB2YXIgbmVzdGluZ0xldmVsID0gcnVsZS5vcHRpb25zLm5lc3RpbmdMZXZlbDtcbiAgICBuZXN0aW5nTGV2ZWwgPSBuZXN0aW5nTGV2ZWwgPT09IHVuZGVmaW5lZCA/IDEgOiBuZXN0aW5nTGV2ZWwgKyAxO1xuXG4gICAgdmFyIG9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgcnVsZS5vcHRpb25zLCB7XG4gICAgICBuZXN0aW5nTGV2ZWw6IG5lc3RpbmdMZXZlbCxcbiAgICAgIGluZGV4OiBjb250YWluZXIuaW5kZXhPZihydWxlKSArIDEgLy8gV2UgZG9uJ3QgbmVlZCB0aGUgcGFyZW50IG5hbWUgdG8gYmUgc2V0IG9wdGlvbnMgZm9yIGNobGlkLlxuXG4gICAgfSk7XG5cbiAgICBkZWxldGUgb3B0aW9ucy5uYW1lO1xuICAgIHJldHVybiBvcHRpb25zO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUsIHNoZWV0KSB7XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJykgcmV0dXJuIHN0eWxlO1xuICAgIHZhciBzdHlsZVJ1bGUgPSBydWxlO1xuICAgIHZhciBjb250YWluZXIgPSBzdHlsZVJ1bGUub3B0aW9ucy5wYXJlbnQ7XG4gICAgdmFyIG9wdGlvbnM7XG4gICAgdmFyIHJlcGxhY2VSZWY7XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICB2YXIgaXNOZXN0ZWQgPSBwcm9wLmluZGV4T2YoJyYnKSAhPT0gLTE7XG4gICAgICB2YXIgaXNOZXN0ZWRDb25kaXRpb25hbCA9IHByb3BbMF0gPT09ICdAJztcbiAgICAgIGlmICghaXNOZXN0ZWQgJiYgIWlzTmVzdGVkQ29uZGl0aW9uYWwpIGNvbnRpbnVlO1xuICAgICAgb3B0aW9ucyA9IGdldE9wdGlvbnMoc3R5bGVSdWxlLCBjb250YWluZXIsIG9wdGlvbnMpO1xuXG4gICAgICBpZiAoaXNOZXN0ZWQpIHtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gcmVwbGFjZVBhcmVudFJlZnMocHJvcCwgc3R5bGVSdWxlLnNlbGVjdG9yKTsgLy8gTGF6aWx5IGNyZWF0ZSB0aGUgcmVmIHJlcGxhY2VyIGZ1bmN0aW9uIGp1c3Qgb25jZSBmb3JcbiAgICAgICAgLy8gYWxsIG5lc3RlZCBydWxlcyB3aXRoaW4gdGhlIHNoZWV0LlxuXG4gICAgICAgIGlmICghcmVwbGFjZVJlZikgcmVwbGFjZVJlZiA9IGdldFJlcGxhY2VSZWYoY29udGFpbmVyLCBzaGVldCk7IC8vIFJlcGxhY2UgYWxsICRyZWZzLlxuXG4gICAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IucmVwbGFjZShyZWZSZWdFeHAsIHJlcGxhY2VSZWYpO1xuICAgICAgICBjb250YWluZXIuYWRkUnVsZShzZWxlY3Rvciwgc3R5bGVbcHJvcF0sIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICAgICAgc2VsZWN0b3I6IHNlbGVjdG9yXG4gICAgICAgIH0pKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNOZXN0ZWRDb25kaXRpb25hbCkge1xuICAgICAgICAvLyBQbGFjZSBjb25kaXRpb25hbCByaWdodCBhZnRlciB0aGUgcGFyZW50IHJ1bGUgdG8gZW5zdXJlIHJpZ2h0IG9yZGVyaW5nLlxuICAgICAgICBjb250YWluZXIuYWRkUnVsZShwcm9wLCB7fSwgb3B0aW9ucykgLy8gRmxvdyBleHBlY3RzIG1vcmUgb3B0aW9ucyBidXQgdGhleSBhcmVuJ3QgcmVxdWlyZWRcbiAgICAgICAgLy8gQW5kIGZsb3cgZG9lc24ndCBrbm93IHRoaXMgd2lsbCBhbHdheXMgYmUgYSBTdHlsZVJ1bGUgd2hpY2ggaGFzIHRoZSBhZGRSdWxlIG1ldGhvZFxuICAgICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICAgIC5hZGRSdWxlKHN0eWxlUnVsZS5rZXksIHN0eWxlW3Byb3BdLCB7XG4gICAgICAgICAgc2VsZWN0b3I6IHN0eWxlUnVsZS5zZWxlY3RvclxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICAgIH1cblxuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGpzc05lc3RlZDtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXZhciwgcHJlZmVyLXRlbXBsYXRlICovXG52YXIgdXBwZXJjYXNlUGF0dGVybiA9IC9bQS1aXS9nXG52YXIgbXNQYXR0ZXJuID0gL15tcy0vXG52YXIgY2FjaGUgPSB7fVxuXG5mdW5jdGlvbiB0b0h5cGhlbkxvd2VyKG1hdGNoKSB7XG4gIHJldHVybiAnLScgKyBtYXRjaC50b0xvd2VyQ2FzZSgpXG59XG5cbmZ1bmN0aW9uIGh5cGhlbmF0ZVN0eWxlTmFtZShuYW1lKSB7XG4gIGlmIChjYWNoZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgIHJldHVybiBjYWNoZVtuYW1lXVxuICB9XG5cbiAgdmFyIGhOYW1lID0gbmFtZS5yZXBsYWNlKHVwcGVyY2FzZVBhdHRlcm4sIHRvSHlwaGVuTG93ZXIpXG4gIHJldHVybiAoY2FjaGVbbmFtZV0gPSBtc1BhdHRlcm4udGVzdChoTmFtZSkgPyAnLScgKyBoTmFtZSA6IGhOYW1lKVxufVxuXG5leHBvcnQgZGVmYXVsdCBoeXBoZW5hdGVTdHlsZU5hbWVcbiIsImltcG9ydCBoeXBoZW5hdGUgZnJvbSAnaHlwaGVuYXRlLXN0eWxlLW5hbWUnO1xuXG4vKipcbiAqIENvbnZlcnQgY2FtZWwgY2FzZWQgcHJvcGVydHkgbmFtZXMgdG8gZGFzaCBzZXBhcmF0ZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHN0eWxlXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gY29udmVydENhc2Uoc3R5bGUpIHtcbiAgdmFyIGNvbnZlcnRlZCA9IHt9O1xuXG4gIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICB2YXIga2V5ID0gcHJvcC5pbmRleE9mKCctLScpID09PSAwID8gcHJvcCA6IGh5cGhlbmF0ZShwcm9wKTtcbiAgICBjb252ZXJ0ZWRba2V5XSA9IHN0eWxlW3Byb3BdO1xuICB9XG5cbiAgaWYgKHN0eWxlLmZhbGxiYWNrcykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN0eWxlLmZhbGxiYWNrcykpIGNvbnZlcnRlZC5mYWxsYmFja3MgPSBzdHlsZS5mYWxsYmFja3MubWFwKGNvbnZlcnRDYXNlKTtlbHNlIGNvbnZlcnRlZC5mYWxsYmFja3MgPSBjb252ZXJ0Q2FzZShzdHlsZS5mYWxsYmFja3MpO1xuICB9XG5cbiAgcmV0dXJuIGNvbnZlcnRlZDtcbn1cbi8qKlxuICogQWxsb3cgY2FtZWwgY2FzZWQgcHJvcGVydHkgbmFtZXMgYnkgY29udmVydGluZyB0aGVtIGJhY2sgdG8gZGFzaGVyaXplZC5cbiAqXG4gKiBAcGFyYW0ge1J1bGV9IHJ1bGVcbiAqL1xuXG5cbmZ1bmN0aW9uIGNhbWVsQ2FzZSgpIHtcbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdHlsZSkpIHtcbiAgICAgIC8vIEhhbmRsZSBydWxlcyBsaWtlIEBmb250LWZhY2UsIHdoaWNoIGNhbiBoYXZlIG11bHRpcGxlIHN0eWxlcyBpbiBhbiBhcnJheVxuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHN0eWxlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBzdHlsZVtpbmRleF0gPSBjb252ZXJ0Q2FzZShzdHlsZVtpbmRleF0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3R5bGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnZlcnRDYXNlKHN0eWxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsdWUsIHByb3AsIHJ1bGUpIHtcbiAgICBpZiAocHJvcC5pbmRleE9mKCctLScpID09PSAwKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgdmFyIGh5cGhlbmF0ZWRQcm9wID0gaHlwaGVuYXRlKHByb3ApOyAvLyBUaGVyZSB3YXMgbm8gY2FtZWwgY2FzZSBpbiBwbGFjZVxuXG4gICAgaWYgKHByb3AgPT09IGh5cGhlbmF0ZWRQcm9wKSByZXR1cm4gdmFsdWU7XG4gICAgcnVsZS5wcm9wKGh5cGhlbmF0ZWRQcm9wLCB2YWx1ZSk7IC8vIENvcmUgd2lsbCBpZ25vcmUgdGhhdCBwcm9wZXJ0eSB2YWx1ZSB3ZSBzZXQgdGhlIHByb3BlciBvbmUgYWJvdmUuXG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlLFxuICAgIG9uQ2hhbmdlVmFsdWU6IG9uQ2hhbmdlVmFsdWVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2FtZWxDYXNlO1xuIiwiaW1wb3J0IHsgaGFzQ1NTVE9NU3VwcG9ydCB9IGZyb20gJ2pzcyc7XG5cbnZhciBweCA9IGhhc0NTU1RPTVN1cHBvcnQgJiYgQ1NTID8gQ1NTLnB4IDogJ3B4JztcbnZhciBtcyA9IGhhc0NTU1RPTVN1cHBvcnQgJiYgQ1NTID8gQ1NTLm1zIDogJ21zJztcbnZhciBwZXJjZW50ID0gaGFzQ1NTVE9NU3VwcG9ydCAmJiBDU1MgPyBDU1MucGVyY2VudCA6ICclJztcbi8qKlxuICogR2VuZXJhdGVkIGpzcy1wbHVnaW4tZGVmYXVsdC11bml0IENTUyBwcm9wZXJ0eSB1bml0c1xuICpcbiAqIEB0eXBlIG9iamVjdFxuICovXG5cbnZhciBkZWZhdWx0VW5pdHMgPSB7XG4gIC8vIEFuaW1hdGlvbiBwcm9wZXJ0aWVzXG4gICdhbmltYXRpb24tZGVsYXknOiBtcyxcbiAgJ2FuaW1hdGlvbi1kdXJhdGlvbic6IG1zLFxuICAvLyBCYWNrZ3JvdW5kIHByb3BlcnRpZXNcbiAgJ2JhY2tncm91bmQtcG9zaXRpb24nOiBweCxcbiAgJ2JhY2tncm91bmQtcG9zaXRpb24teCc6IHB4LFxuICAnYmFja2dyb3VuZC1wb3NpdGlvbi15JzogcHgsXG4gICdiYWNrZ3JvdW5kLXNpemUnOiBweCxcbiAgLy8gQm9yZGVyIFByb3BlcnRpZXNcbiAgYm9yZGVyOiBweCxcbiAgJ2JvcmRlci1ib3R0b20nOiBweCxcbiAgJ2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItYm90dG9tLXdpZHRoJzogcHgsXG4gICdib3JkZXItbGVmdCc6IHB4LFxuICAnYm9yZGVyLWxlZnQtd2lkdGgnOiBweCxcbiAgJ2JvcmRlci1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci1yaWdodCc6IHB4LFxuICAnYm9yZGVyLXJpZ2h0LXdpZHRoJzogcHgsXG4gICdib3JkZXItdG9wJzogcHgsXG4gICdib3JkZXItdG9wLWxlZnQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItdG9wLXJpZ2h0LXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLXRvcC13aWR0aCc6IHB4LFxuICAnYm9yZGVyLXdpZHRoJzogcHgsXG4gIC8vIE1hcmdpbiBwcm9wZXJ0aWVzXG4gIG1hcmdpbjogcHgsXG4gICdtYXJnaW4tYm90dG9tJzogcHgsXG4gICdtYXJnaW4tbGVmdCc6IHB4LFxuICAnbWFyZ2luLXJpZ2h0JzogcHgsXG4gICdtYXJnaW4tdG9wJzogcHgsXG4gIC8vIFBhZGRpbmcgcHJvcGVydGllc1xuICBwYWRkaW5nOiBweCxcbiAgJ3BhZGRpbmctYm90dG9tJzogcHgsXG4gICdwYWRkaW5nLWxlZnQnOiBweCxcbiAgJ3BhZGRpbmctcmlnaHQnOiBweCxcbiAgJ3BhZGRpbmctdG9wJzogcHgsXG4gIC8vIE1hc2sgcHJvcGVydGllc1xuICAnbWFzay1wb3NpdGlvbi14JzogcHgsXG4gICdtYXNrLXBvc2l0aW9uLXknOiBweCxcbiAgJ21hc2stc2l6ZSc6IHB4LFxuICAvLyBXaWR0aCBhbmQgaGVpZ2h0IHByb3BlcnRpZXNcbiAgaGVpZ2h0OiBweCxcbiAgd2lkdGg6IHB4LFxuICAnbWluLWhlaWdodCc6IHB4LFxuICAnbWF4LWhlaWdodCc6IHB4LFxuICAnbWluLXdpZHRoJzogcHgsXG4gICdtYXgtd2lkdGgnOiBweCxcbiAgLy8gUG9zaXRpb24gcHJvcGVydGllc1xuICBib3R0b206IHB4LFxuICBsZWZ0OiBweCxcbiAgdG9wOiBweCxcbiAgcmlnaHQ6IHB4LFxuICAvLyBTaGFkb3cgcHJvcGVydGllc1xuICAnYm94LXNoYWRvdyc6IHB4LFxuICAndGV4dC1zaGFkb3cnOiBweCxcbiAgLy8gQ29sdW1uIHByb3BlcnRpZXNcbiAgJ2NvbHVtbi1nYXAnOiBweCxcbiAgJ2NvbHVtbi1ydWxlJzogcHgsXG4gICdjb2x1bW4tcnVsZS13aWR0aCc6IHB4LFxuICAnY29sdW1uLXdpZHRoJzogcHgsXG4gIC8vIEZvbnQgYW5kIHRleHQgcHJvcGVydGllc1xuICAnZm9udC1zaXplJzogcHgsXG4gICdmb250LXNpemUtZGVsdGEnOiBweCxcbiAgJ2xldHRlci1zcGFjaW5nJzogcHgsXG4gICd0ZXh0LWluZGVudCc6IHB4LFxuICAndGV4dC1zdHJva2UnOiBweCxcbiAgJ3RleHQtc3Ryb2tlLXdpZHRoJzogcHgsXG4gICd3b3JkLXNwYWNpbmcnOiBweCxcbiAgLy8gTW90aW9uIHByb3BlcnRpZXNcbiAgbW90aW9uOiBweCxcbiAgJ21vdGlvbi1vZmZzZXQnOiBweCxcbiAgLy8gT3V0bGluZSBwcm9wZXJ0aWVzXG4gIG91dGxpbmU6IHB4LFxuICAnb3V0bGluZS1vZmZzZXQnOiBweCxcbiAgJ291dGxpbmUtd2lkdGgnOiBweCxcbiAgLy8gUGVyc3BlY3RpdmUgcHJvcGVydGllc1xuICBwZXJzcGVjdGl2ZTogcHgsXG4gICdwZXJzcGVjdGl2ZS1vcmlnaW4teCc6IHBlcmNlbnQsXG4gICdwZXJzcGVjdGl2ZS1vcmlnaW4teSc6IHBlcmNlbnQsXG4gIC8vIFRyYW5zZm9ybSBwcm9wZXJ0aWVzXG4gICd0cmFuc2Zvcm0tb3JpZ2luJzogcGVyY2VudCxcbiAgJ3RyYW5zZm9ybS1vcmlnaW4teCc6IHBlcmNlbnQsXG4gICd0cmFuc2Zvcm0tb3JpZ2luLXknOiBwZXJjZW50LFxuICAndHJhbnNmb3JtLW9yaWdpbi16JzogcGVyY2VudCxcbiAgLy8gVHJhbnNpdGlvbiBwcm9wZXJ0aWVzXG4gICd0cmFuc2l0aW9uLWRlbGF5JzogbXMsXG4gICd0cmFuc2l0aW9uLWR1cmF0aW9uJzogbXMsXG4gIC8vIEFsaWdubWVudCBwcm9wZXJ0aWVzXG4gICd2ZXJ0aWNhbC1hbGlnbic6IHB4LFxuICAnZmxleC1iYXNpcyc6IHB4LFxuICAvLyBTb21lIHJhbmRvbSBwcm9wZXJ0aWVzXG4gICdzaGFwZS1tYXJnaW4nOiBweCxcbiAgc2l6ZTogcHgsXG4gIC8vIEdyaWQgcHJvcGVydGllc1xuICBncmlkOiBweCxcbiAgJ2dyaWQtZ2FwJzogcHgsXG4gICdncmlkLXJvdy1nYXAnOiBweCxcbiAgJ2dyaWQtY29sdW1uLWdhcCc6IHB4LFxuICAnZ3JpZC10ZW1wbGF0ZS1yb3dzJzogcHgsXG4gICdncmlkLXRlbXBsYXRlLWNvbHVtbnMnOiBweCxcbiAgJ2dyaWQtYXV0by1yb3dzJzogcHgsXG4gICdncmlkLWF1dG8tY29sdW1ucyc6IHB4LFxuICAvLyBOb3QgZXhpc3RpbmcgcHJvcGVydGllcy5cbiAgLy8gVXNlZCB0byBhdm9pZCBpc3N1ZXMgd2l0aCBqc3MtcGx1Z2luLWV4cGFuZCBpbnRlZ3JhdGlvbi5cbiAgJ2JveC1zaGFkb3cteCc6IHB4LFxuICAnYm94LXNoYWRvdy15JzogcHgsXG4gICdib3gtc2hhZG93LWJsdXInOiBweCxcbiAgJ2JveC1zaGFkb3ctc3ByZWFkJzogcHgsXG4gICdmb250LWxpbmUtaGVpZ2h0JzogcHgsXG4gICd0ZXh0LXNoYWRvdy14JzogcHgsXG4gICd0ZXh0LXNoYWRvdy15JzogcHgsXG4gICd0ZXh0LXNoYWRvdy1ibHVyJzogcHhcbn07XG5cbi8qKlxuICogQ2xvbmVzIHRoZSBvYmplY3QgYW5kIGFkZHMgYSBjYW1lbCBjYXNlZCBwcm9wZXJ0eSB2ZXJzaW9uLlxuICovXG5mdW5jdGlvbiBhZGRDYW1lbENhc2VkVmVyc2lvbihvYmopIHtcbiAgdmFyIHJlZ0V4cCA9IC8oLVthLXpdKS9nO1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShzdHIpIHtcbiAgICByZXR1cm4gc3RyWzFdLnRvVXBwZXJDYXNlKCk7XG4gIH07XG5cbiAgdmFyIG5ld09iaiA9IHt9O1xuXG4gIGZvciAodmFyIF9rZXkgaW4gb2JqKSB7XG4gICAgbmV3T2JqW19rZXldID0gb2JqW19rZXldO1xuICAgIG5ld09ialtfa2V5LnJlcGxhY2UocmVnRXhwLCByZXBsYWNlKV0gPSBvYmpbX2tleV07XG4gIH1cblxuICByZXR1cm4gbmV3T2JqO1xufVxuXG52YXIgdW5pdHMgPSBhZGRDYW1lbENhc2VkVmVyc2lvbihkZWZhdWx0VW5pdHMpO1xuLyoqXG4gKiBSZWN1cnNpdmUgZGVlcCBzdHlsZSBwYXNzaW5nIGZ1bmN0aW9uXG4gKi9cblxuZnVuY3Rpb24gaXRlcmF0ZShwcm9wLCB2YWx1ZSwgb3B0aW9ucykge1xuICBpZiAoIXZhbHVlKSByZXR1cm4gdmFsdWU7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFsdWVbaV0gPSBpdGVyYXRlKHByb3AsIHZhbHVlW2ldLCBvcHRpb25zKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgIGlmIChwcm9wID09PSAnZmFsbGJhY2tzJykge1xuICAgICAgZm9yICh2YXIgaW5uZXJQcm9wIGluIHZhbHVlKSB7XG4gICAgICAgIHZhbHVlW2lubmVyUHJvcF0gPSBpdGVyYXRlKGlubmVyUHJvcCwgdmFsdWVbaW5uZXJQcm9wXSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIF9pbm5lclByb3AgaW4gdmFsdWUpIHtcbiAgICAgICAgdmFsdWVbX2lubmVyUHJvcF0gPSBpdGVyYXRlKHByb3AgKyBcIi1cIiArIF9pbm5lclByb3AsIHZhbHVlW19pbm5lclByb3BdLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHZhciB1bml0ID0gb3B0aW9uc1twcm9wXSB8fCB1bml0c1twcm9wXTtcblxuICAgIGlmICh1bml0KSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHVuaXQgPT09ICdmdW5jdGlvbicgPyB1bml0KHZhbHVlKS50b1N0cmluZygpIDogXCJcIiArIHZhbHVlICsgdW5pdDtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cbi8qKlxuICogQWRkIHVuaXQgdG8gbnVtZXJpYyB2YWx1ZXMuXG4gKi9cblxuXG5mdW5jdGlvbiBkZWZhdWx0VW5pdChvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgY2FtZWxDYXNlZE9wdGlvbnMgPSBhZGRDYW1lbENhc2VkVmVyc2lvbihvcHRpb25zKTtcblxuICBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybiBzdHlsZTtcblxuICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgIHN0eWxlW3Byb3BdID0gaXRlcmF0ZShwcm9wLCBzdHlsZVtwcm9wXSwgY2FtZWxDYXNlZE9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsdWUsIHByb3ApIHtcbiAgICByZXR1cm4gaXRlcmF0ZShwcm9wLCB2YWx1ZSwgY2FtZWxDYXNlZE9wdGlvbnMpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvblByb2Nlc3NTdHlsZTogb25Qcm9jZXNzU3R5bGUsXG4gICAgb25DaGFuZ2VWYWx1ZTogb25DaGFuZ2VWYWx1ZVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0VW5pdDtcbiIsImltcG9ydCBhcnJheVdpdGhvdXRIb2xlcyBmcm9tIFwiLi9hcnJheVdpdGhvdXRIb2xlc1wiO1xuaW1wb3J0IGl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi9pdGVyYWJsZVRvQXJyYXlcIjtcbmltcG9ydCBub25JdGVyYWJsZVNwcmVhZCBmcm9tIFwiLi9ub25JdGVyYWJsZVNwcmVhZFwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcnIyW2ldID0gYXJyW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBhcnIyO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2VcIik7XG59IiwiaW1wb3J0IGlzSW5Ccm93c2VyIGZyb20gJ2lzLWluLWJyb3dzZXInO1xuaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheSc7XG5cbi8vIEV4cG9ydCBqYXZhc2NyaXB0IHN0eWxlIGFuZCBjc3Mgc3R5bGUgdmVuZG9yIHByZWZpeGVzLlxudmFyIGpzID0gJyc7XG52YXIgY3NzID0gJyc7XG52YXIgdmVuZG9yID0gJyc7XG52YXIgYnJvd3NlciA9ICcnO1xudmFyIGlzVG91Y2ggPSBpc0luQnJvd3NlciAmJiAnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7IC8vIFdlIHNob3VsZCBub3QgZG8gYW55dGhpbmcgaWYgcmVxdWlyZWQgc2VydmVyc2lkZS5cblxuaWYgKGlzSW5Ccm93c2VyKSB7XG4gIC8vIE9yZGVyIG1hdHRlcnMuIFdlIG5lZWQgdG8gY2hlY2sgV2Via2l0IHRoZSBsYXN0IG9uZSBiZWNhdXNlXG4gIC8vIG90aGVyIHZlbmRvcnMgdXNlIHRvIGFkZCBXZWJraXQgcHJlZml4ZXMgdG8gc29tZSBwcm9wZXJ0aWVzXG4gIHZhciBqc0Nzc01hcCA9IHtcbiAgICBNb3o6ICctbW96LScsXG4gICAgbXM6ICctbXMtJyxcbiAgICBPOiAnLW8tJyxcbiAgICBXZWJraXQ6ICctd2Via2l0LSdcbiAgfTtcblxuICB2YXIgX2RvY3VtZW50JGNyZWF0ZUVsZW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpLFxuICAgICAgc3R5bGUgPSBfZG9jdW1lbnQkY3JlYXRlRWxlbWUuc3R5bGU7XG5cbiAgdmFyIHRlc3RQcm9wID0gJ1RyYW5zZm9ybSc7XG5cbiAgZm9yICh2YXIga2V5IGluIGpzQ3NzTWFwKSB7XG4gICAgaWYgKGtleSArIHRlc3RQcm9wIGluIHN0eWxlKSB7XG4gICAgICBqcyA9IGtleTtcbiAgICAgIGNzcyA9IGpzQ3NzTWFwW2tleV07XG4gICAgICBicmVhaztcbiAgICB9XG4gIH0gLy8gQ29ycmVjdGx5IGRldGVjdCB0aGUgRWRnZSBicm93c2VyLlxuXG5cbiAgaWYgKGpzID09PSAnV2Via2l0JyAmJiAnbXNIeXBoZW5zJyBpbiBzdHlsZSkge1xuICAgIGpzID0gJ21zJztcbiAgICBjc3MgPSBqc0Nzc01hcC5tcztcbiAgICBicm93c2VyID0gJ2VkZ2UnO1xuICB9IC8vIENvcnJlY3RseSBkZXRlY3QgdGhlIFNhZmFyaSBicm93c2VyLlxuXG5cbiAgaWYgKGpzID09PSAnV2Via2l0JyAmJiAnLWFwcGxlLXRyYWlsaW5nLXdvcmQnIGluIHN0eWxlKSB7XG4gICAgdmVuZG9yID0gJ2FwcGxlJztcbiAgfVxufVxuLyoqXG4gKiBWZW5kb3IgcHJlZml4IHN0cmluZyBmb3IgdGhlIGN1cnJlbnQgYnJvd3Nlci5cbiAqXG4gKiBAdHlwZSB7e2pzOiBTdHJpbmcsIGNzczogU3RyaW5nLCB2ZW5kb3I6IFN0cmluZywgYnJvd3NlcjogU3RyaW5nfX1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuXG52YXIgcHJlZml4ID0ge1xuICBqczoganMsXG4gIGNzczogY3NzLFxuICB2ZW5kb3I6IHZlbmRvcixcbiAgYnJvd3NlcjogYnJvd3NlcixcbiAgaXNUb3VjaDogaXNUb3VjaFxufTtcblxuLyoqXG4gKiBUZXN0IGlmIGEga2V5ZnJhbWUgYXQtcnVsZSBzaG91bGQgYmUgcHJlZml4ZWQgb3Igbm90XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHZlbmRvciBwcmVmaXggc3RyaW5nIGZvciB0aGUgY3VycmVudCBicm93c2VyLlxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0ZWRLZXlmcmFtZXMoa2V5KSB7XG4gIC8vIEtleWZyYW1lcyBpcyBhbHJlYWR5IHByZWZpeGVkLiBlLmcuIGtleSA9ICdALXdlYmtpdC1rZXlmcmFtZXMgYSdcbiAgaWYgKGtleVsxXSA9PT0gJy0nKSByZXR1cm4ga2V5OyAvLyBObyBuZWVkIHRvIHByZWZpeCBJRS9FZGdlLiBPbGRlciBicm93c2VycyB3aWxsIGlnbm9yZSB1bnN1cHBvcnRlZCBydWxlcy5cbiAgLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPWtleWZyYW1lc1xuXG4gIGlmIChwcmVmaXguanMgPT09ICdtcycpIHJldHVybiBrZXk7XG4gIHJldHVybiBcIkBcIiArIHByZWZpeC5jc3MgKyBcImtleWZyYW1lc1wiICsga2V5LnN1YnN0cigxMCk7XG59XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1hcHBlYXJhbmNlXG5cbnZhciBhcHBlYXJlbmNlID0ge1xuICBub1ByZWZpbGw6IFsnYXBwZWFyYW5jZSddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAnYXBwZWFyYW5jZScpIHJldHVybiBmYWxzZTtcbiAgICBpZiAocHJlZml4LmpzID09PSAnbXMnKSByZXR1cm4gXCItd2Via2l0LVwiICsgcHJvcDtcbiAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1jb2xvci1hZGp1c3RcblxudmFyIGNvbG9yQWRqdXN0ID0ge1xuICBub1ByZWZpbGw6IFsnY29sb3ItYWRqdXN0J10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICdjb2xvci1hZGp1c3QnKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ1dlYmtpdCcpIHJldHVybiBwcmVmaXguY3NzICsgXCJwcmludC1cIiArIHByb3A7XG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbnZhciByZWdFeHAgPSAvWy1cXHNdKyguKT8vZztcbi8qKlxuICogUmVwbGFjZXMgdGhlIGxldHRlciB3aXRoIHRoZSBjYXBpdGFsIGxldHRlclxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtYXRjaFxuICogQHBhcmFtIHtTdHJpbmd9IGNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHRvVXBwZXIobWF0Y2gsIGMpIHtcbiAgcmV0dXJuIGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJztcbn1cbi8qKlxuICogQ29udmVydCBkYXNoIHNlcGFyYXRlZCBzdHJpbmdzIHRvIGNhbWVsLWNhc2VkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gY2FtZWxpemUoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShyZWdFeHAsIHRvVXBwZXIpO1xufVxuXG4vKipcbiAqIENvbnZlcnQgZGFzaCBzZXBhcmF0ZWQgc3RyaW5ncyB0byBwYXNjYWwgY2FzZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFzY2FsaXplKHN0cikge1xuICByZXR1cm4gY2FtZWxpemUoXCItXCIgKyBzdHIpO1xufVxuXG4vLyBidXQgd2UgY2FuIHVzZSBhIGxvbmdoYW5kIHByb3BlcnR5IGluc3RlYWQuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9bWFza1xuXG52YXIgbWFzayA9IHtcbiAgbm9QcmVmaWxsOiBbJ21hc2snXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgaWYgKCEvXm1hc2svLnRlc3QocHJvcCkpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdXZWJraXQnKSB7XG4gICAgICB2YXIgbG9uZ2hhbmQgPSAnbWFzay1pbWFnZSc7XG5cbiAgICAgIGlmIChjYW1lbGl6ZShsb25naGFuZCkgaW4gc3R5bGUpIHtcbiAgICAgICAgcmV0dXJuIHByb3A7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcmVmaXguanMgKyBwYXNjYWxpemUobG9uZ2hhbmQpIGluIHN0eWxlKSB7XG4gICAgICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXRleHQtb3JpZW50YXRpb25cblxudmFyIHRleHRPcmllbnRhdGlvbiA9IHtcbiAgbm9QcmVmaWxsOiBbJ3RleHQtb3JpZW50YXRpb24nXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcCAhPT0gJ3RleHQtb3JpZW50YXRpb24nKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LnZlbmRvciA9PT0gJ2FwcGxlJyAmJiAhcHJlZml4LmlzVG91Y2gpIHtcbiAgICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXRyYW5zZm9ybVxuXG52YXIgdHJhbnNmb3JtID0ge1xuICBub1ByZWZpbGw6IFsndHJhbnNmb3JtJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIGlmIChwcm9wICE9PSAndHJhbnNmb3JtJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKG9wdGlvbnMudHJhbnNmb3JtKSB7XG4gICAgICByZXR1cm4gcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD10cmFuc2l0aW9uXG5cbnZhciB0cmFuc2l0aW9uID0ge1xuICBub1ByZWZpbGw6IFsndHJhbnNpdGlvbiddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAocHJvcCAhPT0gJ3RyYW5zaXRpb24nKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAob3B0aW9ucy50cmFuc2l0aW9uKSB7XG4gICAgICByZXR1cm4gcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD13cml0aW5nLW1vZGVcblxudmFyIHdyaXRpbmdNb2RlID0ge1xuICBub1ByZWZpbGw6IFsnd3JpdGluZy1tb2RlJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICd3cml0aW5nLW1vZGUnKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnV2Via2l0JyB8fCBwcmVmaXguanMgPT09ICdtcycgJiYgcHJlZml4LmJyb3dzZXIgIT09ICdlZGdlJykge1xuICAgICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9dXNlci1zZWxlY3RcblxudmFyIHVzZXJTZWxlY3QgPSB7XG4gIG5vUHJlZmlsbDogWyd1c2VyLXNlbGVjdCddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAndXNlci1zZWxlY3QnKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnTW96JyB8fCBwcmVmaXguanMgPT09ICdtcycgfHwgcHJlZml4LnZlbmRvciA9PT0gJ2FwcGxlJykge1xuICAgICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9bXVsdGljb2x1bW5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3N0Y3NzL2F1dG9wcmVmaXhlci9pc3N1ZXMvNDkxXG4vLyBodHRwczovL2dpdGh1Yi5jb20vcG9zdGNzcy9hdXRvcHJlZml4ZXIvaXNzdWVzLzE3N1xuXG52YXIgYnJlYWtQcm9wc09sZCA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgaWYgKCEvXmJyZWFrLS8udGVzdChwcm9wKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ1dlYmtpdCcpIHtcbiAgICAgIHZhciBqc1Byb3AgPSBcIldlYmtpdENvbHVtblwiICsgcGFzY2FsaXplKHByb3ApO1xuICAgICAgcmV0dXJuIGpzUHJvcCBpbiBzdHlsZSA/IHByZWZpeC5jc3MgKyBcImNvbHVtbi1cIiArIHByb3AgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnTW96Jykge1xuICAgICAgdmFyIF9qc1Byb3AgPSBcInBhZ2VcIiArIHBhc2NhbGl6ZShwcm9wKTtcblxuICAgICAgcmV0dXJuIF9qc1Byb3AgaW4gc3R5bGUgPyBcInBhZ2UtXCIgKyBwcm9wIDogZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3Bvc3Rjc3MvYXV0b3ByZWZpeGVyL2lzc3Vlcy8zMjQuXG5cbnZhciBpbmxpbmVMb2dpY2FsT2xkID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICBpZiAoIS9eKGJvcmRlcnxtYXJnaW58cGFkZGluZyktaW5saW5lLy50ZXN0KHByb3ApKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ01veicpIHJldHVybiBwcm9wO1xuICAgIHZhciBuZXdQcm9wID0gcHJvcC5yZXBsYWNlKCctaW5saW5lJywgJycpO1xuICAgIHJldHVybiBwcmVmaXguanMgKyBwYXNjYWxpemUobmV3UHJvcCkgaW4gc3R5bGUgPyBwcmVmaXguY3NzICsgbmV3UHJvcCA6IGZhbHNlO1xuICB9XG59O1xuXG4vLyBDYW1lbGl6YXRpb24gaXMgcmVxdWlyZWQgYmVjYXVzZSB3ZSBjYW4ndCB0ZXN0IHVzaW5nLlxuLy8gQ1NTIHN5bnRheCBmb3IgZS5nLiBpbiBGRi5cblxudmFyIHVucHJlZml4ZWQgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIHJldHVybiBjYW1lbGl6ZShwcm9wKSBpbiBzdHlsZSA/IHByb3AgOiBmYWxzZTtcbiAgfVxufTtcblxudmFyIHByZWZpeGVkID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICB2YXIgcGFzY2FsaXplZCA9IHBhc2NhbGl6ZShwcm9wKTsgLy8gUmV0dXJuIGN1c3RvbSBDU1MgdmFyaWFibGUgd2l0aG91dCBwcmVmaXhpbmcuXG5cbiAgICBpZiAocHJvcFswXSA9PT0gJy0nKSByZXR1cm4gcHJvcDsgLy8gUmV0dXJuIGFscmVhZHkgcHJlZml4ZWQgdmFsdWUgd2l0aG91dCBwcmVmaXhpbmcuXG5cbiAgICBpZiAocHJvcFswXSA9PT0gJy0nICYmIHByb3BbMV0gPT09ICctJykgcmV0dXJuIHByb3A7XG4gICAgaWYgKHByZWZpeC5qcyArIHBhc2NhbGl6ZWQgaW4gc3R5bGUpIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDsgLy8gVHJ5IHdlYmtpdCBmYWxsYmFjay5cblxuICAgIGlmIChwcmVmaXguanMgIT09ICdXZWJraXQnICYmIFwiV2Via2l0XCIgKyBwYXNjYWxpemVkIGluIHN0eWxlKSByZXR1cm4gXCItd2Via2l0LVwiICsgcHJvcDtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1zY3JvbGwtc25hcFxuXG52YXIgc2Nyb2xsU25hcCA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcC5zdWJzdHJpbmcoMCwgMTEpICE9PSAnc2Nyb2xsLXNuYXAnKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnbXMnKSB7XG4gICAgICByZXR1cm4gXCJcIiArIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9b3ZlcnNjcm9sbC1iZWhhdmlvclxuXG52YXIgb3ZlcnNjcm9sbEJlaGF2aW9yID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAnb3ZlcnNjcm9sbC1iZWhhdmlvcicpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdtcycpIHtcbiAgICAgIHJldHVybiBwcmVmaXguY3NzICsgXCJzY3JvbGwtY2hhaW5pbmdcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxudmFyIHByb3BNYXAgPSB7XG4gICdmbGV4LWdyb3cnOiAnZmxleC1wb3NpdGl2ZScsXG4gICdmbGV4LXNocmluayc6ICdmbGV4LW5lZ2F0aXZlJyxcbiAgJ2ZsZXgtYmFzaXMnOiAnZmxleC1wcmVmZXJyZWQtc2l6ZScsXG4gICdqdXN0aWZ5LWNvbnRlbnQnOiAnZmxleC1wYWNrJyxcbiAgb3JkZXI6ICdmbGV4LW9yZGVyJyxcbiAgJ2FsaWduLWl0ZW1zJzogJ2ZsZXgtYWxpZ24nLFxuICAnYWxpZ24tY29udGVudCc6ICdmbGV4LWxpbmUtcGFjaycgLy8gJ2FsaWduLXNlbGYnIGlzIGhhbmRsZWQgYnkgJ2FsaWduLXNlbGYnIHBsdWdpbi5cblxufTsgLy8gU3VwcG9ydCBvbGQgZmxleCBzcGVjIGZyb20gMjAxMi5cblxudmFyIGZsZXgyMDEyID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICB2YXIgbmV3UHJvcCA9IHByb3BNYXBbcHJvcF07XG4gICAgaWYgKCFuZXdQcm9wKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHByZWZpeC5qcyArIHBhc2NhbGl6ZShuZXdQcm9wKSBpbiBzdHlsZSA/IHByZWZpeC5jc3MgKyBuZXdQcm9wIDogZmFsc2U7XG4gIH1cbn07XG5cbnZhciBwcm9wTWFwJDEgPSB7XG4gIGZsZXg6ICdib3gtZmxleCcsXG4gICdmbGV4LWdyb3cnOiAnYm94LWZsZXgnLFxuICAnZmxleC1kaXJlY3Rpb24nOiBbJ2JveC1vcmllbnQnLCAnYm94LWRpcmVjdGlvbiddLFxuICBvcmRlcjogJ2JveC1vcmRpbmFsLWdyb3VwJyxcbiAgJ2FsaWduLWl0ZW1zJzogJ2JveC1hbGlnbicsXG4gICdmbGV4LWZsb3cnOiBbJ2JveC1vcmllbnQnLCAnYm94LWRpcmVjdGlvbiddLFxuICAnanVzdGlmeS1jb250ZW50JzogJ2JveC1wYWNrJ1xufTtcbnZhciBwcm9wS2V5cyA9IE9iamVjdC5rZXlzKHByb3BNYXAkMSk7XG5cbnZhciBwcmVmaXhDc3MgPSBmdW5jdGlvbiBwcmVmaXhDc3MocCkge1xuICByZXR1cm4gcHJlZml4LmNzcyArIHA7XG59OyAvLyBTdXBwb3J0IG9sZCBmbGV4IHNwZWMgZnJvbSAyMDA5LlxuXG5cbnZhciBmbGV4MjAwOSA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlLCBfcmVmKSB7XG4gICAgdmFyIG11bHRpcGxlID0gX3JlZi5tdWx0aXBsZTtcblxuICAgIGlmIChwcm9wS2V5cy5pbmRleE9mKHByb3ApID4gLTEpIHtcbiAgICAgIHZhciBuZXdQcm9wID0gcHJvcE1hcCQxW3Byb3BdO1xuXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkobmV3UHJvcCkpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeC5qcyArIHBhc2NhbGl6ZShuZXdQcm9wKSBpbiBzdHlsZSA/IHByZWZpeC5jc3MgKyBuZXdQcm9wIDogZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICghbXVsdGlwbGUpIHJldHVybiBmYWxzZTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdQcm9wLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghKHByZWZpeC5qcyArIHBhc2NhbGl6ZShuZXdQcm9wWzBdKSBpbiBzdHlsZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ld1Byb3AubWFwKHByZWZpeENzcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vLyBwbHVnaW5zID0gW1xuLy8gICAuLi5wbHVnaW5zLFxuLy8gICAgYnJlYWtQcm9wc09sZCxcbi8vICAgIGlubGluZUxvZ2ljYWxPbGQsXG4vLyAgICB1bnByZWZpeGVkLFxuLy8gICAgcHJlZml4ZWQsXG4vLyAgICBzY3JvbGxTbmFwLFxuLy8gICAgZmxleDIwMTIsXG4vLyAgICBmbGV4MjAwOVxuLy8gXVxuLy8gUGx1Z2lucyB3aXRob3V0ICdub1ByZWZpbGwnIHZhbHVlLCBnb2luZyBsYXN0LlxuLy8gJ2ZsZXgtKicgcGx1Z2lucyBzaG91bGQgYmUgYXQgdGhlIGJvdHRvbS5cbi8vICdmbGV4MjAwOScgZ29pbmcgYWZ0ZXIgJ2ZsZXgyMDEyJy5cbi8vICdwcmVmaXhlZCcgZ29pbmcgYWZ0ZXIgJ3VucHJlZml4ZWQnXG5cbnZhciBwbHVnaW5zID0gW2FwcGVhcmVuY2UsIGNvbG9yQWRqdXN0LCBtYXNrLCB0ZXh0T3JpZW50YXRpb24sIHRyYW5zZm9ybSwgdHJhbnNpdGlvbiwgd3JpdGluZ01vZGUsIHVzZXJTZWxlY3QsIGJyZWFrUHJvcHNPbGQsIGlubGluZUxvZ2ljYWxPbGQsIHVucHJlZml4ZWQsIHByZWZpeGVkLCBzY3JvbGxTbmFwLCBvdmVyc2Nyb2xsQmVoYXZpb3IsIGZsZXgyMDEyLCBmbGV4MjAwOV07XG52YXIgcHJvcGVydHlEZXRlY3RvcnMgPSBwbHVnaW5zLmZpbHRlcihmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcC5zdXBwb3J0ZWRQcm9wZXJ0eTtcbn0pLm1hcChmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcC5zdXBwb3J0ZWRQcm9wZXJ0eTtcbn0pO1xudmFyIG5vUHJlZmlsbCA9IHBsdWdpbnMuZmlsdGVyKGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBwLm5vUHJlZmlsbDtcbn0pLnJlZHVjZShmdW5jdGlvbiAoYSwgcCkge1xuICBhLnB1c2guYXBwbHkoYSwgX3RvQ29uc3VtYWJsZUFycmF5KHAubm9QcmVmaWxsKSk7XG4gIHJldHVybiBhO1xufSwgW10pO1xuXG52YXIgZWw7XG52YXIgY2FjaGUgPSB7fTtcblxuaWYgKGlzSW5Ccm93c2VyKSB7XG4gIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpOyAvLyBXZSB0ZXN0IGV2ZXJ5IHByb3BlcnR5IG9uIHZlbmRvciBwcmVmaXggcmVxdWlyZW1lbnQuXG4gIC8vIE9uY2UgdGVzdGVkLCByZXN1bHQgaXMgY2FjaGVkLiBJdCBnaXZlcyB1cyB1cCB0byA3MCUgcGVyZiBib29zdC5cbiAgLy8gaHR0cDovL2pzcGVyZi5jb20vZWxlbWVudC1zdHlsZS1vYmplY3QtYWNjZXNzLXZzLXBsYWluLW9iamVjdFxuICAvL1xuICAvLyBQcmVmaWxsIGNhY2hlIHdpdGgga25vd24gY3NzIHByb3BlcnRpZXMgdG8gcmVkdWNlIGFtb3VudCBvZlxuICAvLyBwcm9wZXJ0aWVzIHdlIG5lZWQgdG8gZmVhdHVyZSB0ZXN0IGF0IHJ1bnRpbWUuXG4gIC8vIGh0dHA6Ly9kYXZpZHdhbHNoLm5hbWUvdmVuZG9yLXByZWZpeFxuXG4gIHZhciBjb21wdXRlZCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgJycpO1xuXG4gIGZvciAodmFyIGtleSQxIGluIGNvbXB1dGVkKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuICAgIGlmICghaXNOYU4oa2V5JDEpKSBjYWNoZVtjb21wdXRlZFtrZXkkMV1dID0gY29tcHV0ZWRba2V5JDFdO1xuICB9IC8vIFByb3BlcnRpZXMgdGhhdCBjYW5ub3QgYmUgY29ycmVjdGx5IGRldGVjdGVkIHVzaW5nIHRoZVxuICAvLyBjYWNoZSBwcmVmaWxsIG1ldGhvZC5cblxuXG4gIG5vUHJlZmlsbC5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIGRlbGV0ZSBjYWNoZVt4XTtcbiAgfSk7XG59XG4vKipcbiAqIFRlc3QgaWYgYSBwcm9wZXJ0eSBpcyBzdXBwb3J0ZWQsIHJldHVybnMgc3VwcG9ydGVkIHByb3BlcnR5IHdpdGggdmVuZG9yXG4gKiBwcmVmaXggaWYgcmVxdWlyZWQuIFJldHVybnMgYGZhbHNlYCBpZiBub3Qgc3VwcG9ydGVkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wIGRhc2ggc2VwYXJhdGVkXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAcmV0dXJuIHtTdHJpbmd8Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuXG5mdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICAvLyBGb3Igc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICBpZiAoIWVsKSByZXR1cm4gcHJvcDsgLy8gUmVtb3ZlIGNhY2hlIGZvciBiZW5jaG1hcmsgdGVzdHMgb3IgcmV0dXJuIHByb3BlcnR5IGZyb20gdGhlIGNhY2hlLlxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ2JlbmNobWFyaycgJiYgY2FjaGVbcHJvcF0gIT0gbnVsbCkge1xuICAgIHJldHVybiBjYWNoZVtwcm9wXTtcbiAgfSAvLyBDaGVjayBpZiAndHJhbnNpdGlvbicgb3IgJ3RyYW5zZm9ybScgbmF0aXZlbHkgc3VwcG9ydGVkIGluIGJyb3dzZXIuXG5cblxuICBpZiAocHJvcCA9PT0gJ3RyYW5zaXRpb24nIHx8IHByb3AgPT09ICd0cmFuc2Zvcm0nKSB7XG4gICAgb3B0aW9uc1twcm9wXSA9IHByb3AgaW4gZWwuc3R5bGU7XG4gIH0gLy8gRmluZCBhIHBsdWdpbiBmb3IgY3VycmVudCBwcmVmaXggcHJvcGVydHkuXG5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BlcnR5RGV0ZWN0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2FjaGVbcHJvcF0gPSBwcm9wZXJ0eURldGVjdG9yc1tpXShwcm9wLCBlbC5zdHlsZSwgb3B0aW9ucyk7IC8vIEJyZWFrIGxvb3AsIGlmIHZhbHVlIGZvdW5kLlxuXG4gICAgaWYgKGNhY2hlW3Byb3BdKSBicmVhaztcbiAgfSAvLyBSZXNldCBzdHlsZXMgZm9yIGN1cnJlbnQgcHJvcGVydHkuXG4gIC8vIEZpcmVmb3ggY2FuIGV2ZW4gdGhyb3cgYW4gZXJyb3IgZm9yIGludmFsaWQgcHJvcGVydGllcywgZS5nLiwgXCIwXCIuXG5cblxuICB0cnkge1xuICAgIGVsLnN0eWxlW3Byb3BdID0gJyc7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBjYWNoZVtwcm9wXTtcbn1cblxudmFyIGNhY2hlJDEgPSB7fTtcbnZhciB0cmFuc2l0aW9uUHJvcGVydGllcyA9IHtcbiAgdHJhbnNpdGlvbjogMSxcbiAgJ3RyYW5zaXRpb24tcHJvcGVydHknOiAxLFxuICAnLXdlYmtpdC10cmFuc2l0aW9uJzogMSxcbiAgJy13ZWJraXQtdHJhbnNpdGlvbi1wcm9wZXJ0eSc6IDFcbn07XG52YXIgdHJhbnNQcm9wc1JlZ0V4cCA9IC8oXlxccypbXFx3LV0rKXwsIChcXHMqW1xcdy1dKykoPyFbXigpXSpcXCkpL2c7XG52YXIgZWwkMTtcbi8qKlxuICogUmV0dXJucyBwcmVmaXhlZCB2YWx1ZSB0cmFuc2l0aW9uL3RyYW5zZm9ybSBpZiBuZWVkZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1hdGNoXG4gKiBAcGFyYW0ge1N0cmluZ30gcDFcbiAqIEBwYXJhbSB7U3RyaW5nfSBwMlxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcHJlZml4VHJhbnNpdGlvbkNhbGxiYWNrKG1hdGNoLCBwMSwgcDIpIHtcbiAgaWYgKHAxID09PSAndmFyJykgcmV0dXJuICd2YXInO1xuICBpZiAocDEgPT09ICdhbGwnKSByZXR1cm4gJ2FsbCc7XG4gIGlmIChwMiA9PT0gJ2FsbCcpIHJldHVybiAnLCBhbGwnO1xuICB2YXIgcHJlZml4ZWRWYWx1ZSA9IHAxID8gc3VwcG9ydGVkUHJvcGVydHkocDEpIDogXCIsIFwiICsgc3VwcG9ydGVkUHJvcGVydHkocDIpO1xuICBpZiAoIXByZWZpeGVkVmFsdWUpIHJldHVybiBwMSB8fCBwMjtcbiAgcmV0dXJuIHByZWZpeGVkVmFsdWU7XG59XG5cbmlmIChpc0luQnJvd3NlcikgZWwkMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbi8qKlxuICogUmV0dXJucyBwcmVmaXhlZCB2YWx1ZSBpZiBuZWVkZWQuIFJldHVybnMgYGZhbHNlYCBpZiB2YWx1ZSBpcyBub3Qgc3VwcG9ydGVkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eVxuICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtTdHJpbmd8Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydGVkVmFsdWUocHJvcGVydHksIHZhbHVlKSB7XG4gIC8vIEZvciBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG4gIHZhciBwcmVmaXhlZFZhbHVlID0gdmFsdWU7XG4gIGlmICghZWwkMSB8fCBwcm9wZXJ0eSA9PT0gJ2NvbnRlbnQnKSByZXR1cm4gdmFsdWU7IC8vIEl0IGlzIGEgc3RyaW5nIG9yIGEgbnVtYmVyIGFzIGEgc3RyaW5nIGxpa2UgJzEnLlxuICAvLyBXZSB3YW50IG9ubHkgcHJlZml4YWJsZSB2YWx1ZXMgaGVyZS5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuXG4gIGlmICh0eXBlb2YgcHJlZml4ZWRWYWx1ZSAhPT0gJ3N0cmluZycgfHwgIWlzTmFOKHBhcnNlSW50KHByZWZpeGVkVmFsdWUsIDEwKSkpIHtcbiAgICByZXR1cm4gcHJlZml4ZWRWYWx1ZTtcbiAgfSAvLyBDcmVhdGUgY2FjaGUga2V5IGZvciBjdXJyZW50IHZhbHVlLlxuXG5cbiAgdmFyIGNhY2hlS2V5ID0gcHJvcGVydHkgKyBwcmVmaXhlZFZhbHVlOyAvLyBSZW1vdmUgY2FjaGUgZm9yIGJlbmNobWFyayB0ZXN0cyBvciByZXR1cm4gdmFsdWUgZnJvbSBjYWNoZS5cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdiZW5jaG1hcmsnICYmIGNhY2hlJDFbY2FjaGVLZXldICE9IG51bGwpIHtcbiAgICByZXR1cm4gY2FjaGUkMVtjYWNoZUtleV07XG4gIH0gLy8gSUUgY2FuIGV2ZW4gdGhyb3cgYW4gZXJyb3IgaW4gc29tZSBjYXNlcywgZm9yIGUuZy4gc3R5bGUuY29udGVudCA9ICdiYXInLlxuXG5cbiAgdHJ5IHtcbiAgICAvLyBUZXN0IHZhbHVlIGFzIGl0IGlzLlxuICAgIGVsJDEuc3R5bGVbcHJvcGVydHldID0gcHJlZml4ZWRWYWx1ZTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gUmV0dXJuIGZhbHNlIGlmIHZhbHVlIG5vdCBzdXBwb3J0ZWQuXG4gICAgY2FjaGUkMVtjYWNoZUtleV0gPSBmYWxzZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gSWYgJ3RyYW5zaXRpb24nIG9yICd0cmFuc2l0aW9uLXByb3BlcnR5JyBwcm9wZXJ0eS5cblxuXG4gIGlmICh0cmFuc2l0aW9uUHJvcGVydGllc1twcm9wZXJ0eV0pIHtcbiAgICBwcmVmaXhlZFZhbHVlID0gcHJlZml4ZWRWYWx1ZS5yZXBsYWNlKHRyYW5zUHJvcHNSZWdFeHAsIHByZWZpeFRyYW5zaXRpb25DYWxsYmFjayk7XG4gIH0gZWxzZSBpZiAoZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPT09ICcnKSB7XG4gICAgLy8gVmFsdWUgd2l0aCBhIHZlbmRvciBwcmVmaXguXG4gICAgcHJlZml4ZWRWYWx1ZSA9IHByZWZpeC5jc3MgKyBwcmVmaXhlZFZhbHVlOyAvLyBIYXJkY29kZSB0ZXN0IHRvIGNvbnZlcnQgXCJmbGV4XCIgdG8gXCItbXMtZmxleGJveFwiIGZvciBJRTEwLlxuXG4gICAgaWYgKHByZWZpeGVkVmFsdWUgPT09ICctbXMtZmxleCcpIGVsJDEuc3R5bGVbcHJvcGVydHldID0gJy1tcy1mbGV4Ym94JzsgLy8gVGVzdCBwcmVmaXhlZCB2YWx1ZS5cblxuICAgIGVsJDEuc3R5bGVbcHJvcGVydHldID0gcHJlZml4ZWRWYWx1ZTsgLy8gUmV0dXJuIGZhbHNlIGlmIHZhbHVlIG5vdCBzdXBwb3J0ZWQuXG5cbiAgICBpZiAoZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPT09ICcnKSB7XG4gICAgICBjYWNoZSQxW2NhY2hlS2V5XSA9IGZhbHNlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSAvLyBSZXNldCBzdHlsZXMgZm9yIGN1cnJlbnQgcHJvcGVydHkuXG5cblxuICBlbCQxLnN0eWxlW3Byb3BlcnR5XSA9ICcnOyAvLyBXcml0ZSBjdXJyZW50IHZhbHVlIHRvIGNhY2hlLlxuXG4gIGNhY2hlJDFbY2FjaGVLZXldID0gcHJlZml4ZWRWYWx1ZTtcbiAgcmV0dXJuIGNhY2hlJDFbY2FjaGVLZXldO1xufVxuXG5leHBvcnQgeyBwcmVmaXgsIHN1cHBvcnRlZEtleWZyYW1lcywgc3VwcG9ydGVkUHJvcGVydHksIHN1cHBvcnRlZFZhbHVlIH07XG4iLCJpbXBvcnQgeyBzdXBwb3J0ZWRLZXlmcmFtZXMsIHN1cHBvcnRlZFZhbHVlLCBzdXBwb3J0ZWRQcm9wZXJ0eSB9IGZyb20gJ2Nzcy12ZW5kb3InO1xuaW1wb3J0IHsgdG9Dc3NWYWx1ZSB9IGZyb20gJ2pzcyc7XG5cbi8qKlxuICogQWRkIHZlbmRvciBwcmVmaXggdG8gYSBwcm9wZXJ0eSBuYW1lIHdoZW4gbmVlZGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24ganNzVmVuZG9yUHJlZml4ZXIoKSB7XG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1J1bGUocnVsZSkge1xuICAgIGlmIChydWxlLnR5cGUgPT09ICdrZXlmcmFtZXMnKSB7XG4gICAgICB2YXIgYXRSdWxlID0gcnVsZTtcbiAgICAgIGF0UnVsZS5hdCA9IHN1cHBvcnRlZEtleWZyYW1lcyhhdFJ1bGUuYXQpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHByZWZpeFN0eWxlKHN0eWxlKSB7XG4gICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgICAgdmFyIHZhbHVlID0gc3R5bGVbcHJvcF07XG5cbiAgICAgIGlmIChwcm9wID09PSAnZmFsbGJhY2tzJyAmJiBBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBzdHlsZVtwcm9wXSA9IHZhbHVlLm1hcChwcmVmaXhTdHlsZSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2hhbmdlUHJvcCA9IGZhbHNlO1xuICAgICAgdmFyIHN1cHBvcnRlZFByb3AgPSBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKTtcbiAgICAgIGlmIChzdXBwb3J0ZWRQcm9wICYmIHN1cHBvcnRlZFByb3AgIT09IHByb3ApIGNoYW5nZVByb3AgPSB0cnVlO1xuICAgICAgdmFyIGNoYW5nZVZhbHVlID0gZmFsc2U7XG4gICAgICB2YXIgc3VwcG9ydGVkVmFsdWUkMSA9IHN1cHBvcnRlZFZhbHVlKHN1cHBvcnRlZFByb3AsIHRvQ3NzVmFsdWUodmFsdWUpKTtcbiAgICAgIGlmIChzdXBwb3J0ZWRWYWx1ZSQxICYmIHN1cHBvcnRlZFZhbHVlJDEgIT09IHZhbHVlKSBjaGFuZ2VWYWx1ZSA9IHRydWU7XG5cbiAgICAgIGlmIChjaGFuZ2VQcm9wIHx8IGNoYW5nZVZhbHVlKSB7XG4gICAgICAgIGlmIChjaGFuZ2VQcm9wKSBkZWxldGUgc3R5bGVbcHJvcF07XG4gICAgICAgIHN0eWxlW3N1cHBvcnRlZFByb3AgfHwgcHJvcF0gPSBzdXBwb3J0ZWRWYWx1ZSQxIHx8IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlKSB7XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJykgcmV0dXJuIHN0eWxlO1xuICAgIHJldHVybiBwcmVmaXhTdHlsZShzdHlsZSk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbHVlLCBwcm9wKSB7XG4gICAgcmV0dXJuIHN1cHBvcnRlZFZhbHVlKHByb3AsIHRvQ3NzVmFsdWUodmFsdWUpKSB8fCB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzUnVsZTogb25Qcm9jZXNzUnVsZSxcbiAgICBvblByb2Nlc3NTdHlsZTogb25Qcm9jZXNzU3R5bGUsXG4gICAgb25DaGFuZ2VWYWx1ZTogb25DaGFuZ2VWYWx1ZVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBqc3NWZW5kb3JQcmVmaXhlcjtcbiIsIi8qKlxuICogU29ydCBwcm9wcyBieSBsZW5ndGguXG4gKi9cbmZ1bmN0aW9uIGpzc1Byb3BzU29ydCgpIHtcbiAgdmFyIHNvcnQgPSBmdW5jdGlvbiBzb3J0KHByb3AwLCBwcm9wMSkge1xuICAgIGlmIChwcm9wMC5sZW5ndGggPT09IHByb3AxLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHByb3AwID4gcHJvcDEgPyAxIDogLTE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3AwLmxlbmd0aCAtIHByb3AxLmxlbmd0aDtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIG9uUHJvY2Vzc1N0eWxlOiBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSkge1xuICAgICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJykgcmV0dXJuIHN0eWxlO1xuICAgICAgdmFyIG5ld1N0eWxlID0ge307XG4gICAgICB2YXIgcHJvcHMgPSBPYmplY3Qua2V5cyhzdHlsZSkuc29ydChzb3J0KTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBuZXdTdHlsZVtwcm9wc1tpXV0gPSBzdHlsZVtwcm9wc1tpXV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXdTdHlsZTtcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGpzc1Byb3BzU29ydDtcbiIsImltcG9ydCBmdW5jdGlvbnMgZnJvbSAnanNzLXBsdWdpbi1ydWxlLXZhbHVlLWZ1bmN0aW9uJztcbmltcG9ydCBnbG9iYWwgZnJvbSAnanNzLXBsdWdpbi1nbG9iYWwnO1xuaW1wb3J0IG5lc3RlZCBmcm9tICdqc3MtcGx1Z2luLW5lc3RlZCc7XG5pbXBvcnQgY2FtZWxDYXNlIGZyb20gJ2pzcy1wbHVnaW4tY2FtZWwtY2FzZSc7XG5pbXBvcnQgZGVmYXVsdFVuaXQgZnJvbSAnanNzLXBsdWdpbi1kZWZhdWx0LXVuaXQnO1xuaW1wb3J0IHZlbmRvclByZWZpeGVyIGZyb20gJ2pzcy1wbHVnaW4tdmVuZG9yLXByZWZpeGVyJztcbmltcG9ydCBwcm9wc1NvcnQgZnJvbSAnanNzLXBsdWdpbi1wcm9wcy1zb3J0JzsgLy8gU3Vic2V0IG9mIGpzcy1wcmVzZXQtZGVmYXVsdCB3aXRoIG9ubHkgdGhlIHBsdWdpbnMgdGhlIE1hdGVyaWFsLVVJIGNvbXBvbmVudHMgYXJlIHVzaW5nLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBqc3NQcmVzZXQoKSB7XG4gIHJldHVybiB7XG4gICAgcGx1Z2luczogW2Z1bmN0aW9ucygpLCBnbG9iYWwoKSwgbmVzdGVkKCksIGNhbWVsQ2FzZSgpLCBkZWZhdWx0VW5pdCgpLCAvLyBEaXNhYmxlIHRoZSB2ZW5kb3IgcHJlZml4ZXIgc2VydmVyLXNpZGUsIGl0IGRvZXMgbm90aGluZy5cbiAgICAvLyBUaGlzIHdheSwgd2UgY2FuIGdldCBhIHBlcmZvcm1hbmNlIGJvb3N0LlxuICAgIC8vIEluIHRoZSBkb2N1bWVudGF0aW9uLCB3ZSBhcmUgdXNpbmcgYGF1dG9wcmVmaXhlcmAgdG8gc29sdmUgdGhpcyBwcm9ibGVtLlxuICAgIHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHZlbmRvclByZWZpeGVyKCksIHByb3BzU29ydCgpXVxuICB9O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZXhhY3RQcm9wIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSBmcm9tICcuLi9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSc7XG5pbXBvcnQgeyBjcmVhdGUgfSBmcm9tICdqc3MnO1xuaW1wb3J0IGpzc1ByZXNldCBmcm9tICcuLi9qc3NQcmVzZXQnOyAvLyBEZWZhdWx0IEpTUyBpbnN0YW5jZS5cblxudmFyIGpzcyA9IGNyZWF0ZShqc3NQcmVzZXQoKSk7IC8vIFVzZSBhIHNpbmdsZXRvbiBvciB0aGUgcHJvdmlkZWQgb25lIGJ5IHRoZSBjb250ZXh0LlxuLy9cbi8vIFRoZSBjb3VudGVyLWJhc2VkIGFwcHJvYWNoIGRvZXNuJ3QgdG9sZXJhdGUgYW55IG1pc3Rha2UuXG4vLyBJdCdzIG11Y2ggc2FmZXIgdG8gdXNlIHRoZSBzYW1lIGNvdW50ZXIgZXZlcnl3aGVyZS5cblxudmFyIGdlbmVyYXRlQ2xhc3NOYW1lID0gY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUoKTsgLy8gRXhwb3J0ZWQgZm9yIHRlc3QgcHVycG9zZXNcblxuZXhwb3J0IHZhciBzaGVldHNNYW5hZ2VyID0gbmV3IE1hcCgpO1xudmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICBkaXNhYmxlR2VuZXJhdGlvbjogZmFsc2UsXG4gIGdlbmVyYXRlQ2xhc3NOYW1lOiBnZW5lcmF0ZUNsYXNzTmFtZSxcbiAganNzOiBqc3MsXG4gIHNoZWV0c0NhY2hlOiBudWxsLFxuICBzaGVldHNNYW5hZ2VyOiBzaGVldHNNYW5hZ2VyLFxuICBzaGVldHNSZWdpc3RyeTogbnVsbFxufTtcbmV4cG9ydCB2YXIgU3R5bGVzQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoZGVmYXVsdE9wdGlvbnMpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBTdHlsZXNDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1N0eWxlc0NvbnRleHQnO1xufVxuXG52YXIgaW5qZWN0Rmlyc3ROb2RlO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU3R5bGVzUHJvdmlkZXIocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBfcHJvcHMkaW5qZWN0Rmlyc3QgPSBwcm9wcy5pbmplY3RGaXJzdCxcbiAgICAgIGluamVjdEZpcnN0ID0gX3Byb3BzJGluamVjdEZpcnN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRpbmplY3RGaXJzdCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlR2VuZXJhdCA9IHByb3BzLmRpc2FibGVHZW5lcmF0aW9uLFxuICAgICAgZGlzYWJsZUdlbmVyYXRpb24gPSBfcHJvcHMkZGlzYWJsZUdlbmVyYXQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVHZW5lcmF0LFxuICAgICAgbG9jYWxPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImluamVjdEZpcnN0XCIsIFwiZGlzYWJsZUdlbmVyYXRpb25cIl0pO1xuXG4gIHZhciBvdXRlck9wdGlvbnMgPSBSZWFjdC51c2VDb250ZXh0KFN0eWxlc0NvbnRleHQpO1xuXG4gIHZhciBjb250ZXh0ID0gX2V4dGVuZHMoX2V4dGVuZHMoe30sIG91dGVyT3B0aW9ucyksIHt9LCB7XG4gICAgZGlzYWJsZUdlbmVyYXRpb246IGRpc2FibGVHZW5lcmF0aW9uXG4gIH0sIGxvY2FsT3B0aW9ucyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgJiYgIWNvbnRleHQuc2hlZXRzTWFuYWdlcikge1xuICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IFlvdSBuZWVkIHRvIHVzZSB0aGUgU2VydmVyU3R5bGVTaGVldHMgQVBJIHdoZW4gcmVuZGVyaW5nIG9uIHRoZSBzZXJ2ZXIuJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoY29udGV4dC5qc3Mub3B0aW9ucy5pbnNlcnRpb25Qb2ludCAmJiBpbmplY3RGaXJzdCkge1xuICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IFlvdSBjYW5ub3QgdXNlIGEgY3VzdG9tIGluc2VydGlvblBvaW50IGFuZCA8U3R5bGVzQ29udGV4dCBpbmplY3RGaXJzdD4gYXQgdGhlIHNhbWUgdGltZS4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChpbmplY3RGaXJzdCAmJiBsb2NhbE9wdGlvbnMuanNzKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogWW91IGNhbm5vdCB1c2UgdGhlIGpzcyBhbmQgaW5qZWN0Rmlyc3QgcHJvcHMgYXQgdGhlIHNhbWUgdGltZS4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbnRleHQuanNzLm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgJiYgaW5qZWN0Rmlyc3QgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAoIWluamVjdEZpcnN0Tm9kZSkge1xuICAgICAgdmFyIGhlYWQgPSBkb2N1bWVudC5oZWFkO1xuICAgICAgaW5qZWN0Rmlyc3ROb2RlID0gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnbXVpLWluamVjdC1maXJzdCcpO1xuICAgICAgaGVhZC5pbnNlcnRCZWZvcmUoaW5qZWN0Rmlyc3ROb2RlLCBoZWFkLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIGNvbnRleHQuanNzID0gY3JlYXRlKHtcbiAgICAgIHBsdWdpbnM6IGpzc1ByZXNldCgpLnBsdWdpbnMsXG4gICAgICBpbnNlcnRpb25Qb2ludDogaW5qZWN0Rmlyc3ROb2RlXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoU3R5bGVzQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0XG4gIH0sIGNoaWxkcmVuKTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN0eWxlc1Byb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFlvdXIgY29tcG9uZW50IHRyZWUuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogWW91IGNhbiBkaXNhYmxlIHRoZSBnZW5lcmF0aW9uIG9mIHRoZSBzdHlsZXMgd2l0aCB0aGlzIG9wdGlvbi5cbiAgICogSXQgY2FuIGJlIHVzZWZ1bCB3aGVuIHRyYXZlcnNpbmcgdGhlIFJlYWN0IHRyZWUgb3V0c2lkZSBvZiB0aGUgSFRNTFxuICAgKiByZW5kZXJpbmcgc3RlcCBvbiB0aGUgc2VydmVyLlxuICAgKiBMZXQncyBzYXkgeW91IGFyZSB1c2luZyByZWFjdC1hcG9sbG8gdG8gZXh0cmFjdCBhbGxcbiAgICogdGhlIHF1ZXJpZXMgbWFkZSBieSB0aGUgaW50ZXJmYWNlIHNlcnZlci1zaWRlIC0geW91IGNhbiBzaWduaWZpY2FudGx5IHNwZWVkIHVwIHRoZSB0cmF2ZXJzYWwgd2l0aCB0aGlzIHByb3AuXG4gICAqL1xuICBkaXNhYmxlR2VuZXJhdGlvbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEpTUydzIGNsYXNzIG5hbWUgZ2VuZXJhdG9yLlxuICAgKi9cbiAgZ2VuZXJhdGVDbGFzc05hbWU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0LCB0aGUgc3R5bGVzIGFyZSBpbmplY3RlZCBsYXN0IGluIHRoZSA8aGVhZD4gZWxlbWVudCBvZiB0aGUgcGFnZS5cbiAgICogQXMgYSByZXN1bHQsIHRoZXkgZ2FpbiBtb3JlIHNwZWNpZmljaXR5IHRoYW4gYW55IG90aGVyIHN0eWxlIHNoZWV0LlxuICAgKiBJZiB5b3Ugd2FudCB0byBvdmVycmlkZSBNYXRlcmlhbC1VSSdzIHN0eWxlcywgc2V0IHRoaXMgcHJvcC5cbiAgICovXG4gIGluamVjdEZpcnN0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSlNTJ3MgaW5zdGFuY2UuXG4gICAqL1xuICBqc3M6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHNlcnZlckdlbmVyYXRlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKlxuICAgKiBCZXRhIGZlYXR1cmUuXG4gICAqXG4gICAqIENhY2hlIGZvciB0aGUgc2hlZXRzLlxuICAgKi9cbiAgc2hlZXRzQ2FjaGU6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICpcbiAgICogVGhlIHNoZWV0c01hbmFnZXIgaXMgdXNlZCB0byBkZWR1cGxpY2F0ZSBzdHlsZSBzaGVldCBpbmplY3Rpb24gaW4gdGhlIHBhZ2UuXG4gICAqIEl0J3MgZGVkdXBsaWNhdGluZyB1c2luZyB0aGUgKHRoZW1lLCBzdHlsZXMpIGNvdXBsZS5cbiAgICogT24gdGhlIHNlcnZlciwgeW91IHNob3VsZCBwcm92aWRlIGEgbmV3IGluc3RhbmNlIGZvciBlYWNoIHJlcXVlc3QuXG4gICAqL1xuICBzaGVldHNNYW5hZ2VyOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqXG4gICAqIENvbGxlY3QgdGhlIHNoZWV0cy5cbiAgICovXG4gIHNoZWV0c1JlZ2lzdHJ5OiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdHlsZXNQcm92aWRlci5wcm9wVHlwZXMgPSBleGFjdFByb3AoU3R5bGVzUHJvdmlkZXIucHJvcFR5cGVzKSA6IHZvaWQgMDtcbn0iLCIvKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvcHJlZmVyLWRlZmF1bHQtZXhwb3J0ICovXG4vLyBHbG9iYWwgaW5kZXggY291bnRlciB0byBwcmVzZXJ2ZSBzb3VyY2Ugb3JkZXIuXG4vLyBXZSBjcmVhdGUgdGhlIHN0eWxlIHNoZWV0IGR1cmluZyB0aGUgY3JlYXRpb24gb2YgdGhlIGNvbXBvbmVudCxcbi8vIGNoaWxkcmVuIGFyZSBoYW5kbGVkIGFmdGVyIHRoZSBwYXJlbnRzLCBzbyB0aGUgb3JkZXIgb2Ygc3R5bGUgZWxlbWVudHMgd291bGQgYmUgcGFyZW50LT5jaGlsZC5cbi8vIEl0IGlzIGEgcHJvYmxlbSB0aG91Z2ggd2hlbiBhIHBhcmVudCBwYXNzZXMgYSBjbGFzc05hbWVcbi8vIHdoaWNoIG5lZWRzIHRvIG92ZXJyaWRlIGFueSBjaGlsZCdzIHN0eWxlcy5cbi8vIFN0eWxlU2hlZXQgb2YgdGhlIGNoaWxkIGhhcyBhIGhpZ2hlciBzcGVjaWZpY2l0eSwgYmVjYXVzZSBvZiB0aGUgc291cmNlIG9yZGVyLlxuLy8gU28gb3VyIHNvbHV0aW9uIGlzIHRvIHJlbmRlciBzaGVldHMgdGhlbSBpbiB0aGUgcmV2ZXJzZSBvcmRlciBjaGlsZC0+c2hlZXQsIHNvXG4vLyB0aGF0IHBhcmVudCBoYXMgYSBoaWdoZXIgc3BlY2lmaWNpdHkuXG52YXIgaW5kZXhDb3VudGVyID0gLTFlOTtcbmV4cG9ydCBmdW5jdGlvbiBpbmNyZW1lbnQoKSB7XG4gIGluZGV4Q291bnRlciArPSAxO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGluZGV4Q291bnRlciA+PSAwKSB7XG4gICAgICBjb25zb2xlLndhcm4oWydNYXRlcmlhbC1VSTogWW91IG1pZ2h0IGhhdmUgYSBtZW1vcnkgbGVhay4nLCAnVGhlIGluZGV4Q291bnRlciBpcyBub3Qgc3VwcG9zZWQgdG8gZ3JvdyB0aGF0IG11Y2guJ10uam9pbignXFxuJykpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpbmRleENvdW50ZXI7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QoaXRlbSkge1xuICByZXR1cm4gaXRlbSAmJiBfdHlwZW9mKGl0ZW0pID09PSAnb2JqZWN0JyAmJiBpdGVtLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWVwbWVyZ2UodGFyZ2V0LCBzb3VyY2UpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHtcbiAgICBjbG9uZTogdHJ1ZVxuICB9O1xuICB2YXIgb3V0cHV0ID0gb3B0aW9ucy5jbG9uZSA/IF9leHRlbmRzKHt9LCB0YXJnZXQpIDogdGFyZ2V0O1xuXG4gIGlmIChpc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIC8vIEF2b2lkIHByb3RvdHlwZSBwb2xsdXRpb25cbiAgICAgIGlmIChrZXkgPT09ICdfX3Byb3RvX18nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzUGxhaW5PYmplY3Qoc291cmNlW2tleV0pICYmIGtleSBpbiB0YXJnZXQpIHtcbiAgICAgICAgb3V0cHV0W2tleV0gPSBkZWVwbWVyZ2UodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldLCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dHB1dFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBub29wVGhlbWUgZnJvbSAnLi9ub29wVGhlbWUnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U3R5bGVzQ3JlYXRvcihzdHlsZXNPckNyZWF0b3IpIHtcbiAgdmFyIHRoZW1pbmdFbmFibGVkID0gdHlwZW9mIHN0eWxlc09yQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJztcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChfdHlwZW9mKHN0eWxlc09yQ3JlYXRvcikgIT09ICdvYmplY3QnICYmICF0aGVtaW5nRW5hYmxlZCkge1xuICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiBUaGUgYHN0eWxlc2AgYXJndW1lbnQgcHJvdmlkZWQgaXMgaW52YWxpZC4nLCAnWW91IG5lZWQgdG8gcHJvdmlkZSBhIGZ1bmN0aW9uIGdlbmVyYXRpbmcgdGhlIHN0eWxlcyBvciBhIHN0eWxlcyBvYmplY3QuJ10uam9pbignXFxuJykpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUodGhlbWUsIG5hbWUpIHtcbiAgICAgIHZhciBzdHlsZXM7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHN0eWxlcyA9IHRoZW1pbmdFbmFibGVkID8gc3R5bGVzT3JDcmVhdG9yKHRoZW1lKSA6IHN0eWxlc09yQ3JlYXRvcjtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmICh0aGVtaW5nRW5hYmxlZCA9PT0gdHJ1ZSAmJiB0aGVtZSA9PT0gbm9vcFRoZW1lKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBwcmVwZW5kIGVycm9yIG1lc3NhZ2UvbmFtZSBpbnN0ZWFkXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFsnTWF0ZXJpYWwtVUk6IFRoZSBgc3R5bGVzYCBhcmd1bWVudCBwcm92aWRlZCBpcyBpbnZhbGlkLicsICdZb3UgYXJlIHByb3ZpZGluZyBhIGZ1bmN0aW9uIHdpdGhvdXQgYSB0aGVtZSBpbiB0aGUgY29udGV4dC4nLCAnT25lIG9mIHRoZSBwYXJlbnQgZWxlbWVudHMgbmVlZHMgdG8gdXNlIGEgVGhlbWVQcm92aWRlci4nXS5qb2luKCdcXG4nKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW5hbWUgfHwgIXRoZW1lLm92ZXJyaWRlcyB8fCAhdGhlbWUub3ZlcnJpZGVzW25hbWVdKSB7XG4gICAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBvdmVycmlkZXMgPSB0aGVtZS5vdmVycmlkZXNbbmFtZV07XG5cbiAgICAgIHZhciBzdHlsZXNXaXRoT3ZlcnJpZGVzID0gX2V4dGVuZHMoe30sIHN0eWxlcyk7XG5cbiAgICAgIE9iamVjdC5rZXlzKG92ZXJyaWRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKCFzdHlsZXNXaXRoT3ZlcnJpZGVzW2tleV0pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihbJ01hdGVyaWFsLVVJOiBZb3UgYXJlIHRyeWluZyB0byBvdmVycmlkZSBhIHN0eWxlIHRoYXQgZG9lcyBub3QgZXhpc3QuJywgXCJGaXggdGhlIGBcIi5jb25jYXQoa2V5LCBcImAga2V5IG9mIGB0aGVtZS5vdmVycmlkZXMuXCIpLmNvbmNhdChuYW1lLCBcImAuXCIpXS5qb2luKCdcXG4nKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc3R5bGVzV2l0aE92ZXJyaWRlc1trZXldID0gZGVlcG1lcmdlKHN0eWxlc1dpdGhPdmVycmlkZXNba2V5XSwgb3ZlcnJpZGVzW2tleV0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gc3R5bGVzV2l0aE92ZXJyaWRlcztcbiAgICB9LFxuICAgIG9wdGlvbnM6IHt9XG4gIH07XG59IiwiLy8gV2UgdXNlIHRoZSBzYW1lIGVtcHR5IG9iamVjdCB0byByZWYgY291bnQgdGhlIHN0eWxlcyB0aGF0IGRvbid0IG5lZWQgYSB0aGVtZSBvYmplY3QuXG52YXIgbm9vcFRoZW1lID0ge307XG5leHBvcnQgZGVmYXVsdCBub29wVGhlbWU7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldER5bmFtaWNTdHlsZXMgfSBmcm9tICdqc3MnO1xuaW1wb3J0IG1lcmdlQ2xhc3NlcyBmcm9tICcuLi9tZXJnZUNsYXNzZXMnO1xuaW1wb3J0IG11bHRpS2V5U3RvcmUgZnJvbSAnLi9tdWx0aUtleVN0b3JlJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi91c2VUaGVtZSc7XG5pbXBvcnQgeyBTdHlsZXNDb250ZXh0IH0gZnJvbSAnLi4vU3R5bGVzUHJvdmlkZXInO1xuaW1wb3J0IHsgaW5jcmVtZW50IH0gZnJvbSAnLi9pbmRleENvdW50ZXInO1xuaW1wb3J0IGdldFN0eWxlc0NyZWF0b3IgZnJvbSAnLi4vZ2V0U3R5bGVzQ3JlYXRvcic7XG5pbXBvcnQgbm9vcFRoZW1lIGZyb20gJy4uL2dldFN0eWxlc0NyZWF0b3Ivbm9vcFRoZW1lJztcblxuZnVuY3Rpb24gZ2V0Q2xhc3NlcyhfcmVmLCBjbGFzc2VzLCBDb21wb25lbnQpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIHN0eWxlc09wdGlvbnMgPSBfcmVmLnN0eWxlc09wdGlvbnM7XG5cbiAgaWYgKHN0eWxlc09wdGlvbnMuZGlzYWJsZUdlbmVyYXRpb24pIHtcbiAgICByZXR1cm4gY2xhc3NlcyB8fCB7fTtcbiAgfVxuXG4gIGlmICghc3RhdGUuY2FjaGVDbGFzc2VzKSB7XG4gICAgc3RhdGUuY2FjaGVDbGFzc2VzID0ge1xuICAgICAgLy8gQ2FjaGUgZm9yIHRoZSBmaW5hbGl6ZWQgY2xhc3NlcyB2YWx1ZS5cbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgLy8gQ2FjaGUgZm9yIHRoZSBsYXN0IHVzZWQgY2xhc3NlcyBwcm9wIHBvaW50ZXIuXG4gICAgICBsYXN0UHJvcDogbnVsbCxcbiAgICAgIC8vIENhY2hlIGZvciB0aGUgbGFzdCB1c2VkIHJlbmRlcmVkIGNsYXNzZXMgcG9pbnRlci5cbiAgICAgIGxhc3RKU1M6IHt9XG4gICAgfTtcbiAgfSAvLyBUcmFja3MgaWYgZWl0aGVyIHRoZSByZW5kZXJlZCBjbGFzc2VzIG9yIGNsYXNzZXMgcHJvcCBoYXMgY2hhbmdlZCxcbiAgLy8gcmVxdWlyaW5nIHRoZSBnZW5lcmF0aW9uIG9mIGEgbmV3IGZpbmFsaXplZCBjbGFzc2VzIG9iamVjdC5cblxuXG4gIHZhciBnZW5lcmF0ZSA9IGZhbHNlO1xuXG4gIGlmIChzdGF0ZS5jbGFzc2VzICE9PSBzdGF0ZS5jYWNoZUNsYXNzZXMubGFzdEpTUykge1xuICAgIHN0YXRlLmNhY2hlQ2xhc3Nlcy5sYXN0SlNTID0gc3RhdGUuY2xhc3NlcztcbiAgICBnZW5lcmF0ZSA9IHRydWU7XG4gIH1cblxuICBpZiAoY2xhc3NlcyAhPT0gc3RhdGUuY2FjaGVDbGFzc2VzLmxhc3RQcm9wKSB7XG4gICAgc3RhdGUuY2FjaGVDbGFzc2VzLmxhc3RQcm9wID0gY2xhc3NlcztcbiAgICBnZW5lcmF0ZSA9IHRydWU7XG4gIH1cblxuICBpZiAoZ2VuZXJhdGUpIHtcbiAgICBzdGF0ZS5jYWNoZUNsYXNzZXMudmFsdWUgPSBtZXJnZUNsYXNzZXMoe1xuICAgICAgYmFzZUNsYXNzZXM6IHN0YXRlLmNhY2hlQ2xhc3Nlcy5sYXN0SlNTLFxuICAgICAgbmV3Q2xhc3NlczogY2xhc3NlcyxcbiAgICAgIENvbXBvbmVudDogQ29tcG9uZW50XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gc3RhdGUuY2FjaGVDbGFzc2VzLnZhbHVlO1xufVxuXG5mdW5jdGlvbiBhdHRhY2goX3JlZjIsIHByb3BzKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYyLnN0YXRlLFxuICAgICAgdGhlbWUgPSBfcmVmMi50aGVtZSxcbiAgICAgIHN0eWxlc09wdGlvbnMgPSBfcmVmMi5zdHlsZXNPcHRpb25zLFxuICAgICAgc3R5bGVzQ3JlYXRvciA9IF9yZWYyLnN0eWxlc0NyZWF0b3IsXG4gICAgICBuYW1lID0gX3JlZjIubmFtZTtcblxuICBpZiAoc3R5bGVzT3B0aW9ucy5kaXNhYmxlR2VuZXJhdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzaGVldE1hbmFnZXIgPSBtdWx0aUtleVN0b3JlLmdldChzdHlsZXNPcHRpb25zLnNoZWV0c01hbmFnZXIsIHN0eWxlc0NyZWF0b3IsIHRoZW1lKTtcblxuICBpZiAoIXNoZWV0TWFuYWdlcikge1xuICAgIHNoZWV0TWFuYWdlciA9IHtcbiAgICAgIHJlZnM6IDAsXG4gICAgICBzdGF0aWNTaGVldDogbnVsbCxcbiAgICAgIGR5bmFtaWNTdHlsZXM6IG51bGxcbiAgICB9O1xuICAgIG11bHRpS2V5U3RvcmUuc2V0KHN0eWxlc09wdGlvbnMuc2hlZXRzTWFuYWdlciwgc3R5bGVzQ3JlYXRvciwgdGhlbWUsIHNoZWV0TWFuYWdlcik7XG4gIH1cblxuICB2YXIgb3B0aW9ucyA9IF9leHRlbmRzKF9leHRlbmRzKF9leHRlbmRzKHt9LCBzdHlsZXNDcmVhdG9yLm9wdGlvbnMpLCBzdHlsZXNPcHRpb25zKSwge30sIHtcbiAgICB0aGVtZTogdGhlbWUsXG4gICAgZmxpcDogdHlwZW9mIHN0eWxlc09wdGlvbnMuZmxpcCA9PT0gJ2Jvb2xlYW4nID8gc3R5bGVzT3B0aW9ucy5mbGlwIDogdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJ1xuICB9KTtcblxuICBvcHRpb25zLmdlbmVyYXRlSWQgPSBvcHRpb25zLnNlcnZlckdlbmVyYXRlQ2xhc3NOYW1lIHx8IG9wdGlvbnMuZ2VuZXJhdGVDbGFzc05hbWU7XG4gIHZhciBzaGVldHNSZWdpc3RyeSA9IHN0eWxlc09wdGlvbnMuc2hlZXRzUmVnaXN0cnk7XG5cbiAgaWYgKHNoZWV0TWFuYWdlci5yZWZzID09PSAwKSB7XG4gICAgdmFyIHN0YXRpY1NoZWV0O1xuXG4gICAgaWYgKHN0eWxlc09wdGlvbnMuc2hlZXRzQ2FjaGUpIHtcbiAgICAgIHN0YXRpY1NoZWV0ID0gbXVsdGlLZXlTdG9yZS5nZXQoc3R5bGVzT3B0aW9ucy5zaGVldHNDYWNoZSwgc3R5bGVzQ3JlYXRvciwgdGhlbWUpO1xuICAgIH1cblxuICAgIHZhciBzdHlsZXMgPSBzdHlsZXNDcmVhdG9yLmNyZWF0ZSh0aGVtZSwgbmFtZSk7XG5cbiAgICBpZiAoIXN0YXRpY1NoZWV0KSB7XG4gICAgICBzdGF0aWNTaGVldCA9IHN0eWxlc09wdGlvbnMuanNzLmNyZWF0ZVN0eWxlU2hlZXQoc3R5bGVzLCBfZXh0ZW5kcyh7XG4gICAgICAgIGxpbms6IGZhbHNlXG4gICAgICB9LCBvcHRpb25zKSk7XG4gICAgICBzdGF0aWNTaGVldC5hdHRhY2goKTtcblxuICAgICAgaWYgKHN0eWxlc09wdGlvbnMuc2hlZXRzQ2FjaGUpIHtcbiAgICAgICAgbXVsdGlLZXlTdG9yZS5zZXQoc3R5bGVzT3B0aW9ucy5zaGVldHNDYWNoZSwgc3R5bGVzQ3JlYXRvciwgdGhlbWUsIHN0YXRpY1NoZWV0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2hlZXRzUmVnaXN0cnkpIHtcbiAgICAgIHNoZWV0c1JlZ2lzdHJ5LmFkZChzdGF0aWNTaGVldCk7XG4gICAgfVxuXG4gICAgc2hlZXRNYW5hZ2VyLnN0YXRpY1NoZWV0ID0gc3RhdGljU2hlZXQ7XG4gICAgc2hlZXRNYW5hZ2VyLmR5bmFtaWNTdHlsZXMgPSBnZXREeW5hbWljU3R5bGVzKHN0eWxlcyk7XG4gIH1cblxuICBpZiAoc2hlZXRNYW5hZ2VyLmR5bmFtaWNTdHlsZXMpIHtcbiAgICB2YXIgZHluYW1pY1NoZWV0ID0gc3R5bGVzT3B0aW9ucy5qc3MuY3JlYXRlU3R5bGVTaGVldChzaGVldE1hbmFnZXIuZHluYW1pY1N0eWxlcywgX2V4dGVuZHMoe1xuICAgICAgbGluazogdHJ1ZVxuICAgIH0sIG9wdGlvbnMpKTtcbiAgICBkeW5hbWljU2hlZXQudXBkYXRlKHByb3BzKTtcbiAgICBkeW5hbWljU2hlZXQuYXR0YWNoKCk7XG4gICAgc3RhdGUuZHluYW1pY1NoZWV0ID0gZHluYW1pY1NoZWV0O1xuICAgIHN0YXRlLmNsYXNzZXMgPSBtZXJnZUNsYXNzZXMoe1xuICAgICAgYmFzZUNsYXNzZXM6IHNoZWV0TWFuYWdlci5zdGF0aWNTaGVldC5jbGFzc2VzLFxuICAgICAgbmV3Q2xhc3NlczogZHluYW1pY1NoZWV0LmNsYXNzZXNcbiAgICB9KTtcblxuICAgIGlmIChzaGVldHNSZWdpc3RyeSkge1xuICAgICAgc2hlZXRzUmVnaXN0cnkuYWRkKGR5bmFtaWNTaGVldCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN0YXRlLmNsYXNzZXMgPSBzaGVldE1hbmFnZXIuc3RhdGljU2hlZXQuY2xhc3NlcztcbiAgfVxuXG4gIHNoZWV0TWFuYWdlci5yZWZzICs9IDE7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZShfcmVmMywgcHJvcHMpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjMuc3RhdGU7XG5cbiAgaWYgKHN0YXRlLmR5bmFtaWNTaGVldCkge1xuICAgIHN0YXRlLmR5bmFtaWNTaGVldC51cGRhdGUocHJvcHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRldGFjaChfcmVmNCkge1xuICB2YXIgc3RhdGUgPSBfcmVmNC5zdGF0ZSxcbiAgICAgIHRoZW1lID0gX3JlZjQudGhlbWUsXG4gICAgICBzdHlsZXNPcHRpb25zID0gX3JlZjQuc3R5bGVzT3B0aW9ucyxcbiAgICAgIHN0eWxlc0NyZWF0b3IgPSBfcmVmNC5zdHlsZXNDcmVhdG9yO1xuXG4gIGlmIChzdHlsZXNPcHRpb25zLmRpc2FibGVHZW5lcmF0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHNoZWV0TWFuYWdlciA9IG11bHRpS2V5U3RvcmUuZ2V0KHN0eWxlc09wdGlvbnMuc2hlZXRzTWFuYWdlciwgc3R5bGVzQ3JlYXRvciwgdGhlbWUpO1xuICBzaGVldE1hbmFnZXIucmVmcyAtPSAxO1xuICB2YXIgc2hlZXRzUmVnaXN0cnkgPSBzdHlsZXNPcHRpb25zLnNoZWV0c1JlZ2lzdHJ5O1xuXG4gIGlmIChzaGVldE1hbmFnZXIucmVmcyA9PT0gMCkge1xuICAgIG11bHRpS2V5U3RvcmUuZGVsZXRlKHN0eWxlc09wdGlvbnMuc2hlZXRzTWFuYWdlciwgc3R5bGVzQ3JlYXRvciwgdGhlbWUpO1xuICAgIHN0eWxlc09wdGlvbnMuanNzLnJlbW92ZVN0eWxlU2hlZXQoc2hlZXRNYW5hZ2VyLnN0YXRpY1NoZWV0KTtcblxuICAgIGlmIChzaGVldHNSZWdpc3RyeSkge1xuICAgICAgc2hlZXRzUmVnaXN0cnkucmVtb3ZlKHNoZWV0TWFuYWdlci5zdGF0aWNTaGVldCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHN0YXRlLmR5bmFtaWNTaGVldCkge1xuICAgIHN0eWxlc09wdGlvbnMuanNzLnJlbW92ZVN0eWxlU2hlZXQoc3RhdGUuZHluYW1pY1NoZWV0KTtcblxuICAgIGlmIChzaGVldHNSZWdpc3RyeSkge1xuICAgICAgc2hlZXRzUmVnaXN0cnkucmVtb3ZlKHN0YXRlLmR5bmFtaWNTaGVldCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVzZVN5bmNocm9ub3VzRWZmZWN0KGZ1bmMsIHZhbHVlcykge1xuICB2YXIga2V5ID0gUmVhY3QudXNlUmVmKFtdKTtcbiAgdmFyIG91dHB1dDsgLy8gU3RvcmUgXCJnZW5lcmF0aW9uXCIga2V5LiBKdXN0IHJldHVybnMgYSBuZXcgb2JqZWN0IGV2ZXJ5IHRpbWVcblxuICB2YXIgY3VycmVudEtleSA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSwgdmFsdWVzKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgLy8gXCJ0aGUgZmlyc3QgcmVuZGVyXCIsIG9yIFwibWVtbyBkcm9wcGVkIHRoZSB2YWx1ZVwiXG5cbiAgaWYgKGtleS5jdXJyZW50ICE9PSBjdXJyZW50S2V5KSB7XG4gICAga2V5LmN1cnJlbnQgPSBjdXJyZW50S2V5O1xuICAgIG91dHB1dCA9IGZ1bmMoKTtcbiAgfVxuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChvdXRwdXQpIHtcbiAgICAgICAgb3V0cHV0KCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW2N1cnJlbnRLZXldIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1ha2VTdHlsZXMoc3R5bGVzT3JDcmVhdG9yKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICB2YXIgbmFtZSA9IG9wdGlvbnMubmFtZSxcbiAgICAgIGNsYXNzTmFtZVByZWZpeE9wdGlvbiA9IG9wdGlvbnMuY2xhc3NOYW1lUHJlZml4LFxuICAgICAgQ29tcG9uZW50ID0gb3B0aW9ucy5Db21wb25lbnQsXG4gICAgICBfb3B0aW9ucyRkZWZhdWx0VGhlbWUgPSBvcHRpb25zLmRlZmF1bHRUaGVtZSxcbiAgICAgIGRlZmF1bHRUaGVtZSA9IF9vcHRpb25zJGRlZmF1bHRUaGVtZSA9PT0gdm9pZCAwID8gbm9vcFRoZW1lIDogX29wdGlvbnMkZGVmYXVsdFRoZW1lLFxuICAgICAgc3R5bGVzT3B0aW9uczIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0aW9ucywgW1wibmFtZVwiLCBcImNsYXNzTmFtZVByZWZpeFwiLCBcIkNvbXBvbmVudFwiLCBcImRlZmF1bHRUaGVtZVwiXSk7XG5cbiAgdmFyIHN0eWxlc0NyZWF0b3IgPSBnZXRTdHlsZXNDcmVhdG9yKHN0eWxlc09yQ3JlYXRvcik7XG4gIHZhciBjbGFzc05hbWVQcmVmaXggPSBuYW1lIHx8IGNsYXNzTmFtZVByZWZpeE9wdGlvbiB8fCAnbWFrZVN0eWxlcyc7XG4gIHN0eWxlc0NyZWF0b3Iub3B0aW9ucyA9IHtcbiAgICBpbmRleDogaW5jcmVtZW50KCksXG4gICAgbmFtZTogbmFtZSxcbiAgICBtZXRhOiBjbGFzc05hbWVQcmVmaXgsXG4gICAgY2xhc3NOYW1lUHJlZml4OiBjbGFzc05hbWVQcmVmaXhcbiAgfTtcblxuICB2YXIgdXNlU3R5bGVzID0gZnVuY3Rpb24gdXNlU3R5bGVzKCkge1xuICAgIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdmFyIHRoZW1lID0gdXNlVGhlbWUoKSB8fCBkZWZhdWx0VGhlbWU7XG5cbiAgICB2YXIgc3R5bGVzT3B0aW9ucyA9IF9leHRlbmRzKF9leHRlbmRzKHt9LCBSZWFjdC51c2VDb250ZXh0KFN0eWxlc0NvbnRleHQpKSwgc3R5bGVzT3B0aW9uczIpO1xuXG4gICAgdmFyIGluc3RhbmNlID0gUmVhY3QudXNlUmVmKCk7XG4gICAgdmFyIHNob3VsZFVwZGF0ZSA9IFJlYWN0LnVzZVJlZigpO1xuICAgIHVzZVN5bmNocm9ub3VzRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjdXJyZW50ID0ge1xuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBzdGF0ZToge30sXG4gICAgICAgIHN0eWxlc0NyZWF0b3I6IHN0eWxlc0NyZWF0b3IsXG4gICAgICAgIHN0eWxlc09wdGlvbnM6IHN0eWxlc09wdGlvbnMsXG4gICAgICAgIHRoZW1lOiB0aGVtZVxuICAgICAgfTtcbiAgICAgIGF0dGFjaChjdXJyZW50LCBwcm9wcyk7XG4gICAgICBzaG91bGRVcGRhdGUuY3VycmVudCA9IGZhbHNlO1xuICAgICAgaW5zdGFuY2UuY3VycmVudCA9IGN1cnJlbnQ7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBkZXRhY2goY3VycmVudCk7XG4gICAgICB9O1xuICAgIH0sIFt0aGVtZSwgc3R5bGVzQ3JlYXRvcl0pO1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2hvdWxkVXBkYXRlLmN1cnJlbnQpIHtcbiAgICAgICAgdXBkYXRlKGluc3RhbmNlLmN1cnJlbnQsIHByb3BzKTtcbiAgICAgIH1cblxuICAgICAgc2hvdWxkVXBkYXRlLmN1cnJlbnQgPSB0cnVlO1xuICAgIH0pO1xuICAgIHZhciBjbGFzc2VzID0gZ2V0Q2xhc3NlcyhpbnN0YW5jZS5jdXJyZW50LCBwcm9wcy5jbGFzc2VzLCBDb21wb25lbnQpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgICAgUmVhY3QudXNlRGVidWdWYWx1ZShjbGFzc2VzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xhc3NlcztcbiAgfTtcblxuICByZXR1cm4gdXNlU3R5bGVzO1xufSIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtc3ludGF4ICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRUaGVtZVByb3BzKHBhcmFtcykge1xuICB2YXIgdGhlbWUgPSBwYXJhbXMudGhlbWUsXG4gICAgICBuYW1lID0gcGFyYW1zLm5hbWUsXG4gICAgICBwcm9wcyA9IHBhcmFtcy5wcm9wcztcblxuICBpZiAoIXRoZW1lIHx8ICF0aGVtZS5wcm9wcyB8fCAhdGhlbWUucHJvcHNbbmFtZV0pIHtcbiAgICByZXR1cm4gcHJvcHM7XG4gIH0gLy8gUmVzb2x2ZSBkZWZhdWx0IHByb3BzLCBjb2RlIGJvcnJvdyBmcm9tIFJlYWN0IHNvdXJjZS5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvMTVhOGYwMzE4MzhhNTUzZTQxYzBiNjZlYjFiY2YxZGE4NDQ4MTA0ZC9wYWNrYWdlcy9yZWFjdC9zcmMvUmVhY3RFbGVtZW50LmpzI0wyMjFcblxuXG4gIHZhciBkZWZhdWx0UHJvcHMgPSB0aGVtZS5wcm9wc1tuYW1lXTtcbiAgdmFyIHByb3BOYW1lO1xuXG4gIGZvciAocHJvcE5hbWUgaW4gZGVmYXVsdFByb3BzKSB7XG4gICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBwcm9wc1twcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwcm9wcztcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBob2lzdE5vblJlYWN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcywgZ2V0RGlzcGxheU5hbWUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IG1ha2VTdHlsZXMgZnJvbSAnLi4vbWFrZVN0eWxlcyc7XG5pbXBvcnQgZ2V0VGhlbWVQcm9wcyBmcm9tICcuLi9nZXRUaGVtZVByb3BzJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi91c2VUaGVtZSc7IC8vIExpbmsgYSBzdHlsZSBzaGVldCB3aXRoIGEgY29tcG9uZW50LlxuLy8gSXQgZG9lcyBub3QgbW9kaWZ5IHRoZSBjb21wb25lbnQgcGFzc2VkIHRvIGl0O1xuLy8gaW5zdGVhZCwgaXQgcmV0dXJucyBhIG5ldyBjb21wb25lbnQsIHdpdGggYSBgY2xhc3Nlc2AgcHJvcGVydHkuXG5cbnZhciB3aXRoU3R5bGVzID0gZnVuY3Rpb24gd2l0aFN0eWxlcyhzdHlsZXNPckNyZWF0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKENvbXBvbmVudCkge1xuICAgIHZhciBkZWZhdWx0VGhlbWUgPSBvcHRpb25zLmRlZmF1bHRUaGVtZSxcbiAgICAgICAgX29wdGlvbnMkd2l0aFRoZW1lID0gb3B0aW9ucy53aXRoVGhlbWUsXG4gICAgICAgIHdpdGhUaGVtZSA9IF9vcHRpb25zJHdpdGhUaGVtZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyR3aXRoVGhlbWUsXG4gICAgICAgIG5hbWUgPSBvcHRpb25zLm5hbWUsXG4gICAgICAgIHN0eWxlc09wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0aW9ucywgW1wiZGVmYXVsdFRoZW1lXCIsIFwid2l0aFRoZW1lXCIsIFwibmFtZVwiXSk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKENvbXBvbmVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihbJ1lvdSBhcmUgY2FsbGluZyB3aXRoU3R5bGVzKHN0eWxlcykoQ29tcG9uZW50KSB3aXRoIGFuIHVuZGVmaW5lZCBjb21wb25lbnQuJywgJ1lvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gaW1wb3J0IGl0LiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgY2xhc3NOYW1lUHJlZml4ID0gbmFtZTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgLy8gUHJvdmlkZSBhIGJldHRlciBEWCBvdXRzaWRlIHByb2R1Y3Rpb24uXG4gICAgICAgIHZhciBkaXNwbGF5TmFtZSA9IGdldERpc3BsYXlOYW1lKENvbXBvbmVudCk7XG5cbiAgICAgICAgaWYgKGRpc3BsYXlOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjbGFzc05hbWVQcmVmaXggPSBkaXNwbGF5TmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKHN0eWxlc09yQ3JlYXRvciwgX2V4dGVuZHMoe1xuICAgICAgZGVmYXVsdFRoZW1lOiBkZWZhdWx0VGhlbWUsXG4gICAgICBDb21wb25lbnQ6IENvbXBvbmVudCxcbiAgICAgIG5hbWU6IG5hbWUgfHwgQ29tcG9uZW50LmRpc3BsYXlOYW1lLFxuICAgICAgY2xhc3NOYW1lUHJlZml4OiBjbGFzc05hbWVQcmVmaXhcbiAgICB9LCBzdHlsZXNPcHRpb25zKSk7XG4gICAgdmFyIFdpdGhTdHlsZXMgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFdpdGhTdHlsZXMocHJvcHMsIHJlZikge1xuICAgICAgdmFyIGNsYXNzZXNQcm9wID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgICAgICBpbm5lclJlZiA9IHByb3BzLmlubmVyUmVmLFxuICAgICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiaW5uZXJSZWZcIl0pOyAvLyBUaGUgd3JhcHBlciByZWNlaXZlcyBvbmx5IHVzZXIgc3VwcGxpZWQgcHJvcHMsIHdoaWNoIGNvdWxkIGJlIGEgc3Vic2V0IG9mXG4gICAgICAvLyB0aGUgYWN0dWFsIHByb3BzIENvbXBvbmVudCBtaWdodCByZWNlaXZlIGR1ZSB0byBtZXJnaW5nIHdpdGggZGVmYXVsdFByb3BzLlxuICAgICAgLy8gU28gY29weWluZyBpdCBoZXJlIHdvdWxkIGdpdmUgdXMgdGhlIHNhbWUgcmVzdWx0IGluIHRoZSB3cmFwcGVyIGFzIHdlbGwuXG5cblxuICAgICAgdmFyIGNsYXNzZXMgPSB1c2VTdHlsZXMoX2V4dGVuZHMoX2V4dGVuZHMoe30sIENvbXBvbmVudC5kZWZhdWx0UHJvcHMpLCBwcm9wcykpO1xuICAgICAgdmFyIHRoZW1lO1xuICAgICAgdmFyIG1vcmUgPSBvdGhlcjtcblxuICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyB8fCB3aXRoVGhlbWUpIHtcbiAgICAgICAgLy8gbmFtZSBhbmQgd2l0aFRoZW1lIGFyZSBpbnZhcmlhbnQgaW4gdGhlIG91dGVyIHNjb3BlXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgICAgICB0aGVtZSA9IHVzZVRoZW1lKCkgfHwgZGVmYXVsdFRoZW1lO1xuXG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgbW9yZSA9IGdldFRoZW1lUHJvcHMoe1xuICAgICAgICAgICAgdGhlbWU6IHRoZW1lLFxuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIHByb3BzOiBvdGhlclxuICAgICAgICAgIH0pO1xuICAgICAgICB9IC8vIFByb3ZpZGUgdGhlIHRoZW1lIHRvIHRoZSB3cmFwcGVkIGNvbXBvbmVudC5cbiAgICAgICAgLy8gU28gd2UgZG9uJ3QgaGF2ZSB0byB1c2UgdGhlIGB3aXRoVGhlbWUoKWAgSGlnaGVyLW9yZGVyIENvbXBvbmVudC5cblxuXG4gICAgICAgIGlmICh3aXRoVGhlbWUgJiYgIW1vcmUudGhlbWUpIHtcbiAgICAgICAgICBtb3JlLnRoZW1lID0gdGhlbWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgICAgICByZWY6IGlubmVyUmVmIHx8IHJlZixcbiAgICAgICAgY2xhc3NlczogY2xhc3Nlc1xuICAgICAgfSwgbW9yZSkpO1xuICAgIH0pO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFdpdGhTdHlsZXMucHJvcFR5cGVzID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAgICAgKi9cbiAgICAgIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlIHRoYXQgcHJvcCB0byBwYXNzIGEgcmVmIHRvIHRoZSBkZWNvcmF0ZWQgY29tcG9uZW50LlxuICAgICAgICogQGRlcHJlY2F0ZWRcbiAgICAgICAqL1xuICAgICAgaW5uZXJSZWY6IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksIGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICBpZiAocHJvcHMuaW5uZXJSZWYgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7IC8vIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgIC8vICAgJ01hdGVyaWFsLVVJOiBUaGUgYGlubmVyUmVmYCBwcm9wIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2NS4gJyArXG4gICAgICAgIC8vICAgICAnUmVmcyBhcmUgbm93IGF1dG9tYXRpY2FsbHkgZm9yd2FyZGVkIHRvIHRoZSBpbm5lciBjb21wb25lbnQuJyxcbiAgICAgICAgLy8gKTtcbiAgICAgIH0pXG4gICAgfSA6IHZvaWQgMDtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBXaXRoU3R5bGVzLmRpc3BsYXlOYW1lID0gXCJXaXRoU3R5bGVzKFwiLmNvbmNhdChnZXREaXNwbGF5TmFtZShDb21wb25lbnQpLCBcIilcIik7XG4gICAgfVxuXG4gICAgaG9pc3ROb25SZWFjdFN0YXRpY3MoV2l0aFN0eWxlcywgQ29tcG9uZW50KTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBFeHBvc2VkIGZvciB0ZXN0IHB1cnBvc2VzLlxuICAgICAgV2l0aFN0eWxlcy5OYWtlZCA9IENvbXBvbmVudDtcbiAgICAgIFdpdGhTdHlsZXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICBXaXRoU3R5bGVzLnVzZVN0eWxlcyA9IHVzZVN0eWxlcztcbiAgICB9XG5cbiAgICByZXR1cm4gV2l0aFN0eWxlcztcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXM7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuLy8gU29ydGVkIEFTQyBieSBzaXplLiBUaGF0J3MgaW1wb3J0YW50LlxuLy8gSXQgY2FuJ3QgYmUgY29uZmlndXJlZCBhcyBpdCdzIHVzZWQgc3RhdGljYWxseSBmb3IgcHJvcFR5cGVzLlxuZXhwb3J0IHZhciBrZXlzID0gWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddOyAvLyBLZWVwIGluIG1pbmQgdGhhdCBAbWVkaWEgaXMgaW5jbHVzaXZlIGJ5IHRoZSBDU1Mgc3BlY2lmaWNhdGlvbi5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQnJlYWtwb2ludHMoYnJlYWtwb2ludHMpIHtcbiAgdmFyIF9icmVha3BvaW50cyR2YWx1ZXMgPSBicmVha3BvaW50cy52YWx1ZXMsXG4gICAgICB2YWx1ZXMgPSBfYnJlYWtwb2ludHMkdmFsdWVzID09PSB2b2lkIDAgPyB7XG4gICAgeHM6IDAsXG4gICAgc206IDYwMCxcbiAgICBtZDogOTYwLFxuICAgIGxnOiAxMjgwLFxuICAgIHhsOiAxOTIwXG4gIH0gOiBfYnJlYWtwb2ludHMkdmFsdWVzLFxuICAgICAgX2JyZWFrcG9pbnRzJHVuaXQgPSBicmVha3BvaW50cy51bml0LFxuICAgICAgdW5pdCA9IF9icmVha3BvaW50cyR1bml0ID09PSB2b2lkIDAgPyAncHgnIDogX2JyZWFrcG9pbnRzJHVuaXQsXG4gICAgICBfYnJlYWtwb2ludHMkc3RlcCA9IGJyZWFrcG9pbnRzLnN0ZXAsXG4gICAgICBzdGVwID0gX2JyZWFrcG9pbnRzJHN0ZXAgPT09IHZvaWQgMCA/IDUgOiBfYnJlYWtwb2ludHMkc3RlcCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKGJyZWFrcG9pbnRzLCBbXCJ2YWx1ZXNcIiwgXCJ1bml0XCIsIFwic3RlcFwiXSk7XG5cbiAgZnVuY3Rpb24gdXAoa2V5KSB7XG4gICAgdmFyIHZhbHVlID0gdHlwZW9mIHZhbHVlc1trZXldID09PSAnbnVtYmVyJyA/IHZhbHVlc1trZXldIDoga2V5O1xuICAgIHJldHVybiBcIkBtZWRpYSAobWluLXdpZHRoOlwiLmNvbmNhdCh2YWx1ZSkuY29uY2F0KHVuaXQsIFwiKVwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvd24oa2V5KSB7XG4gICAgdmFyIGVuZEluZGV4ID0ga2V5cy5pbmRleE9mKGtleSkgKyAxO1xuICAgIHZhciB1cHBlcmJvdW5kID0gdmFsdWVzW2tleXNbZW5kSW5kZXhdXTtcblxuICAgIGlmIChlbmRJbmRleCA9PT0ga2V5cy5sZW5ndGgpIHtcbiAgICAgIC8vIHhsIGRvd24gYXBwbGllcyB0byBhbGwgc2l6ZXNcbiAgICAgIHJldHVybiB1cCgneHMnKTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWUgPSB0eXBlb2YgdXBwZXJib3VuZCA9PT0gJ251bWJlcicgJiYgZW5kSW5kZXggPiAwID8gdXBwZXJib3VuZCA6IGtleTtcbiAgICByZXR1cm4gXCJAbWVkaWEgKG1heC13aWR0aDpcIi5jb25jYXQodmFsdWUgLSBzdGVwIC8gMTAwKS5jb25jYXQodW5pdCwgXCIpXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gYmV0d2VlbihzdGFydCwgZW5kKSB7XG4gICAgdmFyIGVuZEluZGV4ID0ga2V5cy5pbmRleE9mKGVuZCk7XG5cbiAgICBpZiAoZW5kSW5kZXggPT09IGtleXMubGVuZ3RoIC0gMSkge1xuICAgICAgcmV0dXJuIHVwKHN0YXJ0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gXCJAbWVkaWEgKG1pbi13aWR0aDpcIi5jb25jYXQodHlwZW9mIHZhbHVlc1tzdGFydF0gPT09ICdudW1iZXInID8gdmFsdWVzW3N0YXJ0XSA6IHN0YXJ0KS5jb25jYXQodW5pdCwgXCIpIGFuZCBcIikgKyBcIihtYXgtd2lkdGg6XCIuY29uY2F0KChlbmRJbmRleCAhPT0gLTEgJiYgdHlwZW9mIHZhbHVlc1trZXlzW2VuZEluZGV4ICsgMV1dID09PSAnbnVtYmVyJyA/IHZhbHVlc1trZXlzW2VuZEluZGV4ICsgMV1dIDogZW5kKSAtIHN0ZXAgLyAxMDApLmNvbmNhdCh1bml0LCBcIilcIik7XG4gIH1cblxuICBmdW5jdGlvbiBvbmx5KGtleSkge1xuICAgIHJldHVybiBiZXR3ZWVuKGtleSwga2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdpZHRoKGtleSkge1xuICAgIHJldHVybiB2YWx1ZXNba2V5XTtcbiAgfVxuXG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAga2V5czoga2V5cyxcbiAgICB2YWx1ZXM6IHZhbHVlcyxcbiAgICB1cDogdXAsXG4gICAgZG93bjogZG93bixcbiAgICBiZXR3ZWVuOiBiZXR3ZWVuLFxuICAgIG9ubHk6IG9ubHksXG4gICAgd2lkdGg6IHdpZHRoXG4gIH0sIG90aGVyKTtcbn0iLCJpbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVNaXhpbnMoYnJlYWtwb2ludHMsIHNwYWNpbmcsIG1peGlucykge1xuICB2YXIgX3Rvb2xiYXI7XG5cbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICBndXR0ZXJzOiBmdW5jdGlvbiBndXR0ZXJzKCkge1xuICAgICAgdmFyIHN0eWxlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgICAvLyBUbyBkZXByZWNhdGUgaW4gdjQuMVxuICAgICAgLy8gICAgICAgd2FybmluZyhcbiAgICAgIC8vICAgICAgICAgZmFsc2UsXG4gICAgICAvLyAgICAgICAgIFtcbiAgICAgIC8vICAgICAgICAgICAnTWF0ZXJpYWwtVUk6IFRoZW1lLm1peGlucy5ndXR0ZXJzKCkgaXMgZGVwcmVjYXRlZC4nLFxuICAgICAgLy8gICAgICAgICAgICdZb3UgY2FuIHVzZSB0aGUgc291cmNlIG9mIHRoZSBtaXhpbiBkaXJlY3RseTonLFxuICAgICAgLy8gICAgICAgICAgIGBcbiAgICAgIC8vIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgLy8gcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgLy8gW3RoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpXToge1xuICAgICAgLy8gICBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZygzKSxcbiAgICAgIC8vICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDMpLFxuICAgICAgLy8gfSxcbiAgICAgIC8vIGAsXG4gICAgICAvLyAgICAgICAgIF0uam9pbignXFxuJyksXG4gICAgICAvLyAgICAgICApO1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgICAgcGFkZGluZ0xlZnQ6IHNwYWNpbmcoMiksXG4gICAgICAgIHBhZGRpbmdSaWdodDogc3BhY2luZygyKVxuICAgICAgfSwgc3R5bGVzLCBfZGVmaW5lUHJvcGVydHkoe30sIGJyZWFrcG9pbnRzLnVwKCdzbScpLCBfZXh0ZW5kcyh7XG4gICAgICAgIHBhZGRpbmdMZWZ0OiBzcGFjaW5nKDMpLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6IHNwYWNpbmcoMylcbiAgICAgIH0sIHN0eWxlc1ticmVha3BvaW50cy51cCgnc20nKV0pKSk7XG4gICAgfSxcbiAgICB0b29sYmFyOiAoX3Rvb2xiYXIgPSB7XG4gICAgICBtaW5IZWlnaHQ6IDU2XG4gICAgfSwgX2RlZmluZVByb3BlcnR5KF90b29sYmFyLCBcIlwiLmNvbmNhdChicmVha3BvaW50cy51cCgneHMnKSwgXCIgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKVwiKSwge1xuICAgICAgbWluSGVpZ2h0OiA0OFxuICAgIH0pLCBfZGVmaW5lUHJvcGVydHkoX3Rvb2xiYXIsIGJyZWFrcG9pbnRzLnVwKCdzbScpLCB7XG4gICAgICBtaW5IZWlnaHQ6IDY0XG4gICAgfSksIF90b29sYmFyKVxuICB9LCBtaXhpbnMpO1xufSIsIi8qKlxuICogV0FSTklORzogRG9uJ3QgaW1wb3J0IHRoaXMgZGlyZWN0bHkuXG4gKiBVc2UgYE11aUVycm9yYCBmcm9tIGBAbWF0ZXJpYWwtdWkvdXRpbHMvbWFjcm9zL011aUVycm9yLm1hY3JvYCBpbnN0ZWFkLlxuICogQHBhcmFtIHtudW1iZXJ9IGNvZGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0TXVpRXJyb3JNZXNzYWdlKGNvZGUpIHtcbiAgLy8gQXBwbHkgYmFiZWwtcGx1Z2luLXRyYW5zZm9ybS10ZW1wbGF0ZS1saXRlcmFscyBpbiBsb29zZSBtb2RlXG4gIC8vIGxvb3NlIG1vZGUgaXMgc2FmZSBpZmYgd2UncmUgY29uY2F0ZW5hdGluZyBwcmltaXRpdmVzXG4gIC8vIHNlZSBodHRwczovL2JhYmVsanMuaW8vZG9jcy9lbi9iYWJlbC1wbHVnaW4tdHJhbnNmb3JtLXRlbXBsYXRlLWxpdGVyYWxzI2xvb3NlXG5cbiAgLyogZXNsaW50LWRpc2FibGUgcHJlZmVyLXRlbXBsYXRlICovXG4gIHZhciB1cmwgPSAnaHR0cHM6Ly9tYXRlcmlhbC11aS5jb20vcHJvZHVjdGlvbi1lcnJvci8/Y29kZT0nICsgY29kZTtcblxuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIC8vIHJlc3QgcGFyYW1zIG92ZXItdHJhbnNwaWxlIGZvciB0aGlzIGNhc2VcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgdXJsICs9ICcmYXJnc1tdPScgKyBlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2ldKTtcbiAgfVxuXG4gIHJldHVybiAnTWluaWZpZWQgTWF0ZXJpYWwtVUkgZXJyb3IgIycgKyBjb2RlICsgJzsgdmlzaXQgJyArIHVybCArICcgZm9yIHRoZSBmdWxsIG1lc3NhZ2UuJztcbiAgLyogZXNsaW50LWVuYWJsZSBwcmVmZXItdGVtcGxhdGUgKi9cbn0iLCJ2YXIgY29tbW9uID0ge1xuICBibGFjazogJyMwMDAnLFxuICB3aGl0ZTogJyNmZmYnXG59O1xuZXhwb3J0IGRlZmF1bHQgY29tbW9uOyIsInZhciBncmV5ID0ge1xuICA1MDogJyNmYWZhZmEnLFxuICAxMDA6ICcjZjVmNWY1JyxcbiAgMjAwOiAnI2VlZWVlZScsXG4gIDMwMDogJyNlMGUwZTAnLFxuICA0MDA6ICcjYmRiZGJkJyxcbiAgNTAwOiAnIzllOWU5ZScsXG4gIDYwMDogJyM3NTc1NzUnLFxuICA3MDA6ICcjNjE2MTYxJyxcbiAgODAwOiAnIzQyNDI0MicsXG4gIDkwMDogJyMyMTIxMjEnLFxuICBBMTAwOiAnI2Q1ZDVkNScsXG4gIEEyMDA6ICcjYWFhYWFhJyxcbiAgQTQwMDogJyMzMDMwMzAnLFxuICBBNzAwOiAnIzYxNjE2MSdcbn07XG5leHBvcnQgZGVmYXVsdCBncmV5OyIsInZhciBpbmRpZ28gPSB7XG4gIDUwOiAnI2U4ZWFmNicsXG4gIDEwMDogJyNjNWNhZTknLFxuICAyMDA6ICcjOWZhOGRhJyxcbiAgMzAwOiAnIzc5ODZjYicsXG4gIDQwMDogJyM1YzZiYzAnLFxuICA1MDA6ICcjM2Y1MWI1JyxcbiAgNjAwOiAnIzM5NDlhYicsXG4gIDcwMDogJyMzMDNmOWYnLFxuICA4MDA6ICcjMjgzNTkzJyxcbiAgOTAwOiAnIzFhMjM3ZScsXG4gIEExMDA6ICcjOGM5ZWZmJyxcbiAgQTIwMDogJyM1MzZkZmUnLFxuICBBNDAwOiAnIzNkNWFmZScsXG4gIEE3MDA6ICcjMzA0ZmZlJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGluZGlnbzsiLCJ2YXIgcGluayA9IHtcbiAgNTA6ICcjZmNlNGVjJyxcbiAgMTAwOiAnI2Y4YmJkMCcsXG4gIDIwMDogJyNmNDhmYjEnLFxuICAzMDA6ICcjZjA2MjkyJyxcbiAgNDAwOiAnI2VjNDA3YScsXG4gIDUwMDogJyNlOTFlNjMnLFxuICA2MDA6ICcjZDgxYjYwJyxcbiAgNzAwOiAnI2MyMTg1YicsXG4gIDgwMDogJyNhZDE0NTcnLFxuICA5MDA6ICcjODgwZTRmJyxcbiAgQTEwMDogJyNmZjgwYWInLFxuICBBMjAwOiAnI2ZmNDA4MScsXG4gIEE0MDA6ICcjZjUwMDU3JyxcbiAgQTcwMDogJyNjNTExNjInXG59O1xuZXhwb3J0IGRlZmF1bHQgcGluazsiLCJ2YXIgcmVkID0ge1xuICA1MDogJyNmZmViZWUnLFxuICAxMDA6ICcjZmZjZGQyJyxcbiAgMjAwOiAnI2VmOWE5YScsXG4gIDMwMDogJyNlNTczNzMnLFxuICA0MDA6ICcjZWY1MzUwJyxcbiAgNTAwOiAnI2Y0NDMzNicsXG4gIDYwMDogJyNlNTM5MzUnLFxuICA3MDA6ICcjZDMyZjJmJyxcbiAgODAwOiAnI2M2MjgyOCcsXG4gIDkwMDogJyNiNzFjMWMnLFxuICBBMTAwOiAnI2ZmOGE4MCcsXG4gIEEyMDA6ICcjZmY1MjUyJyxcbiAgQTQwMDogJyNmZjE3NDQnLFxuICBBNzAwOiAnI2Q1MDAwMCdcbn07XG5leHBvcnQgZGVmYXVsdCByZWQ7IiwidmFyIG9yYW5nZSA9IHtcbiAgNTA6ICcjZmZmM2UwJyxcbiAgMTAwOiAnI2ZmZTBiMicsXG4gIDIwMDogJyNmZmNjODAnLFxuICAzMDA6ICcjZmZiNzRkJyxcbiAgNDAwOiAnI2ZmYTcyNicsXG4gIDUwMDogJyNmZjk4MDAnLFxuICA2MDA6ICcjZmI4YzAwJyxcbiAgNzAwOiAnI2Y1N2MwMCcsXG4gIDgwMDogJyNlZjZjMDAnLFxuICA5MDA6ICcjZTY1MTAwJyxcbiAgQTEwMDogJyNmZmQxODAnLFxuICBBMjAwOiAnI2ZmYWI0MCcsXG4gIEE0MDA6ICcjZmY5MTAwJyxcbiAgQTcwMDogJyNmZjZkMDAnXG59O1xuZXhwb3J0IGRlZmF1bHQgb3JhbmdlOyIsInZhciBibHVlID0ge1xuICA1MDogJyNlM2YyZmQnLFxuICAxMDA6ICcjYmJkZWZiJyxcbiAgMjAwOiAnIzkwY2FmOScsXG4gIDMwMDogJyM2NGI1ZjYnLFxuICA0MDA6ICcjNDJhNWY1JyxcbiAgNTAwOiAnIzIxOTZmMycsXG4gIDYwMDogJyMxZTg4ZTUnLFxuICA3MDA6ICcjMTk3NmQyJyxcbiAgODAwOiAnIzE1NjVjMCcsXG4gIDkwMDogJyMwZDQ3YTEnLFxuICBBMTAwOiAnIzgyYjFmZicsXG4gIEEyMDA6ICcjNDQ4YWZmJyxcbiAgQTQwMDogJyMyOTc5ZmYnLFxuICBBNzAwOiAnIzI5NjJmZidcbn07XG5leHBvcnQgZGVmYXVsdCBibHVlOyIsInZhciBncmVlbiA9IHtcbiAgNTA6ICcjZThmNWU5JyxcbiAgMTAwOiAnI2M4ZTZjOScsXG4gIDIwMDogJyNhNWQ2YTcnLFxuICAzMDA6ICcjODFjNzg0JyxcbiAgNDAwOiAnIzY2YmI2YScsXG4gIDUwMDogJyM0Y2FmNTAnLFxuICA2MDA6ICcjNDNhMDQ3JyxcbiAgNzAwOiAnIzM4OGUzYycsXG4gIDgwMDogJyMyZTdkMzInLFxuICA5MDA6ICcjMWI1ZTIwJyxcbiAgQTEwMDogJyNiOWY2Y2EnLFxuICBBMjAwOiAnIzY5ZjBhZScsXG4gIEE0MDA6ICcjMDBlNjc2JyxcbiAgQTcwMDogJyMwMGM4NTMnXG59O1xuZXhwb3J0IGRlZmF1bHQgZ3JlZW47IiwiaW1wb3J0IHsgZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGFzIF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgfSBmcm9tIFwiQG1hdGVyaWFsLXVpL3V0aWxzXCI7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVzZS1iZWZvcmUtZGVmaW5lICovXG5cbi8qKlxuICogUmV0dXJucyBhIG51bWJlciB3aG9zZSB2YWx1ZSBpcyBsaW1pdGVkIHRvIHRoZSBnaXZlbiByYW5nZS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIHRvIGJlIGNsYW1wZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gVGhlIGxvd2VyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXggVGhlIHVwcGVyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgbnVtYmVyIGluIHRoZSByYW5nZSBbbWluLCBtYXhdXG4gKi9cbmZ1bmN0aW9uIGNsYW1wKHZhbHVlKSB7XG4gIHZhciBtaW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gIHZhciBtYXggPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDE7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodmFsdWUgPCBtaW4gfHwgdmFsdWUgPiBtYXgpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJNYXRlcmlhbC1VSTogVGhlIHZhbHVlIHByb3ZpZGVkIFwiLmNvbmNhdCh2YWx1ZSwgXCIgaXMgb3V0IG9mIHJhbmdlIFtcIikuY29uY2F0KG1pbiwgXCIsIFwiKS5jb25jYXQobWF4LCBcIl0uXCIpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobWluLCB2YWx1ZSksIG1heCk7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBDU1MgaGV4IGZvcm1hdCB0byBDU1MgcmdiIGZvcm1hdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBIZXggY29sb3IsIGkuZS4gI25ubiBvciAjbm5ubm5uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyByZ2IgY29sb3Igc3RyaW5nXG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gaGV4VG9SZ2IoY29sb3IpIHtcbiAgY29sb3IgPSBjb2xvci5zdWJzdHIoMSk7XG4gIHZhciByZSA9IG5ldyBSZWdFeHAoXCIuezEsXCIuY29uY2F0KGNvbG9yLmxlbmd0aCA+PSA2ID8gMiA6IDEsIFwifVwiKSwgJ2cnKTtcbiAgdmFyIGNvbG9ycyA9IGNvbG9yLm1hdGNoKHJlKTtcblxuICBpZiAoY29sb3JzICYmIGNvbG9yc1swXS5sZW5ndGggPT09IDEpIHtcbiAgICBjb2xvcnMgPSBjb2xvcnMubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgICByZXR1cm4gbiArIG47XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gY29sb3JzID8gXCJyZ2JcIi5jb25jYXQoY29sb3JzLmxlbmd0aCA9PT0gNCA/ICdhJyA6ICcnLCBcIihcIikuY29uY2F0KGNvbG9ycy5tYXAoZnVuY3Rpb24gKG4sIGluZGV4KSB7XG4gICAgcmV0dXJuIGluZGV4IDwgMyA/IHBhcnNlSW50KG4sIDE2KSA6IE1hdGgucm91bmQocGFyc2VJbnQobiwgMTYpIC8gMjU1ICogMTAwMCkgLyAxMDAwO1xuICB9KS5qb2luKCcsICcpLCBcIilcIikgOiAnJztcbn1cblxuZnVuY3Rpb24gaW50VG9IZXgoaW50KSB7XG4gIHZhciBoZXggPSBpbnQudG9TdHJpbmcoMTYpO1xuICByZXR1cm4gaGV4Lmxlbmd0aCA9PT0gMSA/IFwiMFwiLmNvbmNhdChoZXgpIDogaGV4O1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gQ1NTIHJnYiBmb3JtYXQgdG8gQ1NTIGhleCBmb3JtYXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gUkdCIGNvbG9yLCBpLmUuIHJnYihuLCBuLCBuKVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgcmdiIGNvbG9yIHN0cmluZywgaS5lLiAjbm5ubm5uXG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gcmdiVG9IZXgoY29sb3IpIHtcbiAgLy8gSWRlbXBvdGVudFxuICBpZiAoY29sb3IuaW5kZXhPZignIycpID09PSAwKSB7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG5cbiAgdmFyIF9kZWNvbXBvc2VDb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKSxcbiAgICAgIHZhbHVlcyA9IF9kZWNvbXBvc2VDb2xvci52YWx1ZXM7XG5cbiAgcmV0dXJuIFwiI1wiLmNvbmNhdCh2YWx1ZXMubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIGludFRvSGV4KG4pO1xuICB9KS5qb2luKCcnKSk7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBoc2wgZm9ybWF0IHRvIHJnYiBmb3JtYXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gSFNMIGNvbG9yIHZhbHVlc1xuICogQHJldHVybnMge3N0cmluZ30gcmdiIGNvbG9yIHZhbHVlc1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBoc2xUb1JnYihjb2xvcikge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgdmFyIF9jb2xvciA9IGNvbG9yLFxuICAgICAgdmFsdWVzID0gX2NvbG9yLnZhbHVlcztcbiAgdmFyIGggPSB2YWx1ZXNbMF07XG4gIHZhciBzID0gdmFsdWVzWzFdIC8gMTAwO1xuICB2YXIgbCA9IHZhbHVlc1syXSAvIDEwMDtcbiAgdmFyIGEgPSBzICogTWF0aC5taW4obCwgMSAtIGwpO1xuXG4gIHZhciBmID0gZnVuY3Rpb24gZihuKSB7XG4gICAgdmFyIGsgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IChuICsgaCAvIDMwKSAlIDEyO1xuICAgIHJldHVybiBsIC0gYSAqIE1hdGgubWF4KE1hdGgubWluKGsgLSAzLCA5IC0gaywgMSksIC0xKTtcbiAgfTtcblxuICB2YXIgdHlwZSA9ICdyZ2InO1xuICB2YXIgcmdiID0gW01hdGgucm91bmQoZigwKSAqIDI1NSksIE1hdGgucm91bmQoZig4KSAqIDI1NSksIE1hdGgucm91bmQoZig0KSAqIDI1NSldO1xuXG4gIGlmIChjb2xvci50eXBlID09PSAnaHNsYScpIHtcbiAgICB0eXBlICs9ICdhJztcbiAgICByZ2IucHVzaCh2YWx1ZXNbM10pO1xuICB9XG5cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHZhbHVlczogcmdiXG4gIH0pO1xufVxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRoZSB0eXBlIGFuZCB2YWx1ZXMgb2YgYSBjb2xvci5cbiAqXG4gKiBOb3RlOiBEb2VzIG5vdCBzdXBwb3J0IHJnYiAlIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcmV0dXJucyB7b2JqZWN0fSAtIEEgTVVJIGNvbG9yIG9iamVjdDoge3R5cGU6IHN0cmluZywgdmFsdWVzOiBudW1iZXJbXX1cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZGVjb21wb3NlQ29sb3IoY29sb3IpIHtcbiAgLy8gSWRlbXBvdGVudFxuICBpZiAoY29sb3IudHlwZSkge1xuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuXG4gIGlmIChjb2xvci5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgIHJldHVybiBkZWNvbXBvc2VDb2xvcihoZXhUb1JnYihjb2xvcikpO1xuICB9XG5cbiAgdmFyIG1hcmtlciA9IGNvbG9yLmluZGV4T2YoJygnKTtcbiAgdmFyIHR5cGUgPSBjb2xvci5zdWJzdHJpbmcoMCwgbWFya2VyKTtcblxuICBpZiAoWydyZ2InLCAncmdiYScsICdoc2wnLCAnaHNsYSddLmluZGV4T2YodHlwZSkgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFwiTWF0ZXJpYWwtVUk6IFVuc3VwcG9ydGVkIGBcIi5jb25jYXQoY29sb3IsIFwiYCBjb2xvci5cXG5XZSBzdXBwb3J0IHRoZSBmb2xsb3dpbmcgZm9ybWF0czogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKS5cIikgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDMsIGNvbG9yKSk7XG4gIH1cblxuICB2YXIgdmFsdWVzID0gY29sb3Iuc3Vic3RyaW5nKG1hcmtlciArIDEsIGNvbG9yLmxlbmd0aCAtIDEpLnNwbGl0KCcsJyk7XG4gIHZhbHVlcyA9IHZhbHVlcy5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHZhbHVlczogdmFsdWVzXG4gIH07XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3Igb2JqZWN0IHdpdGggdHlwZSBhbmQgdmFsdWVzIHRvIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb2xvciAtIERlY29tcG9zZWQgY29sb3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvci50eXBlIC0gT25lIG9mOiAncmdiJywgJ3JnYmEnLCAnaHNsJywgJ2hzbGEnXG4gKiBAcGFyYW0ge2FycmF5fSBjb2xvci52YWx1ZXMgLSBbbixuLG5dIG9yIFtuLG4sbixuXVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJlY29tcG9zZUNvbG9yKGNvbG9yKSB7XG4gIHZhciB0eXBlID0gY29sb3IudHlwZTtcbiAgdmFyIHZhbHVlcyA9IGNvbG9yLnZhbHVlcztcblxuICBpZiAodHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICAvLyBPbmx5IGNvbnZlcnQgdGhlIGZpcnN0IDMgdmFsdWVzIHRvIGludCAoaS5lLiBub3QgYWxwaGEpXG4gICAgdmFsdWVzID0gdmFsdWVzLm1hcChmdW5jdGlvbiAobiwgaSkge1xuICAgICAgcmV0dXJuIGkgPCAzID8gcGFyc2VJbnQobiwgMTApIDogbjtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICh0eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIHZhbHVlc1sxXSA9IFwiXCIuY29uY2F0KHZhbHVlc1sxXSwgXCIlXCIpO1xuICAgIHZhbHVlc1syXSA9IFwiXCIuY29uY2F0KHZhbHVlc1syXSwgXCIlXCIpO1xuICB9XG5cbiAgcmV0dXJuIFwiXCIuY29uY2F0KHR5cGUsIFwiKFwiKS5jb25jYXQodmFsdWVzLmpvaW4oJywgJyksIFwiKVwiKTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgY29udHJhc3QgcmF0aW8gYmV0d2VlbiB0d28gY29sb3JzLlxuICpcbiAqIEZvcm11bGE6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAtVEVDSFMvRzE3Lmh0bWwjRzE3LXRlc3RzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcmVncm91bmQgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFja2dyb3VuZCAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgY29udHJhc3QgcmF0aW8gdmFsdWUgaW4gdGhlIHJhbmdlIDAgLSAyMS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29udHJhc3RSYXRpbyhmb3JlZ3JvdW5kLCBiYWNrZ3JvdW5kKSB7XG4gIHZhciBsdW1BID0gZ2V0THVtaW5hbmNlKGZvcmVncm91bmQpO1xuICB2YXIgbHVtQiA9IGdldEx1bWluYW5jZShiYWNrZ3JvdW5kKTtcbiAgcmV0dXJuIChNYXRoLm1heChsdW1BLCBsdW1CKSArIDAuMDUpIC8gKE1hdGgubWluKGx1bUEsIGx1bUIpICsgMC4wNSk7XG59XG4vKipcbiAqIFRoZSByZWxhdGl2ZSBicmlnaHRuZXNzIG9mIGFueSBwb2ludCBpbiBhIGNvbG9yIHNwYWNlLFxuICogbm9ybWFsaXplZCB0byAwIGZvciBkYXJrZXN0IGJsYWNrIGFuZCAxIGZvciBsaWdodGVzdCB3aGl0ZS5cbiAqXG4gKiBGb3JtdWxhOiBodHRwczovL3d3dy53My5vcmcvVFIvV0NBRzIwLVRFQ0hTL0cxNy5odG1sI0cxNy10ZXN0c1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSByZWxhdGl2ZSBicmlnaHRuZXNzIG9mIHRoZSBjb2xvciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0THVtaW5hbmNlKGNvbG9yKSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICB2YXIgcmdiID0gY29sb3IudHlwZSA9PT0gJ2hzbCcgPyBkZWNvbXBvc2VDb2xvcihoc2xUb1JnYihjb2xvcikpLnZhbHVlcyA6IGNvbG9yLnZhbHVlcztcbiAgcmdiID0gcmdiLm1hcChmdW5jdGlvbiAodmFsKSB7XG4gICAgdmFsIC89IDI1NTsgLy8gbm9ybWFsaXplZFxuXG4gICAgcmV0dXJuIHZhbCA8PSAwLjAzOTI4ID8gdmFsIC8gMTIuOTIgOiBNYXRoLnBvdygodmFsICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG4gIH0pOyAvLyBUcnVuY2F0ZSBhdCAzIGRpZ2l0c1xuXG4gIHJldHVybiBOdW1iZXIoKDAuMjEyNiAqIHJnYlswXSArIDAuNzE1MiAqIHJnYlsxXSArIDAuMDcyMiAqIHJnYlsyXSkudG9GaXhlZCgzKSk7XG59XG4vKipcbiAqIERhcmtlbiBvciBsaWdodGVuIGEgY29sb3IsIGRlcGVuZGluZyBvbiBpdHMgbHVtaW5hbmNlLlxuICogTGlnaHQgY29sb3JzIGFyZSBkYXJrZW5lZCwgZGFyayBjb2xvcnMgYXJlIGxpZ2h0ZW5lZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQ9MC4xNSAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBlbXBoYXNpemUoY29sb3IpIHtcbiAgdmFyIGNvZWZmaWNpZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwLjE1O1xuICByZXR1cm4gZ2V0THVtaW5hbmNlKGNvbG9yKSA+IDAuNSA/IGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpIDogbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpO1xufVxuLyoqXG4gKiBTZXQgdGhlIGFic29sdXRlIHRyYW5zcGFyZW5jeSBvZiBhIGNvbG9yLlxuICogQW55IGV4aXN0aW5nIGFscGhhIHZhbHVlcyBhcmUgb3ZlcndyaXR0ZW4uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gdmFsdWUgdG8gc2V0IHRoZSBhbHBoYSBjaGFubmVsIHRvIGluIHRoZSByYW5nZSAwIC0xXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmYWRlKGNvbG9yLCB2YWx1ZSkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgdmFsdWUgPSBjbGFtcCh2YWx1ZSk7XG5cbiAgaWYgKGNvbG9yLnR5cGUgPT09ICdyZ2InIHx8IGNvbG9yLnR5cGUgPT09ICdoc2wnKSB7XG4gICAgY29sb3IudHlwZSArPSAnYSc7XG4gIH1cblxuICBjb2xvci52YWx1ZXNbM10gPSB2YWx1ZTtcbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbi8qKlxuICogRGFya2VucyBhIGNvbG9yLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudCAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXJrZW4oY29sb3IsIGNvZWZmaWNpZW50KSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICBjb2VmZmljaWVudCA9IGNsYW1wKGNvZWZmaWNpZW50KTtcblxuICBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICBjb2xvci52YWx1ZXNbMl0gKj0gMSAtIGNvZWZmaWNpZW50O1xuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSAqPSAxIC0gY29lZmZpY2llbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbi8qKlxuICogTGlnaHRlbnMgYSBjb2xvci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXAoY29lZmZpY2llbnQpO1xuXG4gIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIGNvbG9yLnZhbHVlc1syXSArPSAoMTAwIC0gY29sb3IudmFsdWVzWzJdKSAqIGNvZWZmaWNpZW50O1xuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSArPSAoMjU1IC0gY29sb3IudmFsdWVzW2ldKSAqIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IHsgZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGFzIF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgfSBmcm9tIFwiQG1hdGVyaWFsLXVpL3V0aWxzXCI7XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IGNvbW1vbiBmcm9tICcuLi9jb2xvcnMvY29tbW9uJztcbmltcG9ydCBncmV5IGZyb20gJy4uL2NvbG9ycy9ncmV5JztcbmltcG9ydCBpbmRpZ28gZnJvbSAnLi4vY29sb3JzL2luZGlnbyc7XG5pbXBvcnQgcGluayBmcm9tICcuLi9jb2xvcnMvcGluayc7XG5pbXBvcnQgcmVkIGZyb20gJy4uL2NvbG9ycy9yZWQnO1xuaW1wb3J0IG9yYW5nZSBmcm9tICcuLi9jb2xvcnMvb3JhbmdlJztcbmltcG9ydCBibHVlIGZyb20gJy4uL2NvbG9ycy9ibHVlJztcbmltcG9ydCBncmVlbiBmcm9tICcuLi9jb2xvcnMvZ3JlZW4nO1xuaW1wb3J0IHsgZGFya2VuLCBnZXRDb250cmFzdFJhdGlvLCBsaWdodGVuIH0gZnJvbSAnLi9jb2xvck1hbmlwdWxhdG9yJztcbmV4cG9ydCB2YXIgbGlnaHQgPSB7XG4gIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgdGV4dC5cbiAgdGV4dDoge1xuICAgIC8vIFRoZSBtb3N0IGltcG9ydGFudCB0ZXh0LlxuICAgIHByaW1hcnk6ICdyZ2JhKDAsIDAsIDAsIDAuODcpJyxcbiAgICAvLyBTZWNvbmRhcnkgdGV4dC5cbiAgICBzZWNvbmRhcnk6ICdyZ2JhKDAsIDAsIDAsIDAuNTQpJyxcbiAgICAvLyBEaXNhYmxlZCB0ZXh0IGhhdmUgZXZlbiBsb3dlciB2aXN1YWwgcHJvbWluZW5jZS5cbiAgICBkaXNhYmxlZDogJ3JnYmEoMCwgMCwgMCwgMC4zOCknLFxuICAgIC8vIFRleHQgaGludHMuXG4gICAgaGludDogJ3JnYmEoMCwgMCwgMCwgMC4zOCknXG4gIH0sXG4gIC8vIFRoZSBjb2xvciB1c2VkIHRvIGRpdmlkZSBkaWZmZXJlbnQgZWxlbWVudHMuXG4gIGRpdmlkZXI6ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyxcbiAgLy8gVGhlIGJhY2tncm91bmQgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIHN1cmZhY2VzLlxuICAvLyBDb25zaXN0ZW5jeSBiZXR3ZWVuIHRoZXNlIHZhbHVlcyBpcyBpbXBvcnRhbnQuXG4gIGJhY2tncm91bmQ6IHtcbiAgICBwYXBlcjogY29tbW9uLndoaXRlLFxuICAgIGRlZmF1bHQ6IGdyZXlbNTBdXG4gIH0sXG4gIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgYWN0aW9uIGVsZW1lbnRzLlxuICBhY3Rpb246IHtcbiAgICAvLyBUaGUgY29sb3Igb2YgYW4gYWN0aXZlIGFjdGlvbiBsaWtlIGFuIGljb24gYnV0dG9uLlxuICAgIGFjdGl2ZTogJ3JnYmEoMCwgMCwgMCwgMC41NCknLFxuICAgIC8vIFRoZSBjb2xvciBvZiBhbiBob3ZlcmVkIGFjdGlvbi5cbiAgICBob3ZlcjogJ3JnYmEoMCwgMCwgMCwgMC4wNCknLFxuICAgIGhvdmVyT3BhY2l0eTogMC4wNCxcbiAgICAvLyBUaGUgY29sb3Igb2YgYSBzZWxlY3RlZCBhY3Rpb24uXG4gICAgc2VsZWN0ZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMDgpJyxcbiAgICBzZWxlY3RlZE9wYWNpdHk6IDAuMDgsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGEgZGlzYWJsZWQgYWN0aW9uLlxuICAgIGRpc2FibGVkOiAncmdiYSgwLCAwLCAwLCAwLjI2KScsXG4gICAgLy8gVGhlIGJhY2tncm91bmQgY29sb3Igb2YgYSBkaXNhYmxlZCBhY3Rpb24uXG4gICAgZGlzYWJsZWRCYWNrZ3JvdW5kOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gICAgZGlzYWJsZWRPcGFjaXR5OiAwLjM4LFxuICAgIGZvY3VzOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gICAgZm9jdXNPcGFjaXR5OiAwLjEyLFxuICAgIGFjdGl2YXRlZE9wYWNpdHk6IDAuMTJcbiAgfVxufTtcbmV4cG9ydCB2YXIgZGFyayA9IHtcbiAgdGV4dDoge1xuICAgIHByaW1hcnk6IGNvbW1vbi53aGl0ZSxcbiAgICBzZWNvbmRhcnk6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyknLFxuICAgIGRpc2FibGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJyxcbiAgICBoaW50OiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJyxcbiAgICBpY29uOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJ1xuICB9LFxuICBkaXZpZGVyOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKScsXG4gIGJhY2tncm91bmQ6IHtcbiAgICBwYXBlcjogZ3JleVs4MDBdLFxuICAgIGRlZmF1bHQ6ICcjMzAzMDMwJ1xuICB9LFxuICBhY3Rpb246IHtcbiAgICBhY3RpdmU6IGNvbW1vbi53aGl0ZSxcbiAgICBob3ZlcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wOCknLFxuICAgIGhvdmVyT3BhY2l0eTogMC4wOCxcbiAgICBzZWxlY3RlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xNiknLFxuICAgIHNlbGVjdGVkT3BhY2l0eTogMC4xNixcbiAgICBkaXNhYmxlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKScsXG4gICAgZGlzYWJsZWRCYWNrZ3JvdW5kOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKScsXG4gICAgZGlzYWJsZWRPcGFjaXR5OiAwLjM4LFxuICAgIGZvY3VzOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKScsXG4gICAgZm9jdXNPcGFjaXR5OiAwLjEyLFxuICAgIGFjdGl2YXRlZE9wYWNpdHk6IDAuMjRcbiAgfVxufTtcblxuZnVuY3Rpb24gYWRkTGlnaHRPckRhcmsoaW50ZW50LCBkaXJlY3Rpb24sIHNoYWRlLCB0b25hbE9mZnNldCkge1xuICB2YXIgdG9uYWxPZmZzZXRMaWdodCA9IHRvbmFsT2Zmc2V0LmxpZ2h0IHx8IHRvbmFsT2Zmc2V0O1xuICB2YXIgdG9uYWxPZmZzZXREYXJrID0gdG9uYWxPZmZzZXQuZGFyayB8fCB0b25hbE9mZnNldCAqIDEuNTtcblxuICBpZiAoIWludGVudFtkaXJlY3Rpb25dKSB7XG4gICAgaWYgKGludGVudC5oYXNPd25Qcm9wZXJ0eShzaGFkZSkpIHtcbiAgICAgIGludGVudFtkaXJlY3Rpb25dID0gaW50ZW50W3NoYWRlXTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2xpZ2h0Jykge1xuICAgICAgaW50ZW50LmxpZ2h0ID0gbGlnaHRlbihpbnRlbnQubWFpbiwgdG9uYWxPZmZzZXRMaWdodCk7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdkYXJrJykge1xuICAgICAgaW50ZW50LmRhcmsgPSBkYXJrZW4oaW50ZW50Lm1haW4sIHRvbmFsT2Zmc2V0RGFyayk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVBhbGV0dGUocGFsZXR0ZSkge1xuICB2YXIgX3BhbGV0dGUkcHJpbWFyeSA9IHBhbGV0dGUucHJpbWFyeSxcbiAgICAgIHByaW1hcnkgPSBfcGFsZXR0ZSRwcmltYXJ5ID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IGluZGlnb1szMDBdLFxuICAgIG1haW46IGluZGlnb1s1MDBdLFxuICAgIGRhcms6IGluZGlnb1s3MDBdXG4gIH0gOiBfcGFsZXR0ZSRwcmltYXJ5LFxuICAgICAgX3BhbGV0dGUkc2Vjb25kYXJ5ID0gcGFsZXR0ZS5zZWNvbmRhcnksXG4gICAgICBzZWNvbmRhcnkgPSBfcGFsZXR0ZSRzZWNvbmRhcnkgPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogcGluay5BMjAwLFxuICAgIG1haW46IHBpbmsuQTQwMCxcbiAgICBkYXJrOiBwaW5rLkE3MDBcbiAgfSA6IF9wYWxldHRlJHNlY29uZGFyeSxcbiAgICAgIF9wYWxldHRlJGVycm9yID0gcGFsZXR0ZS5lcnJvcixcbiAgICAgIGVycm9yID0gX3BhbGV0dGUkZXJyb3IgPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogcmVkWzMwMF0sXG4gICAgbWFpbjogcmVkWzUwMF0sXG4gICAgZGFyazogcmVkWzcwMF1cbiAgfSA6IF9wYWxldHRlJGVycm9yLFxuICAgICAgX3BhbGV0dGUkd2FybmluZyA9IHBhbGV0dGUud2FybmluZyxcbiAgICAgIHdhcm5pbmcgPSBfcGFsZXR0ZSR3YXJuaW5nID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IG9yYW5nZVszMDBdLFxuICAgIG1haW46IG9yYW5nZVs1MDBdLFxuICAgIGRhcms6IG9yYW5nZVs3MDBdXG4gIH0gOiBfcGFsZXR0ZSR3YXJuaW5nLFxuICAgICAgX3BhbGV0dGUkaW5mbyA9IHBhbGV0dGUuaW5mbyxcbiAgICAgIGluZm8gPSBfcGFsZXR0ZSRpbmZvID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IGJsdWVbMzAwXSxcbiAgICBtYWluOiBibHVlWzUwMF0sXG4gICAgZGFyazogYmx1ZVs3MDBdXG4gIH0gOiBfcGFsZXR0ZSRpbmZvLFxuICAgICAgX3BhbGV0dGUkc3VjY2VzcyA9IHBhbGV0dGUuc3VjY2VzcyxcbiAgICAgIHN1Y2Nlc3MgPSBfcGFsZXR0ZSRzdWNjZXNzID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IGdyZWVuWzMwMF0sXG4gICAgbWFpbjogZ3JlZW5bNTAwXSxcbiAgICBkYXJrOiBncmVlbls3MDBdXG4gIH0gOiBfcGFsZXR0ZSRzdWNjZXNzLFxuICAgICAgX3BhbGV0dGUkdHlwZSA9IHBhbGV0dGUudHlwZSxcbiAgICAgIHR5cGUgPSBfcGFsZXR0ZSR0eXBlID09PSB2b2lkIDAgPyAnbGlnaHQnIDogX3BhbGV0dGUkdHlwZSxcbiAgICAgIF9wYWxldHRlJGNvbnRyYXN0VGhyZSA9IHBhbGV0dGUuY29udHJhc3RUaHJlc2hvbGQsXG4gICAgICBjb250cmFzdFRocmVzaG9sZCA9IF9wYWxldHRlJGNvbnRyYXN0VGhyZSA9PT0gdm9pZCAwID8gMyA6IF9wYWxldHRlJGNvbnRyYXN0VGhyZSxcbiAgICAgIF9wYWxldHRlJHRvbmFsT2Zmc2V0ID0gcGFsZXR0ZS50b25hbE9mZnNldCxcbiAgICAgIHRvbmFsT2Zmc2V0ID0gX3BhbGV0dGUkdG9uYWxPZmZzZXQgPT09IHZvaWQgMCA/IDAuMiA6IF9wYWxldHRlJHRvbmFsT2Zmc2V0LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocGFsZXR0ZSwgW1wicHJpbWFyeVwiLCBcInNlY29uZGFyeVwiLCBcImVycm9yXCIsIFwid2FybmluZ1wiLCBcImluZm9cIiwgXCJzdWNjZXNzXCIsIFwidHlwZVwiLCBcImNvbnRyYXN0VGhyZXNob2xkXCIsIFwidG9uYWxPZmZzZXRcIl0pOyAvLyBVc2UgdGhlIHNhbWUgbG9naWMgYXNcbiAgLy8gQm9vdHN0cmFwOiBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi8xZDZlMzcxMGRkNDQ3ZGUxYTIwMGYyOWU4ZmE1MjFmOGEwOTA4ZjcwL3Njc3MvX2Z1bmN0aW9ucy5zY3NzI0w1OVxuICAvLyBhbmQgbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIgaHR0cHM6Ly9naXRodWIuY29tL21hdGVyaWFsLWNvbXBvbmVudHMvbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIvYmxvYi9hYzQ2Yjg4NjNjNGRhYjlmYzIyYzRjNjYyZGM2YmQxYjY1ZGQ2NTJmL3BhY2thZ2VzL21kYy10aGVtZS9fZnVuY3Rpb25zLnNjc3MjTDU0XG5cblxuICBmdW5jdGlvbiBnZXRDb250cmFzdFRleHQoYmFja2dyb3VuZCkge1xuICAgIHZhciBjb250cmFzdFRleHQgPSBnZXRDb250cmFzdFJhdGlvKGJhY2tncm91bmQsIGRhcmsudGV4dC5wcmltYXJ5KSA+PSBjb250cmFzdFRocmVzaG9sZCA/IGRhcmsudGV4dC5wcmltYXJ5IDogbGlnaHQudGV4dC5wcmltYXJ5O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBjb250cmFzdCA9IGdldENvbnRyYXN0UmF0aW8oYmFja2dyb3VuZCwgY29udHJhc3RUZXh0KTtcblxuICAgICAgaWYgKGNvbnRyYXN0IDwgMykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUgY29udHJhc3QgcmF0aW8gb2YgXCIuY29uY2F0KGNvbnRyYXN0LCBcIjoxIGZvciBcIikuY29uY2F0KGNvbnRyYXN0VGV4dCwgXCIgb24gXCIpLmNvbmNhdChiYWNrZ3JvdW5kKSwgJ2ZhbGxzIGJlbG93IHRoZSBXQ0FHIHJlY29tbWVuZGVkIGFic29sdXRlIG1pbmltdW0gY29udHJhc3QgcmF0aW8gb2YgMzoxLicsICdodHRwczovL3d3dy53My5vcmcvVFIvMjAwOC9SRUMtV0NBRzIwLTIwMDgxMjExLyN2aXN1YWwtYXVkaW8tY29udHJhc3QtY29udHJhc3QnXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRyYXN0VGV4dDtcbiAgfVxuXG4gIHZhciBhdWdtZW50Q29sb3IgPSBmdW5jdGlvbiBhdWdtZW50Q29sb3IoY29sb3IpIHtcbiAgICB2YXIgbWFpblNoYWRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiA1MDA7XG4gICAgdmFyIGxpZ2h0U2hhZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDMwMDtcbiAgICB2YXIgZGFya1NoYWRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiA3MDA7XG4gICAgY29sb3IgPSBfZXh0ZW5kcyh7fSwgY29sb3IpO1xuXG4gICAgaWYgKCFjb2xvci5tYWluICYmIGNvbG9yW21haW5TaGFkZV0pIHtcbiAgICAgIGNvbG9yLm1haW4gPSBjb2xvclttYWluU2hhZGVdO1xuICAgIH1cblxuICAgIGlmICghY29sb3IubWFpbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFwiTWF0ZXJpYWwtVUk6IFRoZSBjb2xvciBwcm92aWRlZCB0byBhdWdtZW50Q29sb3IoY29sb3IpIGlzIGludmFsaWQuXFxuVGhlIGNvbG9yIG9iamVjdCBuZWVkcyB0byBoYXZlIGEgYG1haW5gIHByb3BlcnR5IG9yIGEgYFwiLmNvbmNhdChtYWluU2hhZGUsIFwiYCBwcm9wZXJ0eS5cIikgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDQsIG1haW5TaGFkZSkpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY29sb3IubWFpbiAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBcIk1hdGVyaWFsLVVJOiBUaGUgY29sb3IgcHJvdmlkZWQgdG8gYXVnbWVudENvbG9yKGNvbG9yKSBpcyBpbnZhbGlkLlxcbmBjb2xvci5tYWluYCBzaG91bGQgYmUgYSBzdHJpbmcsIGJ1dCBgXCIuY29uY2F0KEpTT04uc3RyaW5naWZ5KGNvbG9yLm1haW4pLCBcImAgd2FzIHByb3ZpZGVkIGluc3RlYWQuXFxuXFxuRGlkIHlvdSBpbnRlbmQgdG8gdXNlIG9uZSBvZiB0aGUgZm9sbG93aW5nIGFwcHJvYWNoZXM/XFxuXFxuaW1wb3J0IHtcXHhBMGdyZWVuIH0gZnJvbSBcXFwiQG1hdGVyaWFsLXVpL2NvcmUvY29sb3JzXFxcIjtcXG5cXG5jb25zdCB0aGVtZTEgPSBjcmVhdGVNdWlUaGVtZSh7IHBhbGV0dGU6IHtcXG4gIHByaW1hcnk6IGdyZWVuLFxcbn0gfSk7XFxuXFxuY29uc3QgdGhlbWUyID0gY3JlYXRlTXVpVGhlbWUoeyBwYWxldHRlOiB7XFxuICBwcmltYXJ5OiB7IG1haW46IGdyZWVuWzUwMF0gfSxcXG59IH0pO1wiKSA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoNSwgSlNPTi5zdHJpbmdpZnkoY29sb3IubWFpbikpKTtcbiAgICB9XG5cbiAgICBhZGRMaWdodE9yRGFyayhjb2xvciwgJ2xpZ2h0JywgbGlnaHRTaGFkZSwgdG9uYWxPZmZzZXQpO1xuICAgIGFkZExpZ2h0T3JEYXJrKGNvbG9yLCAnZGFyaycsIGRhcmtTaGFkZSwgdG9uYWxPZmZzZXQpO1xuXG4gICAgaWYgKCFjb2xvci5jb250cmFzdFRleHQpIHtcbiAgICAgIGNvbG9yLmNvbnRyYXN0VGV4dCA9IGdldENvbnRyYXN0VGV4dChjb2xvci5tYWluKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29sb3I7XG4gIH07XG5cbiAgdmFyIHR5cGVzID0ge1xuICAgIGRhcms6IGRhcmssXG4gICAgbGlnaHQ6IGxpZ2h0XG4gIH07XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoIXR5cGVzW3R5cGVdKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiTWF0ZXJpYWwtVUk6IFRoZSBwYWxldHRlIHR5cGUgYFwiLmNvbmNhdCh0eXBlLCBcImAgaXMgbm90IHN1cHBvcnRlZC5cIikpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwYWxldHRlT3V0cHV0ID0gZGVlcG1lcmdlKF9leHRlbmRzKHtcbiAgICAvLyBBIGNvbGxlY3Rpb24gb2YgY29tbW9uIGNvbG9ycy5cbiAgICBjb21tb246IGNvbW1vbixcbiAgICAvLyBUaGUgcGFsZXR0ZSB0eXBlLCBjYW4gYmUgbGlnaHQgb3IgZGFyay5cbiAgICB0eXBlOiB0eXBlLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgcHJpbWFyeSBpbnRlcmZhY2UgZWxlbWVudHMgZm9yIGEgdXNlci5cbiAgICBwcmltYXJ5OiBhdWdtZW50Q29sb3IocHJpbWFyeSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBzZWNvbmRhcnkgaW50ZXJmYWNlIGVsZW1lbnRzIGZvciBhIHVzZXIuXG4gICAgc2Vjb25kYXJ5OiBhdWdtZW50Q29sb3Ioc2Vjb25kYXJ5LCAnQTQwMCcsICdBMjAwJywgJ0E3MDAnKSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IGludGVyZmFjZSBlbGVtZW50cyB0aGF0IHRoZSB1c2VyIHNob3VsZCBiZSBtYWRlIGF3YXJlIG9mLlxuICAgIGVycm9yOiBhdWdtZW50Q29sb3IoZXJyb3IpLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgcG90ZW50aWFsbHkgZGFuZ2Vyb3VzIGFjdGlvbnMgb3IgaW1wb3J0YW50IG1lc3NhZ2VzLlxuICAgIHdhcm5pbmc6IGF1Z21lbnRDb2xvcih3YXJuaW5nKSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcHJlc2VudCBpbmZvcm1hdGlvbiB0byB0aGUgdXNlciB0aGF0IGlzIG5ldXRyYWwgYW5kIG5vdCBuZWNlc3NhcmlseSBpbXBvcnRhbnQuXG4gICAgaW5mbzogYXVnbWVudENvbG9yKGluZm8pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBpbmRpY2F0ZSB0aGUgc3VjY2Vzc2Z1bCBjb21wbGV0aW9uIG9mIGFuIGFjdGlvbiB0aGF0IHVzZXIgdHJpZ2dlcmVkLlxuICAgIHN1Y2Nlc3M6IGF1Z21lbnRDb2xvcihzdWNjZXNzKSxcbiAgICAvLyBUaGUgZ3JleSBjb2xvcnMuXG4gICAgZ3JleTogZ3JleSxcbiAgICAvLyBVc2VkIGJ5IGBnZXRDb250cmFzdFRleHQoKWAgdG8gbWF4aW1pemUgdGhlIGNvbnRyYXN0IGJldHdlZW5cbiAgICAvLyB0aGUgYmFja2dyb3VuZCBhbmQgdGhlIHRleHQuXG4gICAgY29udHJhc3RUaHJlc2hvbGQ6IGNvbnRyYXN0VGhyZXNob2xkLFxuICAgIC8vIFRha2VzIGEgYmFja2dyb3VuZCBjb2xvciBhbmQgcmV0dXJucyB0aGUgdGV4dCBjb2xvciB0aGF0IG1heGltaXplcyB0aGUgY29udHJhc3QuXG4gICAgZ2V0Q29udHJhc3RUZXh0OiBnZXRDb250cmFzdFRleHQsXG4gICAgLy8gR2VuZXJhdGUgYSByaWNoIGNvbG9yIG9iamVjdC5cbiAgICBhdWdtZW50Q29sb3I6IGF1Z21lbnRDb2xvcixcbiAgICAvLyBVc2VkIGJ5IHRoZSBmdW5jdGlvbnMgYmVsb3cgdG8gc2hpZnQgYSBjb2xvcidzIGx1bWluYW5jZSBieSBhcHByb3hpbWF0ZWx5XG4gICAgLy8gdHdvIGluZGV4ZXMgd2l0aGluIGl0cyB0b25hbCBwYWxldHRlLlxuICAgIC8vIEUuZy4sIHNoaWZ0IGZyb20gUmVkIDUwMCB0byBSZWQgMzAwIG9yIFJlZCA3MDAuXG4gICAgdG9uYWxPZmZzZXQ6IHRvbmFsT2Zmc2V0XG4gIH0sIHR5cGVzW3R5cGVdKSwgb3RoZXIpO1xuICByZXR1cm4gcGFsZXR0ZU91dHB1dDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuXG5mdW5jdGlvbiByb3VuZCh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDFlNSkgLyAxZTU7XG59XG5cbnZhciBjYXNlQWxsQ2FwcyA9IHtcbiAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZSdcbn07XG52YXIgZGVmYXVsdEZvbnRGYW1pbHkgPSAnXCJSb2JvdG9cIiwgXCJIZWx2ZXRpY2FcIiwgXCJBcmlhbFwiLCBzYW5zLXNlcmlmJztcbi8qKlxuICogQHNlZSBAbGlua3todHRwczovL21hdGVyaWFsLmlvL2Rlc2lnbi90eXBvZ3JhcGh5L3RoZS10eXBlLXN5c3RlbS5odG1sfVxuICogQHNlZSBAbGlua3todHRwczovL21hdGVyaWFsLmlvL2Rlc2lnbi90eXBvZ3JhcGh5L3VuZGVyc3RhbmRpbmctdHlwb2dyYXBoeS5odG1sfVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVR5cG9ncmFwaHkocGFsZXR0ZSwgdHlwb2dyYXBoeSkge1xuICB2YXIgX3JlZiA9IHR5cGVvZiB0eXBvZ3JhcGh5ID09PSAnZnVuY3Rpb24nID8gdHlwb2dyYXBoeShwYWxldHRlKSA6IHR5cG9ncmFwaHksXG4gICAgICBfcmVmJGZvbnRGYW1pbHkgPSBfcmVmLmZvbnRGYW1pbHksXG4gICAgICBmb250RmFtaWx5ID0gX3JlZiRmb250RmFtaWx5ID09PSB2b2lkIDAgPyBkZWZhdWx0Rm9udEZhbWlseSA6IF9yZWYkZm9udEZhbWlseSxcbiAgICAgIF9yZWYkZm9udFNpemUgPSBfcmVmLmZvbnRTaXplLFxuICAgICAgZm9udFNpemUgPSBfcmVmJGZvbnRTaXplID09PSB2b2lkIDAgPyAxNCA6IF9yZWYkZm9udFNpemUsXG4gICAgICBfcmVmJGZvbnRXZWlnaHRMaWdodCA9IF9yZWYuZm9udFdlaWdodExpZ2h0LFxuICAgICAgZm9udFdlaWdodExpZ2h0ID0gX3JlZiRmb250V2VpZ2h0TGlnaHQgPT09IHZvaWQgMCA/IDMwMCA6IF9yZWYkZm9udFdlaWdodExpZ2h0LFxuICAgICAgX3JlZiRmb250V2VpZ2h0UmVndWxhID0gX3JlZi5mb250V2VpZ2h0UmVndWxhcixcbiAgICAgIGZvbnRXZWlnaHRSZWd1bGFyID0gX3JlZiRmb250V2VpZ2h0UmVndWxhID09PSB2b2lkIDAgPyA0MDAgOiBfcmVmJGZvbnRXZWlnaHRSZWd1bGEsXG4gICAgICBfcmVmJGZvbnRXZWlnaHRNZWRpdW0gPSBfcmVmLmZvbnRXZWlnaHRNZWRpdW0sXG4gICAgICBmb250V2VpZ2h0TWVkaXVtID0gX3JlZiRmb250V2VpZ2h0TWVkaXVtID09PSB2b2lkIDAgPyA1MDAgOiBfcmVmJGZvbnRXZWlnaHRNZWRpdW0sXG4gICAgICBfcmVmJGZvbnRXZWlnaHRCb2xkID0gX3JlZi5mb250V2VpZ2h0Qm9sZCxcbiAgICAgIGZvbnRXZWlnaHRCb2xkID0gX3JlZiRmb250V2VpZ2h0Qm9sZCA9PT0gdm9pZCAwID8gNzAwIDogX3JlZiRmb250V2VpZ2h0Qm9sZCxcbiAgICAgIF9yZWYkaHRtbEZvbnRTaXplID0gX3JlZi5odG1sRm9udFNpemUsXG4gICAgICBodG1sRm9udFNpemUgPSBfcmVmJGh0bWxGb250U2l6ZSA9PT0gdm9pZCAwID8gMTYgOiBfcmVmJGh0bWxGb250U2l6ZSxcbiAgICAgIGFsbFZhcmlhbnRzID0gX3JlZi5hbGxWYXJpYW50cyxcbiAgICAgIHB4VG9SZW0yID0gX3JlZi5weFRvUmVtLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW1wiZm9udEZhbWlseVwiLCBcImZvbnRTaXplXCIsIFwiZm9udFdlaWdodExpZ2h0XCIsIFwiZm9udFdlaWdodFJlZ3VsYXJcIiwgXCJmb250V2VpZ2h0TWVkaXVtXCIsIFwiZm9udFdlaWdodEJvbGRcIiwgXCJodG1sRm9udFNpemVcIiwgXCJhbGxWYXJpYW50c1wiLCBcInB4VG9SZW1cIl0pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBmb250U2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBgZm9udFNpemVgIGlzIHJlcXVpcmVkIHRvIGJlIGEgbnVtYmVyLicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaHRtbEZvbnRTaXplICE9PSAnbnVtYmVyJykge1xuICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IGBodG1sRm9udFNpemVgIGlzIHJlcXVpcmVkIHRvIGJlIGEgbnVtYmVyLicpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjb2VmID0gZm9udFNpemUgLyAxNDtcblxuICB2YXIgcHhUb1JlbSA9IHB4VG9SZW0yIHx8IGZ1bmN0aW9uIChzaXplKSB7XG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KHNpemUgLyBodG1sRm9udFNpemUgKiBjb2VmLCBcInJlbVwiKTtcbiAgfTtcblxuICB2YXIgYnVpbGRWYXJpYW50ID0gZnVuY3Rpb24gYnVpbGRWYXJpYW50KGZvbnRXZWlnaHQsIHNpemUsIGxpbmVIZWlnaHQsIGxldHRlclNwYWNpbmcsIGNhc2luZykge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgICAgZm9udFdlaWdodDogZm9udFdlaWdodCxcbiAgICAgIGZvbnRTaXplOiBweFRvUmVtKHNpemUpLFxuICAgICAgLy8gVW5pdGxlc3MgZm9sbG93aW5nIGh0dHBzOi8vbWV5ZXJ3ZWIuY29tL2VyaWMvdGhvdWdodHMvMjAwNi8wMi8wOC91bml0bGVzcy1saW5lLWhlaWdodHMvXG4gICAgICBsaW5lSGVpZ2h0OiBsaW5lSGVpZ2h0XG4gICAgfSwgZm9udEZhbWlseSA9PT0gZGVmYXVsdEZvbnRGYW1pbHkgPyB7XG4gICAgICBsZXR0ZXJTcGFjaW5nOiBcIlwiLmNvbmNhdChyb3VuZChsZXR0ZXJTcGFjaW5nIC8gc2l6ZSksIFwiZW1cIilcbiAgICB9IDoge30sIGNhc2luZywgYWxsVmFyaWFudHMpO1xuICB9O1xuXG4gIHZhciB2YXJpYW50cyA9IHtcbiAgICBoMTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRMaWdodCwgOTYsIDEuMTY3LCAtMS41KSxcbiAgICBoMjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRMaWdodCwgNjAsIDEuMiwgLTAuNSksXG4gICAgaDM6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgNDgsIDEuMTY3LCAwKSxcbiAgICBoNDogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAzNCwgMS4yMzUsIDAuMjUpLFxuICAgIGg1OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDI0LCAxLjMzNCwgMCksXG4gICAgaDY6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TWVkaXVtLCAyMCwgMS42LCAwLjE1KSxcbiAgICBzdWJ0aXRsZTE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTYsIDEuNzUsIDAuMTUpLFxuICAgIHN1YnRpdGxlMjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDE0LCAxLjU3LCAwLjEpLFxuICAgIGJvZHkxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDE2LCAxLjUsIDAuMTUpLFxuICAgIGJvZHkyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDE0LCAxLjQzLCAwLjE1KSxcbiAgICBidXR0b246IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TWVkaXVtLCAxNCwgMS43NSwgMC40LCBjYXNlQWxsQ2FwcyksXG4gICAgY2FwdGlvbjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxMiwgMS42NiwgMC40KSxcbiAgICBvdmVybGluZTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxMiwgMi42NiwgMSwgY2FzZUFsbENhcHMpXG4gIH07XG4gIHJldHVybiBkZWVwbWVyZ2UoX2V4dGVuZHMoe1xuICAgIGh0bWxGb250U2l6ZTogaHRtbEZvbnRTaXplLFxuICAgIHB4VG9SZW06IHB4VG9SZW0sXG4gICAgcm91bmQ6IHJvdW5kLFxuICAgIC8vIFRPRE8gdjU6IHJlbW92ZVxuICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHksXG4gICAgZm9udFNpemU6IGZvbnRTaXplLFxuICAgIGZvbnRXZWlnaHRMaWdodDogZm9udFdlaWdodExpZ2h0LFxuICAgIGZvbnRXZWlnaHRSZWd1bGFyOiBmb250V2VpZ2h0UmVndWxhcixcbiAgICBmb250V2VpZ2h0TWVkaXVtOiBmb250V2VpZ2h0TWVkaXVtLFxuICAgIGZvbnRXZWlnaHRCb2xkOiBmb250V2VpZ2h0Qm9sZFxuICB9LCB2YXJpYW50cyksIG90aGVyLCB7XG4gICAgY2xvbmU6IGZhbHNlIC8vIE5vIG5lZWQgdG8gY2xvbmUgZGVlcFxuXG4gIH0pO1xufSIsInZhciBzaGFkb3dLZXlVbWJyYU9wYWNpdHkgPSAwLjI7XG52YXIgc2hhZG93S2V5UGVudW1icmFPcGFjaXR5ID0gMC4xNDtcbnZhciBzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eSA9IDAuMTI7XG5cbmZ1bmN0aW9uIGNyZWF0ZVNoYWRvdygpIHtcbiAgcmV0dXJuIFtcIlwiLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDIgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMl0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDMgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbM10sIFwicHggcmdiYSgwLDAsMCxcIikuY29uY2F0KHNoYWRvd0tleVVtYnJhT3BhY2l0eSwgXCIpXCIpLCBcIlwiLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDQgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbNF0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDUgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbNV0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDYgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbNl0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDcgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbN10sIFwicHggcmdiYSgwLDAsMCxcIikuY29uY2F0KHNoYWRvd0tleVBlbnVtYnJhT3BhY2l0eSwgXCIpXCIpLCBcIlwiLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDggPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbOF0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDkgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbOV0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDEwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzEwXSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMTEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMTFdLCBcInB4IHJnYmEoMCwwLDAsXCIpLmNvbmNhdChzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eSwgXCIpXCIpXS5qb2luKCcsJyk7XG59IC8vIFZhbHVlcyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRlcmlhbC1jb21wb25lbnRzL21hdGVyaWFsLWNvbXBvbmVudHMtd2ViL2Jsb2IvYmU4NzQ3Zjk0NTc0NjY5Y2I1ZTdhZGQxYTdjNTRmYTQxYTg5Y2VjNy9wYWNrYWdlcy9tZGMtZWxldmF0aW9uL192YXJpYWJsZXMuc2Nzc1xuXG5cbnZhciBzaGFkb3dzID0gWydub25lJywgY3JlYXRlU2hhZG93KDAsIDIsIDEsIC0xLCAwLCAxLCAxLCAwLCAwLCAxLCAzLCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDEsIC0yLCAwLCAyLCAyLCAwLCAwLCAxLCA1LCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDMsIC0yLCAwLCAzLCA0LCAwLCAwLCAxLCA4LCAwKSwgY3JlYXRlU2hhZG93KDAsIDIsIDQsIC0xLCAwLCA0LCA1LCAwLCAwLCAxLCAxMCwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCA1LCAtMSwgMCwgNSwgOCwgMCwgMCwgMSwgMTQsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgNSwgLTEsIDAsIDYsIDEwLCAwLCAwLCAxLCAxOCwgMCksIGNyZWF0ZVNoYWRvdygwLCA0LCA1LCAtMiwgMCwgNywgMTAsIDEsIDAsIDIsIDE2LCAxKSwgY3JlYXRlU2hhZG93KDAsIDUsIDUsIC0zLCAwLCA4LCAxMCwgMSwgMCwgMywgMTQsIDIpLCBjcmVhdGVTaGFkb3coMCwgNSwgNiwgLTMsIDAsIDksIDEyLCAxLCAwLCAzLCAxNiwgMiksIGNyZWF0ZVNoYWRvdygwLCA2LCA2LCAtMywgMCwgMTAsIDE0LCAxLCAwLCA0LCAxOCwgMyksIGNyZWF0ZVNoYWRvdygwLCA2LCA3LCAtNCwgMCwgMTEsIDE1LCAxLCAwLCA0LCAyMCwgMyksIGNyZWF0ZVNoYWRvdygwLCA3LCA4LCAtNCwgMCwgMTIsIDE3LCAyLCAwLCA1LCAyMiwgNCksIGNyZWF0ZVNoYWRvdygwLCA3LCA4LCAtNCwgMCwgMTMsIDE5LCAyLCAwLCA1LCAyNCwgNCksIGNyZWF0ZVNoYWRvdygwLCA3LCA5LCAtNCwgMCwgMTQsIDIxLCAyLCAwLCA1LCAyNiwgNCksIGNyZWF0ZVNoYWRvdygwLCA4LCA5LCAtNSwgMCwgMTUsIDIyLCAyLCAwLCA2LCAyOCwgNSksIGNyZWF0ZVNoYWRvdygwLCA4LCAxMCwgLTUsIDAsIDE2LCAyNCwgMiwgMCwgNiwgMzAsIDUpLCBjcmVhdGVTaGFkb3coMCwgOCwgMTEsIC01LCAwLCAxNywgMjYsIDIsIDAsIDYsIDMyLCA1KSwgY3JlYXRlU2hhZG93KDAsIDksIDExLCAtNSwgMCwgMTgsIDI4LCAyLCAwLCA3LCAzNCwgNiksIGNyZWF0ZVNoYWRvdygwLCA5LCAxMiwgLTYsIDAsIDE5LCAyOSwgMiwgMCwgNywgMzYsIDYpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDEzLCAtNiwgMCwgMjAsIDMxLCAzLCAwLCA4LCAzOCwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTMsIC02LCAwLCAyMSwgMzMsIDMsIDAsIDgsIDQwLCA3KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxNCwgLTYsIDAsIDIyLCAzNSwgMywgMCwgOCwgNDIsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTEsIDE0LCAtNywgMCwgMjMsIDM2LCAzLCAwLCA5LCA0NCwgOCksIGNyZWF0ZVNoYWRvdygwLCAxMSwgMTUsIC03LCAwLCAyNCwgMzgsIDMsIDAsIDksIDQ2LCA4KV07XG5leHBvcnQgZGVmYXVsdCBzaGFkb3dzOyIsInZhciBzaGFwZSA9IHtcbiAgYm9yZGVyUmFkaXVzOiA0XG59O1xuZXhwb3J0IGRlZmF1bHQgc2hhcGU7IiwiaW1wb3J0IGFycmF5V2l0aEhvbGVzIGZyb20gXCIuL2FycmF5V2l0aEhvbGVzXCI7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5TGltaXQgZnJvbSBcIi4vaXRlcmFibGVUb0FycmF5TGltaXRcIjtcbmltcG9ydCBub25JdGVyYWJsZVJlc3QgZnJvbSBcIi4vbm9uSXRlcmFibGVSZXN0XCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtcbiAgcmV0dXJuIGFycmF5V2l0aEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBub25JdGVyYWJsZVJlc3QoKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICBpZiAoIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIF9hcnIgPSBbXTtcbiAgdmFyIF9uID0gdHJ1ZTtcbiAgdmFyIF9kID0gZmFsc2U7XG4gIHZhciBfZSA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHtcbiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG5cbiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhaztcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kID0gdHJ1ZTtcbiAgICBfZSA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2QpIHRocm93IF9lO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfYXJyO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpO1xufSIsImltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5cbmZ1bmN0aW9uIG1lcmdlKGFjYywgaXRlbSkge1xuICBpZiAoIWl0ZW0pIHtcbiAgICByZXR1cm4gYWNjO1xuICB9XG5cbiAgcmV0dXJuIGRlZXBtZXJnZShhY2MsIGl0ZW0sIHtcbiAgICBjbG9uZTogZmFsc2UgLy8gTm8gbmVlZCB0byBjbG9uZSBkZWVwLCBpdCdzIHdheSBmYXN0ZXIuXG5cbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lcmdlOyIsImltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi9tZXJnZSc7IC8vIFRoZSBicmVha3BvaW50ICoqc3RhcnQqKiBhdCB0aGlzIHZhbHVlLlxuLy8gRm9yIGluc3RhbmNlIHdpdGggdGhlIGZpcnN0IGJyZWFrcG9pbnQgeHM6IFt4cywgc21bLlxuXG52YXIgdmFsdWVzID0ge1xuICB4czogMCxcbiAgc206IDYwMCxcbiAgbWQ6IDk2MCxcbiAgbGc6IDEyODAsXG4gIHhsOiAxOTIwXG59O1xudmFyIGRlZmF1bHRCcmVha3BvaW50cyA9IHtcbiAgLy8gU29ydGVkIEFTQyBieSBzaXplLiBUaGF0J3MgaW1wb3J0YW50LlxuICAvLyBJdCBjYW4ndCBiZSBjb25maWd1cmVkIGFzIGl0J3MgdXNlZCBzdGF0aWNhbGx5IGZvciBwcm9wVHlwZXMuXG4gIGtleXM6IFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXSxcbiAgdXA6IGZ1bmN0aW9uIHVwKGtleSkge1xuICAgIHJldHVybiBcIkBtZWRpYSAobWluLXdpZHRoOlwiLmNvbmNhdCh2YWx1ZXNba2V5XSwgXCJweClcIik7XG4gIH1cbn07XG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BWYWx1ZSwgc3R5bGVGcm9tUHJvcFZhbHVlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKCFwcm9wcy50aGVtZSkge1xuICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IFlvdSBhcmUgY2FsbGluZyBhIHN0eWxlIGZ1bmN0aW9uIHdpdGhvdXQgYSB0aGVtZSB2YWx1ZS4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgdmFyIHRoZW1lQnJlYWtwb2ludHMgPSBwcm9wcy50aGVtZS5icmVha3BvaW50cyB8fCBkZWZhdWx0QnJlYWtwb2ludHM7XG4gICAgcmV0dXJuIHByb3BWYWx1ZS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgaXRlbSwgaW5kZXgpIHtcbiAgICAgIGFjY1t0aGVtZUJyZWFrcG9pbnRzLnVwKHRoZW1lQnJlYWtwb2ludHMua2V5c1tpbmRleF0pXSA9IHN0eWxlRnJvbVByb3BWYWx1ZShwcm9wVmFsdWVbaW5kZXhdKTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9XG5cbiAgaWYgKF90eXBlb2YocHJvcFZhbHVlKSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgX3RoZW1lQnJlYWtwb2ludHMgPSBwcm9wcy50aGVtZS5icmVha3BvaW50cyB8fCBkZWZhdWx0QnJlYWtwb2ludHM7XG5cbiAgICByZXR1cm4gT2JqZWN0LmtleXMocHJvcFZhbHVlKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgYnJlYWtwb2ludCkge1xuICAgICAgYWNjW190aGVtZUJyZWFrcG9pbnRzLnVwKGJyZWFrcG9pbnQpXSA9IHN0eWxlRnJvbVByb3BWYWx1ZShwcm9wVmFsdWVbYnJlYWtwb2ludF0pO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH1cblxuICB2YXIgb3V0cHV0ID0gc3R5bGVGcm9tUHJvcFZhbHVlKHByb3BWYWx1ZSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbmZ1bmN0aW9uIGJyZWFrcG9pbnRzKHN0eWxlRnVuY3Rpb24pIHtcbiAgdmFyIG5ld1N0eWxlRnVuY3Rpb24gPSBmdW5jdGlvbiBuZXdTdHlsZUZ1bmN0aW9uKHByb3BzKSB7XG4gICAgdmFyIGJhc2UgPSBzdHlsZUZ1bmN0aW9uKHByb3BzKTtcbiAgICB2YXIgdGhlbWVCcmVha3BvaW50cyA9IHByb3BzLnRoZW1lLmJyZWFrcG9pbnRzIHx8IGRlZmF1bHRCcmVha3BvaW50cztcbiAgICB2YXIgZXh0ZW5kZWQgPSB0aGVtZUJyZWFrcG9pbnRzLmtleXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgICAgaWYgKHByb3BzW2tleV0pIHtcbiAgICAgICAgYWNjID0gYWNjIHx8IHt9O1xuICAgICAgICBhY2NbdGhlbWVCcmVha3BvaW50cy51cChrZXkpXSA9IHN0eWxlRnVuY3Rpb24oX2V4dGVuZHMoe1xuICAgICAgICAgIHRoZW1lOiBwcm9wcy50aGVtZVxuICAgICAgICB9LCBwcm9wc1trZXldKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgbnVsbCk7XG4gICAgcmV0dXJuIG1lcmdlKGJhc2UsIGV4dGVuZGVkKTtcbiAgfTtcblxuICBuZXdTdHlsZUZ1bmN0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgc3R5bGVGdW5jdGlvbi5wcm9wVHlwZXMpLCB7fSwge1xuICAgIHhzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHNtOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIG1kOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxnOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHhsOiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pIDoge307XG4gIG5ld1N0eWxlRnVuY3Rpb24uZmlsdGVyUHJvcHMgPSBbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShzdHlsZUZ1bmN0aW9uLmZpbHRlclByb3BzKSk7XG4gIHJldHVybiBuZXdTdHlsZUZ1bmN0aW9uO1xufVxuXG5leHBvcnQgZGVmYXVsdCBicmVha3BvaW50czsiLCJpbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCByZXNwb25zaXZlUHJvcFR5cGUgZnJvbSAnLi9yZXNwb25zaXZlUHJvcFR5cGUnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcbmltcG9ydCBtZXJnZSBmcm9tICcuL21lcmdlJztcbmltcG9ydCBtZW1vaXplIGZyb20gJy4vbWVtb2l6ZSc7XG52YXIgcHJvcGVydGllcyA9IHtcbiAgbTogJ21hcmdpbicsXG4gIHA6ICdwYWRkaW5nJ1xufTtcbnZhciBkaXJlY3Rpb25zID0ge1xuICB0OiAnVG9wJyxcbiAgcjogJ1JpZ2h0JyxcbiAgYjogJ0JvdHRvbScsXG4gIGw6ICdMZWZ0JyxcbiAgeDogWydMZWZ0JywgJ1JpZ2h0J10sXG4gIHk6IFsnVG9wJywgJ0JvdHRvbSddXG59O1xudmFyIGFsaWFzZXMgPSB7XG4gIG1hcmdpblg6ICdteCcsXG4gIG1hcmdpblk6ICdteScsXG4gIHBhZGRpbmdYOiAncHgnLFxuICBwYWRkaW5nWTogJ3B5J1xufTsgLy8gbWVtb2l6ZSgpIGltcGFjdDpcbi8vIEZyb20gMzAwLDAwMCBvcHMvc2VjXG4vLyBUbyAzNTAsMDAwIG9wcy9zZWNcblxudmFyIGdldENzc1Byb3BlcnRpZXMgPSBtZW1vaXplKGZ1bmN0aW9uIChwcm9wKSB7XG4gIC8vIEl0J3Mgbm90IGEgc2hvcnRoYW5kIG5vdGF0aW9uLlxuICBpZiAocHJvcC5sZW5ndGggPiAyKSB7XG4gICAgaWYgKGFsaWFzZXNbcHJvcF0pIHtcbiAgICAgIHByb3AgPSBhbGlhc2VzW3Byb3BdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW3Byb3BdO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfcHJvcCRzcGxpdCA9IHByb3Auc3BsaXQoJycpLFxuICAgICAgX3Byb3Akc3BsaXQyID0gX3NsaWNlZFRvQXJyYXkoX3Byb3Akc3BsaXQsIDIpLFxuICAgICAgYSA9IF9wcm9wJHNwbGl0MlswXSxcbiAgICAgIGIgPSBfcHJvcCRzcGxpdDJbMV07XG5cbiAgdmFyIHByb3BlcnR5ID0gcHJvcGVydGllc1thXTtcbiAgdmFyIGRpcmVjdGlvbiA9IGRpcmVjdGlvbnNbYl0gfHwgJyc7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGRpcmVjdGlvbikgPyBkaXJlY3Rpb24ubWFwKGZ1bmN0aW9uIChkaXIpIHtcbiAgICByZXR1cm4gcHJvcGVydHkgKyBkaXI7XG4gIH0pIDogW3Byb3BlcnR5ICsgZGlyZWN0aW9uXTtcbn0pO1xudmFyIHNwYWNpbmdLZXlzID0gWydtJywgJ210JywgJ21yJywgJ21iJywgJ21sJywgJ214JywgJ215JywgJ3AnLCAncHQnLCAncHInLCAncGInLCAncGwnLCAncHgnLCAncHknLCAnbWFyZ2luJywgJ21hcmdpblRvcCcsICdtYXJnaW5SaWdodCcsICdtYXJnaW5Cb3R0b20nLCAnbWFyZ2luTGVmdCcsICdtYXJnaW5YJywgJ21hcmdpblknLCAncGFkZGluZycsICdwYWRkaW5nVG9wJywgJ3BhZGRpbmdSaWdodCcsICdwYWRkaW5nQm90dG9tJywgJ3BhZGRpbmdMZWZ0JywgJ3BhZGRpbmdYJywgJ3BhZGRpbmdZJ107XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVW5hcnlTcGFjaW5nKHRoZW1lKSB7XG4gIHZhciB0aGVtZVNwYWNpbmcgPSB0aGVtZS5zcGFjaW5nIHx8IDg7XG5cbiAgaWYgKHR5cGVvZiB0aGVtZVNwYWNpbmcgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhYnMpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYWJzICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJNYXRlcmlhbC1VSTogRXhwZWN0ZWQgc3BhY2luZyBhcmd1bWVudCB0byBiZSBhIG51bWJlciwgZ290IFwiLmNvbmNhdChhYnMsIFwiLlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoZW1lU3BhY2luZyAqIGFicztcbiAgICB9O1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodGhlbWVTcGFjaW5nKSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYWJzKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoYWJzID4gdGhlbWVTcGFjaW5nLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUgdmFsdWUgcHJvdmlkZWQgKFwiLmNvbmNhdChhYnMsIFwiKSBvdmVyZmxvd3MuXCIpLCBcIlRoZSBzdXBwb3J0ZWQgdmFsdWVzIGFyZTogXCIuY29uY2F0KEpTT04uc3RyaW5naWZ5KHRoZW1lU3BhY2luZyksIFwiLlwiKSwgXCJcIi5jb25jYXQoYWJzLCBcIiA+IFwiKS5jb25jYXQodGhlbWVTcGFjaW5nLmxlbmd0aCAtIDEsIFwiLCB5b3UgbmVlZCB0byBhZGQgdGhlIG1pc3NpbmcgdmFsdWVzLlwiKV0uam9pbignXFxuJykpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGVtZVNwYWNpbmdbYWJzXTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0aGVtZVNwYWNpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdGhlbWVTcGFjaW5nO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUgYHRoZW1lLnNwYWNpbmdgIHZhbHVlIChcIi5jb25jYXQodGhlbWVTcGFjaW5nLCBcIikgaXMgaW52YWxpZC5cIiksICdJdCBzaG91bGQgYmUgYSBudW1iZXIsIGFuIGFycmF5IG9yIGEgZnVuY3Rpb24uJ10uam9pbignXFxuJykpO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKSB7XG4gIGlmICh0eXBlb2YgcHJvcFZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwcm9wVmFsdWU7XG4gIH1cblxuICB2YXIgYWJzID0gTWF0aC5hYnMocHJvcFZhbHVlKTtcbiAgdmFyIHRyYW5zZm9ybWVkID0gdHJhbnNmb3JtZXIoYWJzKTtcblxuICBpZiAocHJvcFZhbHVlID49IDApIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIHRyYW5zZm9ybWVkID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiAtdHJhbnNmb3JtZWQ7XG4gIH1cblxuICByZXR1cm4gXCItXCIuY29uY2F0KHRyYW5zZm9ybWVkKTtcbn1cblxuZnVuY3Rpb24gZ2V0U3R5bGVGcm9tUHJvcFZhbHVlKGNzc1Byb3BlcnRpZXMsIHRyYW5zZm9ybWVyKSB7XG4gIHJldHVybiBmdW5jdGlvbiAocHJvcFZhbHVlKSB7XG4gICAgcmV0dXJuIGNzc1Byb3BlcnRpZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGNzc1Byb3BlcnR5KSB7XG4gICAgICBhY2NbY3NzUHJvcGVydHldID0gZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3BhY2luZyhwcm9wcykge1xuICB2YXIgdGhlbWUgPSBwcm9wcy50aGVtZTtcbiAgdmFyIHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlTcGFjaW5nKHRoZW1lKTtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BzKS5tYXAoZnVuY3Rpb24gKHByb3ApIHtcbiAgICAvLyBVc2luZyBhIGhhc2ggY29tcHV0YXRpb24gb3ZlciBhbiBhcnJheSBpdGVyYXRpb24gY291bGQgYmUgZmFzdGVyLCBidXQgd2l0aCBvbmx5IDI4IGl0ZW1zLFxuICAgIC8vIGl0J3MgZG9lc24ndCB3b3J0aCB0aGUgYnVuZGxlIHNpemUuXG4gICAgaWYgKHNwYWNpbmdLZXlzLmluZGV4T2YocHJvcCkgPT09IC0xKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgY3NzUHJvcGVydGllcyA9IGdldENzc1Byb3BlcnRpZXMocHJvcCk7XG4gICAgdmFyIHN0eWxlRnJvbVByb3BWYWx1ZSA9IGdldFN0eWxlRnJvbVByb3BWYWx1ZShjc3NQcm9wZXJ0aWVzLCB0cmFuc2Zvcm1lcik7XG4gICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BdO1xuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcFZhbHVlLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9KS5yZWR1Y2UobWVyZ2UsIHt9KTtcbn1cblxuc3BhY2luZy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gc3BhY2luZ0tleXMucmVkdWNlKGZ1bmN0aW9uIChvYmosIGtleSkge1xuICBvYmpba2V5XSA9IHJlc3BvbnNpdmVQcm9wVHlwZTtcbiAgcmV0dXJuIG9iajtcbn0sIHt9KSA6IHt9O1xuc3BhY2luZy5maWx0ZXJQcm9wcyA9IHNwYWNpbmdLZXlzO1xuZXhwb3J0IGRlZmF1bHQgc3BhY2luZzsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIHZhciBjYWNoZSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgIGlmIChjYWNoZVthcmddID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNhY2hlW2FyZ10gPSBmbihhcmcpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWNoZVthcmddO1xuICB9O1xufSIsImltcG9ydCB7IGNyZWF0ZVVuYXJ5U3BhY2luZyB9IGZyb20gJ0BtYXRlcmlhbC11aS9zeXN0ZW0nO1xudmFyIHdhcm5PbmNlO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU3BhY2luZygpIHtcbiAgdmFyIHNwYWNpbmdJbnB1dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogODtcblxuICAvLyBBbHJlYWR5IHRyYW5zZm9ybWVkLlxuICBpZiAoc3BhY2luZ0lucHV0Lm11aSkge1xuICAgIHJldHVybiBzcGFjaW5nSW5wdXQ7XG4gIH0gLy8gTWF0ZXJpYWwgRGVzaWduIGxheW91dHMgYXJlIHZpc3VhbGx5IGJhbGFuY2VkLiBNb3N0IG1lYXN1cmVtZW50cyBhbGlnbiB0byBhbiA4ZHAgZ3JpZCBhcHBsaWVkLCB3aGljaCBhbGlnbnMgYm90aCBzcGFjaW5nIGFuZCB0aGUgb3ZlcmFsbCBsYXlvdXQuXG4gIC8vIFNtYWxsZXIgY29tcG9uZW50cywgc3VjaCBhcyBpY29ucyBhbmQgdHlwZSwgY2FuIGFsaWduIHRvIGEgNGRwIGdyaWQuXG4gIC8vIGh0dHBzOi8vbWF0ZXJpYWwuaW8vZGVzaWduL2xheW91dC91bmRlcnN0YW5kaW5nLWxheW91dC5odG1sI3VzYWdlXG5cblxuICB2YXIgdHJhbnNmb3JtID0gY3JlYXRlVW5hcnlTcGFjaW5nKHtcbiAgICBzcGFjaW5nOiBzcGFjaW5nSW5wdXRcbiAgfSk7XG5cbiAgdmFyIHNwYWNpbmcgPSBmdW5jdGlvbiBzcGFjaW5nKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCEoYXJncy5sZW5ndGggPD0gNCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIk1hdGVyaWFsLVVJOiBUb28gbWFueSBhcmd1bWVudHMgcHJvdmlkZWQsIGV4cGVjdGVkIGJldHdlZW4gMCBhbmQgNCwgZ290IFwiLmNvbmNhdChhcmdzLmxlbmd0aCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRyYW5zZm9ybSgxKTtcbiAgICB9XG5cbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHJldHVybiB0cmFuc2Zvcm0oYXJnc1swXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFyZ3MubWFwKGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50O1xuICAgICAgfVxuXG4gICAgICB2YXIgb3V0cHV0ID0gdHJhbnNmb3JtKGFyZ3VtZW50KTtcbiAgICAgIHJldHVybiB0eXBlb2Ygb3V0cHV0ID09PSAnbnVtYmVyJyA/IFwiXCIuY29uY2F0KG91dHB1dCwgXCJweFwiKSA6IG91dHB1dDtcbiAgICB9KS5qb2luKCcgJyk7XG4gIH07IC8vIEJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRvIHJlbW92ZSBpbiB2NS5cblxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzcGFjaW5nLCAndW5pdCcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICghd2Fybk9uY2UgfHwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0Jykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoWydNYXRlcmlhbC1VSTogdGhlbWUuc3BhY2luZy51bml0IHVzYWdlIGhhcyBiZWVuIGRlcHJlY2F0ZWQuJywgJ0l0IHdpbGwgYmUgcmVtb3ZlZCBpbiB2NS4nLCAnWW91IGNhbiByZXBsYWNlIGB0aGVtZS5zcGFjaW5nLnVuaXQgKiB5YCB3aXRoIGB0aGVtZS5zcGFjaW5nKHkpYC4nLCAnJywgJ1lvdSBjYW4gdXNlIHRoZSBgaHR0cHM6Ly9naXRodWIuY29tL211aS1vcmcvbWF0ZXJpYWwtdWkvdHJlZS9tYXN0ZXIvcGFja2FnZXMvbWF0ZXJpYWwtdWktY29kZW1vZC9SRUFETUUubWQjdGhlbWUtc3BhY2luZy1hcGlgIG1pZ3JhdGlvbiBoZWxwZXIgdG8gbWFrZSB0aGUgcHJvY2VzcyBzbW9vdGhlci4nXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cblxuICAgICAgICB3YXJuT25jZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzcGFjaW5nSW5wdXQ7XG4gICAgfVxuICB9KTtcbiAgc3BhY2luZy5tdWkgPSB0cnVlO1xuICByZXR1cm4gc3BhY2luZztcbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuLy8gRm9sbG93IGh0dHBzOi8vbWF0ZXJpYWwuZ29vZ2xlLmNvbS9tb3Rpb24vZHVyYXRpb24tZWFzaW5nLmh0bWwjZHVyYXRpb24tZWFzaW5nLW5hdHVyYWwtZWFzaW5nLWN1cnZlc1xuLy8gdG8gbGVhcm4gdGhlIGNvbnRleHQgaW4gd2hpY2ggZWFjaCBlYXNpbmcgc2hvdWxkIGJlIHVzZWQuXG5leHBvcnQgdmFyIGVhc2luZyA9IHtcbiAgLy8gVGhpcyBpcyB0aGUgbW9zdCBjb21tb24gZWFzaW5nIGN1cnZlLlxuICBlYXNlSW5PdXQ6ICdjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpJyxcbiAgLy8gT2JqZWN0cyBlbnRlciB0aGUgc2NyZWVuIGF0IGZ1bGwgdmVsb2NpdHkgZnJvbSBvZmYtc2NyZWVuIGFuZFxuICAvLyBzbG93bHkgZGVjZWxlcmF0ZSB0byBhIHJlc3RpbmcgcG9pbnQuXG4gIGVhc2VPdXQ6ICdjdWJpYy1iZXppZXIoMC4wLCAwLCAwLjIsIDEpJyxcbiAgLy8gT2JqZWN0cyBsZWF2ZSB0aGUgc2NyZWVuIGF0IGZ1bGwgdmVsb2NpdHkuIFRoZXkgZG8gbm90IGRlY2VsZXJhdGUgd2hlbiBvZmYtc2NyZWVuLlxuICBlYXNlSW46ICdjdWJpYy1iZXppZXIoMC40LCAwLCAxLCAxKScsXG4gIC8vIFRoZSBzaGFycCBjdXJ2ZSBpcyB1c2VkIGJ5IG9iamVjdHMgdGhhdCBtYXkgcmV0dXJuIHRvIHRoZSBzY3JlZW4gYXQgYW55IHRpbWUuXG4gIHNoYXJwOiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC42LCAxKSdcbn07IC8vIEZvbGxvdyBodHRwczovL21hdGVyaWFsLmlvL2d1aWRlbGluZXMvbW90aW9uL2R1cmF0aW9uLWVhc2luZy5odG1sI2R1cmF0aW9uLWVhc2luZy1jb21tb24tZHVyYXRpb25zXG4vLyB0byBsZWFybiB3aGVuIHVzZSB3aGF0IHRpbWluZ1xuXG5leHBvcnQgdmFyIGR1cmF0aW9uID0ge1xuICBzaG9ydGVzdDogMTUwLFxuICBzaG9ydGVyOiAyMDAsXG4gIHNob3J0OiAyNTAsXG4gIC8vIG1vc3QgYmFzaWMgcmVjb21tZW5kZWQgdGltaW5nXG4gIHN0YW5kYXJkOiAzMDAsXG4gIC8vIHRoaXMgaXMgdG8gYmUgdXNlZCBpbiBjb21wbGV4IGFuaW1hdGlvbnNcbiAgY29tcGxleDogMzc1LFxuICAvLyByZWNvbW1lbmRlZCB3aGVuIHNvbWV0aGluZyBpcyBlbnRlcmluZyBzY3JlZW5cbiAgZW50ZXJpbmdTY3JlZW46IDIyNSxcbiAgLy8gcmVjb21tZW5kZWQgd2hlbiBzb21ldGhpbmcgaXMgbGVhdmluZyBzY3JlZW5cbiAgbGVhdmluZ1NjcmVlbjogMTk1XG59O1xuXG5mdW5jdGlvbiBmb3JtYXRNcyhtaWxsaXNlY29uZHMpIHtcbiAgcmV0dXJuIFwiXCIuY29uY2F0KE1hdGgucm91bmQobWlsbGlzZWNvbmRzKSwgXCJtc1wiKTtcbn1cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd8QXJyYXl9IHByb3BzXG4gKiBAcGFyYW0ge29iamVjdH0gcGFyYW1cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbS5wcm9wXG4gKiBAcGFyYW0ge251bWJlcn0gcGFyYW0uZHVyYXRpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbS5lYXNpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSBwYXJhbS5kZWxheVxuICovXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBlYXNpbmc6IGVhc2luZyxcbiAgZHVyYXRpb246IGR1cmF0aW9uLFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFsnYWxsJ107XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgdmFyIF9vcHRpb25zJGR1cmF0aW9uID0gb3B0aW9ucy5kdXJhdGlvbixcbiAgICAgICAgZHVyYXRpb25PcHRpb24gPSBfb3B0aW9ucyRkdXJhdGlvbiA9PT0gdm9pZCAwID8gZHVyYXRpb24uc3RhbmRhcmQgOiBfb3B0aW9ucyRkdXJhdGlvbixcbiAgICAgICAgX29wdGlvbnMkZWFzaW5nID0gb3B0aW9ucy5lYXNpbmcsXG4gICAgICAgIGVhc2luZ09wdGlvbiA9IF9vcHRpb25zJGVhc2luZyA9PT0gdm9pZCAwID8gZWFzaW5nLmVhc2VJbk91dCA6IF9vcHRpb25zJGVhc2luZyxcbiAgICAgICAgX29wdGlvbnMkZGVsYXkgPSBvcHRpb25zLmRlbGF5LFxuICAgICAgICBkZWxheSA9IF9vcHRpb25zJGRlbGF5ID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkZGVsYXksXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9wdGlvbnMsIFtcImR1cmF0aW9uXCIsIFwiZWFzaW5nXCIsIFwiZGVsYXlcIl0pO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBpc1N0cmluZyA9IGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xuICAgICAgfTtcblxuICAgICAgdmFyIGlzTnVtYmVyID0gZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICFpc05hTihwYXJzZUZsb2F0KHZhbHVlKSk7XG4gICAgICB9O1xuXG4gICAgICBpZiAoIWlzU3RyaW5nKHByb3BzKSAmJiAhQXJyYXkuaXNBcnJheShwcm9wcykpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IEFyZ3VtZW50IFwicHJvcHNcIiBtdXN0IGJlIGEgc3RyaW5nIG9yIEFycmF5LicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTnVtYmVyKGR1cmF0aW9uT3B0aW9uKSAmJiAhaXNTdHJpbmcoZHVyYXRpb25PcHRpb24pKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJNYXRlcmlhbC1VSTogQXJndW1lbnQgXFxcImR1cmF0aW9uXFxcIiBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nIGJ1dCBmb3VuZCBcIi5jb25jYXQoZHVyYXRpb25PcHRpb24sIFwiLlwiKSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNTdHJpbmcoZWFzaW5nT3B0aW9uKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogQXJndW1lbnQgXCJlYXNpbmdcIiBtdXN0IGJlIGEgc3RyaW5nLicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTnVtYmVyKGRlbGF5KSAmJiAhaXNTdHJpbmcoZGVsYXkpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBBcmd1bWVudCBcImRlbGF5XCIgbXVzdCBiZSBhIG51bWJlciBvciBhIHN0cmluZy4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKE9iamVjdC5rZXlzKG90aGVyKS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIk1hdGVyaWFsLVVJOiBVbnJlY29nbml6ZWQgYXJndW1lbnQocykgW1wiLmNvbmNhdChPYmplY3Qua2V5cyhvdGhlcikuam9pbignLCcpLCBcIl0uXCIpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKEFycmF5LmlzQXJyYXkocHJvcHMpID8gcHJvcHMgOiBbcHJvcHNdKS5tYXAoZnVuY3Rpb24gKGFuaW1hdGVkUHJvcCkge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KGFuaW1hdGVkUHJvcCwgXCIgXCIpLmNvbmNhdCh0eXBlb2YgZHVyYXRpb25PcHRpb24gPT09ICdzdHJpbmcnID8gZHVyYXRpb25PcHRpb24gOiBmb3JtYXRNcyhkdXJhdGlvbk9wdGlvbiksIFwiIFwiKS5jb25jYXQoZWFzaW5nT3B0aW9uLCBcIiBcIikuY29uY2F0KHR5cGVvZiBkZWxheSA9PT0gJ3N0cmluZycgPyBkZWxheSA6IGZvcm1hdE1zKGRlbGF5KSk7XG4gICAgfSkuam9pbignLCcpO1xuICB9LFxuICBnZXRBdXRvSGVpZ2h0RHVyYXRpb246IGZ1bmN0aW9uIGdldEF1dG9IZWlnaHREdXJhdGlvbihoZWlnaHQpIHtcbiAgICBpZiAoIWhlaWdodCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgdmFyIGNvbnN0YW50ID0gaGVpZ2h0IC8gMzY7IC8vIGh0dHBzOi8vd3d3LndvbGZyYW1hbHBoYS5jb20vaW5wdXQvP2k9KDQrJTJCKzE1KyorKHgrJTJGKzM2KykrKiorMC4yNSslMkIrKHgrJTJGKzM2KSslMkYrNSkrKisxMFxuXG4gICAgcmV0dXJuIE1hdGgucm91bmQoKDQgKyAxNSAqIE1hdGgucG93KGNvbnN0YW50LCAwLjI1KSArIGNvbnN0YW50IC8gNSkgKiAxMCk7XG4gIH1cbn07IiwiLy8gV2UgbmVlZCB0byBjZW50cmFsaXplIHRoZSB6SW5kZXggZGVmaW5pdGlvbnMgYXMgdGhleSB3b3JrXG4vLyBsaWtlIGdsb2JhbCB2YWx1ZXMgaW4gdGhlIGJyb3dzZXIuXG52YXIgekluZGV4ID0ge1xuICBtb2JpbGVTdGVwcGVyOiAxMDAwLFxuICBzcGVlZERpYWw6IDEwNTAsXG4gIGFwcEJhcjogMTEwMCxcbiAgZHJhd2VyOiAxMjAwLFxuICBtb2RhbDogMTMwMCxcbiAgc25hY2tiYXI6IDE0MDAsXG4gIHRvb2x0aXA6IDE1MDBcbn07XG5leHBvcnQgZGVmYXVsdCB6SW5kZXg7IiwiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IGNyZWF0ZUJyZWFrcG9pbnRzIGZyb20gJy4vY3JlYXRlQnJlYWtwb2ludHMnO1xuaW1wb3J0IGNyZWF0ZU1peGlucyBmcm9tICcuL2NyZWF0ZU1peGlucyc7XG5pbXBvcnQgY3JlYXRlUGFsZXR0ZSBmcm9tICcuL2NyZWF0ZVBhbGV0dGUnO1xuaW1wb3J0IGNyZWF0ZVR5cG9ncmFwaHkgZnJvbSAnLi9jcmVhdGVUeXBvZ3JhcGh5JztcbmltcG9ydCBzaGFkb3dzIGZyb20gJy4vc2hhZG93cyc7XG5pbXBvcnQgc2hhcGUgZnJvbSAnLi9zaGFwZSc7XG5pbXBvcnQgY3JlYXRlU3BhY2luZyBmcm9tICcuL2NyZWF0ZVNwYWNpbmcnO1xuaW1wb3J0IHRyYW5zaXRpb25zIGZyb20gJy4vdHJhbnNpdGlvbnMnO1xuaW1wb3J0IHpJbmRleCBmcm9tICcuL3pJbmRleCc7XG5cbmZ1bmN0aW9uIGNyZWF0ZU11aVRoZW1lKCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgdmFyIF9vcHRpb25zJGJyZWFrcG9pbnRzID0gb3B0aW9ucy5icmVha3BvaW50cyxcbiAgICAgIGJyZWFrcG9pbnRzSW5wdXQgPSBfb3B0aW9ucyRicmVha3BvaW50cyA9PT0gdm9pZCAwID8ge30gOiBfb3B0aW9ucyRicmVha3BvaW50cyxcbiAgICAgIF9vcHRpb25zJG1peGlucyA9IG9wdGlvbnMubWl4aW5zLFxuICAgICAgbWl4aW5zSW5wdXQgPSBfb3B0aW9ucyRtaXhpbnMgPT09IHZvaWQgMCA/IHt9IDogX29wdGlvbnMkbWl4aW5zLFxuICAgICAgX29wdGlvbnMkcGFsZXR0ZSA9IG9wdGlvbnMucGFsZXR0ZSxcbiAgICAgIHBhbGV0dGVJbnB1dCA9IF9vcHRpb25zJHBhbGV0dGUgPT09IHZvaWQgMCA/IHt9IDogX29wdGlvbnMkcGFsZXR0ZSxcbiAgICAgIHNwYWNpbmdJbnB1dCA9IG9wdGlvbnMuc3BhY2luZyxcbiAgICAgIF9vcHRpb25zJHR5cG9ncmFwaHkgPSBvcHRpb25zLnR5cG9ncmFwaHksXG4gICAgICB0eXBvZ3JhcGh5SW5wdXQgPSBfb3B0aW9ucyR0eXBvZ3JhcGh5ID09PSB2b2lkIDAgPyB7fSA6IF9vcHRpb25zJHR5cG9ncmFwaHksXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvcHRpb25zLCBbXCJicmVha3BvaW50c1wiLCBcIm1peGluc1wiLCBcInBhbGV0dGVcIiwgXCJzcGFjaW5nXCIsIFwidHlwb2dyYXBoeVwiXSk7XG5cbiAgdmFyIHBhbGV0dGUgPSBjcmVhdGVQYWxldHRlKHBhbGV0dGVJbnB1dCk7XG4gIHZhciBicmVha3BvaW50cyA9IGNyZWF0ZUJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzSW5wdXQpO1xuICB2YXIgc3BhY2luZyA9IGNyZWF0ZVNwYWNpbmcoc3BhY2luZ0lucHV0KTtcbiAgdmFyIG11aVRoZW1lID0gZGVlcG1lcmdlKHtcbiAgICBicmVha3BvaW50czogYnJlYWtwb2ludHMsXG4gICAgZGlyZWN0aW9uOiAnbHRyJyxcbiAgICBtaXhpbnM6IGNyZWF0ZU1peGlucyhicmVha3BvaW50cywgc3BhY2luZywgbWl4aW5zSW5wdXQpLFxuICAgIG92ZXJyaWRlczoge30sXG4gICAgLy8gSW5qZWN0IGN1c3RvbSBzdHlsZXNcbiAgICBwYWxldHRlOiBwYWxldHRlLFxuICAgIHByb3BzOiB7fSxcbiAgICAvLyBQcm92aWRlIGRlZmF1bHQgcHJvcHNcbiAgICBzaGFkb3dzOiBzaGFkb3dzLFxuICAgIHR5cG9ncmFwaHk6IGNyZWF0ZVR5cG9ncmFwaHkocGFsZXR0ZSwgdHlwb2dyYXBoeUlucHV0KSxcbiAgICBzcGFjaW5nOiBzcGFjaW5nLFxuICAgIHNoYXBlOiBzaGFwZSxcbiAgICB0cmFuc2l0aW9uczogdHJhbnNpdGlvbnMsXG4gICAgekluZGV4OiB6SW5kZXhcbiAgfSwgb3RoZXIpO1xuXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIG11aVRoZW1lID0gYXJncy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgYXJndW1lbnQpIHtcbiAgICByZXR1cm4gZGVlcG1lcmdlKGFjYywgYXJndW1lbnQpO1xuICB9LCBtdWlUaGVtZSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YXIgcHNldWRvQ2xhc3NlcyA9IFsnY2hlY2tlZCcsICdkaXNhYmxlZCcsICdlcnJvcicsICdmb2N1c2VkJywgJ2ZvY3VzVmlzaWJsZScsICdyZXF1aXJlZCcsICdleHBhbmRlZCcsICdzZWxlY3RlZCddO1xuXG4gICAgdmFyIHRyYXZlcnNlID0gZnVuY3Rpb24gdHJhdmVyc2Uobm9kZSwgcGFyZW50S2V5KSB7XG4gICAgICB2YXIgZGVwdGggPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDE7XG4gICAgICB2YXIga2V5OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluLCBuby1yZXN0cmljdGVkLXN5bnRheFxuXG4gICAgICBmb3IgKGtleSBpbiBub2RlKSB7XG4gICAgICAgIHZhciBjaGlsZCA9IG5vZGVba2V5XTtcblxuICAgICAgICBpZiAoZGVwdGggPT09IDEpIHtcbiAgICAgICAgICBpZiAoa2V5LmluZGV4T2YoJ011aScpID09PSAwICYmIGNoaWxkKSB7XG4gICAgICAgICAgICB0cmF2ZXJzZShjaGlsZCwga2V5LCBkZXB0aCArIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChwc2V1ZG9DbGFzc2VzLmluZGV4T2Yoa2V5KSAhPT0gLTEgJiYgT2JqZWN0LmtleXMoY2hpbGQpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihbXCJNYXRlcmlhbC1VSTogVGhlIGBcIi5jb25jYXQocGFyZW50S2V5LCBcImAgY29tcG9uZW50IGluY3JlYXNlcyBcIikgKyBcInRoZSBDU1Mgc3BlY2lmaWNpdHkgb2YgdGhlIGBcIi5jb25jYXQoa2V5LCBcImAgaW50ZXJuYWwgc3RhdGUuXCIpLCAnWW91IGNhbiBub3Qgb3ZlcnJpZGUgaXQgbGlrZSB0aGlzOiAnLCBKU09OLnN0cmluZ2lmeShub2RlLCBudWxsLCAyKSwgJycsICdJbnN0ZWFkLCB5b3UgbmVlZCB0byB1c2UgdGhlICRydWxlTmFtZSBzeW50YXg6JywgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICByb290OiBfZGVmaW5lUHJvcGVydHkoe30sIFwiJiRcIi5jb25jYXQoa2V5KSwgY2hpbGQpXG4gICAgICAgICAgICB9LCBudWxsLCAyKSwgJycsICdodHRwczovL21hdGVyaWFsLXVpLmNvbS9yL3BzZXVkby1jbGFzc2VzLWd1aWRlJ10uam9pbignXFxuJykpO1xuICAgICAgICAgIH0gLy8gUmVtb3ZlIHRoZSBzdHlsZSB0byBwcmV2ZW50IGdsb2JhbCBjb25mbGljdHMuXG5cblxuICAgICAgICAgIG5vZGVba2V5XSA9IHt9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRyYXZlcnNlKG11aVRoZW1lLm92ZXJyaWRlcyk7XG4gIH1cblxuICByZXR1cm4gbXVpVGhlbWU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZU11aVRoZW1lOyIsImltcG9ydCBjcmVhdGVNdWlUaGVtZSBmcm9tICcuL2NyZWF0ZU11aVRoZW1lJztcbnZhciBkZWZhdWx0VGhlbWUgPSBjcmVhdGVNdWlUaGVtZSgpO1xuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdFRoZW1lOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHsgd2l0aFN0eWxlcyBhcyB3aXRoU3R5bGVzV2l0aG91dERlZmF1bHQgfSBmcm9tICdAbWF0ZXJpYWwtdWkvc3R5bGVzJztcbmltcG9ydCBkZWZhdWx0VGhlbWUgZnJvbSAnLi9kZWZhdWx0VGhlbWUnO1xuXG5mdW5jdGlvbiB3aXRoU3R5bGVzKHN0eWxlc09yQ3JlYXRvciwgb3B0aW9ucykge1xuICByZXR1cm4gd2l0aFN0eWxlc1dpdGhvdXREZWZhdWx0KHN0eWxlc09yQ3JlYXRvciwgX2V4dGVuZHMoe1xuICAgIGRlZmF1bHRUaGVtZTogZGVmYXVsdFRoZW1lXG4gIH0sIG9wdGlvbnMpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlczsiLCJpbXBvcnQgeyBmb3JtYXRNdWlFcnJvck1lc3NhZ2UgYXMgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSB9IGZyb20gXCJAbWF0ZXJpYWwtdWkvdXRpbHNcIjtcbi8vIEl0IHNob3VsZCB0byBiZSBub3RlZCB0aGF0IHRoaXMgZnVuY3Rpb24gaXNuJ3QgZXF1aXZhbGVudCB0byBgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemVgLlxuLy9cbi8vIEEgc3RyaWN0IGNhcGl0YWxpemF0aW9uIHNob3VsZCB1cHBlcmNhc2UgdGhlIGZpcnN0IGxldHRlciBvZiBlYWNoIHdvcmQgYSB0aGUgc2VudGVuY2UuXG4vLyBXZSBvbmx5IGhhbmRsZSB0aGUgZmlyc3Qgd29yZC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyaW5nKSB7XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBcIk1hdGVyaWFsLVVJOiBjYXBpdGFsaXplKHN0cmluZykgZXhwZWN0cyBhIHN0cmluZyBhcmd1bWVudC5cIiA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoNykpO1xuICB9XG5cbiAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICB3aWR0aDogJzFlbScsXG4gICAgICBoZWlnaHQ6ICcxZW0nLFxuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICBmaWxsOiAnY3VycmVudENvbG9yJyxcbiAgICAgIGZsZXhTaHJpbms6IDAsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDI0KSxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnZmlsbCcsIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXJcbiAgICAgIH0pXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJhY3Rpb25cImAuICovXG4gICAgY29sb3JBY3Rpb246IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5hY3RpdmVcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJlcnJvclwiYC4gKi9cbiAgICBjb2xvckVycm9yOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiZGlzYWJsZWRcImAuICovXG4gICAgY29sb3JEaXNhYmxlZDoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZvbnRTaXplPVwiaW5oZXJpdFwiYC4gKi9cbiAgICBmb250U2l6ZUluaGVyaXQ6IHtcbiAgICAgIGZvbnRTaXplOiAnaW5oZXJpdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZm9udFNpemU9XCJzbWFsbFwiYC4gKi9cbiAgICBmb250U2l6ZVNtYWxsOiB7XG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDIwKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmb250U2l6ZT1cImxhcmdlXCJgLiAqL1xuICAgIGZvbnRTaXplTGFyZ2U6IHtcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMzUpXG4gICAgfVxuICB9O1xufTtcbnZhciBTdmdJY29uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU3ZnSWNvbihwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbG9yID0gX3Byb3BzJGNvbG9yID09PSB2b2lkIDAgPyAnaW5oZXJpdCcgOiBfcHJvcHMkY29sb3IsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ3N2ZycgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGZvbnRTaXplID0gcHJvcHMuZm9udFNpemUsXG4gICAgICBmb250U2l6ZSA9IF9wcm9wcyRmb250U2l6ZSA9PT0gdm9pZCAwID8gJ2RlZmF1bHQnIDogX3Byb3BzJGZvbnRTaXplLFxuICAgICAgaHRtbENvbG9yID0gcHJvcHMuaHRtbENvbG9yLFxuICAgICAgdGl0bGVBY2Nlc3MgPSBwcm9wcy50aXRsZUFjY2VzcyxcbiAgICAgIF9wcm9wcyR2aWV3Qm94ID0gcHJvcHMudmlld0JveCxcbiAgICAgIHZpZXdCb3ggPSBfcHJvcHMkdmlld0JveCA9PT0gdm9pZCAwID8gJzAgMCAyNCAyNCcgOiBfcHJvcHMkdmlld0JveCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImZvbnRTaXplXCIsIFwiaHRtbENvbG9yXCIsIFwidGl0bGVBY2Nlc3NcIiwgXCJ2aWV3Qm94XCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBjb2xvciAhPT0gJ2luaGVyaXQnICYmIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCBmb250U2l6ZSAhPT0gJ2RlZmF1bHQnICYmIGNsYXNzZXNbXCJmb250U2l6ZVwiLmNvbmNhdChjYXBpdGFsaXplKGZvbnRTaXplKSldKSxcbiAgICBmb2N1c2FibGU6IFwiZmFsc2VcIixcbiAgICB2aWV3Qm94OiB2aWV3Qm94LFxuICAgIGNvbG9yOiBodG1sQ29sb3IsXG4gICAgXCJhcmlhLWhpZGRlblwiOiB0aXRsZUFjY2VzcyA/IHVuZGVmaW5lZCA6IHRydWUsXG4gICAgcm9sZTogdGl0bGVBY2Nlc3MgPyAnaW1nJyA6IHVuZGVmaW5lZCxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIGNoaWxkcmVuLCB0aXRsZUFjY2VzcyA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwidGl0bGVcIiwgbnVsbCwgdGl0bGVBY2Nlc3MpIDogbnVsbCk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN2Z0ljb24ucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogTm9kZSBwYXNzZWQgaW50byB0aGUgU1ZHIGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqIFlvdSBjYW4gdXNlIHRoZSBgaHRtbENvbG9yYCBwcm9wIHRvIGFwcGx5IGEgY29sb3IgYXR0cmlidXRlIHRvIHRoZSBTVkcgZWxlbWVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydhY3Rpb24nLCAnZGlzYWJsZWQnLCAnZXJyb3InLCAnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeSddKSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFRoZSBmb250U2l6ZSBhcHBsaWVkIHRvIHRoZSBpY29uLiBEZWZhdWx0cyB0byAyNHB4LCBidXQgY2FuIGJlIGNvbmZpZ3VyZSB0byBpbmhlcml0IGZvbnQgc2l6ZS5cbiAgICovXG4gIGZvbnRTaXplOiBQcm9wVHlwZXMub25lT2YoWydkZWZhdWx0JywgJ2luaGVyaXQnLCAnbGFyZ2UnLCAnc21hbGwnXSksXG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgYSBjb2xvciBhdHRyaWJ1dGUgdG8gdGhlIFNWRyBlbGVtZW50LlxuICAgKi9cbiAgaHRtbENvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgc2hhcGUtcmVuZGVyaW5nIGF0dHJpYnV0ZS4gVGhlIGJlaGF2aW9yIG9mIHRoZSBkaWZmZXJlbnQgb3B0aW9ucyBpcyBkZXNjcmliZWQgb24gdGhlXG4gICAqIFtNRE4gV2ViIERvY3NdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL1NWRy9BdHRyaWJ1dGUvc2hhcGUtcmVuZGVyaW5nKS5cbiAgICogSWYgeW91IGFyZSBoYXZpbmcgaXNzdWVzIHdpdGggYmx1cnJ5IGljb25zIHlvdSBzaG91bGQgaW52ZXN0aWdhdGUgdGhpcyBwcm9wZXJ0eS5cbiAgICovXG4gIHNoYXBlUmVuZGVyaW5nOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBQcm92aWRlcyBhIGh1bWFuLXJlYWRhYmxlIHRpdGxlIGZvciB0aGUgZWxlbWVudCB0aGF0IGNvbnRhaW5zIGl0LlxuICAgKiBodHRwczovL3d3dy53My5vcmcvVFIvU1ZHLWFjY2Vzcy8jRXF1aXZhbGVudFxuICAgKi9cbiAgdGl0bGVBY2Nlc3M6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEFsbG93cyB5b3UgdG8gcmVkZWZpbmUgd2hhdCB0aGUgY29vcmRpbmF0ZXMgd2l0aG91dCB1bml0cyBtZWFuIGluc2lkZSBhbiBTVkcgZWxlbWVudC5cbiAgICogRm9yIGV4YW1wbGUsIGlmIHRoZSBTVkcgZWxlbWVudCBpcyA1MDAgKHdpZHRoKSBieSAyMDAgKGhlaWdodCksXG4gICAqIGFuZCB5b3UgcGFzcyB2aWV3Qm94PVwiMCAwIDUwIDIwXCIsXG4gICAqIHRoaXMgbWVhbnMgdGhhdCB0aGUgY29vcmRpbmF0ZXMgaW5zaWRlIHRoZSBTVkcgd2lsbCBnbyBmcm9tIHRoZSB0b3AgbGVmdCBjb3JuZXIgKDAsMClcbiAgICogdG8gYm90dG9tIHJpZ2h0ICg1MCwyMCkgYW5kIGVhY2ggdW5pdCB3aWxsIGJlIHdvcnRoIDEwcHguXG4gICAqL1xuICB2aWV3Qm94OiBQcm9wVHlwZXMuc3RyaW5nXG59IDogdm9pZCAwO1xuU3ZnSWNvbi5tdWlOYW1lID0gJ1N2Z0ljb24nO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVN2Z0ljb24nXG59KShTdmdJY29uKTsiXSwic291cmNlUm9vdCI6IiJ9