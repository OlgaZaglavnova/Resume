!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=60)}([function(e,t,n){"use strict";e.exports=n(33)},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";e.exports=function(e,t,n,r,i,a,o,l){if(!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,i,a,o,l],s=0;(u=new Error(t.replace(/%s/g,(function(){return c[s++]})))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(e,t,n){e.exports=n(39)()},function(e,t,n){"use strict";var r,i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),o=[];function l(e){for(var t=-1,n=0;n<o.length;n++)if(o[n].identifier===e){t=n;break}return t}function u(e,t){for(var n={},r=[],i=0;i<e.length;i++){var a=e[i],u=t.base?a[0]+t.base:a[0],c=n[u]||0,s="".concat(u," ").concat(c);n[u]=c+1;var f=l(s),d={css:a[1],media:a[2],sourceMap:a[3]};-1!==f?(o[f].references++,o[f].updater(d)):o.push({identifier:s,updater:v(d,t),references:1}),r.push(s)}return r}function c(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var o=a(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var s,f=(s=[],function(e,t){return s[e]=t,s.filter(Boolean).join("\n")});function d(e,t,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,i);else{var a=document.createTextNode(i),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(a,o[t]):e.appendChild(a)}}function p(e,t,n){var r=n.css,i=n.media,a=n.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),a&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,m=0;function v(e,t){var n,r,i;if(t.singleton){var a=m++;n=h||(h=c(t)),r=d.bind(null,n,a,!1),i=d.bind(null,n,a,!0)}else n=c(t),r=p.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=i());var n=u(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var i=l(n[r]);o[i].references--}for(var a=u(e,t),c=0;c<n.length;c++){var s=l(n[c]);0===o[s].references&&(o[s].updater(),o.splice(s,1))}n=a}}}},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var i=(o=r,l=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),"/*# ".concat(u," */")),a=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(a).concat([i]).join("\n")}var o,l,u;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(r)for(var a=0;a<this.length;a++){var o=this[a][0];null!=o&&(i[o]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);r&&i[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),t.push(u))}},t}},function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";t.a=function(e,t){}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(34)},function(e,t,n){"use strict";var r=n(8);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=a.default.memo(a.default.forwardRef((function(t,n){return a.default.createElement(o.default,(0,i.default)({ref:n},t),e)})));0;return n.muiName=o.default.muiName,n};var i=r(n(48)),a=r(n(0)),o=r(n(61))},function(e,t,n){"use strict";var r=n(14),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},o={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?o:l[e.$$typeof]||i}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=o;var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var i=p(n);i&&i!==h&&e(t,i,r)}var o=s(n);f&&(o=o.concat(f(n)));for(var l=u(t),m=u(n),v=0;v<o.length;++v){var y=o[v];if(!(a[y]||r&&r[y]||m&&m[y]||l&&l[y])){var g=d(n,y);try{c(t,y,g)}catch(e){}}}}return t}},,function(e,t,n){"use strict";e.exports=n(41)},function(e,t,n){var r=n(37);e.exports=function(e){return r(e).replace(/\s(\w)/g,(function(e,t){return t.toUpperCase()}))}},function(e,t,n){"use strict";(function(e,r){var i,a=n(22);i="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var o=Object(a.a)(i);t.a=o}).call(this,n(20),n(42)(e))},function(e,t){e.exports=function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}},function(e,t,n){var r=n(47);e.exports=p,e.exports.parse=a,e.exports.compile=function(e,t){return l(a(e,t),t)},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=d;var i=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(e,t){for(var n,r=[],a=0,o=0,l="",s=t&&t.delimiter||"/";null!=(n=i.exec(e));){var f=n[0],d=n[1],p=n.index;if(l+=e.slice(o,p),o=p+f.length,d)l+=d[1];else{var h=e[o],m=n[2],v=n[3],y=n[4],g=n[5],b=n[6],w=n[7];l&&(r.push(l),l="");var x=null!=m&&null!=h&&h!==m,k="+"===b||"*"===b,E="?"===b||"*"===b,S=n[2]||s,_=y||g;r.push({name:v||a++,prefix:m||"",delimiter:S,optional:E,repeat:k,partial:x,asterisk:!!w,pattern:_?c(_):w?".*":"[^"+u(S)+"]+?"})}}return o<e.length&&(l+=e.substr(o)),l&&r.push(l),r}function o(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function l(e,t){for(var n=new Array(e.length),i=0;i<e.length;i++)"object"==typeof e[i]&&(n[i]=new RegExp("^(?:"+e[i].pattern+")$",f(t)));return function(t,i){for(var a="",l=t||{},u=(i||{}).pretty?o:encodeURIComponent,c=0;c<e.length;c++){var s=e[c];if("string"!=typeof s){var f,d=l[s.name];if(null==d){if(s.optional){s.partial&&(a+=s.prefix);continue}throw new TypeError('Expected "'+s.name+'" to be defined')}if(r(d)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=u(d[p]),!n[c].test(f))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'", but received `'+JSON.stringify(f)+"`");a+=(0===p?s.prefix:s.delimiter)+f}}else{if(f=s.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):u(d),!n[c].test(f))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but received "'+f+'"');a+=s.prefix+f}}else a+=s}return a}}function u(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function s(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var i=(n=n||{}).strict,a=!1!==n.end,o="",l=0;l<e.length;l++){var c=e[l];if("string"==typeof c)o+=u(c);else{var d=u(c.prefix),p="(?:"+c.pattern+")";t.push(c),c.repeat&&(p+="(?:"+d+p+")*"),o+=p=c.optional?c.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var h=u(n.delimiter||"/"),m=o.slice(-h.length)===h;return i||(o=(m?o.slice(0,-h.length):o)+"(?:"+h+"(?=$))?"),o+=a?"$":i&&m?"":"(?="+h+"|$)",s(new RegExp("^"+o,f(n)),t)}function p(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return s(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],i=0;i<e.length;i++)r.push(p(e[i],t,n).source);return s(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return d(a(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,l,u=o(e),c=1;c<arguments.length;c++){for(var s in n=Object(arguments[c]))i.call(n,s)&&(u[s]=n[s]);if(r){l=r(n);for(var f=0;f<l.length;f++)a.call(n,l[f])&&(u[l[f]]=n[l[f]])}}return u}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r=n(6),i=n(55);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var a={insert:"head",singleton:!1},o=(r(i,a),i.locals?i.locals:{});e.exports=o},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";(function(t){var n="__global_unique_id__";e.exports=function(){return t[n]=(t[n]||0)+1}}).call(this,n(20))},function(e,t,n){"use strict";var r=n(8);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=r(n(0)),a=(0,r(n(11)).default)(i.default.createElement(i.default.Fragment,null,i.default.createElement("path",{d:"M11.17 8l-.59-.59L9.17 6H4v12h16V8h-8.83zM19 16v1h-8v-1c0-1.33 2.67-2 4-2s4 .67 4 2zm-4-7c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2z",opacity:".3"}),i.default.createElement("path",{d:"M20 6h-8l-2-2H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm0 12H4V6h5.17l2 2H20v10zm-5-5c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm-4 3v1h8v-1c0-1.33-2.67-2-4-2s-4 .67-4 2z"})),"FolderSharedTwoTone");t.default=a},function(e,t,n){"use strict";var r=n(8);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=r(n(0)),a=(0,r(n(11)).default)(i.default.createElement(i.default.Fragment,null,i.default.createElement("path",{d:"M21 5c-1.11-.35-2.33-.5-3.5-.5-1.95 0-4.05.4-5.5 1.5-1.45-1.1-3.55-1.5-5.5-1.5S2.45 4.9 1 6v14.65c0 .25.25.5.5.5.1 0 .15-.05.25-.05C3.1 20.45 5.05 20 6.5 20c1.95 0 4.05.4 5.5 1.5 1.35-.85 3.8-1.5 5.5-1.5 1.65 0 3.35.3 4.75 1.05.1.05.15.05.25.05.25 0 .5-.25.5-.5V6c-.6-.45-1.25-.75-2-1zM3 18.5V7c1.1-.35 2.3-.5 3.5-.5 1.34 0 3.13.41 4.5.99v11.5C9.63 18.41 7.84 18 6.5 18c-1.2 0-2.4.15-3.5.5zm18 0c-1.1-.35-2.3-.5-3.5-.5-1.34 0-3.13.41-4.5.99V7.49c1.37-.59 3.16-.99 4.5-.99 1.2 0 2.4.15 3.5.5v11.5z"}),i.default.createElement("path",{d:"M11 7.49c-1.37-.58-3.16-.99-4.5-.99-1.2 0-2.4.15-3.5.5v11.5c1.1-.35 2.3-.5 3.5-.5 1.34 0 3.13.41 4.5.99V7.49z",opacity:".3"}),i.default.createElement("g",null,i.default.createElement("path",{d:"M17.5 10.5c.88 0 1.73.09 2.5.26V9.24c-.79-.15-1.64-.24-2.5-.24-1.28 0-2.46.16-3.5.47v1.57c.99-.35 2.18-.54 3.5-.54zM17.5 13.16c.88 0 1.73.09 2.5.26V11.9c-.79-.15-1.64-.24-2.5-.24-1.28 0-2.46.16-3.5.47v1.57c.99-.34 2.18-.54 3.5-.54zM17.5 15.83c.88 0 1.73.09 2.5.26v-1.52c-.79-.15-1.64-.24-2.5-.24-1.28 0-2.46.16-3.5.47v1.57c.99-.35 2.18-.54 3.5-.54z"}))),"MenuBookTwoTone");t.default=a},function(e,t,n){"use strict";var r=n(8);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=r(n(0)),a=(0,r(n(11)).default)(i.default.createElement(i.default.Fragment,null,i.default.createElement("path",{d:"M12 3.99c-4.42 0-8 3.58-8 8s3.58 8 8 8 8-3.58 8-8-3.58-8-8-8zm4.25 12.24c-2.35 2.34-6.15 2.34-8.49 0L12 11.99v-6c1.54 0 3.07.59 4.24 1.76 2.35 2.34 2.35 6.14.01 8.48z",opacity:".3"}),i.default.createElement("path",{d:"M16.24 7.75c-1.17-1.17-2.7-1.76-4.24-1.76v6l-4.24 4.24c2.34 2.34 6.14 2.34 8.49 0 2.34-2.34 2.34-6.14-.01-8.48zM12 1.99c-5.52 0-10 4.48-10 10s4.48 10 10 10 10-4.48 10-10-4.48-10-10-10zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"})),"TimelapseTwoTone");t.default=a},function(e,t,n){"use strict";var r=n(8);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=r(n(0)),a=(0,r(n(11)).default)(i.default.createElement(i.default.Fragment,null,i.default.createElement("path",{d:"M11.92 8.28c.24-1.4-.16-2.89-1.24-3.96-.94-.95-2.2-1.39-3.44-1.32l3.09 3.09-4.24 4.24L3 7.24c-.07 1.24.37 2.49 1.31 3.44 1.04 1.04 2.47 1.45 3.83 1.25.71-.1 1.4-.38 2-.82l9.46 9.46.88-.88-9.45-9.45c.47-.6.77-1.26.89-1.96z",opacity:".3"}),i.default.createElement("path",{d:"M22.61 18.97L13.54 9.9c.93-2.34.45-5.1-1.44-7C9.8.6 6.22.39 3.67 2.25L7.5 6.08 6.08 7.5 2.25 3.67C.39 6.21.6 9.79 2.9 12.09c1.86 1.86 4.57 2.35 6.89 1.48l9.11 9.11c.39.39 1.02.39 1.41 0l2.3-2.3c.4-.38.4-1.02 0-1.41zm-3 1.6l-9.46-9.46c-.61.45-1.29.72-2 .82-1.36.2-2.79-.21-3.83-1.25-.95-.94-1.39-2.2-1.32-3.44l3.09 3.09 4.24-4.24L7.24 3c1.24-.07 2.49.37 3.44 1.31 1.08 1.08 1.49 2.57 1.24 3.96-.12.7-.42 1.36-.88 1.95l9.45 9.45-.88.9z"})),"BuildTwoTone");t.default=a},function(e,t,n){"use strict";var r=n(8);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=r(n(0)),a=(0,r(n(11)).default)(i.default.createElement(i.default.Fragment,null,i.default.createElement("path",{d:"M4 8h16v11H4z",opacity:".3"}),i.default.createElement("path",{d:"M20 6h-4V4c0-1.11-.89-2-2-2h-4c-1.11 0-2 .89-2 2v2H4c-1.11 0-1.99.89-1.99 2L2 19c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zM10 4h4v2h-4V4zm10 15H4V8h16v11z"})),"WorkTwoTone");t.default=a},function(e,t,n){"use strict";var r=n(8);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=r(n(0)),a=(0,r(n(11)).default)(i.default.createElement(i.default.Fragment,null,i.default.createElement("path",{d:"M5 19.09h14V4.91H5v14.18zM6 7h12v2H6V7zm0 4h12v2H6v-2zm0 4h12v2H6v-2z",opacity:".3"}),i.default.createElement("path",{d:"M19.5 3.5L18 2l-1.5 1.5L15 2l-1.5 1.5L12 2l-1.5 1.5L9 2 7.5 3.5 6 2 4.5 3.5 3 2v20l1.5-1.5L6 22l1.5-1.5L9 22l1.5-1.5L12 22l1.5-1.5L15 22l1.5-1.5L18 22l1.5-1.5L21 22V2l-1.5 1.5zM19 19.09H5V4.91h14v14.18zM6 15h12v2H6zm0-4h12v2H6zm0-4h12v2H6z"})),"ReceiptTwoTone");t.default=a},function(e,t,n){"use strict";var r=n(8);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=r(n(0)),a=(0,r(n(11)).default)(i.default.createElement(i.default.Fragment,null,i.default.createElement("path",{d:"M9 12h6v8H9z",opacity:".3"}),i.default.createElement("path",{d:"M12 1C8.98 1 6.24 2.23 4.25 4.21l1.41 1.41C7.28 4 9.53 3 12 3s4.72 1 6.34 2.62l1.41-1.41C17.76 2.23 15.02 1 12 1zM7 7.07L8.43 8.5c.91-.91 2.18-1.48 3.57-1.48s2.66.57 3.57 1.48L17 7.07C15.72 5.79 13.95 5 12 5s-3.72.79-5 2.07zm7.86 2.94L9.14 10C8.51 10 8 10.51 8 11.14v9.71c0 .63.51 1.14 1.14 1.14h5.71c.63 0 1.14-.51 1.14-1.14v-9.71c.01-.63-.5-1.13-1.13-1.13zM15 20H9v-8h6v8z"})),"SpeakerPhoneTwoTone");t.default=a},,,function(e,t,n){"use strict";
/** @license React v16.12.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(19),i="function"==typeof Symbol&&Symbol.for,a=i?Symbol.for("react.element"):60103,o=i?Symbol.for("react.portal"):60106,l=i?Symbol.for("react.fragment"):60107,u=i?Symbol.for("react.strict_mode"):60108,c=i?Symbol.for("react.profiler"):60114,s=i?Symbol.for("react.provider"):60109,f=i?Symbol.for("react.context"):60110,d=i?Symbol.for("react.forward_ref"):60112,p=i?Symbol.for("react.suspense"):60113;i&&Symbol.for("react.suspense_list");var h=i?Symbol.for("react.memo"):60115,m=i?Symbol.for("react.lazy"):60116;i&&Symbol.for("react.fundamental"),i&&Symbol.for("react.responder"),i&&Symbol.for("react.scope");var v="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function w(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}function x(){}function k(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(y(85));this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},x.prototype=w.prototype;var E=k.prototype=new x;E.constructor=k,r(E,w.prototype),E.isPureReactComponent=!0;var S={current:null},_={current:null},T=Object.prototype.hasOwnProperty,P={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,n){var r,i={},o=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(o=""+t.key),t)T.call(t,r)&&!P.hasOwnProperty(r)&&(i[r]=t[r]);var u=arguments.length-2;if(1===u)i.children=n;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];i.children=c}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===i[r]&&(i[r]=u[r]);return{$$typeof:a,type:e,key:o,ref:l,props:i,_owner:_.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var N=/\/+/g,j=[];function M(e,t,n,r){if(j.length){var i=j.pop();return i.result=e,i.keyPrefix=t,i.func=n,i.context=r,i.count=0,i}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function R(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>j.length&&j.push(e)}function A(e,t,n){return null==e?0:function e(t,n,r,i){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var u=!1;if(null===t)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case a:case o:u=!0}}if(u)return r(i,t,""===n?"."+z(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var s=n+z(l=t[c],c);u+=e(l,s,r,i)}else if(null===t||"object"!=typeof t?s=null:s="function"==typeof(s=v&&t[v]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),c=0;!(l=t.next()).done;)u+=e(l=l.value,s=n+z(l,c++),r,i);else if("object"===l)throw r=""+t,Error(y(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return u}(e,"",t,n)}function z(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function I(e,t){e.func.call(e.context,t,e.count++)}function L(e,t,n){var r=e.result,i=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?D(e,r,n,(function(e){return e})):null!=e&&(O(e)&&(e=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,i+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(N,"$&/")+"/")+n)),r.push(e))}function D(e,t,n,r,i){var a="";null!=n&&(a=(""+n).replace(N,"$&/")+"/"),A(e,L,t=M(t,a,r,i)),R(t)}function F(){var e=S.current;if(null===e)throw Error(y(321));return e}var U={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return D(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;A(e,I,t=M(null,null,t,n)),R(t)},count:function(e){return A(e,(function(){return null}),null)},toArray:function(e){var t=[];return D(e,t,null,(function(e){return e})),t},only:function(e){if(!O(e))throw Error(y(143));return e}},createRef:function(){return{current:null}},Component:w,PureComponent:k,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:d,render:e}},lazy:function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return F().useCallback(e,t)},useContext:function(e,t){return F().useContext(e,t)},useEffect:function(e,t){return F().useEffect(e,t)},useImperativeHandle:function(e,t,n){return F().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return F().useLayoutEffect(e,t)},useMemo:function(e,t){return F().useMemo(e,t)},useReducer:function(e,t,n){return F().useReducer(e,t,n)},useRef:function(e){return F().useRef(e)},useState:function(e){return F().useState(e)},Fragment:l,Profiler:c,StrictMode:u,Suspense:p,createElement:C,cloneElement:function(e,t,n){if(null==e)throw Error(y(267,e));var i=r({},e.props),o=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=_.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)T.call(t,s)&&!P.hasOwnProperty(s)&&(i[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)i.children=n;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];i.children=c}return{$$typeof:a,type:e.type,key:o,ref:l,props:i,_owner:u}},createFactory:function(e){var t=C.bind(null,e);return t.type=e,t},isValidElement:O,version:"16.12.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:S,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:_,IsSomeRendererActing:{current:!1},assign:r}},B={default:U},H=B&&U||B;e.exports=H.default||H},function(e,t,n){"use strict";
/** @license React v16.12.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),i=n(19),a=n(35);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(o(227));var l=null,u={};function c(){if(l)for(var e in u){var t=u[e],n=l.indexOf(e);if(!(-1<n))throw Error(o(96,e));if(!f[n]){if(!t.extractEvents)throw Error(o(97,e));for(var r in f[n]=t,n=t.eventTypes){var i=void 0,a=n[r],c=t,p=r;if(d.hasOwnProperty(p))throw Error(o(99,p));d[p]=a;var h=a.phasedRegistrationNames;if(h){for(i in h)h.hasOwnProperty(i)&&s(h[i],c,p);i=!0}else a.registrationName?(s(a.registrationName,c,p),i=!0):i=!1;if(!i)throw Error(o(98,r,e))}}}}function s(e,t,n){if(p[e])throw Error(o(100,e));p[e]=t,h[e]=t.eventTypes[n].dependencies}var f=[],d={},p={},h={};function m(e,t,n,r,i,a,o,l,u){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var v=!1,y=null,g=!1,b=null,w={onError:function(e){v=!0,y=e}};function x(e,t,n,r,i,a,o,l,u){v=!1,y=null,m.apply(w,arguments)}var k=null,E=null,S=null;function _(e,t,n){var r=e.type||"unknown-event";e.currentTarget=S(n),function(e,t,n,r,i,a,l,u,c){if(x.apply(this,arguments),v){if(!v)throw Error(o(198));var s=y;v=!1,y=null,g||(g=!0,b=s)}}(r,t,void 0,e),e.currentTarget=null}function T(e,t){if(null==t)throw Error(o(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function P(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var C=null;function O(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)_(e,t[r],n[r]);else t&&_(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function N(e){if(null!==e&&(C=T(C,e)),e=C,C=null,e){if(P(e,O),C)throw Error(o(95));if(g)throw e=b,g=!1,b=null,e}}var j={injectEventPluginOrder:function(e){if(l)throw Error(o(101));l=Array.prototype.slice.call(e),c()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!u.hasOwnProperty(t)||u[t]!==r){if(u[t])throw Error(o(102,t));u[t]=r,n=!0}}n&&c()}};function M(e,t){var n=e.stateNode;if(!n)return null;var r=k(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var R=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;R.hasOwnProperty("ReactCurrentDispatcher")||(R.ReactCurrentDispatcher={current:null}),R.hasOwnProperty("ReactCurrentBatchConfig")||(R.ReactCurrentBatchConfig={suspense:null});var A=/^(.*)[\\\/]/,z="function"==typeof Symbol&&Symbol.for,I=z?Symbol.for("react.element"):60103,L=z?Symbol.for("react.portal"):60106,D=z?Symbol.for("react.fragment"):60107,F=z?Symbol.for("react.strict_mode"):60108,U=z?Symbol.for("react.profiler"):60114,B=z?Symbol.for("react.provider"):60109,H=z?Symbol.for("react.context"):60110,V=z?Symbol.for("react.concurrent_mode"):60111,W=z?Symbol.for("react.forward_ref"):60112,$=z?Symbol.for("react.suspense"):60113,q=z?Symbol.for("react.suspense_list"):60120,G=z?Symbol.for("react.memo"):60115,K=z?Symbol.for("react.lazy"):60116;z&&Symbol.for("react.fundamental"),z&&Symbol.for("react.responder"),z&&Symbol.for("react.scope");var Q="function"==typeof Symbol&&Symbol.iterator;function J(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=Q&&e[Q]||e["@@iterator"])?e:null}function Z(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case D:return"Fragment";case L:return"Portal";case U:return"Profiler";case F:return"StrictMode";case $:return"Suspense";case q:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case H:return"Context.Consumer";case B:return"Context.Provider";case W:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case G:return Z(e.type);case K:if(e=1===e._status?e._result:null)return Z(e)}return null}function Y(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,i=e._debugSource,a=Z(e.type);n=null,r&&(n=Z(r.type)),r=a,a="",i?a=" (at "+i.fileName.replace(A,"")+":"+i.lineNumber+")":n&&(a=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+a}t+=n,e=e.return}while(e);return t}var X=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),ee=null,te=null,ne=null;function re(e){if(e=E(e)){if("function"!=typeof ee)throw Error(o(280));var t=k(e.stateNode);ee(e.stateNode,e.type,t)}}function ie(e){te?ne?ne.push(e):ne=[e]:te=e}function ae(){if(te){var e=te,t=ne;if(ne=te=null,re(e),t)for(e=0;e<t.length;e++)re(t[e])}}function oe(e,t){return e(t)}function le(e,t,n,r){return e(t,n,r)}function ue(){}var ce=oe,se=!1,fe=!1;function de(){null===te&&null===ne||(ue(),ae())}new Map;var pe=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,he=Object.prototype.hasOwnProperty,me={},ve={};function ye(e,t,n,r,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a}var ge={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){ge[e]=new ye(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];ge[t]=new ye(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){ge[e]=new ye(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){ge[e]=new ye(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){ge[e]=new ye(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){ge[e]=new ye(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){ge[e]=new ye(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){ge[e]=new ye(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){ge[e]=new ye(e,5,!1,e.toLowerCase(),null,!1)}));var be=/[\-:]([a-z])/g;function we(e){return e[1].toUpperCase()}function xe(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function ke(e,t,n,r){var i=ge.hasOwnProperty(t)?ge[t]:null;(null!==i?0===i.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!he.call(ve,e)||!he.call(me,e)&&(pe.test(e)?ve[e]=!0:(me[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function Ee(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Se(e){e._valueTracker||(e._valueTracker=function(e){var t=Ee(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function _e(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Ee(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Te(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Pe(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=xe(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Ce(e,t){null!=(t=t.checked)&&ke(e,"checked",t,!1)}function Oe(e,t){Ce(e,t);var n=xe(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?je(e,t.type,n):t.hasOwnProperty("defaultValue")&&je(e,t.type,xe(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Ne(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function je(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Me(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Re(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+xe(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function Ae(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ze(e,t){var n=t.value;if(null==n){if(n=t.defaultValue,null!=(t=t.children)){if(null!=n)throw Error(o(92));if(Array.isArray(t)){if(!(1>=t.length))throw Error(o(93));t=t[0]}n=t}null==n&&(n="")}e._wrapperState={initialValue:xe(n)}}function Ie(e,t){var n=xe(t.value),r=xe(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Le(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(be,we);ge[t]=new ye(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(be,we);ge[t]=new ye(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(be,we);ge[t]=new ye(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){ge[e]=new ye(e,1,!1,e.toLowerCase(),null,!1)})),ge.xlinkHref=new ye("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){ge[e]=new ye(e,1,!1,e.toLowerCase(),null,!0)}));var De="http://www.w3.org/1999/xhtml",Fe="http://www.w3.org/2000/svg";function Ue(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Be(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Ue(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var He,Ve=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,i){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==Fe||"innerHTML"in e)e.innerHTML=t;else{for((He=He||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=He.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function We(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function $e(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var qe={animationend:$e("Animation","AnimationEnd"),animationiteration:$e("Animation","AnimationIteration"),animationstart:$e("Animation","AnimationStart"),transitionend:$e("Transition","TransitionEnd")},Ge={},Ke={};function Qe(e){if(Ge[e])return Ge[e];if(!qe[e])return e;var t,n=qe[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ke)return Ge[e]=n[t];return e}X&&(Ke=document.createElement("div").style,"AnimationEvent"in window||(delete qe.animationend.animation,delete qe.animationiteration.animation,delete qe.animationstart.animation),"TransitionEvent"in window||delete qe.transitionend.transition);var Je=Qe("animationend"),Ze=Qe("animationiteration"),Ye=Qe("animationstart"),Xe=Qe("transitionend"),et="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" ");function tt(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function nt(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function rt(e){if(tt(e)!==e)throw Error(o(188))}function it(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=tt(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var a=i.alternate;if(null===a){if(null!==(r=i.return)){n=r;continue}break}if(i.child===a.child){for(a=i.child;a;){if(a===n)return rt(i),e;if(a===r)return rt(i),t;a=a.sibling}throw Error(o(188))}if(n.return!==r.return)n=i,r=a;else{for(var l=!1,u=i.child;u;){if(u===n){l=!0,n=i,r=a;break}if(u===r){l=!0,r=i,n=a;break}u=u.sibling}if(!l){for(u=a.child;u;){if(u===n){l=!0,n=a,r=i;break}if(u===r){l=!0,r=a,n=i;break}u=u.sibling}if(!l)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var at,ot,lt,ut=!1,ct=[],st=null,ft=null,dt=null,pt=new Map,ht=new Map,mt=[],vt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),yt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function gt(e,t,n,r){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:r}}function bt(e,t){switch(e){case"focus":case"blur":st=null;break;case"dragenter":case"dragleave":ft=null;break;case"mouseover":case"mouseout":dt=null;break;case"pointerover":case"pointerout":pt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ht.delete(t.pointerId)}}function wt(e,t,n,r,i){return null===e||e.nativeEvent!==i?(e=gt(t,n,r,i),null!==t&&(null!==(t=cr(t))&&ot(t)),e):(e.eventSystemFlags|=r,e)}function xt(e){var t=ur(e.target);if(null!==t){var n=tt(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=nt(n)))return e.blockedOn=t,void a.unstable_runWithPriority(e.priority,(function(){lt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function kt(e){if(null!==e.blockedOn)return!1;var t=jn(e.topLevelType,e.eventSystemFlags,e.nativeEvent);if(null!==t){var n=cr(t);return null!==n&&ot(n),e.blockedOn=t,!1}return!0}function Et(e,t,n){kt(e)&&n.delete(t)}function St(){for(ut=!1;0<ct.length;){var e=ct[0];if(null!==e.blockedOn){null!==(e=cr(e.blockedOn))&&at(e);break}var t=jn(e.topLevelType,e.eventSystemFlags,e.nativeEvent);null!==t?e.blockedOn=t:ct.shift()}null!==st&&kt(st)&&(st=null),null!==ft&&kt(ft)&&(ft=null),null!==dt&&kt(dt)&&(dt=null),pt.forEach(Et),ht.forEach(Et)}function _t(e,t){e.blockedOn===t&&(e.blockedOn=null,ut||(ut=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,St)))}function Tt(e){function t(t){return _t(t,e)}if(0<ct.length){_t(ct[0],e);for(var n=1;n<ct.length;n++){var r=ct[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==st&&_t(st,e),null!==ft&&_t(ft,e),null!==dt&&_t(dt,e),pt.forEach(t),ht.forEach(t),n=0;n<mt.length;n++)(r=mt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<mt.length&&null===(n=mt[0]).blockedOn;)xt(n),null===n.blockedOn&&mt.shift()}function Pt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function Ct(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Ot(e,t,n){(t=M(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=T(n._dispatchListeners,t),n._dispatchInstances=T(n._dispatchInstances,e))}function Nt(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=Ct(t);for(t=n.length;0<t--;)Ot(n[t],"captured",e);for(t=0;t<n.length;t++)Ot(n[t],"bubbled",e)}}function jt(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=M(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=T(n._dispatchListeners,t),n._dispatchInstances=T(n._dispatchInstances,e))}function Mt(e){e&&e.dispatchConfig.registrationName&&jt(e._targetInst,null,e)}function Rt(e){P(e,Nt)}function At(){return!0}function zt(){return!1}function It(e,t,n,r){for(var i in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(i)&&((t=e[i])?this[i]=t(n):"target"===i?this.target=r:this[i]=n[i]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?At:zt,this.isPropagationStopped=zt,this}function Lt(e,t,n,r){if(this.eventPool.length){var i=this.eventPool.pop();return this.call(i,e,t,n,r),i}return new this(e,t,n,r)}function Dt(e){if(!(e instanceof this))throw Error(o(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Ft(e){e.eventPool=[],e.getPooled=Lt,e.release=Dt}i(It.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=At)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=At)},persist:function(){this.isPersistent=At},isPersistent:zt,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=zt,this._dispatchInstances=this._dispatchListeners=null}}),It.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},It.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var a=new t;return i(a,n.prototype),n.prototype=a,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,Ft(n),n},Ft(It);var Ut=It.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Bt=It.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Ht=It.extend({view:null,detail:null}),Vt=Ht.extend({relatedTarget:null});function Wt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var $t={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},qt={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Gt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Kt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Gt[e])&&!!t[e]}function Qt(){return Kt}for(var Jt=Ht.extend({key:function(e){if(e.key){var t=$t[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Wt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?qt[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Qt,charCode:function(e){return"keypress"===e.type?Wt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Wt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Zt=0,Yt=0,Xt=!1,en=!1,tn=Ht.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Qt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Zt;return Zt=e.screenX,Xt?"mousemove"===e.type?e.screenX-t:0:(Xt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Yt;return Yt=e.screenY,en?"mousemove"===e.type?e.screenY-t:0:(en=!0,0)}}),nn=tn.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),rn=tn.extend({dataTransfer:null}),an=Ht.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Qt}),on=It.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),ln=tn.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),un=[["blur","blur",0],["cancel","cancel",0],["click","click",0],["close","close",0],["contextmenu","contextMenu",0],["copy","copy",0],["cut","cut",0],["auxclick","auxClick",0],["dblclick","doubleClick",0],["dragend","dragEnd",0],["dragstart","dragStart",0],["drop","drop",0],["focus","focus",0],["input","input",0],["invalid","invalid",0],["keydown","keyDown",0],["keypress","keyPress",0],["keyup","keyUp",0],["mousedown","mouseDown",0],["mouseup","mouseUp",0],["paste","paste",0],["pause","pause",0],["play","play",0],["pointercancel","pointerCancel",0],["pointerdown","pointerDown",0],["pointerup","pointerUp",0],["ratechange","rateChange",0],["reset","reset",0],["seeked","seeked",0],["submit","submit",0],["touchcancel","touchCancel",0],["touchend","touchEnd",0],["touchstart","touchStart",0],["volumechange","volumeChange",0],["drag","drag",1],["dragenter","dragEnter",1],["dragexit","dragExit",1],["dragleave","dragLeave",1],["dragover","dragOver",1],["mousemove","mouseMove",1],["mouseout","mouseOut",1],["mouseover","mouseOver",1],["pointermove","pointerMove",1],["pointerout","pointerOut",1],["pointerover","pointerOver",1],["scroll","scroll",1],["toggle","toggle",1],["touchmove","touchMove",1],["wheel","wheel",1],["abort","abort",2],[Je,"animationEnd",2],[Ze,"animationIteration",2],[Ye,"animationStart",2],["canplay","canPlay",2],["canplaythrough","canPlayThrough",2],["durationchange","durationChange",2],["emptied","emptied",2],["encrypted","encrypted",2],["ended","ended",2],["error","error",2],["gotpointercapture","gotPointerCapture",2],["load","load",2],["loadeddata","loadedData",2],["loadedmetadata","loadedMetadata",2],["loadstart","loadStart",2],["lostpointercapture","lostPointerCapture",2],["playing","playing",2],["progress","progress",2],["seeking","seeking",2],["stalled","stalled",2],["suspend","suspend",2],["timeupdate","timeUpdate",2],[Xe,"transitionEnd",2],["waiting","waiting",2]],cn={},sn={},fn=0;fn<un.length;fn++){var dn=un[fn],pn=dn[0],hn=dn[1],mn=dn[2],vn="on"+(hn[0].toUpperCase()+hn.slice(1)),yn={phasedRegistrationNames:{bubbled:vn,captured:vn+"Capture"},dependencies:[pn],eventPriority:mn};cn[hn]=yn,sn[pn]=yn}var gn={eventTypes:cn,getEventPriority:function(e){return void 0!==(e=sn[e])?e.eventPriority:2},extractEvents:function(e,t,n,r){var i=sn[e];if(!i)return null;switch(e){case"keypress":if(0===Wt(n))return null;case"keydown":case"keyup":e=Jt;break;case"blur":case"focus":e=Vt;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=tn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=rn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=an;break;case Je:case Ze:case Ye:e=Ut;break;case Xe:e=on;break;case"scroll":e=Ht;break;case"wheel":e=ln;break;case"copy":case"cut":case"paste":e=Bt;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=nn;break;default:e=It}return Rt(t=e.getPooled(i,t,n,r)),t}},bn=a.unstable_UserBlockingPriority,wn=a.unstable_runWithPriority,xn=gn.getEventPriority,kn=[];function En(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=ur(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var i=Pt(e.nativeEvent);r=e.topLevelType;for(var a=e.nativeEvent,o=e.eventSystemFlags,l=null,u=0;u<f.length;u++){var c=f[u];c&&(c=c.extractEvents(r,t,a,i,o))&&(l=T(l,c))}N(l)}}var Sn=!0;function _n(e,t){Tn(t,e,!1)}function Tn(e,t,n){switch(xn(t)){case 0:var r=Pn.bind(null,t,1);break;case 1:r=Cn.bind(null,t,1);break;default:r=Nn.bind(null,t,1)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Pn(e,t,n){se||ue();var r=Nn,i=se;se=!0;try{le(r,e,t,n)}finally{(se=i)||de()}}function Cn(e,t,n){wn(bn,Nn.bind(null,e,t,n))}function On(e,t,n,r){if(kn.length){var i=kn.pop();i.topLevelType=e,i.eventSystemFlags=t,i.nativeEvent=n,i.targetInst=r,e=i}else e={topLevelType:e,eventSystemFlags:t,nativeEvent:n,targetInst:r,ancestors:[]};try{if(t=En,n=e,fe)t(n,void 0);else{fe=!0;try{ce(t,n,void 0)}finally{fe=!1,de()}}}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,kn.length<10&&kn.push(e)}}function Nn(e,t,n){if(Sn)if(0<ct.length&&-1<vt.indexOf(e))e=gt(null,e,t,n),ct.push(e);else{var r=jn(e,t,n);null===r?bt(e,n):-1<vt.indexOf(e)?(e=gt(r,e,t,n),ct.push(e)):function(e,t,n,r){switch(t){case"focus":return st=wt(st,e,t,n,r),!0;case"dragenter":return ft=wt(ft,e,t,n,r),!0;case"mouseover":return dt=wt(dt,e,t,n,r),!0;case"pointerover":var i=r.pointerId;return pt.set(i,wt(pt.get(i)||null,e,t,n,r)),!0;case"gotpointercapture":return i=r.pointerId,ht.set(i,wt(ht.get(i)||null,e,t,n,r)),!0}return!1}(r,e,t,n)||(bt(e,n),On(e,t,n,null))}}function jn(e,t,n){var r=Pt(n);if(null!==(r=ur(r))){var i=tt(r);if(null===i)r=null;else{var a=i.tag;if(13===a){if(null!==(r=nt(i)))return r;r=null}else if(3===a){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;r=null}else i!==r&&(r=null)}}return On(e,t,n,r),null}function Mn(e){if(!X)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var Rn=new("function"==typeof WeakMap?WeakMap:Map);function An(e){var t=Rn.get(e);return void 0===t&&(t=new Set,Rn.set(e,t)),t}function zn(e,t,n){if(!n.has(e)){switch(e){case"scroll":Tn(t,"scroll",!0);break;case"focus":case"blur":Tn(t,"focus",!0),Tn(t,"blur",!0),n.add("blur"),n.add("focus");break;case"cancel":case"close":Mn(e)&&Tn(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===et.indexOf(e)&&_n(e,t)}n.add(e)}}var In={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Ln=["Webkit","ms","Moz","O"];function Dn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||In.hasOwnProperty(e)&&In[e]?(""+t).trim():t+"px"}function Fn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=Dn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(In).forEach((function(e){Ln.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),In[t]=In[e]}))}));var Un=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Bn(e,t){if(t){if(Un[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if(!("object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62,""))}}function Hn(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Vn(e,t){var n=An(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=h[t];for(var r=0;r<t.length;r++)zn(t[r],e,n)}function Wn(){}function $n(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function qn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Gn(e,t){var n,r=qn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=qn(r)}}function Kn(){for(var e=window,t=$n();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=$n((e=t.contentWindow).document)}return t}function Qn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Jn=null,Zn=null;function Yn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Xn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var er="function"==typeof setTimeout?setTimeout:void 0,tr="function"==typeof clearTimeout?clearTimeout:void 0;function nr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function rr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var ir=Math.random().toString(36).slice(2),ar="__reactInternalInstance$"+ir,or="__reactEventHandlers$"+ir,lr="__reactContainere$"+ir;function ur(e){var t=e[ar];if(t)return t;for(var n=e.parentNode;n;){if(t=n[lr]||n[ar]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=rr(e);null!==e;){if(n=e[ar])return n;e=rr(e)}return t}n=(e=n).parentNode}return null}function cr(e){return!(e=e[ar]||e[lr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function sr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function fr(e){return e[or]||null}var dr=null,pr=null,hr=null;function mr(){if(hr)return hr;var e,t,n=pr,r=n.length,i="value"in dr?dr.value:dr.textContent,a=i.length;for(e=0;e<r&&n[e]===i[e];e++);var o=r-e;for(t=1;t<=o&&n[r-t]===i[a-t];t++);return hr=i.slice(e,1<t?1-t:void 0)}var vr=It.extend({data:null}),yr=It.extend({data:null}),gr=[9,13,27,32],br=X&&"CompositionEvent"in window,wr=null;X&&"documentMode"in document&&(wr=document.documentMode);var xr=X&&"TextEvent"in window&&!wr,kr=X&&(!br||wr&&8<wr&&11>=wr),Er=String.fromCharCode(32),Sr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},_r=!1;function Tr(e,t){switch(e){case"keyup":return-1!==gr.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Pr(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Cr=!1;var Or={eventTypes:Sr,extractEvents:function(e,t,n,r){var i;if(br)e:{switch(e){case"compositionstart":var a=Sr.compositionStart;break e;case"compositionend":a=Sr.compositionEnd;break e;case"compositionupdate":a=Sr.compositionUpdate;break e}a=void 0}else Cr?Tr(e,n)&&(a=Sr.compositionEnd):"keydown"===e&&229===n.keyCode&&(a=Sr.compositionStart);return a?(kr&&"ko"!==n.locale&&(Cr||a!==Sr.compositionStart?a===Sr.compositionEnd&&Cr&&(i=mr()):(pr="value"in(dr=r)?dr.value:dr.textContent,Cr=!0)),a=vr.getPooled(a,t,n,r),i?a.data=i:null!==(i=Pr(n))&&(a.data=i),Rt(a),i=a):i=null,(e=xr?function(e,t){switch(e){case"compositionend":return Pr(t);case"keypress":return 32!==t.which?null:(_r=!0,Er);case"textInput":return(e=t.data)===Er&&_r?null:e;default:return null}}(e,n):function(e,t){if(Cr)return"compositionend"===e||!br&&Tr(e,t)?(e=mr(),hr=pr=dr=null,Cr=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return kr&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=yr.getPooled(Sr.beforeInput,t,n,r)).data=e,Rt(t)):t=null,null===i?t:null===t?i:[i,t]}},Nr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function jr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Nr[e.type]:"textarea"===t}var Mr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Rr(e,t,n){return(e=It.getPooled(Mr.change,e,t,n)).type="change",ie(n),Rt(e),e}var Ar=null,zr=null;function Ir(e){N(e)}function Lr(e){if(_e(sr(e)))return e}function Dr(e,t){if("change"===e)return t}var Fr=!1;function Ur(){Ar&&(Ar.detachEvent("onpropertychange",Br),zr=Ar=null)}function Br(e){if("value"===e.propertyName&&Lr(zr))if(e=Rr(zr,e,Pt(e)),se)N(e);else{se=!0;try{oe(Ir,e)}finally{se=!1,de()}}}function Hr(e,t,n){"focus"===e?(Ur(),zr=n,(Ar=t).attachEvent("onpropertychange",Br)):"blur"===e&&Ur()}function Vr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Lr(zr)}function Wr(e,t){if("click"===e)return Lr(t)}function $r(e,t){if("input"===e||"change"===e)return Lr(t)}X&&(Fr=Mn("input")&&(!document.documentMode||9<document.documentMode));var qr,Gr={eventTypes:Mr,_isInputEventSupported:Fr,extractEvents:function(e,t,n,r){var i=t?sr(t):window,a=i.nodeName&&i.nodeName.toLowerCase();if("select"===a||"input"===a&&"file"===i.type)var o=Dr;else if(jr(i))if(Fr)o=$r;else{o=Vr;var l=Hr}else(a=i.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(o=Wr);if(o&&(o=o(e,t)))return Rr(o,n,r);l&&l(e,i,t),"blur"===e&&(e=i._wrapperState)&&e.controlled&&"number"===i.type&&je(i,"number",i.value)}},Kr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Qr={eventTypes:Kr,extractEvents:function(e,t,n,r,i){var a="mouseover"===e||"pointerover"===e,o="mouseout"===e||"pointerout"===e;if(a&&0==(32&i)&&(n.relatedTarget||n.fromElement)||!o&&!a)return null;if(i=r.window===r?r:(i=r.ownerDocument)?i.defaultView||i.parentWindow:window,o?(o=t,null!==(t=(t=n.relatedTarget||n.toElement)?ur(t):null)&&(t!==(a=tt(t))||5!==t.tag&&6!==t.tag)&&(t=null)):o=null,o===t)return null;if("mouseout"===e||"mouseover"===e)var l=tn,u=Kr.mouseLeave,c=Kr.mouseEnter,s="mouse";else"pointerout"!==e&&"pointerover"!==e||(l=nn,u=Kr.pointerLeave,c=Kr.pointerEnter,s="pointer");if(e=null==o?i:sr(o),i=null==t?i:sr(t),(u=l.getPooled(u,o,n,r)).type=s+"leave",u.target=e,u.relatedTarget=i,(r=l.getPooled(c,t,n,r)).type=s+"enter",r.target=i,r.relatedTarget=e,s=t,(l=o)&&s)e:{for(e=s,o=0,t=c=l;t;t=Ct(t))o++;for(t=0,i=e;i;i=Ct(i))t++;for(;0<o-t;)c=Ct(c),o--;for(;0<t-o;)e=Ct(e),t--;for(;o--;){if(c===e||c===e.alternate)break e;c=Ct(c),e=Ct(e)}c=null}else c=null;for(e=c,c=[];l&&l!==e&&(null===(o=l.alternate)||o!==e);)c.push(l),l=Ct(l);for(l=[];s&&s!==e&&(null===(o=s.alternate)||o!==e);)l.push(s),s=Ct(s);for(s=0;s<c.length;s++)jt(c[s],"bubbled",u);for(s=l.length;0<s--;)jt(l[s],"captured",r);return n===qr?(qr=null,[u]):(qr=n,[u,r])}};var Jr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Zr=Object.prototype.hasOwnProperty;function Yr(e,t){if(Jr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Zr.call(t,n[r])||!Jr(e[n[r]],t[n[r]]))return!1;return!0}var Xr=X&&"documentMode"in document&&11>=document.documentMode,ei={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},ti=null,ni=null,ri=null,ii=!1;function ai(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return ii||null==ti||ti!==$n(n)?null:("selectionStart"in(n=ti)&&Qn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},ri&&Yr(ri,n)?null:(ri=n,(e=It.getPooled(ei.select,ni,e,t)).type="select",e.target=ti,Rt(e),e))}var oi={eventTypes:ei,extractEvents:function(e,t,n,r){var i,a=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(i=!a)){e:{a=An(a),i=h.onSelect;for(var o=0;o<i.length;o++)if(!a.has(i[o])){a=!1;break e}a=!0}i=!a}if(i)return null;switch(a=t?sr(t):window,e){case"focus":(jr(a)||"true"===a.contentEditable)&&(ti=a,ni=t,ri=null);break;case"blur":ri=ni=ti=null;break;case"mousedown":ii=!0;break;case"contextmenu":case"mouseup":case"dragend":return ii=!1,ai(n,r);case"selectionchange":if(Xr)break;case"keydown":case"keyup":return ai(n,r)}return null}};j.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),k=fr,E=cr,S=sr,j.injectEventPluginsByName({SimpleEventPlugin:gn,EnterLeaveEventPlugin:Qr,ChangeEventPlugin:Gr,SelectEventPlugin:oi,BeforeInputEventPlugin:Or}),new Set;var li=[],ui=-1;function ci(e){0>ui||(e.current=li[ui],li[ui]=null,ui--)}function si(e,t){ui++,li[ui]=e.current,e.current=t}var fi={},di={current:fi},pi={current:!1},hi=fi;function mi(e,t){var n=e.type.contextTypes;if(!n)return fi;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,a={};for(i in n)a[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function vi(e){return null!=(e=e.childContextTypes)}function yi(e){ci(pi),ci(di)}function gi(e){ci(pi),ci(di)}function bi(e,t,n){if(di.current!==fi)throw Error(o(168));si(di,t),si(pi,n)}function wi(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(o(108,Z(t)||"Unknown",a));return i({},n,{},r)}function xi(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||fi,hi=di.current,si(di,t),si(pi,pi.current),!0}function ki(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(t=wi(e,t,hi),r.__reactInternalMemoizedMergedChildContext=t,ci(pi),ci(di),si(di,t)):ci(pi),si(pi,n)}var Ei=a.unstable_runWithPriority,Si=a.unstable_scheduleCallback,_i=a.unstable_cancelCallback,Ti=a.unstable_shouldYield,Pi=a.unstable_requestPaint,Ci=a.unstable_now,Oi=a.unstable_getCurrentPriorityLevel,Ni=a.unstable_ImmediatePriority,ji=a.unstable_UserBlockingPriority,Mi=a.unstable_NormalPriority,Ri=a.unstable_LowPriority,Ai=a.unstable_IdlePriority,zi={},Ii=void 0!==Pi?Pi:function(){},Li=null,Di=null,Fi=!1,Ui=Ci(),Bi=1e4>Ui?Ci:function(){return Ci()-Ui};function Hi(){switch(Oi()){case Ni:return 99;case ji:return 98;case Mi:return 97;case Ri:return 96;case Ai:return 95;default:throw Error(o(332))}}function Vi(e){switch(e){case 99:return Ni;case 98:return ji;case 97:return Mi;case 96:return Ri;case 95:return Ai;default:throw Error(o(332))}}function Wi(e,t){return e=Vi(e),Ei(e,t)}function $i(e,t,n){return e=Vi(e),Si(e,t,n)}function qi(e){return null===Li?(Li=[e],Di=Si(Ni,Ki)):Li.push(e),zi}function Gi(){if(null!==Di){var e=Di;Di=null,_i(e)}Ki()}function Ki(){if(!Fi&&null!==Li){Fi=!0;var e=0;try{var t=Li;Wi(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Li=null}catch(t){throw null!==Li&&(Li=Li.slice(e+1)),Si(Ni,Gi),t}finally{Fi=!1}}}var Qi=3;function Ji(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Zi(e,t){if(e&&e.defaultProps)for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Yi={current:null},Xi=null,ea=null,ta=null;function na(){ta=ea=Xi=null}function ra(e,t){var n=e.type._context;si(Yi,n._currentValue),n._currentValue=t}function ia(e){var t=Yi.current;ci(Yi),e.type._context._currentValue=t}function aa(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function oa(e,t){Xi=e,ta=ea=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Bo=!0),e.firstContext=null)}function la(e,t){if(ta!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ta=e,t=1073741823),t={context:e,observedBits:t,next:null},null===ea){if(null===Xi)throw Error(o(308));ea=t,Xi.dependencies={expirationTime:0,firstContext:t,responders:null}}else ea=ea.next=t;return e._currentValue}var ua=!1;function ca(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function sa(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function fa(e,t){return{expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function da(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function pa(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,i=null;null===r&&(r=e.updateQueue=ca(e.memoizedState))}else r=e.updateQueue,i=n.updateQueue,null===r?null===i?(r=e.updateQueue=ca(e.memoizedState),i=n.updateQueue=ca(n.memoizedState)):r=e.updateQueue=sa(i):null===i&&(i=n.updateQueue=sa(r));null===i||r===i?da(r,t):null===r.lastUpdate||null===i.lastUpdate?(da(r,t),da(i,t)):(da(r,t),i.lastUpdate=t)}function ha(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=ca(e.memoizedState):ma(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function ma(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=sa(t)),t}function va(e,t,n,r,a,o){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(o,r,a):e;case 3:e.effectTag=-4097&e.effectTag|64;case 0:if(null==(a="function"==typeof(e=n.payload)?e.call(o,r,a):e))break;return i({},r,a);case 2:ua=!0}return r}function ya(e,t,n,r,i){ua=!1;for(var a=(t=ma(e,t)).baseState,o=null,l=0,u=t.firstUpdate,c=a;null!==u;){var s=u.expirationTime;s<i?(null===o&&(o=u,a=c),l<s&&(l=s)):(fu(s,u.suspenseConfig),c=va(e,0,u,c,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=u:(t.lastEffect.nextEffect=u,t.lastEffect=u))),u=u.next}for(s=null,u=t.firstCapturedUpdate;null!==u;){var f=u.expirationTime;f<i?(null===s&&(s=u,null===o&&(a=c)),l<f&&(l=f)):(c=va(e,0,u,c,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=u:(t.lastCapturedEffect.nextEffect=u,t.lastCapturedEffect=u))),u=u.next}null===o&&(t.lastUpdate=null),null===s?t.lastCapturedUpdate=null:e.effectTag|=32,null===o&&null===s&&(a=c),t.baseState=a,t.firstUpdate=o,t.firstCapturedUpdate=s,du(l),e.expirationTime=l,e.memoizedState=c}function ga(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),ba(t.firstEffect,n),t.firstEffect=t.lastEffect=null,ba(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function ba(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;if("function"!=typeof n)throw Error(o(191,n));n.call(r)}e=e.nextEffect}}var wa=R.ReactCurrentBatchConfig,xa=(new r.Component).refs;function ka(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:i({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var Ea={isMounted:function(e){return!!(e=e._reactInternalFiber)&&tt(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Yl(),i=wa.suspense;(i=fa(r=Xl(r,e,i),i)).payload=t,null!=n&&(i.callback=n),pa(e,i),eu(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Yl(),i=wa.suspense;(i=fa(r=Xl(r,e,i),i)).tag=1,i.payload=t,null!=n&&(i.callback=n),pa(e,i),eu(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Yl(),r=wa.suspense;(r=fa(n=Xl(n,e,r),r)).tag=2,null!=t&&(r.callback=t),pa(e,r),eu(e,n)}};function Sa(e,t,n,r,i,a,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,o):!t.prototype||!t.prototype.isPureReactComponent||(!Yr(n,r)||!Yr(i,a))}function _a(e,t,n){var r=!1,i=fi,a=t.contextType;return"object"==typeof a&&null!==a?a=la(a):(i=vi(t)?hi:di.current,a=(r=null!=(r=t.contextTypes))?mi(e,i):fi),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Ea,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=a),t}function Ta(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Ea.enqueueReplaceState(t,t.state,null)}function Pa(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=xa;var a=t.contextType;"object"==typeof a&&null!==a?i.context=la(a):(a=vi(t)?hi:di.current,i.context=mi(e,a)),null!==(a=e.updateQueue)&&(ya(e,a,n,i,r),i.state=e.memoizedState),"function"==typeof(a=t.getDerivedStateFromProps)&&(ka(e,t,a,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&Ea.enqueueReplaceState(i,i.state,null),null!==(a=e.updateQueue)&&(ya(e,a,n,i,r),i.state=e.memoizedState)),"function"==typeof i.componentDidMount&&(e.effectTag|=4)}var Ca=Array.isArray;function Oa(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=r.refs;t===xa&&(t=r.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function Na(e,t){if("textarea"!==e.type)throw Error(o(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function ja(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t,n){return(e=Mu(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=zu(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=Oa(e,t,n),r.return=e,r):((r=Ru(n.type,n.key,n.props,null,e.mode,r)).ref=Oa(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Iu(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=Au(n,e.mode,r,a)).return=e,t):((t=i(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=zu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case I:return(n=Ru(t.type,t.key,t.props,null,e.mode,n)).ref=Oa(e,null,t),n.return=e,n;case L:return(t=Iu(t,e.mode,n)).return=e,t}if(Ca(t)||J(t))return(t=Au(t,e.mode,n,null)).return=e,t;Na(e,t)}return null}function p(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case I:return n.key===i?n.type===D?f(e,t,n.props.children,r,i):c(e,t,n,r):null;case L:return n.key===i?s(e,t,n,r):null}if(Ca(n)||J(n))return null!==i?null:f(e,t,n,r,null);Na(e,n)}return null}function h(e,t,n,r,i){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case I:return e=e.get(null===r.key?n:r.key)||null,r.type===D?f(t,e,r.props.children,i,r.key):c(t,e,r,i);case L:return s(t,e=e.get(null===r.key?n:r.key)||null,r,i)}if(Ca(r)||J(r))return f(t,e=e.get(n)||null,r,i,null);Na(t,r)}return null}function m(i,o,l,u){for(var c=null,s=null,f=o,m=o=0,v=null;null!==f&&m<l.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=p(i,f,l[m],u);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(i,f),o=a(y,o,m),null===s?c=y:s.sibling=y,s=y,f=v}if(m===l.length)return n(i,f),c;if(null===f){for(;m<l.length;m++)null!==(f=d(i,l[m],u))&&(o=a(f,o,m),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(i,f);m<l.length;m++)null!==(v=h(f,i,m,l[m],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),o=a(v,o,m),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach((function(e){return t(i,e)})),c}function v(i,l,u,c){var s=J(u);if("function"!=typeof s)throw Error(o(150));if(null==(u=s.call(u)))throw Error(o(151));for(var f=s=null,m=l,v=l=0,y=null,g=u.next();null!==m&&!g.done;v++,g=u.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=p(i,m,g.value,c);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(i,m),l=a(b,l,v),null===f?s=b:f.sibling=b,f=b,m=y}if(g.done)return n(i,m),s;if(null===m){for(;!g.done;v++,g=u.next())null!==(g=d(i,g.value,c))&&(l=a(g,l,v),null===f?s=g:f.sibling=g,f=g);return s}for(m=r(i,m);!g.done;v++,g=u.next())null!==(g=h(m,i,v,g.value,c))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),l=a(g,l,v),null===f?s=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(i,e)})),s}return function(e,r,a,u){var c="object"==typeof a&&null!==a&&a.type===D&&null===a.key;c&&(a=a.props.children);var s="object"==typeof a&&null!==a;if(s)switch(a.$$typeof){case I:e:{for(s=a.key,c=r;null!==c;){if(c.key===s){if(7===c.tag?a.type===D:c.elementType===a.type){n(e,c.sibling),(r=i(c,a.type===D?a.props.children:a.props)).ref=Oa(e,c,a),r.return=e,e=r;break e}n(e,c);break}t(e,c),c=c.sibling}a.type===D?((r=Au(a.props.children,e.mode,u,a.key)).return=e,e=r):((u=Ru(a.type,a.key,a.props,null,e.mode,u)).ref=Oa(e,r,a),u.return=e,e=u)}return l(e);case L:e:{for(c=a.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=i(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Iu(a,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=i(r,a)).return=e,e=r):(n(e,r),(r=zu(a,e.mode,u)).return=e,e=r),l(e);if(Ca(a))return m(e,r,a,u);if(J(a))return v(e,r,a,u);if(s&&Na(e,a),void 0===a&&!c)switch(e.tag){case 1:case 0:throw e=e.type,Error(o(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Ma=ja(!0),Ra=ja(!1),Aa={},za={current:Aa},Ia={current:Aa},La={current:Aa};function Da(e){if(e===Aa)throw Error(o(174));return e}function Fa(e,t){si(La,t),si(Ia,e),si(za,Aa);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Be(null,"");break;default:t=Be(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}ci(za),si(za,t)}function Ua(e){ci(za),ci(Ia),ci(La)}function Ba(e){Da(La.current);var t=Da(za.current),n=Be(t,e.type);t!==n&&(si(Ia,e),si(za,n))}function Ha(e){Ia.current===e&&(ci(za),ci(Ia))}var Va={current:0};function Wa(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function $a(e,t){return{responder:e,props:t}}var qa=R.ReactCurrentDispatcher,Ga=R.ReactCurrentBatchConfig,Ka=0,Qa=null,Ja=null,Za=null,Ya=null,Xa=null,eo=null,to=0,no=null,ro=0,io=!1,ao=null,oo=0;function lo(){throw Error(o(321))}function uo(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Jr(e[n],t[n]))return!1;return!0}function co(e,t,n,r,i,a){if(Ka=a,Qa=t,Za=null!==e?e.memoizedState:null,qa.current=null===Za?Oo:No,t=n(r,i),io){do{io=!1,oo+=1,Za=null!==e?e.memoizedState:null,eo=Ya,no=Xa=Ja=null,qa.current=No,t=n(r,i)}while(io);ao=null,oo=0}if(qa.current=Co,(e=Qa).memoizedState=Ya,e.expirationTime=to,e.updateQueue=no,e.effectTag|=ro,e=null!==Ja&&null!==Ja.next,Ka=0,eo=Xa=Ya=Za=Ja=Qa=null,to=0,no=null,ro=0,e)throw Error(o(300));return t}function so(){qa.current=Co,Ka=0,eo=Xa=Ya=Za=Ja=Qa=null,to=0,no=null,ro=0,io=!1,ao=null,oo=0}function fo(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===Xa?Ya=Xa=e:Xa=Xa.next=e,Xa}function po(){if(null!==eo)eo=(Xa=eo).next,Za=null!==(Ja=Za)?Ja.next:null;else{if(null===Za)throw Error(o(310));var e={memoizedState:(Ja=Za).memoizedState,baseState:Ja.baseState,queue:Ja.queue,baseUpdate:Ja.baseUpdate,next:null};Xa=null===Xa?Ya=e:Xa.next=e,Za=Ja.next}return Xa}function ho(e,t){return"function"==typeof t?t(e):t}function mo(e){var t=po(),n=t.queue;if(null===n)throw Error(o(311));if(n.lastRenderedReducer=e,0<oo){var r=n.dispatch;if(null!==ao){var i=ao.get(n);if(void 0!==i){ao.delete(n);var a=t.memoizedState;do{a=e(a,i.action),i=i.next}while(null!==i);return Jr(a,t.memoizedState)||(Bo=!0),t.memoizedState=a,t.baseUpdate===n.last&&(t.baseState=a),n.lastRenderedState=a,[a,r]}}return[t.memoizedState,r]}r=n.last;var l=t.baseUpdate;if(a=t.baseState,null!==l?(null!==r&&(r.next=null),r=l.next):r=null!==r?r.next:null,null!==r){var u=i=null,c=r,s=!1;do{var f=c.expirationTime;f<Ka?(s||(s=!0,u=l,i=a),f>to&&du(to=f)):(fu(f,c.suspenseConfig),a=c.eagerReducer===e?c.eagerState:e(a,c.action)),l=c,c=c.next}while(null!==c&&c!==r);s||(u=l,i=a),Jr(a,t.memoizedState)||(Bo=!0),t.memoizedState=a,t.baseUpdate=u,t.baseState=i,n.lastRenderedState=a}return[t.memoizedState,n.dispatch]}function vo(e){var t=fo();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:ho,lastRenderedState:e}).dispatch=Po.bind(null,Qa,e),[t.memoizedState,e]}function yo(e){return mo(ho)}function go(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===no?(no={lastEffect:null}).lastEffect=e.next=e:null===(t=no.lastEffect)?no.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,no.lastEffect=e),e}function bo(e,t,n,r){var i=fo();ro|=e,i.memoizedState=go(t,n,void 0,void 0===r?null:r)}function wo(e,t,n,r){var i=po();r=void 0===r?null:r;var a=void 0;if(null!==Ja){var o=Ja.memoizedState;if(a=o.destroy,null!==r&&uo(r,o.deps))return void go(0,n,a,r)}ro|=e,i.memoizedState=go(t,n,a,r)}function xo(e,t){return bo(516,192,e,t)}function ko(e,t){return wo(516,192,e,t)}function Eo(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function So(){}function _o(e,t){return fo().memoizedState=[e,void 0===t?null:t],e}function To(e,t){var n=po();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&uo(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Po(e,t,n){if(!(25>oo))throw Error(o(301));var r=e.alternate;if(e===Qa||null!==r&&r===Qa)if(io=!0,e={expirationTime:Ka,suspenseConfig:null,action:n,eagerReducer:null,eagerState:null,next:null},null===ao&&(ao=new Map),void 0===(n=ao.get(t)))ao.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{var i=Yl(),a=wa.suspense;a={expirationTime:i=Xl(i,e,a),suspenseConfig:a,action:n,eagerReducer:null,eagerState:null,next:null};var l=t.last;if(null===l)a.next=a;else{var u=l.next;null!==u&&(a.next=u),l.next=a}if(t.last=a,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var c=t.lastRenderedState,s=r(c,n);if(a.eagerReducer=r,a.eagerState=s,Jr(s,c))return}catch(e){}eu(e,i)}}var Co={readContext:la,useCallback:lo,useContext:lo,useEffect:lo,useImperativeHandle:lo,useLayoutEffect:lo,useMemo:lo,useReducer:lo,useRef:lo,useState:lo,useDebugValue:lo,useResponder:lo,useDeferredValue:lo,useTransition:lo},Oo={readContext:la,useCallback:_o,useContext:la,useEffect:xo,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,bo(4,36,Eo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return bo(4,36,e,t)},useMemo:function(e,t){var n=fo();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=fo();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Po.bind(null,Qa,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},fo().memoizedState=e},useState:vo,useDebugValue:So,useResponder:$a,useDeferredValue:function(e,t){var n=vo(e),r=n[0],i=n[1];return xo((function(){a.unstable_next((function(){var n=Ga.suspense;Ga.suspense=void 0===t?null:t;try{i(e)}finally{Ga.suspense=n}}))}),[e,t]),r},useTransition:function(e){var t=vo(!1),n=t[0],r=t[1];return[_o((function(t){r(!0),a.unstable_next((function(){var n=Ga.suspense;Ga.suspense=void 0===e?null:e;try{r(!1),t()}finally{Ga.suspense=n}}))}),[e,n]),n]}},No={readContext:la,useCallback:To,useContext:la,useEffect:ko,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,wo(4,36,Eo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return wo(4,36,e,t)},useMemo:function(e,t){var n=po();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&uo(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:mo,useRef:function(){return po().memoizedState},useState:yo,useDebugValue:So,useResponder:$a,useDeferredValue:function(e,t){var n=yo(),r=n[0],i=n[1];return ko((function(){a.unstable_next((function(){var n=Ga.suspense;Ga.suspense=void 0===t?null:t;try{i(e)}finally{Ga.suspense=n}}))}),[e,t]),r},useTransition:function(e){var t=yo(),n=t[0],r=t[1];return[To((function(t){r(!0),a.unstable_next((function(){var n=Ga.suspense;Ga.suspense=void 0===e?null:e;try{r(!1),t()}finally{Ga.suspense=n}}))}),[e,n]),n]}},jo=null,Mo=null,Ro=!1;function Ao(e,t){var n=Nu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function zo(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Io(e){if(Ro){var t=Mo;if(t){var n=t;if(!zo(e,t)){if(!(t=nr(n.nextSibling))||!zo(e,t))return e.effectTag=-1025&e.effectTag|2,Ro=!1,void(jo=e);Ao(jo,n)}jo=e,Mo=nr(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Ro=!1,jo=e}}function Lo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;jo=e}function Do(e){if(e!==jo)return!1;if(!Ro)return Lo(e),Ro=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Xn(t,e.memoizedProps))for(t=Mo;t;)Ao(e,t),t=nr(t.nextSibling);if(Lo(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Mo=nr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Mo=null}}else Mo=jo?nr(e.stateNode.nextSibling):null;return!0}function Fo(){Mo=jo=null,Ro=!1}var Uo=R.ReactCurrentOwner,Bo=!1;function Ho(e,t,n,r){t.child=null===e?Ra(t,null,n,r):Ma(t,e.child,n,r)}function Vo(e,t,n,r,i){n=n.render;var a=t.ref;return oa(t,i),r=co(e,t,n,r,a,i),null===e||Bo?(t.effectTag|=1,Ho(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),al(e,t,i))}function Wo(e,t,n,r,i,a){if(null===e){var o=n.type;return"function"!=typeof o||ju(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ru(n.type,null,r,null,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,$o(e,t,o,r,i,a))}return o=e.child,i<a&&(i=o.memoizedProps,(n=null!==(n=n.compare)?n:Yr)(i,r)&&e.ref===t.ref)?al(e,t,a):(t.effectTag|=1,(e=Mu(o,r)).ref=t.ref,e.return=t,t.child=e)}function $o(e,t,n,r,i,a){return null!==e&&Yr(e.memoizedProps,r)&&e.ref===t.ref&&(Bo=!1,i<a)?al(e,t,a):Go(e,t,n,r,a)}function qo(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Go(e,t,n,r,i){var a=vi(n)?hi:di.current;return a=mi(t,a),oa(t,i),n=co(e,t,n,r,a,i),null===e||Bo?(t.effectTag|=1,Ho(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),al(e,t,i))}function Ko(e,t,n,r,i){if(vi(n)){var a=!0;xi(t)}else a=!1;if(oa(t,i),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),_a(t,n,r),Pa(t,n,r,i),r=!0;else if(null===e){var o=t.stateNode,l=t.memoizedProps;o.props=l;var u=o.context,c=n.contextType;"object"==typeof c&&null!==c?c=la(c):c=mi(t,c=vi(n)?hi:di.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof o.getSnapshotBeforeUpdate;f||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(l!==r||u!==c)&&Ta(t,o,r,c),ua=!1;var d=t.memoizedState;u=o.state=d;var p=t.updateQueue;null!==p&&(ya(t,p,r,o,i),u=t.memoizedState),l!==r||d!==u||pi.current||ua?("function"==typeof s&&(ka(t,n,s,r),u=t.memoizedState),(l=ua||Sa(t,n,l,r,d,u,c))?(f||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.effectTag|=4)):("function"==typeof o.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=u),o.props=r,o.state=u,o.context=c,r=l):("function"==typeof o.componentDidMount&&(t.effectTag|=4),r=!1)}else o=t.stateNode,l=t.memoizedProps,o.props=t.type===t.elementType?l:Zi(t.type,l),u=o.context,"object"==typeof(c=n.contextType)&&null!==c?c=la(c):c=mi(t,c=vi(n)?hi:di.current),(f="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(l!==r||u!==c)&&Ta(t,o,r,c),ua=!1,u=t.memoizedState,d=o.state=u,null!==(p=t.updateQueue)&&(ya(t,p,r,o,i),d=t.memoizedState),l!==r||u!==d||pi.current||ua?("function"==typeof s&&(ka(t,n,s,r),d=t.memoizedState),(s=ua||Sa(t,n,l,r,u,d,c))?(f||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(r,d,c),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(r,d,c)),"function"==typeof o.componentDidUpdate&&(t.effectTag|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof o.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof o.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),o.props=r,o.state=d,o.context=c,r=s):("function"!=typeof o.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof o.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),r=!1);return Qo(e,t,n,r,a,i)}function Qo(e,t,n,r,i,a){qo(e,t);var o=0!=(64&t.effectTag);if(!r&&!o)return i&&ki(t,n,!1),al(e,t,a);r=t.stateNode,Uo.current=t;var l=o&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&o?(t.child=Ma(t,e.child,null,a),t.child=Ma(t,null,l,a)):Ho(e,t,l,a),t.memoizedState=r.state,i&&ki(t,n,!0),t.child}function Jo(e){var t=e.stateNode;t.pendingContext?bi(0,t.pendingContext,t.pendingContext!==t.context):t.context&&bi(0,t.context,!1),Fa(e,t.containerInfo)}var Zo,Yo,Xo,el={dehydrated:null,retryTime:0};function tl(e,t,n){var r,i=t.mode,a=t.pendingProps,o=Va.current,l=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&o)&&(null===e||null!==e.memoizedState)),r?(l=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===a.fallback||!0===a.unstable_avoidThisFallback||(o|=1),si(Va,1&o),null===e){if(void 0!==a.fallback&&Io(t),l){if(l=a.fallback,(a=Au(null,i,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,a.child=e;null!==e;)e.return=a,e=e.sibling;return(n=Au(l,i,n,null)).return=t,a.sibling=n,t.memoizedState=el,t.child=a,n}return i=a.children,t.memoizedState=null,t.child=Ra(t,null,i,n)}if(null!==e.memoizedState){if(i=(e=e.child).sibling,l){if(a=a.fallback,(n=Mu(e,e.pendingProps)).return=t,0==(2&t.mode)&&(l=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=l;null!==l;)l.return=n,l=l.sibling;return(i=Mu(i,a,i.expirationTime)).return=t,n.sibling=i,n.childExpirationTime=0,t.memoizedState=el,t.child=n,i}return n=Ma(t,e.child,a.children,n),t.memoizedState=null,t.child=n}if(e=e.child,l){if(l=a.fallback,(a=Au(null,i,0,null)).return=t,a.child=e,null!==e&&(e.return=a),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,a.child=e;null!==e;)e.return=a,e=e.sibling;return(n=Au(l,i,n,null)).return=t,a.sibling=n,n.effectTag|=2,a.childExpirationTime=0,t.memoizedState=el,t.child=a,n}return t.memoizedState=null,t.child=Ma(t,e,a.children,n)}function nl(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),aa(e.return,t)}function rl(e,t,n,r,i,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,last:r,tail:n,tailExpiration:0,tailMode:i,lastEffect:a}:(o.isBackwards=t,o.rendering=null,o.last=r,o.tail=n,o.tailExpiration=0,o.tailMode=i,o.lastEffect=a)}function il(e,t,n){var r=t.pendingProps,i=r.revealOrder,a=r.tail;if(Ho(e,t,r.children,n),0!=(2&(r=Va.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&nl(e,n);else if(19===e.tag)nl(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(si(Va,r),0==(2&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===Wa(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),rl(t,!1,i,n,a,t.lastEffect);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===Wa(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}rl(t,!0,n,null,a,t.lastEffect);break;case"together":rl(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function al(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&du(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Mu(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Mu(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function ol(e){e.effectTag|=4}function ll(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ul(e){switch(e.tag){case 1:vi(e.type)&&yi();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Ua(),gi(),0!=(64&(t=e.effectTag)))throw Error(o(285));return e.effectTag=-4097&t|64,e;case 5:return Ha(e),null;case 13:return ci(Va),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return ci(Va),null;case 4:return Ua(),null;case 10:return ia(e),null;default:return null}}function cl(e,t){return{value:e,source:t,stack:Y(t)}}Zo=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Yo=function(e,t,n,r,a){var o=e.memoizedProps;if(o!==r){var l,u,c=t.stateNode;switch(Da(za.current),e=null,n){case"input":o=Te(c,o),r=Te(c,r),e=[];break;case"option":o=Me(c,o),r=Me(c,r),e=[];break;case"select":o=i({},o,{value:void 0}),r=i({},r,{value:void 0}),e=[];break;case"textarea":o=Ae(c,o),r=Ae(c,r),e=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(c.onclick=Wn)}for(l in Bn(n,r),n=null,o)if(!r.hasOwnProperty(l)&&o.hasOwnProperty(l)&&null!=o[l])if("style"===l)for(u in c=o[l])c.hasOwnProperty(u)&&(n||(n={}),n[u]="");else"dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(p.hasOwnProperty(l)?e||(e=[]):(e=e||[]).push(l,null));for(l in r){var s=r[l];if(c=null!=o?o[l]:void 0,r.hasOwnProperty(l)&&s!==c&&(null!=s||null!=c))if("style"===l)if(c){for(u in c)!c.hasOwnProperty(u)||s&&s.hasOwnProperty(u)||(n||(n={}),n[u]="");for(u in s)s.hasOwnProperty(u)&&c[u]!==s[u]&&(n||(n={}),n[u]=s[u])}else n||(e||(e=[]),e.push(l,n)),n=s;else"dangerouslySetInnerHTML"===l?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(e=e||[]).push(l,""+s)):"children"===l?c===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(l,""+s):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(p.hasOwnProperty(l)?(null!=s&&Vn(a,l),e||c===s||(e=[])):(e=e||[]).push(l,s))}n&&(e=e||[]).push("style",n),a=e,(t.updateQueue=a)&&ol(t)}},Xo=function(e,t,n,r){n!==r&&ol(t)};var sl="function"==typeof WeakSet?WeakSet:Set;function fl(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=Y(n)),null!==n&&Z(n.type),t=t.value,null!==e&&1===e.tag&&Z(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function dl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Su(e,t)}else t.current=null}function pl(e,t){switch(t.tag){case 0:case 11:case 15:hl(2,0,t);break;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Zi(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:case 17:break;default:throw Error(o(163))}}function hl(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if(0!=(r.tag&e)){var i=r.destroy;r.destroy=void 0,void 0!==i&&i()}0!=(r.tag&t)&&(i=r.create,r.destroy=i()),r=r.next}while(r!==n)}}function ml(e,t,n){switch("function"==typeof Cu&&Cu(t),t.tag){case 0:case 11:case 14:case 15:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Wi(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var i=t;try{n()}catch(e){Su(i,e)}}e=e.next}while(e!==r)}))}break;case 1:dl(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Su(e,t)}}(t,n);break;case 5:dl(t);break;case 4:bl(e,t,n)}}function vl(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,null!==t&&vl(t)}function yl(e){return 5===e.tag||3===e.tag||4===e.tag}function gl(e){e:{for(var t=e.return;null!==t;){if(yl(t)){var n=t;break e}t=t.return}throw Error(o(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(o(161))}16&n.effectTag&&(We(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||yl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var i=e;;){var a=5===i.tag||6===i.tag;if(a){var l=a?i.stateNode:i.stateNode.instance;if(n)if(r){var u=l;l=n,8===(a=t).nodeType?a.parentNode.insertBefore(u,l):a.insertBefore(u,l)}else t.insertBefore(l,n);else r?(8===(u=t).nodeType?(a=u.parentNode).insertBefore(l,u):(a=u).appendChild(l),null!=(u=u._reactRootContainer)||null!==a.onclick||(a.onclick=Wn)):t.appendChild(l)}else if(4!==i.tag&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===e)break;for(;null===i.sibling;){if(null===i.return||i.return===e)return;i=i.return}i.sibling.return=i.return,i=i.sibling}}function bl(e,t,n){for(var r,i,a=t,l=!1;;){if(!l){l=a.return;e:for(;;){if(null===l)throw Error(o(160));switch(r=l.stateNode,l.tag){case 5:i=!1;break e;case 3:case 4:r=r.containerInfo,i=!0;break e}l=l.return}l=!0}if(5===a.tag||6===a.tag){e:for(var u=e,c=a,s=n,f=c;;)if(ml(u,f,s),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===c)break;for(;null===f.sibling;){if(null===f.return||f.return===c)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}i?(u=r,c=a.stateNode,8===u.nodeType?u.parentNode.removeChild(c):u.removeChild(c)):r.removeChild(a.stateNode)}else if(4===a.tag){if(null!==a.child){r=a.stateNode.containerInfo,i=!0,a.child.return=a,a=a.child;continue}}else if(ml(e,a,n),null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;4===(a=a.return).tag&&(l=!1)}a.sibling.return=a.return,a=a.sibling}}function wl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:hl(4,8,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,i=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[or]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Ce(n,r),Hn(e,i),t=Hn(e,r),i=0;i<a.length;i+=2){var l=a[i],u=a[i+1];"style"===l?Fn(n,u):"dangerouslySetInnerHTML"===l?Ve(n,u):"children"===l?We(n,u):ke(n,l,u,t)}switch(e){case"input":Oe(n,r);break;case"textarea":Ie(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Re(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Re(n,!!r.multiple,r.defaultValue,!0):Re(n,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 6:if(null===t.stateNode)throw Error(o(162));t.stateNode.nodeValue=t.memoizedProps;break;case 3:(t=t.stateNode).hydrate&&(t.hydrate=!1,Tt(t.containerInfo));break;case 12:break;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Ul=Bi()),null!==n)e:for(e=n;;){if(5===e.tag)a=e.stateNode,r?"function"==typeof(a=a.style).setProperty?a.setProperty("display","none","important"):a.display="none":(a=e.stateNode,i=null!=(i=e.memoizedProps.style)&&i.hasOwnProperty("display")?i.display:null,a.style.display=Dn("display",i));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(a=e.child.sibling).return=e,e=a;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}xl(t);break;case 19:xl(t);break;case 17:case 20:case 21:break;default:throw Error(o(163))}}function xl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new sl),t.forEach((function(t){var r=Tu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var kl="function"==typeof WeakMap?WeakMap:Map;function El(e,t,n){(n=fa(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Hl||(Hl=!0,Vl=r),fl(e,t)},n}function Sl(e,t,n){(n=fa(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return fl(e,t),r(i)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Wl?Wl=new Set([this]):Wl.add(this),fl(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var _l,Tl=Math.ceil,Pl=R.ReactCurrentDispatcher,Cl=R.ReactCurrentOwner,Ol=0,Nl=null,jl=null,Ml=0,Rl=0,Al=null,zl=1073741823,Il=1073741823,Ll=null,Dl=0,Fl=!1,Ul=0,Bl=null,Hl=!1,Vl=null,Wl=null,$l=!1,ql=null,Gl=90,Kl=null,Ql=0,Jl=null,Zl=0;function Yl(){return 0!=(48&Ol)?1073741821-(Bi()/10|0):0!==Zl?Zl:Zl=1073741821-(Bi()/10|0)}function Xl(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Hi();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&Ol))return Ml;if(null!==n)e=Ji(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Ji(e,150,100);break;case 97:case 96:e=Ji(e,5e3,250);break;case 95:e=2;break;default:throw Error(o(326))}return null!==Nl&&e===Ml&&--e,e}function eu(e,t){if(50<Ql)throw Ql=0,Jl=null,Error(o(185));if(null!==(e=tu(e,t))){var n=Hi();1073741823===t?0!=(8&Ol)&&0==(48&Ol)?au(e):(ru(e),0===Ol&&Gi()):ru(e),0==(4&Ol)||98!==n&&99!==n||(null===Kl?Kl=new Map([[e,t]]):(void 0===(n=Kl.get(e))||n>t)&&Kl.set(e,t))}}function tu(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,i=null;if(null===r&&3===e.tag)i=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){i=r.stateNode;break}r=r.return}return null!==i&&(Nl===i&&(du(t),4===Rl&&Fu(i,Ml)),Uu(i,t)),i}function nu(e){var t=e.lastExpiredTime;return 0!==t?t:Du(e,t=e.firstPendingTime)?(t=e.lastPingedTime)>(e=e.nextKnownPendingLevel)?t:e:t}function ru(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=qi(au.bind(null,e));else{var t=nu(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=Yl();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var i=e.callbackPriority;if(e.callbackExpirationTime===t&&i>=r)return;n!==zi&&_i(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?qi(au.bind(null,e)):$i(r,iu.bind(null,e),{timeout:10*(1073741821-t)-Bi()}),e.callbackNode=t}}}function iu(e,t){if(Zl=0,t)return Bu(e,t=Yl()),ru(e),null;var n=nu(e);if(0!==n){if(t=e.callbackNode,0!=(48&Ol))throw Error(o(327));if(xu(),e===Nl&&n===Ml||uu(e,n),null!==jl){var r=Ol;Ol|=16;for(var i=su();;)try{hu();break}catch(t){cu(e,t)}if(na(),Ol=r,Pl.current=i,1===Rl)throw t=Al,uu(e,n),Fu(e,n),ru(e),t;if(null===jl)switch(i=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Rl,Nl=null,r){case 0:case 1:throw Error(o(345));case 2:Bu(e,2<n?2:n);break;case 3:if(Fu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=yu(i)),1073741823===zl&&10<(i=Ul+500-Bi())){if(Fl){var a=e.lastPingedTime;if(0===a||a>=n){e.lastPingedTime=n,uu(e,n);break}}if(0!==(a=nu(e))&&a!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=er(gu.bind(null,e),i);break}gu(e);break;case 4:if(Fu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=yu(i)),Fl&&(0===(i=e.lastPingedTime)||i>=n)){e.lastPingedTime=n,uu(e,n);break}if(0!==(i=nu(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Il?r=10*(1073741821-Il)-Bi():1073741823===zl?r=0:(r=10*(1073741821-zl)-5e3,0>(r=(i=Bi())-r)&&(r=0),(n=10*(1073741821-n)-i)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Tl(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=er(gu.bind(null,e),r);break}gu(e);break;case 5:if(1073741823!==zl&&null!==Ll){a=zl;var l=Ll;if(0>=(r=0|l.busyMinDurationMs)?r=0:(i=0|l.busyDelayMs,r=(a=Bi()-(10*(1073741821-a)-(0|l.timeoutMs||5e3)))<=i?0:i+r-a),10<r){Fu(e,n),e.timeoutHandle=er(gu.bind(null,e),r);break}}gu(e);break;default:throw Error(o(329))}if(ru(e),e.callbackNode===t)return iu.bind(null,e)}}return null}function au(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,e.finishedExpirationTime===t)gu(e);else{if(0!=(48&Ol))throw Error(o(327));if(xu(),e===Nl&&t===Ml||uu(e,t),null!==jl){var n=Ol;Ol|=16;for(var r=su();;)try{pu();break}catch(t){cu(e,t)}if(na(),Ol=n,Pl.current=r,1===Rl)throw n=Al,uu(e,t),Fu(e,t),ru(e),n;if(null!==jl)throw Error(o(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Nl=null,gu(e),ru(e)}}return null}function ou(e,t){var n=Ol;Ol|=1;try{return e(t)}finally{0===(Ol=n)&&Gi()}}function lu(e,t){var n=Ol;Ol&=-2,Ol|=8;try{return e(t)}finally{0===(Ol=n)&&Gi()}}function uu(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,tr(n)),null!==jl)for(n=jl.return;null!==n;){var r=n;switch(r.tag){case 1:var i=r.type.childContextTypes;null!=i&&yi();break;case 3:Ua(),gi();break;case 5:Ha(r);break;case 4:Ua();break;case 13:case 19:ci(Va);break;case 10:ia(r)}n=n.return}Nl=e,jl=Mu(e.current,null),Ml=t,Rl=0,Al=null,Il=zl=1073741823,Ll=null,Dl=0,Fl=!1}function cu(e,t){for(;;){try{if(na(),so(),null===jl||null===jl.return)return Rl=1,Al=t,null;e:{var n=e,r=jl.return,i=jl,a=t;if(t=Ml,i.effectTag|=2048,i.firstEffect=i.lastEffect=null,null!==a&&"object"==typeof a&&"function"==typeof a.then){var o=a,l=0!=(1&Va.current),u=r;do{var c;if(c=13===u.tag){var s=u.memoizedState;if(null!==s)c=null!==s.dehydrated;else{var f=u.memoizedProps;c=void 0!==f.fallback&&(!0!==f.unstable_avoidThisFallback||!l)}}if(c){var d=u.updateQueue;if(null===d){var p=new Set;p.add(o),u.updateQueue=p}else d.add(o);if(0==(2&u.mode)){if(u.effectTag|=64,i.effectTag&=-2981,1===i.tag)if(null===i.alternate)i.tag=17;else{var h=fa(1073741823,null);h.tag=2,pa(i,h)}i.expirationTime=1073741823;break e}a=void 0,i=t;var m=n.pingCache;if(null===m?(m=n.pingCache=new kl,a=new Set,m.set(o,a)):void 0===(a=m.get(o))&&(a=new Set,m.set(o,a)),!a.has(i)){a.add(i);var v=_u.bind(null,n,o,i);o.then(v,v)}u.effectTag|=4096,u.expirationTime=t;break e}u=u.return}while(null!==u);a=Error((Z(i.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+Y(i))}5!==Rl&&(Rl=2),a=cl(a,i),u=r;do{switch(u.tag){case 3:o=a,u.effectTag|=4096,u.expirationTime=t,ha(u,El(u,o,t));break e;case 1:o=a;var y=u.type,g=u.stateNode;if(0==(64&u.effectTag)&&("function"==typeof y.getDerivedStateFromError||null!==g&&"function"==typeof g.componentDidCatch&&(null===Wl||!Wl.has(g)))){u.effectTag|=4096,u.expirationTime=t,ha(u,Sl(u,o,t));break e}}u=u.return}while(null!==u)}jl=vu(jl)}catch(e){t=e;continue}break}}function su(){var e=Pl.current;return Pl.current=Co,null===e?Co:e}function fu(e,t){e<zl&&2<e&&(zl=e),null!==t&&e<Il&&2<e&&(Il=e,Ll=t)}function du(e){e>Dl&&(Dl=e)}function pu(){for(;null!==jl;)jl=mu(jl)}function hu(){for(;null!==jl&&!Ti();)jl=mu(jl)}function mu(e){var t=_l(e.alternate,e,Ml);return e.memoizedProps=e.pendingProps,null===t&&(t=vu(e)),Cl.current=null,t}function vu(e){jl=e;do{var t=jl.alternate;if(e=jl.return,0==(2048&jl.effectTag)){e:{var n=t,r=Ml,a=(t=jl).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:vi(t.type)&&yi();break;case 3:Ua(),gi(),(a=t.stateNode).pendingContext&&(a.context=a.pendingContext,a.pendingContext=null),(null===n||null===n.child)&&Do(t)&&ol(t);break;case 5:Ha(t),r=Da(La.current);var l=t.type;if(null!==n&&null!=t.stateNode)Yo(n,t,l,a,r),n.ref!==t.ref&&(t.effectTag|=128);else if(a){var u=Da(za.current);if(Do(t)){var c=(a=t).stateNode;n=a.type;var s=a.memoizedProps,f=r;switch(c[ar]=a,c[or]=s,l=void 0,r=c,n){case"iframe":case"object":case"embed":_n("load",r);break;case"video":case"audio":for(c=0;c<et.length;c++)_n(et[c],r);break;case"source":_n("error",r);break;case"img":case"image":case"link":_n("error",r),_n("load",r);break;case"form":_n("reset",r),_n("submit",r);break;case"details":_n("toggle",r);break;case"input":Pe(r,s),_n("invalid",r),Vn(f,"onChange");break;case"select":r._wrapperState={wasMultiple:!!s.multiple},_n("invalid",r),Vn(f,"onChange");break;case"textarea":ze(r,s),_n("invalid",r),Vn(f,"onChange")}for(l in Bn(n,s),c=null,s)s.hasOwnProperty(l)&&(u=s[l],"children"===l?"string"==typeof u?r.textContent!==u&&(c=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(c=["children",""+u]):p.hasOwnProperty(l)&&null!=u&&Vn(f,l));switch(n){case"input":Se(r),Ne(r,s,!0);break;case"textarea":Se(r),Le(r);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(r.onclick=Wn)}l=c,a.updateQueue=l,(a=null!==l)&&ol(t)}else{n=t,f=l,s=a,c=9===r.nodeType?r:r.ownerDocument,u===De&&(u=Ue(f)),u===De?"script"===f?((s=c.createElement("div")).innerHTML="<script><\/script>",c=s.removeChild(s.firstChild)):"string"==typeof s.is?c=c.createElement(f,{is:s.is}):(c=c.createElement(f),"select"===f&&(f=c,s.multiple?f.multiple=!0:s.size&&(f.size=s.size))):c=c.createElementNS(u,f),(s=c)[ar]=n,s[or]=a,Zo(s,t),t.stateNode=s;var d=r,h=Hn(f=l,n=a);switch(f){case"iframe":case"object":case"embed":_n("load",s),r=n;break;case"video":case"audio":for(r=0;r<et.length;r++)_n(et[r],s);r=n;break;case"source":_n("error",s),r=n;break;case"img":case"image":case"link":_n("error",s),_n("load",s),r=n;break;case"form":_n("reset",s),_n("submit",s),r=n;break;case"details":_n("toggle",s),r=n;break;case"input":Pe(s,n),r=Te(s,n),_n("invalid",s),Vn(d,"onChange");break;case"option":r=Me(s,n);break;case"select":s._wrapperState={wasMultiple:!!n.multiple},r=i({},n,{value:void 0}),_n("invalid",s),Vn(d,"onChange");break;case"textarea":ze(s,n),r=Ae(s,n),_n("invalid",s),Vn(d,"onChange");break;default:r=n}Bn(f,r),c=void 0,u=f;var m=s,v=r;for(c in v)if(v.hasOwnProperty(c)){var y=v[c];"style"===c?Fn(m,y):"dangerouslySetInnerHTML"===c?null!=(y=y?y.__html:void 0)&&Ve(m,y):"children"===c?"string"==typeof y?("textarea"!==u||""!==y)&&We(m,y):"number"==typeof y&&We(m,""+y):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(p.hasOwnProperty(c)?null!=y&&Vn(d,c):null!=y&&ke(m,c,y,h))}switch(f){case"input":Se(s),Ne(s,n,!1);break;case"textarea":Se(s),Le(s);break;case"option":null!=n.value&&s.setAttribute("value",""+xe(n.value));break;case"select":(r=s).multiple=!!n.multiple,null!=(s=n.value)?Re(r,!!n.multiple,s,!1):null!=n.defaultValue&&Re(r,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof r.onClick&&(s.onclick=Wn)}(a=Yn(l,a))&&ol(t)}null!==t.ref&&(t.effectTag|=128)}else if(null===t.stateNode)throw Error(o(166));break;case 6:if(n&&null!=t.stateNode)Xo(0,t,n.memoizedProps,a);else{if("string"!=typeof a&&null===t.stateNode)throw Error(o(166));r=Da(La.current),Da(za.current),Do(t)?(l=(a=t).stateNode,r=a.memoizedProps,l[ar]=a,(a=l.nodeValue!==r)&&ol(t)):(l=t,(a=(9===r.nodeType?r:r.ownerDocument).createTextNode(a))[ar]=l,t.stateNode=a)}break;case 11:break;case 13:if(ci(Va),a=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=r;break e}a=null!==a,l=!1,null===n?void 0!==t.memoizedProps.fallback&&Do(t):(l=null!==(r=n.memoizedState),a||null===r||null!==(r=n.child.sibling)&&(null!==(s=t.firstEffect)?(t.firstEffect=r,r.nextEffect=s):(t.firstEffect=t.lastEffect=r,r.nextEffect=null),r.effectTag=8)),a&&!l&&0!=(2&t.mode)&&(null===n&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Va.current)?0===Rl&&(Rl=3):(0!==Rl&&3!==Rl||(Rl=4),0!==Dl&&null!==Nl&&(Fu(Nl,Ml),Uu(Nl,Dl)))),(a||l)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:Ua();break;case 10:ia(t);break;case 9:case 14:break;case 17:vi(t.type)&&yi();break;case 19:if(ci(Va),null===(a=t.memoizedState))break;if(l=0!=(64&t.effectTag),null===(s=a.rendering)){if(l)ll(a,!1);else if(0!==Rl||null!==n&&0!=(64&n.effectTag))for(n=t.child;null!==n;){if(null!==(s=Wa(n))){for(t.effectTag|=64,ll(a,!1),null!==(l=s.updateQueue)&&(t.updateQueue=l,t.effectTag|=4),null===a.lastEffect&&(t.firstEffect=null),t.lastEffect=a.lastEffect,a=r,l=t.child;null!==l;)n=a,(r=l).effectTag&=2,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null,null===(s=r.alternate)?(r.childExpirationTime=0,r.expirationTime=n,r.child=null,r.memoizedProps=null,r.memoizedState=null,r.updateQueue=null,r.dependencies=null):(r.childExpirationTime=s.childExpirationTime,r.expirationTime=s.expirationTime,r.child=s.child,r.memoizedProps=s.memoizedProps,r.memoizedState=s.memoizedState,r.updateQueue=s.updateQueue,n=s.dependencies,r.dependencies=null===n?null:{expirationTime:n.expirationTime,firstContext:n.firstContext,responders:n.responders}),l=l.sibling;si(Va,1&Va.current|2),t=t.child;break e}n=n.sibling}}else{if(!l)if(null!==(n=Wa(s))){if(t.effectTag|=64,l=!0,null!==(r=n.updateQueue)&&(t.updateQueue=r,t.effectTag|=4),ll(a,!0),null===a.tail&&"hidden"===a.tailMode&&!s.alternate){null!==(t=t.lastEffect=a.lastEffect)&&(t.nextEffect=null);break}}else Bi()>a.tailExpiration&&1<r&&(t.effectTag|=64,l=!0,ll(a,!1),t.expirationTime=t.childExpirationTime=r-1);a.isBackwards?(s.sibling=t.child,t.child=s):(null!==(r=a.last)?r.sibling=s:t.child=s,a.last=s)}if(null!==a.tail){0===a.tailExpiration&&(a.tailExpiration=Bi()+500),r=a.tail,a.rendering=r,a.tail=r.sibling,a.lastEffect=t.lastEffect,r.sibling=null,a=Va.current,si(Va,a=l?1&a|2:1&a),t=r;break e}break;case 20:case 21:break;default:throw Error(o(156,t.tag))}t=null}if(a=jl,1===Ml||1!==a.childExpirationTime){for(l=0,r=a.child;null!==r;)(n=r.expirationTime)>l&&(l=n),(s=r.childExpirationTime)>l&&(l=s),r=r.sibling;a.childExpirationTime=l}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=jl.firstEffect),null!==jl.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=jl.firstEffect),e.lastEffect=jl.lastEffect),1<jl.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=jl:e.firstEffect=jl,e.lastEffect=jl))}else{if(null!==(t=ul(jl)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=jl.sibling))return t;jl=e}while(null!==jl);return 0===Rl&&(Rl=5),null}function yu(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function gu(e){var t=Hi();return Wi(99,bu.bind(null,e,t)),null}function bu(e,t){do{xu()}while(null!==ql);if(0!=(48&Ol))throw Error(o(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var i=yu(n);if(e.firstPendingTime=i,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Nl&&(jl=Nl=null,Ml=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,i=n.firstEffect):i=n:i=n.firstEffect,null!==i){var a=Ol;Ol|=32,Cl.current=null,Jn=Sn;var l=Kn();if(Qn(l)){if("selectionStart"in l)var u={start:l.selectionStart,end:l.selectionEnd};else e:{var c=(u=(u=l.ownerDocument)&&u.defaultView||window).getSelection&&u.getSelection();if(c&&0!==c.rangeCount){u=c.anchorNode;var s=c.anchorOffset,f=c.focusNode;c=c.focusOffset;try{u.nodeType,f.nodeType}catch(e){u=null;break e}var d=0,p=-1,h=-1,m=0,v=0,y=l,g=null;t:for(;;){for(var b;y!==u||0!==s&&3!==y.nodeType||(p=d+s),y!==f||0!==c&&3!==y.nodeType||(h=d+c),3===y.nodeType&&(d+=y.nodeValue.length),null!==(b=y.firstChild);)g=y,y=b;for(;;){if(y===l)break t;if(g===u&&++m===s&&(p=d),g===f&&++v===c&&(h=d),null!==(b=y.nextSibling))break;g=(y=g).parentNode}y=b}u=-1===p||-1===h?null:{start:p,end:h}}else u=null}u=u||{start:0,end:0}}else u=null;Zn={focusedElem:l,selectionRange:u},Sn=!1,Bl=i;do{try{wu()}catch(e){if(null===Bl)throw Error(o(330));Su(Bl,e),Bl=Bl.nextEffect}}while(null!==Bl);Bl=i;do{try{for(l=e,u=t;null!==Bl;){var w=Bl.effectTag;if(16&w&&We(Bl.stateNode,""),128&w){var x=Bl.alternate;if(null!==x){var k=x.ref;null!==k&&("function"==typeof k?k(null):k.current=null)}}switch(1038&w){case 2:gl(Bl),Bl.effectTag&=-3;break;case 6:gl(Bl),Bl.effectTag&=-3,wl(Bl.alternate,Bl);break;case 1024:Bl.effectTag&=-1025;break;case 1028:Bl.effectTag&=-1025,wl(Bl.alternate,Bl);break;case 4:wl(Bl.alternate,Bl);break;case 8:bl(l,s=Bl,u),vl(s)}Bl=Bl.nextEffect}}catch(e){if(null===Bl)throw Error(o(330));Su(Bl,e),Bl=Bl.nextEffect}}while(null!==Bl);if(k=Zn,x=Kn(),w=k.focusedElem,u=k.selectionRange,x!==w&&w&&w.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(w.ownerDocument.documentElement,w)){null!==u&&Qn(w)&&(x=u.start,void 0===(k=u.end)&&(k=x),"selectionStart"in w?(w.selectionStart=x,w.selectionEnd=Math.min(k,w.value.length)):(k=(x=w.ownerDocument||document)&&x.defaultView||window).getSelection&&(k=k.getSelection(),s=w.textContent.length,l=Math.min(u.start,s),u=void 0===u.end?l:Math.min(u.end,s),!k.extend&&l>u&&(s=u,u=l,l=s),s=Gn(w,l),f=Gn(w,u),s&&f&&(1!==k.rangeCount||k.anchorNode!==s.node||k.anchorOffset!==s.offset||k.focusNode!==f.node||k.focusOffset!==f.offset)&&((x=x.createRange()).setStart(s.node,s.offset),k.removeAllRanges(),l>u?(k.addRange(x),k.extend(f.node,f.offset)):(x.setEnd(f.node,f.offset),k.addRange(x))))),x=[];for(k=w;k=k.parentNode;)1===k.nodeType&&x.push({element:k,left:k.scrollLeft,top:k.scrollTop});for("function"==typeof w.focus&&w.focus(),w=0;w<x.length;w++)(k=x[w]).element.scrollLeft=k.left,k.element.scrollTop=k.top}Zn=null,Sn=!!Jn,Jn=null,e.current=n,Bl=i;do{try{for(w=r;null!==Bl;){var E=Bl.effectTag;if(36&E){var S=Bl.alternate;switch(k=w,(x=Bl).tag){case 0:case 11:case 15:hl(16,32,x);break;case 1:var _=x.stateNode;if(4&x.effectTag)if(null===S)_.componentDidMount();else{var T=x.elementType===x.type?S.memoizedProps:Zi(x.type,S.memoizedProps);_.componentDidUpdate(T,S.memoizedState,_.__reactInternalSnapshotBeforeUpdate)}var P=x.updateQueue;null!==P&&ga(0,P,_);break;case 3:var C=x.updateQueue;if(null!==C){if(l=null,null!==x.child)switch(x.child.tag){case 5:l=x.child.stateNode;break;case 1:l=x.child.stateNode}ga(0,C,l)}break;case 5:var O=x.stateNode;null===S&&4&x.effectTag&&Yn(x.type,x.memoizedProps)&&O.focus();break;case 6:case 4:case 12:break;case 13:if(null===x.memoizedState){var N=x.alternate;if(null!==N){var j=N.memoizedState;if(null!==j){var M=j.dehydrated;null!==M&&Tt(M)}}}break;case 19:case 17:case 20:case 21:break;default:throw Error(o(163))}}if(128&E){x=void 0;var R=Bl.ref;if(null!==R){var A=Bl.stateNode;switch(Bl.tag){case 5:x=A;break;default:x=A}"function"==typeof R?R(x):R.current=x}}Bl=Bl.nextEffect}}catch(e){if(null===Bl)throw Error(o(330));Su(Bl,e),Bl=Bl.nextEffect}}while(null!==Bl);Bl=null,Ii(),Ol=a}else e.current=n;if($l)$l=!1,ql=e,Gl=t;else for(Bl=i;null!==Bl;)t=Bl.nextEffect,Bl.nextEffect=null,Bl=t;if(0===(t=e.firstPendingTime)&&(Wl=null),1073741823===t?e===Jl?Ql++:(Ql=0,Jl=e):Ql=0,"function"==typeof Pu&&Pu(n.stateNode,r),ru(e),Hl)throw Hl=!1,e=Vl,Vl=null,e;return 0!=(8&Ol)||Gi(),null}function wu(){for(;null!==Bl;){var e=Bl.effectTag;0!=(256&e)&&pl(Bl.alternate,Bl),0==(512&e)||$l||($l=!0,$i(97,(function(){return xu(),null}))),Bl=Bl.nextEffect}}function xu(){if(90!==Gl){var e=97<Gl?97:Gl;return Gl=90,Wi(e,ku)}}function ku(){if(null===ql)return!1;var e=ql;if(ql=null,0!=(48&Ol))throw Error(o(331));var t=Ol;for(Ol|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:hl(128,0,n),hl(0,64,n)}}catch(t){if(null===e)throw Error(o(330));Su(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return Ol=t,Gi(),!0}function Eu(e,t,n){pa(e,t=El(e,t=cl(n,t),1073741823)),null!==(e=tu(e,1073741823))&&ru(e)}function Su(e,t){if(3===e.tag)Eu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Eu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Wl||!Wl.has(r))){pa(n,e=Sl(n,e=cl(t,e),1073741823)),null!==(n=tu(n,1073741823))&&ru(n);break}}n=n.return}}function _u(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Nl===e&&Ml===n?4===Rl||3===Rl&&1073741823===zl&&Bi()-Ul<500?uu(e,Ml):Fl=!0:Du(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,e.finishedExpirationTime===n&&(e.finishedExpirationTime=0,e.finishedWork=null),ru(e)))}function Tu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=Xl(t=Yl(),e,null)),null!==(e=tu(e,t))&&ru(e)}_l=function(e,t,n){var r=t.expirationTime;if(null!==e){var i=t.pendingProps;if(e.memoizedProps!==i||pi.current)Bo=!0;else{if(r<n){switch(Bo=!1,t.tag){case 3:Jo(t),Fo();break;case 5:if(Ba(t),4&t.mode&&1!==n&&i.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:vi(t.type)&&xi(t);break;case 4:Fa(t,t.stateNode.containerInfo);break;case 10:ra(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?tl(e,t,n):(si(Va,1&Va.current),null!==(t=al(e,t,n))?t.sibling:null);si(Va,1&Va.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return il(e,t,n);t.effectTag|=64}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null),si(Va,Va.current),!r)return null}return al(e,t,n)}Bo=!1}}else Bo=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,i=mi(t,di.current),oa(t,n),i=co(null,t,r,e,i,n),t.effectTag|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(t.tag=1,so(),vi(r)){var a=!0;xi(t)}else a=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null;var l=r.getDerivedStateFromProps;"function"==typeof l&&ka(t,r,l,e),i.updater=Ea,t.stateNode=i,i._reactInternalFiber=t,Pa(t,r,e,n),t=Qo(null,t,r,!0,a,n)}else t.tag=0,Ho(null,t,i,n),t=t.child;return t;case 16:if(i=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(i),1!==i._status)throw i._result;switch(i=i._result,t.type=i,a=t.tag=function(e){if("function"==typeof e)return ju(e)?1:0;if(null!=e){if((e=e.$$typeof)===W)return 11;if(e===G)return 14}return 2}(i),e=Zi(i,e),a){case 0:t=Go(null,t,i,e,n);break;case 1:t=Ko(null,t,i,e,n);break;case 11:t=Vo(null,t,i,e,n);break;case 14:t=Wo(null,t,i,Zi(i.type,e),r,n);break;default:throw Error(o(306,i,""))}return t;case 0:return r=t.type,i=t.pendingProps,Go(e,t,r,i=t.elementType===r?i:Zi(r,i),n);case 1:return r=t.type,i=t.pendingProps,Ko(e,t,r,i=t.elementType===r?i:Zi(r,i),n);case 3:if(Jo(t),null===(r=t.updateQueue))throw Error(o(282));if(i=null!==(i=t.memoizedState)?i.element:null,ya(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===i)Fo(),t=al(e,t,n);else{if((i=t.stateNode.hydrate)&&(Mo=nr(t.stateNode.containerInfo.firstChild),jo=t,i=Ro=!0),i)for(n=Ra(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Ho(e,t,r,n),Fo();t=t.child}return t;case 5:return Ba(t),null===e&&Io(t),r=t.type,i=t.pendingProps,a=null!==e?e.memoizedProps:null,l=i.children,Xn(r,i)?l=null:null!==a&&Xn(r,a)&&(t.effectTag|=16),qo(e,t),4&t.mode&&1!==n&&i.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Ho(e,t,l,n),t=t.child),t;case 6:return null===e&&Io(t),null;case 13:return tl(e,t,n);case 4:return Fa(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ma(t,null,r,n):Ho(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,Vo(e,t,r,i=t.elementType===r?i:Zi(r,i),n);case 7:return Ho(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ho(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,i=t.pendingProps,l=t.memoizedProps,ra(t,a=i.value),null!==l){var u=l.value;if(0===(a=Jr(u,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,a):1073741823))){if(l.children===i.children&&!pi.current){t=al(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var c=u.dependencies;if(null!==c){l=u.child;for(var s=c.firstContext;null!==s;){if(s.context===r&&0!=(s.observedBits&a)){1===u.tag&&((s=fa(n,null)).tag=2,pa(u,s)),u.expirationTime<n&&(u.expirationTime=n),null!==(s=u.alternate)&&s.expirationTime<n&&(s.expirationTime=n),aa(u.return,n),c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}}Ho(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=(a=t.pendingProps).children,oa(t,n),r=r(i=la(i,a.unstable_observedBits)),t.effectTag|=1,Ho(e,t,r,n),t.child;case 14:return a=Zi(i=t.type,t.pendingProps),Wo(e,t,i,a=Zi(i.type,a),r,n);case 15:return $o(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Zi(r,i),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,vi(r)?(e=!0,xi(t)):e=!1,oa(t,n),_a(t,r,i),Pa(t,r,i,n),Qo(null,t,r,!0,e,n);case 19:return il(e,t,n)}throw Error(o(156,t.tag))};var Pu=null,Cu=null;function Ou(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Nu(e,t,n,r){return new Ou(e,t,n,r)}function ju(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Mu(e,t){var n=e.alternate;return null===n?((n=Nu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ru(e,t,n,r,i,a){var l=2;if(r=e,"function"==typeof e)ju(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case D:return Au(n.children,i,a,t);case V:l=8,i|=7;break;case F:l=8,i|=1;break;case U:return(e=Nu(12,n,t,8|i)).elementType=U,e.type=U,e.expirationTime=a,e;case $:return(e=Nu(13,n,t,i)).type=$,e.elementType=$,e.expirationTime=a,e;case q:return(e=Nu(19,n,t,i)).elementType=q,e.expirationTime=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case B:l=10;break e;case H:l=9;break e;case W:l=11;break e;case G:l=14;break e;case K:l=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Nu(l,n,t,i)).elementType=e,t.type=r,t.expirationTime=a,t}function Au(e,t,n,r){return(e=Nu(7,e,r,t)).expirationTime=n,e}function zu(e,t,n){return(e=Nu(6,e,null,t)).expirationTime=n,e}function Iu(e,t,n){return(t=Nu(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Lu(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Du(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Fu(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Uu(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Bu(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Hu(e,t,n,r){var i=t.current,a=Yl(),l=wa.suspense;a=Xl(a,i,l);e:if(n){t:{if(tt(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(o(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(vi(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(o(171))}if(1===n.tag){var c=n.type;if(vi(c)){n=wi(n,c,u);break e}}n=u}else n=fi;return null===t.context?t.context=n:t.pendingContext=n,(t=fa(a,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),pa(i,t),eu(i,a),a}function Vu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Wu(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function $u(e,t){Wu(e,t),(e=e.alternate)&&Wu(e,t)}function qu(e,t,n){var r=new Lu(e,t,n=null!=n&&!0===n.hydrate),i=Nu(3,null,null,2===t?7:1===t?3:0);r.current=i,i.stateNode=r,e[lr]=r.current,n&&0!==t&&function(e){var t=An(e);vt.forEach((function(n){zn(n,e,t)})),yt.forEach((function(n){zn(n,e,t)}))}(9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function Gu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ku(e,t,n,r,i){var a=n._reactRootContainer;if(a){var o=a._internalRoot;if("function"==typeof i){var l=i;i=function(){var e=Vu(o);l.call(e)}}Hu(t,o,e,i)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new qu(e,0,t?{hydrate:!0}:void 0)}(n,r),o=a._internalRoot,"function"==typeof i){var u=i;i=function(){var e=Vu(o);u.call(e)}}lu((function(){Hu(t,o,e,i)}))}return Vu(o)}function Qu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:L,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Ju(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Gu(t))throw Error(o(200));return Qu(e,t,null,n)}qu.prototype.render=function(e,t){Hu(e,this._internalRoot,null,void 0===t?null:t)},qu.prototype.unmount=function(e){var t=this._internalRoot,n=void 0===e?null:e,r=t.containerInfo;Hu(null,t,null,(function(){r[lr]=null,null!==n&&n()}))},at=function(e){if(13===e.tag){var t=Ji(Yl(),150,100);eu(e,t),$u(e,t)}},ot=function(e){if(13===e.tag){Yl();var t=Qi++;eu(e,t),$u(e,t)}},lt=function(e){if(13===e.tag){var t=Yl();eu(e,t=Xl(t,e,null)),$u(e,t)}},ee=function(e,t,n){switch(t){case"input":if(Oe(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=fr(r);if(!i)throw Error(o(90));_e(r),Oe(r,i)}}}break;case"textarea":Ie(e,n);break;case"select":null!=(t=n.value)&&Re(e,!!n.multiple,t,!1)}},oe=ou,le=function(e,t,n,r){var i=Ol;Ol|=4;try{return Wi(98,e.bind(null,t,n,r))}finally{0===(Ol=i)&&Gi()}},ue=function(){0==(49&Ol)&&(function(){if(null!==Kl){var e=Kl;Kl=null,e.forEach((function(e,t){Bu(t,e),ru(t)})),Gi()}}(),xu())},ce=function(e,t){var n=Ol;Ol|=2;try{return e(t)}finally{0===(Ol=n)&&Gi()}};var Zu,Yu,Xu={createPortal:Ju,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw Error(o(268,Object.keys(e)))}return e=null===(e=it(t))?null:e.stateNode},hydrate:function(e,t,n){if(!Gu(t))throw Error(o(200));return Ku(null,e,t,!0,n)},render:function(e,t,n){if(!Gu(t))throw Error(o(200));return Ku(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){if(!Gu(n))throw Error(o(200));if(null==e||void 0===e._reactInternalFiber)throw Error(o(38));return Ku(e,t,n,!1,r)},unmountComponentAtNode:function(e){if(!Gu(e))throw Error(o(40));return!!e._reactRootContainer&&(lu((function(){Ku(null,null,e,!1,(function(){e._reactRootContainer=null,e[lr]=null}))})),!0)},unstable_createPortal:function(){return Ju.apply(void 0,arguments)},unstable_batchedUpdates:ou,flushSync:function(e,t){if(0!=(48&Ol))throw Error(o(187));var n=Ol;Ol|=1;try{return Wi(99,e.bind(null,t))}finally{Ol=n,Gi()}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[cr,sr,fr,j.injectEventPluginsByName,d,Rt,function(e){P(e,Mt)},ie,ae,Nn,N,xu,{current:!1}]}};Yu=(Zu={findFiberByHostInstance:ur,bundleType:0,version:"16.12.0",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Pu=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Cu=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(i({},Zu,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:R.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=it(e))?null:e.stateNode},findFiberByHostInstance:function(e){return Yu?Yu(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}));var ec={default:Xu},tc=ec&&Xu||ec;e.exports=tc.default||tc},function(e,t,n){"use strict";e.exports=n(36)},function(e,t,n){"use strict";
/** @license React v0.18.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,i,a,o,l;if(Object.defineProperty(t,"__esModule",{value:!0}),"undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,c=null,s=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(s,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==u?setTimeout(r,0,e):(u=e,setTimeout(s,0))},i=function(e,t){c=setTimeout(e,t)},a=function(){clearTimeout(c)},o=function(){return!1},l=t.unstable_forceFrameRate=function(){}}else{var d=window.performance,p=window.Date,h=window.setTimeout,m=window.clearTimeout;if("undefined"!=typeof console){var v=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof v&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof d&&"function"==typeof d.now)t.unstable_now=function(){return d.now()};else{var y=p.now();t.unstable_now=function(){return p.now()-y}}var g=!1,b=null,w=-1,x=5,k=0;o=function(){return t.unstable_now()>=k},l=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):x=0<e?Math.floor(1e3/e):5};var E=new MessageChannel,S=E.port2;E.port1.onmessage=function(){if(null!==b){var e=t.unstable_now();k=e+x;try{b(!0,e)?S.postMessage(null):(g=!1,b=null)}catch(e){throw S.postMessage(null),e}}else g=!1},r=function(e){b=e,g||(g=!0,S.postMessage(null))},i=function(e,n){w=h((function(){e(t.unstable_now())}),n)},a=function(){m(w),w=-1}}function _(e,t){var n=e.length;e.push(t);e:for(;;){var r=Math.floor((n-1)/2),i=e[r];if(!(void 0!==i&&0<C(i,t)))break e;e[r]=t,e[n]=i,n=r}}function T(e){return void 0===(e=e[0])?null:e}function P(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length;r<i;){var a=2*(r+1)-1,o=e[a],l=a+1,u=e[l];if(void 0!==o&&0>C(o,n))void 0!==u&&0>C(u,o)?(e[r]=u,e[l]=n,r=l):(e[r]=o,e[a]=n,r=a);else{if(!(void 0!==u&&0>C(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function C(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var O=[],N=[],j=1,M=null,R=3,A=!1,z=!1,I=!1;function L(e){for(var t=T(N);null!==t;){if(null===t.callback)P(N);else{if(!(t.startTime<=e))break;P(N),t.sortIndex=t.expirationTime,_(O,t)}t=T(N)}}function D(e){if(I=!1,L(e),!z)if(null!==T(O))z=!0,r(F);else{var t=T(N);null!==t&&i(D,t.startTime-e)}}function F(e,n){z=!1,I&&(I=!1,a()),A=!0;var r=R;try{for(L(n),M=T(O);null!==M&&(!(M.expirationTime>n)||e&&!o());){var l=M.callback;if(null!==l){M.callback=null,R=M.priorityLevel;var u=l(M.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?M.callback=u:M===T(O)&&P(O),L(n)}else P(O);M=T(O)}if(null!==M)var c=!0;else{var s=T(N);null!==s&&i(D,s.startTime-n),c=!1}return c}finally{M=null,R=r,A=!1}}function U(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var B=l;t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=R;R=e;try{return t()}finally{R=n}},t.unstable_next=function(e){switch(R){case 1:case 2:case 3:var t=3;break;default:t=R}var n=R;R=t;try{return e()}finally{R=n}},t.unstable_scheduleCallback=function(e,n,o){var l=t.unstable_now();if("object"==typeof o&&null!==o){var u=o.delay;u="number"==typeof u&&0<u?l+u:l,o="number"==typeof o.timeout?o.timeout:U(e)}else o=U(e),u=l;return e={id:j++,callback:n,priorityLevel:e,startTime:u,expirationTime:o=u+o,sortIndex:-1},u>l?(e.sortIndex=u,_(N,e),null===T(O)&&e===T(N)&&(I?a():I=!0,i(D,u-l))):(e.sortIndex=o,_(O,e),z||A||(z=!0,r(F))),e},t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_wrapCallback=function(e){var t=R;return function(){var n=R;R=t;try{return e.apply(this,arguments)}finally{R=n}}},t.unstable_getCurrentPriorityLevel=function(){return R},t.unstable_shouldYield=function(){var e=t.unstable_now();L(e);var n=T(O);return n!==M&&null!==M&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<M.expirationTime||o()},t.unstable_requestPaint=B,t.unstable_continueExecution=function(){z||A||(z=!0,r(F))},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return T(O)},t.unstable_Profiling=null},function(e,t,n){var r=n(38);e.exports=function(e){return r(e).replace(/[\W_]+(.|$)/g,(function(e,t){return t?" "+t:""})).trim()}},function(e,t){e.exports=function(e){return n.test(e)?e.toLowerCase():r.test(e)?(function(e){return e.replace(a,(function(e,t){return t?" "+t:""}))}(e)||e).toLowerCase():i.test(e)?function(e){return e.replace(o,(function(e,t,n){return t+" "+n.toLowerCase().split("").join(" ")}))}(e).toLowerCase():e.toLowerCase()};var n=/\s/,r=/(_|-|\.|:)/,i=/([a-z][A-Z]|[A-Z][a-z])/;var a=/[\W_]+(.|$)/g;var o=/(.)([A-Z]+)/g},function(e,t,n){"use strict";var r=n(40);function i(){}function a(){}a.resetWarningCache=i,e.exports=function(){function e(e,t,n,i,a,o){if(o!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:i};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.12.0
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,i=r?Symbol.for("react.element"):60103,a=r?Symbol.for("react.portal"):60106,o=r?Symbol.for("react.fragment"):60107,l=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116,g=r?Symbol.for("react.fundamental"):60117,b=r?Symbol.for("react.responder"):60118,w=r?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case i:switch(e=e.type){case f:case d:case o:case u:case l:case h:return e;default:switch(e=e&&e.$$typeof){case s:case p:case y:case v:case c:return e;default:return t}}case a:return t}}}function k(e){return x(e)===d}t.typeOf=x,t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=s,t.ContextProvider=c,t.Element=i,t.ForwardRef=p,t.Fragment=o,t.Lazy=y,t.Memo=v,t.Portal=a,t.Profiler=u,t.StrictMode=l,t.Suspense=h,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===d||e===u||e===l||e===h||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===v||e.$$typeof===c||e.$$typeof===s||e.$$typeof===p||e.$$typeof===g||e.$$typeof===b||e.$$typeof===w)},t.isAsyncMode=function(e){return k(e)||x(e)===f},t.isConcurrentMode=k,t.isContextConsumer=function(e){return x(e)===s},t.isContextProvider=function(e){return x(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===i},t.isForwardRef=function(e){return x(e)===p},t.isFragment=function(e){return x(e)===o},t.isLazy=function(e){return x(e)===y},t.isMemo=function(e){return x(e)===v},t.isPortal=function(e){return x(e)===a},t.isProfiler=function(e){return x(e)===u},t.isStrictMode=function(e){return x(e)===l},t.isSuspense=function(e){return x(e)===h}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){var r=n(6),i=n(44);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var a={insert:"head",singleton:!1},o=(r(i,a),i.locals?i.locals:{});e.exports=o},function(e,t,n){(t=n(7)(!1)).push([e.i,"@import url(https://fonts.googleapis.com/css?family=Ubuntu);"]),t.push([e.i,'html {\n  background: #333;\n  font-family: sans-serif;\n}\n\nh1 {\n  color: white;\n}\n\n.panel-container {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  min-width: 100%;\n  min-height: 100%;\n}\n\n.panel {\n  background: white;\n  border: 1px solid gray;\n  padding: 15px;\n}\n\n.resizer {\n  width: 8px;\n  background: darkGray;\n  position: relative;\n  cursor: col-resize;\n  -ms-flex-negative: 0;\n      flex-shrink: 0;\n  -webkit-user-select: none;\n  /* Chrome all / Safari all */\n  -moz-user-select: none;\n  /* Firefox all */\n  -ms-user-select: none;\n  /* IE 10+ */\n  user-select: none;\n  /* Likely future */\n}\n\n.resizer::after,\n.resizer::before {\n  content: "";\n  border-left: 1px solid #333;\n  position: absolute;\n  top: 50%;\n  -webkit-transform: translateY(-100%);\n          transform: translateY(-100%);\n  right: 0;\n  display: inline-block;\n  height: 20px;\n  margin: 0 2px;\n}\n\n.resizer::before {\n  left: 0;\n}',""]),e.exports=t},function(e,t,n){var r=n(6),i=n(46);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var a={insert:"head",singleton:!1},o=(r(i,a),i.locals?i.locals:{});e.exports=o},function(e,t,n){(t=n(7)(!1)).push([e.i,".header {\n  min-height: 100%;\n  width: -webkit-fit-content;\n  width: -moz-fit-content;\n  width: fit-content;\n  background-color: aliceblue;\n  padding: 5%;\n  color: dimgray;\n  -ms-flex-preferred-size: 30%;\n      flex-basis: 30%;\n  border-radius: 3px;\n}\n\n.header__personal {\n  -ms-flex-preferred-size: 100%;\n      flex-basis: 100%;\n}\n\n.header__photo {\n  width: 100%;\n}\n\n.header__photo:hover {\n  -webkit-transform: scale(1.45);\n          transform: scale(1.45);\n}\n\n.header__photo--img {\n  width: 100%;\n  height: 100%;\n  border-radius: 3px;\n}\n\n.header__name {\n  font-size: 12px;\n  font-weight: bold;\n  text-align: center;\n  color: navy;\n}\n\n.header__age {\n  font-size: 9px;\n  font-weight: bold;\n  text-align: center;\n}\n\n.header__age--title {\n  font-size: 8px;\n  font-weight: normal;\n}\n\n.header__icon {\n  width: 0.5em;\n  height: 0.5em;\n  font-size: 10px;\n}\n\n.header__icon:hover {\n  -webkit-transform: scale(1.3);\n          transform: scale(1.3);\n}\n\n.header__nav {\n  font-size: 12px;\n  padding: 10px 10px;\n  line-height: 25px;\n}\n\n.header__nav--firstlevel {\n  list-style-type: none;\n}\n\n.header__nav--firstlevel > li:hover {\n  color: navy;\n}\n\n.header__nav__link {\n  text-decoration: none;\n}\n\n.header__nav__link > svg {\n  font-size: 1,2em;\n}\n\n.header__nav--secondlevel {\n  margin-left: 20%;\n  font-size: 10px;\n  list-style-type: none;\n}\n\n.header__nav--secondlevel > li:hover {\n  color: darkred;\n}\n\n@media screen and (max-width: 600px) {\n  .header {\n    padding: 5px;\n    -ms-flex-preferred-size: 100%;\n        flex-basis: 100%;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-wrap: wrap;\n        flex-wrap: wrap;\n    height: -webkit-fit-content;\n    height: -moz-fit-content;\n    height: fit-content;\n  }\n  .header__personal {\n    -ms-flex-preferred-size: 30%;\n        flex-basis: 30%;\n  }\n  .header__nav {\n    font-size: 8px;\n    line-height: 12px;\n    -ms-flex-preferred-size: 70%;\n        flex-basis: 70%;\n  }\n  .header__nav__link > svg {\n    font-size: 1.5em;\n    height: 1.5em;\n  }\n}",""]),e.exports=t},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t){function n(){return e.exports=n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n.apply(this,arguments)}e.exports=n},function(e,t,n){var r=n(6),i=n(50);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var a={insert:"head",singleton:!1},o=(r(i,a),i.locals?i.locals:{});e.exports=o},function(e,t,n){(t=n(7)(!1)).push([e.i,".rightTitle {\n  -ms-flex-preferred-size: 70%;\n      flex-basis: 70%;\n  height: 90px;\n  background-color: gray;\n  border-radius: 3px;\n  color: white;\n  padding: 10px 20px;\n}\n\n.rightTitle--smallFont {\n  font-size: 10px;\n  color: lightgray;\n}\n\n.rightTitle--middleFont {\n  font-size: 11px;\n  color: white;\n}",""]),e.exports=t},function(e,t,n){var r=n(6),i=n(52);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var a={insert:"head",singleton:!1},o=(r(i,a),i.locals?i.locals:{});e.exports=o},function(e,t,n){(t=n(7)(!1)).push([e.i,".AboutMe {\n  font-size: 12px;\n  font-weight: bold;\n  overflow-y: auto;\n}\n\n.AboutMe--title {\n  color: navy;\n  font-weight: bold;\n  font-size: 14px;\n}\n\n.AboutMe--label {\n  font-size: 10px;\n  color: gray;\n}\n\n.AboutMe__item {\n  margin-top: 10px;\n}\n\n.AboutMe--language {\n  margin-left: 50px;\n}",""]),e.exports=t},function(e,t,n){var r=n(6),i=n(54);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var a={insert:"head",singleton:!1},o=(r(i,a),i.locals?i.locals:{});e.exports=o},function(e,t,n){(t=n(7)(!1)).push([e.i,".Education {\n  overflow-y: auto;\n}\n\n.EducationItem {\n  margin-top: 20px;\n}\n\n.EducationItem__title {\n  font-weight: bold;\n}\n\n.EducationItem__item {\n  margin-top: 10px;\n}\n\n.EducationItem--itemborder {\n  border: 1px solid lightgray;\n  padding: 0 10px 10px 10px;\n  margin-top: 10px;\n}",""]),e.exports=t},function(e,t,n){(t=n(7)(!1)).push([e.i,"@charset \"UTF-8\";\n.sertificates {\n  width: 100%;\n  height: 100%;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  -ms-flex-negative: 0;\n      flex-shrink: 0;\n  -webkit-box-pack: justify;\n      -ms-flex-pack: justify;\n          justify-content: space-between;\n  overflow-y: auto;\n  height: calc(100vh - 200px);\n}\n\n.sertificates__item {\n  -ms-flex-preferred-size: 30%;\n      flex-basis: 30%;\n  min-height: -webkit-fit-content;\n  min-height: -moz-fit-content;\n  min-height: fit-content;\n  height: auto;\n  text-align: center;\n  line-height: 20px;\n  border: 1px dotted lightslategray;\n  border-radius: 3px;\n  margin: 10px;\n  padding: 10px;\n  -webkit-box-flex: 0;\n      -ms-flex-positive: 0;\n          flex-grow: 0;\n}\n\n.sertificates__item--date {\n  font-size: 10px;\n  line-height: 18px;\n}\n\n.sertificates__item--name {\n  font-weight: bold;\n}\n\n.sertificates__img {\n  width: 100px;\n  height: 80px;\n  margin: 10px auto;\n}\n\n.sertificates__img--size {\n  width: 100%;\n  height: 100%;\n}\n\n.sertificates__large {\n  width: 100%;\n  margin-top: 10px;\n}\n\n.sertificates__close {\n  width: 20px;\n  height: 20px;\n  font-size: 10px;\n  line-height: 20px;\n  background-color: darkgray;\n  color: white;\n  font-weight: bold;\n  text-align: center;\n  border-radius: 50%;\n  margin-left: auto;\n  margin-bottom: 5px;\n}\n\n.sertificates__description {\n  margin-top: 20px;\n  font-size: 12px;\n  line-height: 28px;\n}\n\n.sertificates__description > ul {\n  list-style: none;\n}\n\n.sertificates__description > ul > li {\n  padding-left: 20px;\n  position: relative;\n  margin: 10px;\n}\n\n.sertificates__description > ul > li:before {\n  content: '✔';\n  position: absolute;\n  top: 0;\n  left: 0;\n  color: limegreen;\n}\n\n@media screen and (max-width: 1005px) {\n  .sertificates__item {\n    -ms-flex-preferred-size: 45%;\n        flex-basis: 45%;\n    margin: 5px;\n  }\n}",""]),e.exports=t},function(e,t,n){var r=n(6),i=n(57);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var a={insert:"head",singleton:!1},o=(r(i,a),i.locals?i.locals:{});e.exports=o},function(e,t,n){(t=n(7)(!1)).push([e.i,".contacts__item {\n  margin-top: 30px;\n  font-weight: bold;\n}\n\n.contacts_icon {\n  width: 20px;\n  height: 20px;\n  margin-right: 10px;\n}\n\n.contacts_icon:hover {\n  -webkit-transform: scale(1.2);\n          transform: scale(1.2);\n}\n\n.contacts_icon--vk {\n  width: 50px;\n  height: 50px;\n  margin-left: 30px;\n  z-index: 100;\n}\n\n.contacts_icon--vk:hover {\n  -webkit-transform: scale(5);\n          transform: scale(5);\n}",""]),e.exports=t},function(e,t,n){var r=n(6),i=n(59);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var a={insert:"head",singleton:!1},o=(r(i,a),i.locals?i.locals:{});e.exports=o},function(e,t,n){(t=n(7)(!1)).push([e.i,"@charset \"UTF-8\";\n.portfolio {\n  width: 100%;\n  height: 100%;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  -ms-flex-negative: 0;\n      flex-shrink: 0;\n  -webkit-box-pack: justify;\n      -ms-flex-pack: justify;\n          justify-content: space-between;\n  overflow-y: auto;\n  height: calc(100vh - 200px);\n}\n\n.portfolio__header {\n  width: 100%;\n  height: 20px;\n  font-size: 14px;\n  font-weight: bold;\n  text-align: center;\n  margin-top: 20px;\n}\n\n.portfolio__item {\n  -ms-flex-preferred-size: 30%;\n      flex-basis: 30%;\n  min-height: -webkit-fit-content;\n  min-height: -moz-fit-content;\n  min-height: fit-content;\n  height: auto;\n  text-align: center;\n  line-height: 20px;\n  border: 1px dotted lightslategray;\n  border-radius: 3px;\n  margin: 10px;\n  padding: 10px;\n  -webkit-box-flex: 0;\n      -ms-flex-positive: 0;\n          flex-grow: 0;\n  -ms-flex-item-align: stretch;\n      -ms-grid-row-align: stretch;\n      align-self: stretch;\n}\n\n.portfolio__item--date {\n  font-size: 10px;\n  line-height: 18px;\n}\n\n.portfolio__item--name {\n  font-weight: bold;\n}\n\n.portfolio__item--link > a {\n  text-decoration: none;\n}\n\n.portfolio__item--comment {\n  font-style: italic;\n}\n\n.portfolio__img {\n  width: 100px;\n  margin: 10px auto;\n}\n\n.portfolio__img--size {\n  width: 100%;\n  height: 100%;\n}\n\n.portfolio__large {\n  width: 100%;\n  margin-top: 10px;\n}\n\n.portfolio__close {\n  width: 20px;\n  height: 20px;\n  font-size: 10px;\n  line-height: 20px;\n  background-color: darkgray;\n  color: white;\n  font-weight: bold;\n  text-align: center;\n  border-radius: 50%;\n  margin-left: auto;\n  margin-bottom: 5px;\n}\n\n.portfolio__description {\n  margin-top: 20px;\n  font-size: 12px;\n  line-height: 28px;\n}\n\n.portfolio__description > ul {\n  list-style: none;\n}\n\n.portfolio__description > ul > li {\n  padding-left: 20px;\n  position: relative;\n  margin: 10px;\n}\n\n.portfolio__description > ul > li:before {\n  content: '✔';\n  position: absolute;\n  top: 0;\n  left: 0;\n  color: limegreen;\n}\n\n@media screen and (max-width: 600px) {\n  .portfolio__item {\n    -ms-flex-preferred-size: 90%;\n        flex-basis: 90%;\n  }\n}",""]),e.exports=t},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),a=n(10),o=n.n(a),l=n(3),u=n(5),c=n.n(u),s=n(1);function f(e){return"/"===e.charAt(0)}function d(e,t){for(var n=t,r=n+1,i=e.length;r<i;n+=1,r+=1)e[n]=e[r];e.pop()}var p=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],i=t&&t.split("/")||[],a=e&&f(e),o=t&&f(t),l=a||o;if(e&&f(e)?i=r:r.length&&(i.pop(),i=i.concat(r)),!i.length)return"/";if(i.length){var u=i[i.length-1];n="."===u||".."===u||""===u}else n=!1;for(var c=0,s=i.length;s>=0;s--){var p=i[s];"."===p?d(i,s):".."===p?(d(i,s),c++):c&&(d(i,s),c--)}if(!l)for(;c--;c)i.unshift("..");!l||""===i[0]||i[0]&&f(i[0])||i.unshift("");var h=i.join("/");return n&&"/"!==h.substr(-1)&&(h+="/"),h};var h=function(e,t){if(!e)throw new Error("Invariant failed")};function m(e){return"/"===e.charAt(0)?e:"/"+e}function v(e){return"/"===e.charAt(0)?e.substr(1):e}function y(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function g(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function b(e){var t=e.pathname,n=e.search,r=e.hash,i=t||"/";return n&&"?"!==n&&(i+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(i+="#"===r.charAt(0)?r:"#"+r),i}function w(e,t,n,r){var i;"string"==typeof e?(i=function(e){var t=e||"/",n="",r="",i=t.indexOf("#");-1!==i&&(r=t.substr(i),t=t.substr(0,i));var a=t.indexOf("?");return-1!==a&&(n=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(i=Object(s.a)({},e)).pathname&&(i.pathname=""),i.search?"?"!==i.search.charAt(0)&&(i.search="?"+i.search):i.search="",i.hash?"#"!==i.hash.charAt(0)&&(i.hash="#"+i.hash):i.hash="",void 0!==t&&void 0===i.state&&(i.state=t));try{i.pathname=decodeURI(i.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+i.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(i.key=n),r?i.pathname?"/"!==i.pathname.charAt(0)&&(i.pathname=p(i.pathname,r.pathname)):i.pathname=r.pathname:i.pathname||(i.pathname="/"),i}function x(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,i){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof r?r(a,i):i(!0):i(!1!==a)}else i(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var k=!("undefined"==typeof window||!window.document||!window.document.createElement);function E(e,t){t(window.confirm(e))}function S(){try{return window.history.state||{}}catch(e){return{}}}function _(e){void 0===e&&(e={}),k||h(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,i=!(-1===window.navigator.userAgent.indexOf("Trident")),a=e,o=a.forceRefresh,l=void 0!==o&&o,u=a.getUserConfirmation,c=void 0===u?E:u,f=a.keyLength,d=void 0===f?6:f,p=e.basename?g(m(e.basename)):"";function v(e){var t=e||{},n=t.key,r=t.state,i=window.location,a=i.pathname+i.search+i.hash;return p&&(a=y(a,p)),w(a,r,n)}function _(){return Math.random().toString(36).substr(2,d)}var T=x();function P(e){Object(s.a)(F,e),F.length=n.length,T.notifyListeners(F.location,F.action)}function C(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||j(v(e.state))}function O(){j(v(S()))}var N=!1;function j(e){if(N)N=!1,P();else{T.confirmTransitionTo(e,"POP",c,(function(t){t?P({action:"POP",location:e}):function(e){var t=F.location,n=R.indexOf(t.key);-1===n&&(n=0);var r=R.indexOf(e.key);-1===r&&(r=0);var i=n-r;i&&(N=!0,z(i))}(e)}))}}var M=v(S()),R=[M.key];function A(e){return p+b(e)}function z(e){n.go(e)}var I=0;function L(e){1===(I+=e)&&1===e?(window.addEventListener("popstate",C),i&&window.addEventListener("hashchange",O)):0===I&&(window.removeEventListener("popstate",C),i&&window.removeEventListener("hashchange",O))}var D=!1;var F={length:n.length,action:"POP",location:M,createHref:A,push:function(e,t){var i=w(e,t,_(),F.location);T.confirmTransitionTo(i,"PUSH",c,(function(e){if(e){var t=A(i),a=i.key,o=i.state;if(r)if(n.pushState({key:a,state:o},null,t),l)window.location.href=t;else{var u=R.indexOf(F.location.key),c=R.slice(0,u+1);c.push(i.key),R=c,P({action:"PUSH",location:i})}else window.location.href=t}}))},replace:function(e,t){var i=w(e,t,_(),F.location);T.confirmTransitionTo(i,"REPLACE",c,(function(e){if(e){var t=A(i),a=i.key,o=i.state;if(r)if(n.replaceState({key:a,state:o},null,t),l)window.location.replace(t);else{var u=R.indexOf(F.location.key);-1!==u&&(R[u]=i.key),P({action:"REPLACE",location:i})}else window.location.replace(t)}}))},go:z,goBack:function(){z(-1)},goForward:function(){z(1)},block:function(e){void 0===e&&(e=!1);var t=T.setPrompt(e);return D||(L(1),D=!0),function(){return D&&(D=!1,L(-1)),t()}},listen:function(e){var t=T.appendListener(e);return L(1),function(){L(-1),t()}}};return F}var T={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+v(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:v,decodePath:m},slash:{encodePath:m,decodePath:m}};function P(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function C(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function O(e){window.location.replace(P(window.location.href)+"#"+e)}function N(e){void 0===e&&(e={}),k||h(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,i=void 0===r?E:r,a=n.hashType,o=void 0===a?"slash":a,l=e.basename?g(m(e.basename)):"",u=T[o],c=u.encodePath,f=u.decodePath;function d(){var e=f(C());return l&&(e=y(e,l)),w(e)}var p=x();function v(e){Object(s.a)(F,e),F.length=t.length,p.notifyListeners(F.location,F.action)}var S=!1,_=null;function N(){var e,t,n=C(),r=c(n);if(n!==r)O(r);else{var a=d(),o=F.location;if(!S&&(t=a,(e=o).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(_===b(a))return;_=null,function(e){if(S)S=!1,v();else{p.confirmTransitionTo(e,"POP",i,(function(t){t?v({action:"POP",location:e}):function(e){var t=F.location,n=A.lastIndexOf(b(t));-1===n&&(n=0);var r=A.lastIndexOf(b(e));-1===r&&(r=0);var i=n-r;i&&(S=!0,z(i))}(e)}))}}(a)}}var j=C(),M=c(j);j!==M&&O(M);var R=d(),A=[b(R)];function z(e){t.go(e)}var I=0;function L(e){1===(I+=e)&&1===e?window.addEventListener("hashchange",N):0===I&&window.removeEventListener("hashchange",N)}var D=!1;var F={length:t.length,action:"POP",location:R,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=P(window.location.href)),n+"#"+c(l+b(e))},push:function(e,t){var n=w(e,void 0,void 0,F.location);p.confirmTransitionTo(n,"PUSH",i,(function(e){if(e){var t=b(n),r=c(l+t);if(C()!==r){_=t,function(e){window.location.hash=e}(r);var i=A.lastIndexOf(b(F.location)),a=A.slice(0,i+1);a.push(t),A=a,v({action:"PUSH",location:n})}else v()}}))},replace:function(e,t){var n=w(e,void 0,void 0,F.location);p.confirmTransitionTo(n,"REPLACE",i,(function(e){if(e){var t=b(n),r=c(l+t);C()!==r&&(_=t,O(r));var i=A.indexOf(b(F.location));-1!==i&&(A[i]=t),v({action:"REPLACE",location:n})}}))},go:z,goBack:function(){z(-1)},goForward:function(){z(1)},block:function(e){void 0===e&&(e=!1);var t=p.setPrompt(e);return D||(L(1),D=!0),function(){return D&&(D=!1,L(-1)),t()}},listen:function(e){var t=p.appendListener(e);return L(1),function(){L(-1),t()}}};return F}function j(e,t,n){return Math.min(Math.max(e,t),n)}function M(e){void 0===e&&(e={});var t=e,n=t.getUserConfirmation,r=t.initialEntries,i=void 0===r?["/"]:r,a=t.initialIndex,o=void 0===a?0:a,l=t.keyLength,u=void 0===l?6:l,c=x();function f(e){Object(s.a)(y,e),y.length=y.entries.length,c.notifyListeners(y.location,y.action)}function d(){return Math.random().toString(36).substr(2,u)}var p=j(o,0,i.length-1),h=i.map((function(e){return w(e,void 0,"string"==typeof e?d():e.key||d())})),m=b;function v(e){var t=j(y.index+e,0,y.entries.length-1),r=y.entries[t];c.confirmTransitionTo(r,"POP",n,(function(e){e?f({action:"POP",location:r,index:t}):f()}))}var y={length:h.length,action:"POP",location:h[p],index:p,entries:h,createHref:m,push:function(e,t){var r=w(e,t,d(),y.location);c.confirmTransitionTo(r,"PUSH",n,(function(e){if(e){var t=y.index+1,n=y.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),f({action:"PUSH",location:r,index:t,entries:n})}}))},replace:function(e,t){var r=w(e,t,d(),y.location);c.confirmTransitionTo(r,"REPLACE",n,(function(e){e&&(y.entries[y.index]=r,f({action:"REPLACE",location:r}))}))},go:v,goBack:function(){v(-1)},goForward:function(){v(1)},canGo:function(e){var t=y.index+e;return t>=0&&t<y.entries.length},block:function(e){return void 0===e&&(e=!1),c.setPrompt(e)},listen:function(e){return c.appendListener(e)}};return y}var R=n(17),A=n.n(R),z=n(23),I=n.n(z);function L(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}var D=i.a.createContext||function(e,t){var n,i,a="__create-react-context-"+I()()+"__",o=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).emitter=L(t.props.value),t}A()(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[a]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,i=e.value;((a=r)===(o=i)?0!==a||1/a==1/o:a!=a&&o!=o)?n=0:(n="function"==typeof t?t(r,i):1073741823,0!==(n|=0)&&this.emitter.set(e.value,n))}var a,o},r.render=function(){return this.props.children},n}(r.Component);o.childContextTypes=((n={})[a]=c.a.object.isRequired,n);var l=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}A()(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?1073741823:t},r.componentDidMount=function(){this.context[a]&&this.context[a].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?1073741823:e},r.componentWillUnmount=function(){this.context[a]&&this.context[a].off(this.onUpdate)},r.getValue=function(){return this.context[a]?this.context[a].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(r.Component);return l.contextTypes=((i={})[a]=c.a.object,i),{Provider:o,Consumer:l}},F=n(18),U=n.n(F),B=n(14),H=n(2),V=n(12),W=n.n(V),$=function(e){var t=D();return t.displayName=e,t}("Router"),q=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}Object(l.a)(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return i.a.createElement($.Provider,{children:this.props.children||null,value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}})},t}(i.a.Component);i.a.Component;i.a.Component;var G={},K=0;function Q(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,i=n.exact,a=void 0!==i&&i,o=n.strict,l=void 0!==o&&o,u=n.sensitive,c=void 0!==u&&u;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=G[n]||(G[n]={});if(r[e])return r[e];var i=[],a={regexp:U()(e,i,t),keys:i};return K<1e4&&(r[e]=a,K++),a}(n,{end:a,strict:l,sensitive:c}),i=r.regexp,o=r.keys,u=i.exec(e);if(!u)return null;var s=u[0],f=u.slice(1),d=e===s;return a&&!d?null:{path:n,url:"/"===n&&""===s?"/":s,isExact:d,params:o.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var J=function(e){function t(){return e.apply(this,arguments)||this}return Object(l.a)(t,e),t.prototype.render=function(){var e=this;return i.a.createElement($.Consumer,null,(function(t){t||h(!1);var n=e.props.location||t.location,r=e.props.computedMatch?e.props.computedMatch:e.props.path?Q(n.pathname,e.props):t.match,a=Object(s.a)({},t,{location:n,match:r}),o=e.props,l=o.children,u=o.component,c=o.render;return Array.isArray(l)&&0===l.length&&(l=null),i.a.createElement($.Provider,{value:a},a.match?l?"function"==typeof l?l(a):l:u?i.a.createElement(u,a):c?c(a):null:"function"==typeof l?l(a):null)}))},t}(i.a.Component);function Z(e){return"/"===e.charAt(0)?e:"/"+e}function Y(e,t){if(!e)return t;var n=Z(e);return 0!==t.pathname.indexOf(n)?t:Object(s.a)({},t,{pathname:t.pathname.substr(n.length)})}function X(e){return"string"==typeof e?e:b(e)}function ee(e){return function(){h(!1)}}function te(){}i.a.Component;var ne=function(e){function t(){return e.apply(this,arguments)||this}return Object(l.a)(t,e),t.prototype.render=function(){var e=this;return i.a.createElement($.Consumer,null,(function(t){t||h(!1);var n,r,a=e.props.location||t.location;return i.a.Children.forEach(e.props.children,(function(e){if(null==r&&i.a.isValidElement(e)){n=e;var o=e.props.path||e.props.from;r=o?Q(a.pathname,Object(s.a)({},e.props,{path:o})):t.match}})),r?i.a.cloneElement(n,{location:a,computedMatch:r}):null}))},t}(i.a.Component);i.a.useContext;var re=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(t=e.call.apply(e,[this].concat(r))||this).history=_(t.props),t}return Object(l.a)(t,e),t.prototype.render=function(){return i.a.createElement(q,{history:this.history,children:this.props.children})},t}(i.a.Component);i.a.Component;var ie=function(e,t){return"function"==typeof e?e(t):e},ae=function(e,t){return"string"==typeof e?w(e,null,null,t):e},oe=function(e){return e},le=i.a.forwardRef;void 0===le&&(le=oe);var ue=le((function(e,t){var n=e.innerRef,r=e.navigate,a=e.onClick,o=Object(H.a)(e,["innerRef","navigate","onClick"]),l=o.target,u=Object(s.a)({},o,{onClick:function(e){try{a&&a(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||l&&"_self"!==l||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return u.ref=oe!==le&&t||n,i.a.createElement("a",u)}));var ce=le((function(e,t){var n=e.component,r=void 0===n?ue:n,a=e.replace,o=e.to,l=e.innerRef,u=Object(H.a)(e,["component","replace","to","innerRef"]);return i.a.createElement($.Consumer,null,(function(e){e||h(!1);var n=e.history,c=ae(ie(o,e.location),e.location),f=c?n.createHref(c):"",d=Object(s.a)({},u,{href:f,navigate:function(){var t=ie(o,e.location);(a?n.replace:n.push)(t)}});return oe!==le?d.ref=t||l:d.innerRef=l,i.a.createElement(r,d)}))})),se=function(e){return e},fe=i.a.forwardRef;void 0===fe&&(fe=se);var de=fe((function(e,t){var n=e["aria-current"],r=void 0===n?"page":n,a=e.activeClassName,o=void 0===a?"active":a,l=e.activeStyle,u=e.className,c=e.exact,f=e.isActive,d=e.location,p=e.strict,m=e.style,v=e.to,y=e.innerRef,g=Object(H.a)(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","strict","style","to","innerRef"]);return i.a.createElement($.Consumer,null,(function(e){e||h(!1);var n=d||e.location,a=ae(ie(v,n),n),b=a.pathname,w=b&&b.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),x=w?Q(n.pathname,{path:w,exact:c,strict:p}):null,k=!!(f?f(x,n):x),E=k?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(u,o):u,S=k?Object(s.a)({},m,{},l):m,_=Object(s.a)({"aria-current":k&&r||null,className:E,style:S,to:a},g);return se!==fe?_.ref=t||y:_.innerRef=y,i.a.createElement(ce,_)}))})),pe=n(4),he=n.n(pe),me=function(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t},ve=function(e){return"function"==typeof e},ye=function(e){return e},ge=function(e){return Array.isArray(e)},be=function(e){return"string"==typeof e},we=function(e){return null==e},xe=function(e){return e[e.length-1]},ke=n(15),Ee=n.n(ke),Se=function(e){return-1===e.indexOf("/")?Ee()(e):e.split("/").map(Ee.a).join("/")},_e=function(e,t){return e.reduce((function(e,n){return t(e,n)}),{})},Te=function(e){return"undefined"!=typeof Map&&e instanceof Map};function Pe(e){if(Te(e))return Array.from(e.keys());if("undefined"!=typeof Reflect&&"function"==typeof Reflect.ownKeys)return Reflect.ownKeys(e);var t=Object.getOwnPropertyNames(e);return"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(e))),t}function Ce(e,t){return Te(t)?t.get(e):t[e]}var Oe=function(e){return function t(n,r,i,a){var o=void 0===r?{}:r,l=o.namespace,u=void 0===l?"/":l,c=o.prefix;return void 0===i&&(i={}),void 0===a&&(a=""),Pe(n).forEach((function(r){var o=function(e){return a||!c||c&&new RegExp("^"+c+u).test(e)?e:""+c+u+e}(function(e){var t;if(!a)return e;var n=e.toString().split("||"),r=a.split("||");return(t=[]).concat.apply(t,r.map((function(e){return n.map((function(t){return""+e+u+t}))}))).join("||")}(r)),l=Ce(r,n);e(l)?t(l,{namespace:u,prefix:c},i,o):i[o]=l})),i}},Ne=Oe(me);function je(e,t){var n=void 0===t?{}:t,r=n.namespace,i=void 0===r?"/":r,a=n.prefix;var o={};return Object.getOwnPropertyNames(e).forEach((function(t){var n=a?t.replace(""+a+i,""):t;return function t(n,r,i){var a=Se(i.shift());0===i.length?r[a]=e[n]:(r[a]||(r[a]={}),t(n,r[a],i))}(t,o,n.split(i))})),o}var Me=function(e){return null===e};function Re(e,t,n){void 0===t&&(t=ye),he()(ve(t)||Me(t),"Expected payloadCreator to be a function, undefined or null");var r=Me(t)||t===ye?ye:function(e){for(var n=arguments.length,r=new Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];return e instanceof Error?e:t.apply(void 0,[e].concat(r))},i=ve(n),a=e.toString(),o=function(){var t=r.apply(void 0,arguments),a={type:e};return t instanceof Error&&(a.error=!0),void 0!==t&&(a.payload=t),i&&(a.meta=n.apply(void 0,arguments)),a};return o.toString=function(){return a},o}function Ae(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){ze(e,t,n[t])}))}return e}function ze(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ie(e,t){return je(Le(Ne(e,t)),t)}function Le(e,t){var n=void 0===t?{}:t,r=n.prefix,i=n.namespace,a=void 0===i?"/":i;return _e(Object.keys(e),(function(t,n){var i,o=e[n];he()(function(e){if(ve(e)||we(e))return!0;if(ge(e)){var t=e[0],n=void 0===t?ye:t,r=e[1];return ve(n)&&ve(r)}return!1}(o),"Expected function, undefined, null, or array with payload and meta functions for "+n);var l=r?""+r+a+n:n,u=ge(o)?Re.apply(void 0,[l].concat(o)):Re(l,o);return Ae({},t,((i={})[n]=u,i))}))}function De(e,t){var n=Le(_e(e,(function(e,t){var n;return Ae({},e,((n={})[t]=ye,n))})),t);return _e(Object.keys(n),(function(e,t){var r;return Ae({},e,((r={})[Se(t)]=n[t],r))}))}var Fe=function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var i=me(xe(n))?n.pop():{};return he()(n.every(be)&&(be(e)||me(e)),"Expected optional object followed by string action types"),be(e)?De([e].concat(n),i):Ae({},Ie(e,i),De(n,i))}({LOAD_DATA:function(){return{}}}).loadData,Ue=i.a.createContext(null);var Be=function(e){e()},He={notify:function(){}};function Ve(){var e=Be,t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,i=n={callback:e,next:null,prev:n};return i.prev?i.prev.next=i:t=i,function(){r&&null!==t&&(r=!1,i.next?i.next.prev=i.prev:n=i.prev,i.prev?i.prev.next=i.next:t=i.next)}}}}var We=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=He,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=Ve())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=He)},e}();var $e=function(e){var t=e.store,n=e.context,a=e.children,o=Object(r.useMemo)((function(){var e=new We(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),l=Object(r.useMemo)((function(){return t.getState()}),[t]);Object(r.useEffect)((function(){var e=o.subscription;return e.trySubscribe(),l!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[o,l]);var u=n||Ue;return i.a.createElement(u.Provider,{value:o},a)},qe="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect,Ge=[],Ke=[null,null];function Qe(e,t){var n=e[1];return[t.payload,n+1]}function Je(e,t,n){qe((function(){return e.apply(void 0,t)}),n)}function Ze(e,t,n,r,i,a,o){e.current=r,t.current=i,n.current=!1,a.current&&(a.current=null,o())}function Ye(e,t,n,r,i,a,o,l,u,c){if(e){var s=!1,f=null,d=function(){if(!s){var e,n,d=t.getState();try{e=r(d,i.current)}catch(e){n=e,f=e}n||(f=null),e===a.current?o.current||u():(a.current=e,l.current=e,o.current=!0,c({type:"STORE_UPDATED",payload:{error:n}}))}};n.onStateChange=d,n.trySubscribe(),d();return function(){if(s=!0,n.tryUnsubscribe(),n.onStateChange=null,f)throw f}}}var Xe=function(){return[null,0]};function et(e,t){void 0===t&&(t={});var n=t,a=n.getDisplayName,o=void 0===a?function(e){return"ConnectAdvanced("+e+")"}:a,l=n.methodName,u=void 0===l?"connectAdvanced":l,c=n.renderCountProp,f=void 0===c?void 0:c,d=n.shouldHandleStateChanges,p=void 0===d||d,h=n.storeKey,m=void 0===h?"store":h,v=(n.withRef,n.forwardRef),y=void 0!==v&&v,g=n.context,b=void 0===g?Ue:g,w=Object(H.a)(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]),x=b;return function(t){var n=t.displayName||t.name||"Component",a=o(n),l=Object(s.a)({},w,{getDisplayName:o,methodName:u,renderCountProp:f,shouldHandleStateChanges:p,storeKey:m,displayName:a,wrappedComponentName:n,WrappedComponent:t}),c=w.pure;var d=c?r.useMemo:function(e){return e()};function h(n){var a=Object(r.useMemo)((function(){var e=n.forwardedRef,t=Object(H.a)(n,["forwardedRef"]);return[n.context,e,t]}),[n]),o=a[0],u=a[1],c=a[2],f=Object(r.useMemo)((function(){return o&&o.Consumer&&Object(B.isContextConsumer)(i.a.createElement(o.Consumer,null))?o:x}),[o,x]),h=Object(r.useContext)(f),m=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch);Boolean(h)&&Boolean(h.store);var v=m?n.store:h.store,y=Object(r.useMemo)((function(){return function(t){return e(t.dispatch,l)}(v)}),[v]),g=Object(r.useMemo)((function(){if(!p)return Ke;var e=new We(v,m?null:h.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[v,m,h]),b=g[0],w=g[1],k=Object(r.useMemo)((function(){return m?h:Object(s.a)({},h,{subscription:b})}),[m,h,b]),E=Object(r.useReducer)(Qe,Ge,Xe),S=E[0][0],_=E[1];if(S&&S.error)throw S.error;var T=Object(r.useRef)(),P=Object(r.useRef)(c),C=Object(r.useRef)(),O=Object(r.useRef)(!1),N=d((function(){return C.current&&c===P.current?C.current:y(v.getState(),c)}),[v,S,c]);Je(Ze,[P,T,O,c,N,C,w]),Je(Ye,[p,v,b,y,P,T,O,C,w,_],[v,b,y]);var j=Object(r.useMemo)((function(){return i.a.createElement(t,Object(s.a)({},N,{ref:u}))}),[u,t,N]);return Object(r.useMemo)((function(){return p?i.a.createElement(f.Provider,{value:k},j):j}),[f,j,k])}var v=c?i.a.memo(h):h;if(v.WrappedComponent=t,v.displayName=a,y){var g=i.a.forwardRef((function(e,t){return i.a.createElement(v,Object(s.a)({},e,{forwardedRef:t}))}));return g.displayName=a,g.WrappedComponent=t,W()(g,t)}return W()(v,t)}}function tt(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function nt(e,t){if(tt(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var i=0;i<n.length;i++)if(!Object.prototype.hasOwnProperty.call(t,n[i])||!tt(e[n[i]],t[n[i]]))return!1;return!0}var rt=n(16),it=function(){return Math.random().toString(36).substring(7).split("").join(".")},at={INIT:"@@redux/INIT"+it(),REPLACE:"@@redux/REPLACE"+it(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+it()}};function ot(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function lt(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(lt)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var i=e,a=t,o=[],l=o,u=!1;function c(){l===o&&(l=o.slice())}function s(){if(u)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return a}function f(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(u)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return c(),l.push(e),function(){if(t){if(u)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,c();var n=l.indexOf(e);l.splice(n,1),o=null}}}function d(e){if(!ot(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(u)throw new Error("Reducers may not dispatch actions.");try{u=!0,a=i(a,e)}finally{u=!1}for(var t=o=l,n=0;n<t.length;n++){(0,t[n])()}return e}function p(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");i=e,d({type:at.REPLACE})}function h(){var e,t=f;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(s())}return n(),{unsubscribe:t(n)}}})[rt.a]=function(){return this},e}return d({type:at.INIT}),(r={dispatch:d,subscribe:f,getState:s,replaceReducer:p})[rt.a]=h,r}function ut(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function ct(e,t){return function(){return t(e.apply(this,arguments))}}function st(e,t){if("function"==typeof e)return ct(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var i=e[r];"function"==typeof i&&(n[r]=ct(i,t))}return n}function ft(e){return function(t,n){var r=e(t,n);function i(){return r}return i.dependsOnOwnProps=!1,i}}function dt(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function pt(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=dt(e);var i=r(t,n);return"function"==typeof i&&(r.mapToProps=i,r.dependsOnOwnProps=dt(i),i=r(t,n)),i},r}}var ht=[function(e){return"function"==typeof e?pt(e):void 0},function(e){return e?void 0:ft((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?ft((function(t){return st(e,t)})):void 0}];var mt=[function(e){return"function"==typeof e?pt(e):void 0},function(e){return e?void 0:ft((function(){return{}}))}];function vt(e,t,n){return Object(s.a)({},n,{},e,{},t)}var yt=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,i=n.pure,a=n.areMergedPropsEqual,o=!1;return function(t,n,l){var u=e(t,n,l);return o?i&&a(u,r)||(r=u):(o=!0,r=u),r}}}(e):void 0},function(e){return e?void 0:function(){return vt}}];function gt(e,t,n,r){return function(i,a){return n(e(i,a),t(r,a),a)}}function bt(e,t,n,r,i){var a,o,l,u,c,s=i.areStatesEqual,f=i.areOwnPropsEqual,d=i.areStatePropsEqual,p=!1;function h(i,p){var h,m,v=!f(p,o),y=!s(i,a);return a=i,o=p,v&&y?(l=e(a,o),t.dependsOnOwnProps&&(u=t(r,o)),c=n(l,u,o)):v?(e.dependsOnOwnProps&&(l=e(a,o)),t.dependsOnOwnProps&&(u=t(r,o)),c=n(l,u,o)):y?(h=e(a,o),m=!d(h,l),l=h,m&&(c=n(l,u,o)),c):c}return function(i,s){return p?h(i,s):(l=e(a=i,o=s),u=t(r,o),c=n(l,u,o),p=!0,c)}}function wt(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,i=t.initMergeProps,a=Object(H.a)(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),o=n(e,a),l=r(e,a),u=i(e,a);return(a.pure?bt:gt)(o,l,u,e,a)}function xt(e,t,n){for(var r=t.length-1;r>=0;r--){var i=t[r](e);if(i)return i}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function kt(e,t){return e===t}function Et(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?et:n,i=t.mapStateToPropsFactories,a=void 0===i?mt:i,o=t.mapDispatchToPropsFactories,l=void 0===o?ht:o,u=t.mergePropsFactories,c=void 0===u?yt:u,f=t.selectorFactory,d=void 0===f?wt:f;return function(e,t,n,i){void 0===i&&(i={});var o=i,u=o.pure,f=void 0===u||u,p=o.areStatesEqual,h=void 0===p?kt:p,m=o.areOwnPropsEqual,v=void 0===m?nt:m,y=o.areStatePropsEqual,g=void 0===y?nt:y,b=o.areMergedPropsEqual,w=void 0===b?nt:b,x=Object(H.a)(o,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),k=xt(e,a,"mapStateToProps"),E=xt(t,l,"mapDispatchToProps"),S=xt(n,c,"mergeProps");return r(d,Object(s.a)({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:k,initMapDispatchToProps:E,initMergeProps:S,pure:f,areStatesEqual:h,areOwnPropsEqual:v,areStatePropsEqual:g,areMergedPropsEqual:w},x))}}var St=Et();var _t;_t=a.unstable_batchedUpdates,Be=_t;var Tt=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var r="function"!=typeof t[t.length-1]&&t.pop(),i=t;if(void 0===r)throw new TypeError("The initial state may not be undefined. If you do not want to set a value for this reducer, you can use null instead of undefined.");return function(e,t){for(var n=arguments.length,a=Array(n>2?n-2:0),o=2;o<n;o++)a[o-2]=arguments[o];var l=void 0===e,u=void 0===t;return l&&u&&r?r:i.reduce((function(e,n){return n.apply(void 0,[e,t].concat(a))}),l&&!u&&r?r:e)}};var Pt=Oe((function(e){return(me(e)||Te(e))&&(t=Pe(e),n=t.every((function(e){return"next"===e||"throw"===e})),!(t.length&&t.length<=2&&n));var t,n})),Ct=function(e){return e.toString()};var Ot={name:"Заглавнова Ольга Петровна",birthdate:"15 января 1979г.",wishJob:{name:"Frontend-разработчик",expirience:"до 1 года",workday:"Частичная занятость, полная занятость, проектная работа",schedule:"Удаленная работа, гибкий график, полный день"},aboutMe:{city:"г.Чебоксары",citizen:"РФ",gender:"женский",selfInformation:"Ответственная, исполнительная, целеустремленная. Без вп, с жп"},mainEducation:{year:"1996-2001",institute:"Чувашский государственный университет им. И.Н. Ульянова,Чебоксары",faculty:"Факультет Информатики и вычислительной техники, Программное обеспечение вычислительной техники и информационных систем"},additionalEducation:{1:{year:"2013",institute:"Школа технологий бизнеса",courseName:"Тренинг. Школа технологий бизнеса, Развитие управленческих компетенций. Инструменты эффективного руководителя."},2:{year:"2019-2020",institute:"GeekBrains",courseName:"Frontend-разработчик"}},qualification:[{year:"Август 2002 — Декабрь 2002, 5 месяцев",company:"ООО «АББ-Автоматизация»",companyLink:"http://new.abb.com/ru",city:"Чебоксары",job:"Инженер по АСУ Центра инжиниринга и НИОКР",duty:"Разработка экранов процесса, экранных форм для SCADA-системы MicroSCADA, разработка приложений для SCADA-системы MicroSCADA, MS Office на встроенном языке программирования SCIL, языках программирования VB, VBA."},{year:"Январь 2003 — Декабрь 2004, 2 года",company:"ООО «Компания МКН»",companyLink:"",city:"Чебоксары",job:"Инженер",duty:"разработка экранов процесса, экранных форм для SCADA-системы SPRECON, разработка приложений для SCADA-системы MicroSCADA, MS Office на встроенном языке программирования SCIL, языках программирования VB, VBA."},{year:"Январь 2005 — Сентябрь 2005, 9 месяцев",company:"ООО «АББ-Автоматизация»",companyLink:"http://new.abb.com/ru",city:"Чебоксары",job:"Инженер по АСУ Центра инжиниринга и НИОКР",duty:"Разработка экранов процесса, экранных форм для SCADA-системы MicroSCADA; разработка приложений для SCADA-системы MicroSCADA, MS Office на встроенном языке программирования SCIL, языках программирования VB, VBA."},{year:"Сентябрь 2005 — Июль 2008, 2 года 11 месяцев",company:"РТСофт, ЗАО",city:"Чебоксары",companyLink:"http://rtsoft.ru",job:"Инженер",duty:"Подготовка технико-коммерческих предложений (ТКП) на АСУ ТП для энергообъектов, подготовка технической, конкурсной документации для ТКП"},{year:"Июль 2008 — Ноябрь 2013, 5 лет 5 месяцев",company:"РТСофт, ЗАО",city:"Чебоксары",companyLink:"http://rtsoft.ru",job:"Старший инженер отдела системной интеграции",duty:"Разработка экранов процесса, форм отчетов для SCADA-системы SPRECON, разработка эксплуатационной документации на шкафы и систему АСУ ТП, разработка разделов рабочей документации, разработка приложений для SCADA-системы SPRECON, MS Office на языках программирования VB, VBA, C#."},{year:"Ноябрь 2013 — Апрель 2015, 1 год 6 месяцев",company:"РТСофт, ЗАО",city:"Чебоксары",companyLink:"http://rtsoft.ru",job:"Руководитель группы предпроектной подготовки",duty:"Организация работы группы предпроектной подготовки, постановка задач, контроль выполнения поставленных задач, подготовка и проверка технико-коммерческих предложений, подготовка и проверка технической, конкурсной документации для ТКП."},{year:"Апрель 2015 — Сентябрь 2016, 1 год 6 месяцев",company:"РТСофт, ЗАО",city:"Чебоксары",companyLink:"http://rtsoft.ru",job:"Главный специалист отдела системной интеграции",duty:"Подготовка технико-коммерческих предложений, подготовка технической, конкурсной документации для ТКП, конфигурирование SCADA-системы SPRECON, разработка эксплуатационной документации на шкафы и систему АСУ ТП, разработка разделов рабочей документации."},{year:"Сентябрь 2016 — ноябрь 2019, 3 года 2 месяца",company:"РТСофт, ЗАО",city:"Чебоксары",companyLink:"http://rtsoft.ru",job:"Декретный отпуск и отпуск по уходу за ребенком",duty:"Уход, кормление, пеленание, стирка, глажка, готовка, уборка, снова уход, кормление... И много-много счастья"},{year:"ноябрь 2019 - настоящее время",company:"РТСофт, ЗАО",city:"Чебоксары",companyLink:"http://rtsoft.ru",job:"Главный специалист отдела системной интеграции",duty:"Подготовка технико-коммерческих предложений."}],mainScills:["Опыт программирования на C#, VB, VBA","HTML5","CSS3","JavaScript","VueJS","ReactJS","REDUX","Bootstrap","LESS, SASS, SCSS","Git","SQL","Gulp, Webpack по документации и примерам"],languages:{russian:"Русский (родной)",english:"Английский (pre-intermidiate)"},car:"Права категории B, опыт вождения с 2008 года. Есть личный автомобиль.",contacts:{phone:"+7(905)346-52-75",icq:"195036360",skype:"smirnova.olga.1979",email:"olga.zaglavnova@mail.ru",vk:"@OlgaZaglavnova"},tests:[],sertificates:[{school:"Школа технологий бизнеса",fullName:"Развитие управленческих компетенций. Инструменты эффективного руководителя",date:"13-14 декабря 2013г.",description:[],src:"./Resume/img/sertificates/EffectiveLeader.png"},{school:"GeekBrains",fullName:"PHP. Личный блог",date:"17 ноября 2015г.",description:[],src:"./Resume/img/sertificates/Php_blog.png"},{school:"GeekBrains",fullName:"Git. Быстрый старт",date:"23 ноября 2015г.",description:[],src:"./Resume/img/sertificates/Git_quickStart.png"},{school:"GeekBrains",fullName:"Основы ООП",date:"27 ноября 2015г.",description:[],src:"./Resume/img/sertificates/Oop_base.png"},{school:"GeekBrains",fullName:"С#. Мини-программы",date:"1 декабря 2015г.",description:[],src:"./Resume/img/sertificates/Csharp_mini.png"},{school:"GeekBrains",fullName:"Основы программирования",date:"8 декабря 2015г.",description:[],src:"./Resume/img/sertificates/ProgrammingBase.png"},{school:"GeekBrains",fullName:"C#",description:["Коллекции","Платформа microsoft .net framework и среда visual studio .net","Работа с файловой системой и организация файлового ввода-вывода данных","Основные понятия и операторы языка с#","Классы и объекты","Массивы символы и строки"],date:"25 января 2016г.",src:"./Resume/img/tests/test_Csharp.png"},{school:"GeekBrains",fullName:"Основы программирования",description:["Основы программирования","Операторы и функции","Постановка задачи и алгоритмирование","Базовые понятия"],date:"25 января 2016г.",src:"./Resume/img/tests/test_ProgrammingBase.png"},{school:"GeekBrains",fullName:'C#. Викторина "Угадай мелодию"',date:"26 января 2016г.",description:[],src:"./Resume/img/sertificates/Csharp_vict.png"},{school:"GeekBrains",fullName:"Android. Быстрый старт",date:"17 февраля 2016г.",description:[],src:"./Resume/img/sertificates/Android.png"},{school:"GeekBrains",fullName:'Как создать личный блог: курс "Создание блога на Wordpress"',date:"26 февраля 2016г.",description:[],src:"./Resume/img/sertificates/Wordpress.png"},{school:"GeekBrains",fullName:"Веб-разработка. Быстрый старт",date:"16 августа 2018г.",description:[],src:"./Resume/img/sertificates/WebDev_quickStart.png"},{school:"GeekBrains",fullName:"HTML/CSS. Интерактивный курс",date:"2 сентября 2019г.",description:[],src:"./Resume/img/sertificates/HTML_CSS_1.png"},{school:"GeekBrains",fullName:"HTML&CSS",description:["Работа с блоками","Формы html","Теги и атрибуты html","Основы html и css","Селекторы css","Работа с текстом и таблицами"],date:"3 сентября 2019г.",src:"./Resume/img/tests/test_HTML_CSS.png"},{school:"GeekBrains",fullName:"HTML5 и CSS3",date:"19 октября 2019г.",description:[],src:"./Resume/img/sertificates/HTML_CSS_2.png"},{school:"GeekBrains",fullName:"Как стать программистом",date:"22 октября 2019г.",description:[],src:"./Resume/img/sertificates/ToBeProgrammer.png"},{school:"GeekBrains",fullName:"JavaScript. Уровень 1",date:"18 ноября 2019г.",description:[],src:"./Resume/img/sertificates/JavaScript1.png"},{school:"GeekBrains",fullName:"Английский для IT-специалистов",date:"2 декабря 2019г.",description:[],src:"./Resume/img/sertificates/EnglishForIT.png"},{school:"GeekBrains",fullName:"Основы баз данных",date:"12 декабря 2019г.",description:[],src:"./Resume/img/sertificates/DB_base.png"},{school:"GeekBrains",fullName:"JavaScript. Уровень 2",date:"10 января 2020г.",description:[],src:"./Resume/img/sertificates/JavaScript2.png"},{school:"GeekBrains",fullName:"Вёрстка сайтов на примере Landing Page",date:"13 января 2020г.",description:[],src:"./Resume/img/sertificates/LandingPage.png"},{school:"GeekBrains",fullName:"Автоматизация с помощью Gulp",date:"14 января 2020г.",description:[],src:"./Resume/img/sertificates/Gulp.png"},{school:"GeekBrains",fullName:"Верстаем landing page на HTML5",date:"10 февраля 2020г.",description:[],src:"./Resume/img/sertificates/LandingPage_HTML5.png"},{school:"GeekBrains",fullName:"ReactJS",date:"4 марта 2020г.",description:[],src:"./Resume/img/sertificates/ReactJS.png"}],portfolio_geekbrains:[{school:"GeekBrains",course:"HTML/CSS. Интерактивный курс",workName:"Верстка страницы",demolink:"https://olgazaglavnova.github.io/OZaglavnova_HTMLCSS1_lesson8",codelink:"https://github.com/OlgaZaglavnova/OlgaZaglavnova.github.io/tree/master/OZaglavnova_HTMLCSS1_lesson8",src:"./Resume/img/portfolio/HTMLCSS1_ht8.png",comment:"Работают пункты меню Home, Products и Products/Home"},{school:"GeekBrains",course:"HTML5 и CSS3",workName:"Верстка страницы",demolink:"https://olgazaglavnova.github.io/OZaglavnova_HTMLCSS2_lesson6/",codelink:"https://github.com/OlgaZaglavnova/OlgaZaglavnova.github.io/tree/master/OZaglavnova_HTMLCSS2_lesson6",src:"./Resume/img/portfolio/HTMLCSS2_ht6.png",comment:"При наведении на элементы выполняются эффекты трансформации"},{school:"GeekBrains",course:"HTML5 и CSS3",workName:"Верстка страницы",demolink:"https://olgazaglavnova.github.io/OZaglavnova_HTMLCSS2_lesson8/",codelink:"https://github.com/OlgaZaglavnova/OlgaZaglavnova.github.io/tree/master/OZaglavnova_HTMLCSS2_lesson8",src:"./Resume/img/portfolio/HTMLCSS2_ht8.png",comment:""},{school:"GeekBrains",course:"JavaScript. Уровень 1",workName:"Анимированное модальное окно",demolink:"https://olgazaglavnova.github.io/hometask5task3/",codelink:"https://github.com/OlgaZaglavnova/OlgaZaglavnova.github.io/tree/master/hometask5task3",src:"./Resume/img/portfolio/JS1_ht5t3.png",comment:'Нажмите на кнопку "Открыть модальное окно"'},{school:"GeekBrains",course:"JavaScript. Уровень 1",workName:"Карточки товара",demolink:"https://olgazaglavnova.github.io/hometask5task4/",codelink:"https://github.com/OlgaZaglavnova/OlgaZaglavnova.github.io/tree/master/hometask5task4",src:"./Resume/img/portfolio/JS1_ht5t4.png",comment:'При нажатии на кнопку "Подробнее" выводится текстовая информация о товаре, при нажатии на кнопку "Отмена" возвращается изображение товара '},{school:"GeekBrains",course:"JavaScript. Уровень 1",workName:"Шахматная доска",demolink:"https://olgazaglavnova.github.io/hometask5task5_6/",codelink:"https://github.com/OlgaZaglavnova/OlgaZaglavnova.github.io/tree/master/hometask5task5_6",src:"./Resume/img/portfolio/JS1_ht5t6.png",comment:'При нажатии на кнопку "Расставить фигуры" на доске расставляются шахматные фигуры '},{school:"",course:"Тестовое задание к одной из вакансий",workName:"Тестовое приложение для Android, написано на React Native",demolink:"https://yadi.sk/d/tsg7XvOzdtlmrw",codelink:"https://github.com/OlgaZaglavnova/Bokus-Test2",src:"./Resume/img/portfolio/bokus2.png",comment:'Для просмотра необходимо скачать файл "olgazaglavnova-testTwo.apk" на android-телефон и установить приложение.'}]};function Nt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function jt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Mt=function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var i=t[r];0,"function"==typeof e[i]&&(n[i]=e[i])}var a,o=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:at.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:at.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+at.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var r=!1,i={},l=0;l<o.length;l++){var u=o[l],c=n[u],s=e[u],f=c(s,t);if(void 0===f){var d=ut(u,t);throw new Error(d)}i[u]=f,r=r||f!==s}return(r=r||o.length!==Object.keys(e).length)?i:e}}({myReducer:function(e,t,n){void 0===n&&(n={}),he()(me(e)||Te(e),"Expected handlers to be a plain object.");var r=Pt(e,n),i=Pe(r).map((function(e){return function(e,t,n){void 0===t&&(t=ye);var r=Ct(e).split("||");he()(!(void 0===n),"defaultState for reducer handling "+r.join(", ")+" should be defined"),he()(ve(t)||me(t),"Expected reducer to be a function or object with next and throw reducers");var i=ve(t)?[t,t]:[t.next,t.throw].map((function(e){return we(e)?ye:e})),a=i[0],o=i[1];return function(e,t){void 0===e&&(e=n);var i=t.type;return i&&-1!==r.indexOf(Ct(i))?(!0===t.error?o:a)(e,t):e}}(e,Ce(e,r),t)})),a=Tt.apply(void 0,i.concat([t]));return function(e,n){return void 0===e&&(e=t),a(e,n)}}(jt({},Fe,(function(e){return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Nt(Object(n),!0).forEach((function(t){jt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Nt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e,{myData:Ot})})),{myData:{}})});n(43);function Rt(e){return(Rt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function At(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function zt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function It(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?zt(Object(n),!0).forEach((function(t){Lt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):zt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Lt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Dt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ft(e,t){return!t||"object"!==Rt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ut(e){return(Ut=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Bt(e,t){return(Bt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}i.a.Component;var Ht=n(24),Vt=n.n(Ht),Wt=n(25),$t=n.n(Wt),qt=n(27),Gt=n.n(qt),Kt=n(26),Qt=n.n(Kt),Jt=n(28),Zt=n.n(Jt),Yt=n(29),Xt=n.n(Yt),en=n(30),tn=n.n(en),nn=(n(45),St((function(e,t){return{myData:e.myReducer.myData}}),(function(e){return st({loadData:Fe},e)}))((function(e){var t=e.myData;return i.a.createElement("div",{className:"header"},i.a.createElement("div",{className:"header__personal"},i.a.createElement("div",{className:"header__photo"},i.a.createElement("img",{className:"header__photo--img",src:"./Resume/img/myPhoto3.jpg",alt:""})),i.a.createElement("div",{className:"header__name"},t.name),i.a.createElement("div",{className:"header__age"},i.a.createElement("span",{className:"header__age--title"},"дата рождения: "),i.a.createElement("br",null),t.birthdate)),i.a.createElement("nav",{className:"header__nav"},i.a.createElement("ul",{className:"header__nav--firstlevel"},i.a.createElement("li",null,i.a.createElement(de,{to:"/aboutMe",className:"header__nav__link"},i.a.createElement(Vt.a,{className:"header__icon"}),i.a.createElement("span",null," Обо мне"),i.a.createElement("br",null))),i.a.createElement("li",null,i.a.createElement(de,{to:"/education",className:"header__nav__link"},i.a.createElement($t.a,{className:"header__icon"})," Образование:"),i.a.createElement("ul",{className:"header__nav--secondlevel"},i.a.createElement(de,{to:"/education/main",className:"header__nav__link"},i.a.createElement("li",null,"  Основное")),i.a.createElement(de,{to:"/education/additional",className:"header__nav__link"},i.a.createElement("li",null,"  Дополнительное")))),i.a.createElement("li",null,i.a.createElement(de,{to:"/qualification",className:"header__nav__link"},i.a.createElement(Qt.a,{className:"header__icon"})," Опыт работы")),i.a.createElement("li",null,i.a.createElement(de,{to:"/scills",className:"header__nav__link"},i.a.createElement(Gt.a,{className:"header__icon"})," Навыки")),i.a.createElement("li",null,i.a.createElement(de,{to:"/portfolio",className:"header__nav__link"},i.a.createElement(Zt.a,{className:"header__icon"})," Портфолио")),i.a.createElement("li",null,i.a.createElement(de,{to:"/sertificates",className:"header__nav__link"},i.a.createElement(Xt.a,{className:"header__icon"})," Сертификаты")),i.a.createElement("li",null,i.a.createElement(de,{to:"/contacts",className:"header__nav__link"},i.a.createElement(tn.a,{className:"header__icon"})," Контакты")))))}))),rn=(n(49),St((function(e,t){return{wishJob:e.myReducer.myData.wishJob}}),(function(e){return st({loadData:Fe},e)}))((function(e){var t=e.wishJob;return i.a.createElement("div",{className:"rightTitle"},i.a.createElement("div",null,t.name),i.a.createElement("div",{className:"rightTitle--smallFont"},"Опыт работы: ",i.a.createElement("span",{className:"rightTitle--middleFont"},t.expirience)),i.a.createElement("div",{className:"rightTitle--smallFont"},"Занятость:",i.a.createElement("span",{className:"rightTitle--middleFont"},t.workday)),i.a.createElement("div",{className:"rightTitle--smallFont"},"График работы:",i.a.createElement("span",{className:"rightTitle--middleFont"},t.schedule)))}))),an=(n(51),St((function(e,t){var n=e.myReducer;return{aboutMe:n.myData.aboutMe,languages:n.myData.languages,car:n.myData.car}}),(function(e){return st({loadData:Fe},e)}))((function(e){var t=e.aboutMe,n=e.languages,r=e.car;return i.a.createElement("div",{className:"infoPage"},i.a.createElement("div",{className:"infoPage__header"},"Обо мне"),i.a.createElement("div",{className:"AboutMe"},i.a.createElement("div",{className:"AboutMe__item"},i.a.createElement("span",{className:"AboutMe--label"},"Место жительства: "),t.city),i.a.createElement("div",{className:"AboutMe__item"},i.a.createElement("span",{className:"AboutMe--label"},"Гражданство: "),t.citizen),i.a.createElement("div",{className:"AboutMe__item"},i.a.createElement("span",{className:"AboutMe--label"},"Пол: "),t.gender),i.a.createElement("div",{className:"AboutMe__item"},i.a.createElement("span",{className:"AboutMe--label"},"О себе: "),t.selfInformation),i.a.createElement("div",{className:"AboutMe__item"},i.a.createElement("span",{className:"AboutMe--label"},"Языки: ")),i.a.createElement("div",{className:"AboutMe__item"},i.a.createElement("span",{className:"AboutMe--language"},n.russian)),i.a.createElement("div",{className:"AboutMe__item"},i.a.createElement("span",{className:"AboutMe--language"},n.english)),i.a.createElement("div",{className:"AboutMe__item"},i.a.createElement("span",{className:"AboutMe--label"},"Авто: "),r)))}))),on=(n(53),function(e){var t=e.mainEducation;return i.a.createElement("div",{className:"EducationItem"},i.a.createElement("div",{className:"EducationItem__title"},"Высшее"),i.a.createElement("div",{className:"EducationItem--itemborder"},i.a.createElement("div",{className:"EducationItem__item"},t.year),i.a.createElement("div",{className:"EducationItem__item"},t.institute),i.a.createElement("div",{className:"EducationItem__item"},t.faculty)))}),ln=function(e){var t=e.additionalEducationItem;return i.a.createElement("div",{className:"EducationItem--itemborder"},i.a.createElement("div",{className:"EducationItem__item"},t.year),i.a.createElement("div",{className:"EducationItem__item"},t.institute),i.a.createElement("div",{className:"EducationItem__item"},t.courseName))};function un(){return(un=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var cn=St((function(e,t){var n=e.myReducer;return{mainEducation:n.myData.mainEducation,additionalEducation:n.myData.additionalEducation}}),(function(e){return st({loadData:Fe},e)}))((function(e){var t=e.mainEducation,n=e.additionalEducation;return i.a.createElement("div",{className:"infoPage"},i.a.createElement("div",{className:"infoPage__header"},"Образование"),i.a.createElement("div",{className:"Education"},i.a.createElement(on,{mainEducation:t}),i.a.createElement("div",{className:"EducationItem"},i.a.createElement("div",{className:"EducationItem__title"},"Дополнительное:"),Object.keys(n).map((function(e,t){return i.a.createElement(ln,un({additionalEducationItem:n[e]},{idx:t,key:t}))})))))})),sn=St((function(e,t){return{mainEducation:e.myReducer.myData.mainEducation}}),(function(e){return st({loadData:Fe},e)}))((function(e){var t=e.mainEducation;return i.a.createElement("div",{className:"infoPage"},i.a.createElement("div",{className:"infoPage__header"},"Базовое образование"),i.a.createElement(on,{mainEducation:t}))}));function fn(){return(fn=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var dn=St((function(e,t){return{additionalEducation:e.myReducer.myData.additionalEducation}}),(function(e){return st({loadData:Fe},e)}))((function(e){var t=e.additionalEducation;return i.a.createElement("div",{className:"infoPage"},i.a.createElement("div",{className:"infoPage__header"},"Дополнительное образование"),Object.keys(t).map((function(e,n){return i.a.createElement(ln,fn({additionalEducationItem:t[e]},{idx:n,key:n}))})))})),pn=function(e){var t=e.qualificationItem;return i.a.createElement("div",{className:"EducationItem--itemborder"},i.a.createElement("div",{className:"EducationItem__item"},t.year),i.a.createElement("div",{className:"EducationItem__item"},t.company),i.a.createElement("div",{className:"EducationItem__item"},i.a.createElement("a",{href:t.companyLink,target:"_blank"},t.companyLink)),i.a.createElement("div",{className:"EducationItem__item"},t.city),i.a.createElement("div",{className:"EducationItem__item"},t.job),i.a.createElement("div",{className:"EducationItem__item"},t.duty))};function hn(){return(hn=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var mn=St((function(e,t){return{qualification:e.myReducer.myData.qualification.reverse()}}),(function(e){return st({loadData:Fe},e)}))((function(e){var t=e.qualification;return i.a.createElement("div",{className:"infoPage"},i.a.createElement("div",{className:"infoPage__header"},"Опыт работы:"),i.a.createElement("div",{className:"scroll-y"},Object.keys(t).map((function(e,n){return i.a.createElement(pn,hn({qualificationItem:t[e]},{idx:n,key:n}))}))))})),vn=function(e){var t=e.scillsItem;return i.a.createElement("div",{className:"EducationItem--itemborder"},i.a.createElement("div",{className:"EducationItem__item"},t))};function yn(){return(yn=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var gn=St((function(e,t){return{scills:e.myReducer.myData.mainScills}}),(function(e){return st({loadData:Fe},e)}))((function(e){var t=e.scills;return i.a.createElement("div",{className:"infoPage"},i.a.createElement("div",{className:"infoPage__header"},"Навыки:"),i.a.createElement("div",{className:"scroll-y"},Object.keys(t).map((function(e,n){return i.a.createElement(vn,yn({scillsItem:t[e]},{idx:n,key:n}))}))))})),bn=function(e){var t=e.sertificateItem,n="/sertificates/"+e.idx;return i.a.createElement("div",{className:"sertificates__item"},i.a.createElement(de,{to:n,className:"header__nav__link"},i.a.createElement("div",{className:"sertificates__img"},i.a.createElement("img",{src:t.src,alt:"sertificate",className:"sertificates__img--size"})),i.a.createElement("div",null,t.school),i.a.createElement("div",{className:"sertificates__item--date"},t.date),i.a.createElement("div",{className:"sertificates__item--name"},t.fullName)))};n(21);function wn(){return(wn=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var xn=St((function(e,t){return{sertificates:e.myReducer.myData.sertificates}}),(function(e){return st({loadData:Fe},e)}))((function(e){var t=e.sertificates;return i.a.createElement("div",{className:"infoPage"},i.a.createElement("div",{className:"infoPage__header"},"Сертификаты:"),i.a.createElement("div",{className:"sertificates"},t.map((function(e,t){return i.a.createElement(bn,wn({sertificateItem:e},{idx:t,key:t}))}))))})),kn=St((function(e,t){var n=e.myReducer,r=t.match.params.id;return{sertificate:n.myData.sertificates[r]}}),(function(e){return st({loadData:Fe},e)}))((function(e){var t=e.sertificate;return i.a.createElement("div",{className:"infoPage"},i.a.createElement(de,{to:"/sertificates",className:"header__nav__link"},i.a.createElement("div",{className:"sertificates__close"},String.fromCharCode(10060))),i.a.createElement("div",{className:"infoPage__header"},t.fullName),i.a.createElement("div",null,i.a.createElement("a",{href:t.src,target:"_blank"},i.a.createElement("img",{src:t.src,alt:"Sertificate",className:"sertificates__large"}))),i.a.createElement("div",{className:"sertificates__description"},i.a.createElement("ul",null,t.description.map((function(e,t){return i.a.createElement("li",{key:t},e)})))))})),En=(n(56),St((function(e,t){return{contacts:e.myReducer.myData.contacts}}),(function(e){return st({loadData:Fe},e)}))((function(e){var t=e.contacts;return i.a.createElement("div",{className:"infoPage"},i.a.createElement("div",{className:"infoPage__header"},"Контакты:"),i.a.createElement("div",{className:"contacts__item"},i.a.createElement("img",{className:"contacts_icon",src:"./Resume/img/phone.png",alt:"phone"}),i.a.createElement("img",{className:"contacts_icon",src:"./Resume/img/viber.png",alt:"viber"}),i.a.createElement("img",{className:"contacts_icon",src:"./Resume/img/Whatsapp.png",alt:"wattsapp"}),i.a.createElement("img",{className:"contacts_icon",src:"./Resume/img/telegram.png",alt:"telegram"}),t.phone),i.a.createElement("div",{className:"contacts__item"},i.a.createElement("img",{className:"contacts_icon",src:"./Resume/img/email.png",alt:"email"}),t.email),i.a.createElement("div",{className:"contacts__item"},i.a.createElement("img",{className:"contacts_icon",src:"./Resume/img/vk.png",alt:"vk"}),t.vk,i.a.createElement("img",{className:"contacts_icon--vk",src:"./Resume/img/VK_qr.png",alt:"vk-qr"})),i.a.createElement("div",{className:"contacts__item"},i.a.createElement("img",{className:"contacts_icon",src:"./Resume/img/skype.png",alt:"skype"}),t.skype),i.a.createElement("div",{className:"contacts__item"},i.a.createElement("img",{className:"contacts_icon",src:"./Resume/img/icq.png",alt:"icq"}),t.icq))}))),Sn=function(e){var t=e.portfolioItem;e.idx;return i.a.createElement("div",{className:"portfolio__item"},i.a.createElement("div",{className:"portfolio__img"},i.a.createElement("img",{src:t.src,alt:"portfolio-work",className:"portfolio__img--size"})),i.a.createElement("div",null,t.school),i.a.createElement("div",{className:"portfolio__item--date"},t.course),i.a.createElement("div",{className:"portfolio__item--name"},t.workName),i.a.createElement("div",{className:"portfolio__item--link"},i.a.createElement("a",{href:t.demolink,target:"_blank"},"Демонстрация")),i.a.createElement("div",{className:"portfolio__item--link"},i.a.createElement("a",{href:t.codelink,target:"_blank"},"Исходный код")),i.a.createElement("div",{className:"portfolio__item--comment"},t.comment))};n(58);function _n(){return(_n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var Tn=St((function(e,t){return{portfolio_geekbrains:e.myReducer.myData.portfolio_geekbrains}}),(function(e){return st({loadData:Fe},e)}))((function(e){var t=e.portfolio_geekbrains;return i.a.createElement("div",{className:"infoPage"},i.a.createElement("div",{className:"infoPage__header"},"Портфолио:"),i.a.createElement("div",{className:"portfolio"},i.a.createElement("div",{className:"portfolio__header"},"Учебные работы:"),t.map((function(e,t){return i.a.createElement(Sn,_n({portfolioItem:e},{idx:t,key:t}))}))))})),Pn=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return lt(Mt,e)}();Pn.dispatch(Fe()),o.a.render(i.a.createElement($e,{store:Pn},i.a.createElement(re,null,i.a.createElement(nn,null),i.a.createElement("div",{className:"main"},i.a.createElement(rn,null),i.a.createElement(ne,null,i.a.createElement(J,{exact:!0,path:"/",component:function(){return i.a.createElement("div",{className:"infoPage"},i.a.createElement("div",null,"Здравствуйте, дорогие товарищи! Добро пожаловать в мое резюме =)"),i.a.createElement("div",null,"Hello, Mr or Mrs! You are welcome to my CV"))}}),i.a.createElement(J,{exact:!0,path:"/aboutMe",component:an}),i.a.createElement(J,{exact:!0,path:"/education",component:cn}),i.a.createElement(J,{path:"/education/main",component:sn}),i.a.createElement(J,{path:"/education/additional",component:dn}),i.a.createElement(J,{path:"/qualification",component:mn}),i.a.createElement(J,{path:"/scills",component:gn}),i.a.createElement(J,{path:"/portfolio",component:Tn}),i.a.createElement(J,{exact:!0,path:"/sertificates",component:xn}),i.a.createElement(J,{path:"/sertificates/:id",component:kn}),i.a.createElement(J,{path:"/contacts",component:En}))))),document.getElementById("root"))},function(e,t,n){"use strict";n.r(t);var r=n(1),i=n(2);function a(e,t){if(null==e)return{};var n,r,a=Object(i.a)(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=n(0),l=n.n(o);n(5);function u(e){var t,n,r="";if(e)if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=u(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(n=u(t))&&(r&&(r+=" "),r+=n);else"boolean"==typeof e||e.call||(r&&(r+=" "),r+=e);return r}var c=function(){for(var e,t=0,n="";t<arguments.length;)(e=u(arguments[t++]))&&(n&&(n+=" "),n+=e);return n},s=n(12),f=n.n(s),d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},p="object"===("undefined"==typeof window?"undefined":d(window))&&"object"===("undefined"==typeof document?"undefined":d(document))&&9===document.nodeType;n(9);function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function m(e,t,n){return t&&h(e.prototype,t),n&&h(e,n),e}var v=n(3);function y(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var g={}.constructor;function b(e){if(null==e||"object"!=typeof e)return e;if(Array.isArray(e))return e.map(b);if(e.constructor!==g)return e;var t={};for(var n in e)t[n]=b(e[n]);return t}function w(e,t,n){void 0===e&&(e="unnamed");var r=n.jss,i=b(t),a=r.plugins.onCreateRule(e,i,n);return a||(e[0],null)}var x=function(e,t){for(var n="",r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=t),n+=e[r];return n};function k(e,t){if(void 0===t&&(t=!1),!Array.isArray(e))return e;var n="";if(Array.isArray(e[0]))for(var r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=", "),n+=x(e[r]," ");else n=x(e,", ");return t||"!important"!==e[e.length-1]||(n+=" !important"),n}function E(e,t){for(var n="",r=0;r<t;r++)n+="  ";return n+e}function S(e,t,n){void 0===n&&(n={});var r="";if(!t)return r;var i=n.indent,a=void 0===i?0:i,o=t.fallbacks;if(e&&a++,o)if(Array.isArray(o))for(var l=0;l<o.length;l++){var u=o[l];for(var c in u){var s=u[c];null!=s&&(r&&(r+="\n"),r+=""+E(c+": "+k(s)+";",a))}}else for(var f in o){var d=o[f];null!=d&&(r&&(r+="\n"),r+=""+E(f+": "+k(d)+";",a))}for(var p in t){var h=t[p];null!=h&&"fallbacks"!==p&&(r&&(r+="\n"),r+=""+E(p+": "+k(h)+";",a))}return(r||n.allowEmpty)&&e?(r&&(r="\n"+r+"\n"),E(e+" {"+r,--a)+E("}",a)):r}var _=/([[\].#*$><+~=|^:(),"'`\s])/g,T="undefined"!=typeof CSS&&CSS.escape,P=function(e){return T?T(e):e.replace(_,"\\$1")},C=function(){function e(e,t,n){this.type="style",this.key=void 0,this.isProcessed=!1,this.style=void 0,this.renderer=void 0,this.renderable=void 0,this.options=void 0;var r=n.sheet,i=n.Renderer;this.key=e,this.options=n,this.style=t,r?this.renderer=r.renderer:i&&(this.renderer=new i)}return e.prototype.prop=function(e,t,n){if(void 0===t)return this.style[e];var r=!!n&&n.force;if(!r&&this.style[e]===t)return this;var i=t;n&&!1===n.process||(i=this.options.jss.plugins.onChangeValue(t,e,this));var a=null==i||!1===i,o=e in this.style;if(a&&!o&&!r)return this;var l=a&&o;if(l?delete this.style[e]:this.style[e]=i,this.renderable&&this.renderer)return l?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,i),this;var u=this.options.sheet;return u&&u.attached,this},e}(),O=function(e){function t(t,n,r){var i;(i=e.call(this,t,n,r)||this).selectorText=void 0,i.id=void 0,i.renderable=void 0;var a=r.selector,o=r.scoped,l=r.sheet,u=r.generateId;return a?i.selectorText=a:!1!==o&&(i.id=u(y(y(i)),l),i.selectorText="."+P(i.id)),i}Object(v.a)(t,e);var n=t.prototype;return n.applyTo=function(e){var t=this.renderer;if(t){var n=this.toJSON();for(var r in n)t.setProperty(e,r,n[r])}return this},n.toJSON=function(){var e={};for(var t in this.style){var n=this.style[t];"object"!=typeof n?e[t]=n:Array.isArray(n)&&(e[t]=k(n))}return e},n.toString=function(e){var t=this.options.sheet,n=!!t&&t.options.link?Object(r.a)({},e,{allowEmpty:!0}):e;return S(this.selectorText,this.style,n)},m(t,[{key:"selector",set:function(e){if(e!==this.selectorText){this.selectorText=e;var t=this.renderer,n=this.renderable;if(n&&t)t.setSelector(n,e)||t.replaceRule(n,this)}},get:function(){return this.selectorText}}]),t}(C),N={onCreateRule:function(e,t,n){return"@"===e[0]||n.parent&&"keyframes"===n.parent.type?null:new O(e,t,n)}},j={indent:1,children:!0},M=/@([\w-]+)/,R=function(){function e(e,t,n){this.type="conditional",this.at=void 0,this.key=void 0,this.query=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.query=n.name;var i=e.match(M);for(var a in this.at=i?i[1]:"unknown",this.options=n,this.rules=new te(Object(r.a)({},n,{parent:this})),t)this.rules.add(a,t[a]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.indexOf=function(e){return this.rules.indexOf(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r?(this.options.jss.plugins.onProcessRule(r),r):null},t.toString=function(e){if(void 0===e&&(e=j),null==e.indent&&(e.indent=j.indent),null==e.children&&(e.children=j.children),!1===e.children)return this.query+" {}";var t=this.rules.toString(e);return t?this.query+" {\n"+t+"\n}":""},e}(),A=/@media|@supports\s+/,z={onCreateRule:function(e,t,n){return A.test(e)?new R(e,t,n):null}},I={indent:1,children:!0},L=/@keyframes\s+([\w-]+)/,D=function(){function e(e,t,n){this.type="keyframes",this.at="@keyframes",this.key=void 0,this.name=void 0,this.id=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0;var i=e.match(L);i&&i[1]?this.name=i[1]:this.name="noname",this.key=this.type+"-"+this.name,this.options=n;var a=n.scoped,o=n.sheet,l=n.generateId;for(var u in this.id=!1===a?this.name:P(l(this,o)),this.rules=new te(Object(r.a)({},n,{parent:this})),t)this.rules.add(u,t[u],Object(r.a)({},n,{parent:this}));this.rules.process()}return e.prototype.toString=function(e){if(void 0===e&&(e=I),null==e.indent&&(e.indent=I.indent),null==e.children&&(e.children=I.children),!1===e.children)return this.at+" "+this.id+" {}";var t=this.rules.toString(e);return t&&(t="\n"+t+"\n"),this.at+" "+this.id+" {"+t+"}"},e}(),F=/@keyframes\s+/,U=/\$([\w-]+)/g,B=function(e,t){return"string"==typeof e?e.replace(U,(function(e,n){return n in t?t[n]:e})):e},H=function(e,t,n){var r=e[t],i=B(r,n);i!==r&&(e[t]=i)},V={onCreateRule:function(e,t,n){return"string"==typeof e&&F.test(e)?new D(e,t,n):null},onProcessStyle:function(e,t,n){return"style"===t.type&&n?("animation-name"in e&&H(e,"animation-name",n.keyframes),"animation"in e&&H(e,"animation",n.keyframes),e):e},onChangeValue:function(e,t,n){var r=n.options.sheet;if(!r)return e;switch(t){case"animation":case"animation-name":return B(e,r.keyframes);default:return e}}},W=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(t=e.call.apply(e,[this].concat(r))||this).renderable=void 0,t}return Object(v.a)(t,e),t.prototype.toString=function(e){var t=this.options.sheet,n=!!t&&t.options.link?Object(r.a)({},e,{allowEmpty:!0}):e;return S(this.key,this.style,n)},t}(C),$={onCreateRule:function(e,t,n){return n.parent&&"keyframes"===n.parent.type?new W(e,t,n):null}},q=function(){function e(e,t,n){this.type="font-face",this.at="@font-face",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.style)){for(var t="",n=0;n<this.style.length;n++)t+=S(this.key,this.style[n]),this.style[n+1]&&(t+="\n");return t}return S(this.key,this.style,e)},e}(),G={onCreateRule:function(e,t,n){return"@font-face"===e?new q(e,t,n):null}},K=function(){function e(e,t,n){this.type="viewport",this.at="@viewport",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){return S(this.key,this.style,e)},e}(),Q={onCreateRule:function(e,t,n){return"@viewport"===e||"@-ms-viewport"===e?new K(e,t,n):null}},J=function(){function e(e,t,n){this.type="simple",this.key=void 0,this.value=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.value=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.value)){for(var t="",n=0;n<this.value.length;n++)t+=this.key+" "+this.value[n]+";",this.value[n+1]&&(t+="\n");return t}return this.key+" "+this.value+";"},e}(),Z={"@charset":!0,"@import":!0,"@namespace":!0},Y=[N,z,V,$,G,Q,{onCreateRule:function(e,t,n){return e in Z?new J(e,t,n):null}}],X={process:!0},ee={force:!0,process:!0},te=function(){function e(e){this.map={},this.raw={},this.index=[],this.counter=0,this.options=void 0,this.classes=void 0,this.keyframes=void 0,this.options=e,this.classes=e.classes,this.keyframes=e.keyframes}var t=e.prototype;return t.add=function(e,t,n){var i=this.options,a=i.parent,o=i.sheet,l=i.jss,u=i.Renderer,c=i.generateId,s=i.scoped,f=Object(r.a)({classes:this.classes,parent:a,sheet:o,jss:l,Renderer:u,generateId:c,scoped:s,name:e},n),d=e;e in this.raw&&(d=e+"-d"+this.counter++),this.raw[d]=t,d in this.classes&&(f.selector="."+P(this.classes[d]));var p=w(d,t,f);if(!p)return null;this.register(p);var h=void 0===f.index?this.index.length:f.index;return this.index.splice(h,0,p),p},t.get=function(e){return this.map[e]},t.remove=function(e){this.unregister(e),delete this.raw[e.key],this.index.splice(this.index.indexOf(e),1)},t.indexOf=function(e){return this.index.indexOf(e)},t.process=function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)},t.register=function(e){this.map[e.key]=e,e instanceof O?(this.map[e.selector]=e,e.id&&(this.classes[e.key]=e.id)):e instanceof D&&this.keyframes&&(this.keyframes[e.name]=e.id)},t.unregister=function(e){delete this.map[e.key],e instanceof O?(delete this.map[e.selector],delete this.classes[e.key]):e instanceof D&&delete this.keyframes[e.name]},t.update=function(){var e,t,n;if("string"==typeof(arguments.length<=0?void 0:arguments[0])?(e=arguments.length<=0?void 0:arguments[0],t=arguments.length<=1?void 0:arguments[1],n=arguments.length<=2?void 0:arguments[2]):(t=arguments.length<=0?void 0:arguments[0],n=arguments.length<=1?void 0:arguments[1],e=null),e)this.updateOne(this.map[e],t,n);else for(var r=0;r<this.index.length;r++)this.updateOne(this.index[r],t,n)},t.updateOne=function(t,n,r){void 0===r&&(r=X);var i=this.options,a=i.jss.plugins,o=i.sheet;if(t.rules instanceof e)t.rules.update(n,r);else{var l=t,u=l.style;if(a.onUpdate(n,t,o,r),r.process&&u&&u!==l.style){for(var c in a.onProcessStyle(l.style,l,o),l.style){var s=l.style[c];s!==u[c]&&l.prop(c,s,ee)}for(var f in u){var d=l.style[f],p=u[f];null==d&&d!==p&&l.prop(f,null,ee)}}}},t.toString=function(e){for(var t="",n=this.options.sheet,r=!!n&&n.options.link,i=0;i<this.index.length;i++){var a=this.index[i].toString(e);(a||r)&&(t&&(t+="\n"),t+=a)}return t},e}(),ne=function(){function e(e,t){for(var n in this.options=void 0,this.deployed=void 0,this.attached=void 0,this.rules=void 0,this.renderer=void 0,this.classes=void 0,this.keyframes=void 0,this.queue=void 0,this.attached=!1,this.deployed=!1,this.classes={},this.keyframes={},this.options=Object(r.a)({},t,{sheet:this,parent:this,classes:this.classes,keyframes:this.keyframes}),t.Renderer&&(this.renderer=new t.Renderer(this)),this.rules=new te(this.options),e)this.rules.add(n,e[n]);this.rules.process()}var t=e.prototype;return t.attach=function(){return this.attached||(this.renderer&&this.renderer.attach(),this.attached=!0,this.deployed||this.deploy()),this},t.detach=function(){return this.attached?(this.renderer&&this.renderer.detach(),this.attached=!1,this):this},t.addRule=function(e,t,n){var r=this.queue;this.attached&&!r&&(this.queue=[]);var i=this.rules.add(e,t,n);return i?(this.options.jss.plugins.onProcessRule(i),this.attached?this.deployed?(r?r.push(i):(this.insertRule(i),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0)),i):i:(this.deployed=!1,i)):null},t.insertRule=function(e){this.renderer&&this.renderer.insertRule(e)},t.addRules=function(e,t){var n=[];for(var r in e){var i=this.addRule(r,e[r],t);i&&n.push(i)}return n},t.getRule=function(e){return this.rules.get(e)},t.deleteRule=function(e){var t="object"==typeof e?e:this.rules.get(e);return!!t&&(this.rules.remove(t),!(this.attached&&t.renderable&&this.renderer)||this.renderer.deleteRule(t.renderable))},t.indexOf=function(e){return this.rules.indexOf(e)},t.deploy=function(){return this.renderer&&this.renderer.deploy(),this.deployed=!0,this},t.update=function(){var e;return(e=this.rules).update.apply(e,arguments),this},t.updateOne=function(e,t,n){return this.rules.updateOne(e,t,n),this},t.toString=function(e){return this.rules.toString(e)},e}(),re=function(){function e(){this.plugins={internal:[],external:[]},this.registry=void 0}var t=e.prototype;return t.onCreateRule=function(e,t,n){for(var r=0;r<this.registry.onCreateRule.length;r++){var i=this.registry.onCreateRule[r](e,t,n);if(i)return i}return null},t.onProcessRule=function(e){if(!e.isProcessed){for(var t=e.options.sheet,n=0;n<this.registry.onProcessRule.length;n++)this.registry.onProcessRule[n](e,t);e.style&&this.onProcessStyle(e.style,e,t),e.isProcessed=!0}},t.onProcessStyle=function(e,t,n){for(var r=0;r<this.registry.onProcessStyle.length;r++)t.style=this.registry.onProcessStyle[r](t.style,t,n)},t.onProcessSheet=function(e){for(var t=0;t<this.registry.onProcessSheet.length;t++)this.registry.onProcessSheet[t](e)},t.onUpdate=function(e,t,n,r){for(var i=0;i<this.registry.onUpdate.length;i++)this.registry.onUpdate[i](e,t,n,r)},t.onChangeValue=function(e,t,n){for(var r=e,i=0;i<this.registry.onChangeValue.length;i++)r=this.registry.onChangeValue[i](r,t,n);return r},t.use=function(e,t){void 0===t&&(t={queue:"external"});var n=this.plugins[t.queue];-1===n.indexOf(e)&&(n.push(e),this.registry=[].concat(this.plugins.external,this.plugins.internal).reduce((function(e,t){for(var n in t)n in e&&e[n].push(t[n]);return e}),{onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}))},e}(),ie=new(function(){function e(){this.registry=[]}var t=e.prototype;return t.add=function(e){var t=this.registry,n=e.options.index;if(-1===t.indexOf(e))if(0===t.length||n>=this.index)t.push(e);else for(var r=0;r<t.length;r++)if(t[r].options.index>n)return void t.splice(r,0,e)},t.reset=function(){this.registry=[]},t.remove=function(e){var t=this.registry.indexOf(e);this.registry.splice(t,1)},t.toString=function(e){for(var t=void 0===e?{}:e,n=t.attached,r=Object(i.a)(t,["attached"]),a="",o=0;o<this.registry.length;o++){var l=this.registry[o];null!=n&&l.attached!==n||(a&&(a+="\n"),a+=l.toString(r))}return a},m(e,[{key:"index",get:function(){return 0===this.registry.length?0:this.registry[this.registry.length-1].options.index}}]),e}()),ae="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")(),oe="2f1acc6c3a606b082e5eef5e54414ffb";null==ae[oe]&&(ae[oe]=0);var le=ae[oe]++,ue=function(e){void 0===e&&(e={});var t=0;return function(n,r){t+=1;var i="",a="";return r&&(r.options.classNamePrefix&&(a=r.options.classNamePrefix),null!=r.options.jss.id&&(i=String(r.options.jss.id))),e.minify?""+(a||"c")+le+i+t:a+n.key+"-"+le+(i?"-"+i:"")+"-"+t}},ce=function(e){var t;return function(){return t||(t=e()),t}};function se(e,t){try{return e.attributeStyleMap?e.attributeStyleMap.get(t):e.style.getPropertyValue(t)}catch(e){return""}}function fe(e,t,n){try{var r=n;if(Array.isArray(n)&&(r=k(n,!0),"!important"===n[n.length-1]))return e.style.setProperty(t,r,"important"),!0;e.attributeStyleMap?e.attributeStyleMap.set(t,r):e.style.setProperty(t,r)}catch(e){return!1}return!0}function de(e,t){try{e.attributeStyleMap?e.attributeStyleMap.delete(t):e.style.removeProperty(t)}catch(e){}}function pe(e,t){return e.selectorText=t,e.selectorText===t}var he=ce((function(){return document.querySelector("head")}));function me(e){var t=ie.registry;if(t.length>0){var n=function(e,t){for(var n=0;n<e.length;n++){var r=e[n];if(r.attached&&r.options.index>t.index&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e);if(n&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element};if((n=function(e,t){for(var n=e.length-1;n>=0;n--){var r=e[n];if(r.attached&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e))&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element.nextSibling}}var r=e.insertionPoint;if(r&&"string"==typeof r){var i=function(e){for(var t=he(),n=0;n<t.childNodes.length;n++){var r=t.childNodes[n];if(8===r.nodeType&&r.nodeValue.trim()===e)return r}return null}(r);if(i)return{parent:i.parentNode,node:i.nextSibling}}return!1}var ve=ce((function(){var e=document.querySelector('meta[property="csp-nonce"]');return e?e.getAttribute("content"):null})),ye=function(e,t,n){var r=e.cssRules.length;(void 0===n||n>r)&&(n=r);try{if("insertRule"in e)e.insertRule(t,n);else if("appendRule"in e){e.appendRule(t)}}catch(e){return!1}return e.cssRules[n]},ge=function(){function e(e){this.getPropertyValue=se,this.setProperty=fe,this.removeProperty=de,this.setSelector=pe,this.element=void 0,this.sheet=void 0,this.hasInsertedRules=!1,e&&ie.add(e),this.sheet=e;var t=this.sheet?this.sheet.options:{},n=t.media,r=t.meta,i=t.element;this.element=i||function(){var e=document.createElement("style");return e.textContent="\n",e}(),this.element.setAttribute("data-jss",""),n&&this.element.setAttribute("media",n),r&&this.element.setAttribute("data-meta",r);var a=ve();a&&this.element.setAttribute("nonce",a)}var t=e.prototype;return t.attach=function(){if(!this.element.parentNode&&this.sheet){!function(e,t){var n=t.insertionPoint,r=me(t);if(!1!==r&&r.parent)r.parent.insertBefore(e,r.node);else if(n&&"number"==typeof n.nodeType){var i=n,a=i.parentNode;a&&a.insertBefore(e,i.nextSibling)}else he().appendChild(e)}(this.element,this.sheet.options);var e=Boolean(this.sheet&&this.sheet.deployed);this.hasInsertedRules&&e&&(this.hasInsertedRules=!1,this.deploy())}},t.detach=function(){var e=this.element.parentNode;e&&e.removeChild(this.element)},t.deploy=function(){var e=this.sheet;e&&(e.options.link?this.insertRules(e.rules):this.element.textContent="\n"+e.toString()+"\n")},t.insertRules=function(e,t){for(var n=0;n<e.index.length;n++)this.insertRule(e.index[n],n,t)},t.insertRule=function(e,t,n){if(void 0===n&&(n=this.element.sheet),e.rules){var r=e,i=n;return("conditional"!==e.type&&"keyframes"!==e.type||!1!==(i=ye(n,r.toString({children:!1}),t)))&&(this.insertRules(r.rules,i),i)}if(e.renderable&&e.renderable.parentStyleSheet===this.element.sheet)return e.renderable;var a=e.toString();if(!a)return!1;var o=ye(n,a,t);return!1!==o&&(this.hasInsertedRules=!0,e.renderable=o,o)},t.deleteRule=function(e){var t=this.element.sheet,n=this.indexOf(e);return-1!==n&&(t.deleteRule(n),!0)},t.indexOf=function(e){for(var t=this.element.sheet.cssRules,n=0;n<t.length;n++)if(e===t[n])return n;return-1},t.replaceRule=function(e,t){var n=this.indexOf(e);return-1!==n&&(this.element.sheet.deleteRule(n),this.insertRule(t,n))},t.getRules=function(){return this.element.sheet.cssRules},e}(),be=0,we=function(){function e(e){this.id=be++,this.version="10.0.4",this.plugins=new re,this.options={id:{minify:!1},createGenerateId:ue,Renderer:p?ge:null,plugins:[]},this.generateId=ue({minify:!1});for(var t=0;t<Y.length;t++)this.plugins.use(Y[t],{queue:"internal"});this.setup(e)}var t=e.prototype;return t.setup=function(e){return void 0===e&&(e={}),e.createGenerateId&&(this.options.createGenerateId=e.createGenerateId),e.id&&(this.options.id=Object(r.a)({},this.options.id,e.id)),(e.createGenerateId||e.id)&&(this.generateId=this.options.createGenerateId(this.options.id)),null!=e.insertionPoint&&(this.options.insertionPoint=e.insertionPoint),"Renderer"in e&&(this.options.Renderer=e.Renderer),e.plugins&&this.use.apply(this,e.plugins),this},t.createStyleSheet=function(e,t){void 0===t&&(t={});var n=t.index;"number"!=typeof n&&(n=0===ie.index?0:ie.index+1);var i=new ne(e,Object(r.a)({},t,{jss:this,generateId:t.generateId||this.generateId,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:n}));return this.plugins.onProcessSheet(i),i},t.removeStyleSheet=function(e){return e.detach(),ie.remove(e),this},t.createRule=function(e,t,n){if(void 0===t&&(t={}),void 0===n&&(n={}),"object"==typeof e)return this.createRule(void 0,e,t);var i=Object(r.a)({},n,{name:e,jss:this,Renderer:this.options.Renderer});i.generateId||(i.generateId=this.generateId),i.classes||(i.classes={}),i.keyframes||(i.keyframes={});var a=w(e,t,i);return a&&this.plugins.onProcessRule(a),a},t.use=function(){for(var e=this,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach((function(t){e.plugins.use(t)})),this},e}();var xe="undefined"!=typeof CSS&&CSS&&"number"in CSS,ke=function(e){return new we(e)};
/**
 * A better abstraction over CSS.
 *
 * @copyright Oleg Isonen (Slobodskoi) / Isonen 2014-present
 * @website https://github.com/cssinjs/jss
 * @license MIT
 */ke();var Ee=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.baseClasses,n=e.newClasses;if(e.Component,!n)return t;var i=Object(r.a)({},t);return Object.keys(n).forEach((function(e){n[e]&&(i[e]="".concat(t[e]," ").concat(n[e]))})),i},Se={set:function(e,t,n,r){var i=e.get(t);i||(i=new Map,e.set(t,i)),i.set(n,r)},get:function(e,t,n){var r=e.get(t);return r?r.get(n):void 0},delete:function(e,t,n){e.get(t).delete(n)}};var _e=l.a.createContext(null);function Te(){return l.a.useContext(_e)}var Pe="function"==typeof Symbol&&Symbol.for?Symbol.for("mui.nested"):"__THEME_NESTED__",Ce=["checked","disabled","error","focused","focusVisible","required","expanded","selected"];var Oe=Date.now(),Ne="fnValues"+Oe,je="fnStyle"+ ++Oe;var Me=function(){return{onCreateRule:function(e,t,n){if("function"!=typeof t)return null;var r=w(e,{},n);return r[je]=t,r},onProcessStyle:function(e,t){if(Ne in t||je in t)return e;var n={};for(var r in e){var i=e[r];"function"==typeof i&&(delete e[r],n[r]=i)}return t[Ne]=n,e},onUpdate:function(e,t,n,r){var i=t,a=i[je];a&&(i.style=a(e)||{});var o=i[Ne];if(o)for(var l in o)i.prop(l,o[l](e),r)}}},Re="@global",Ae=function(){function e(e,t,n){for(var i in this.type="global",this.at=Re,this.rules=void 0,this.options=void 0,this.key=void 0,this.isProcessed=!1,this.key=e,this.options=n,this.rules=new te(Object(r.a)({},n,{parent:this})),t)this.rules.add(i,t[i]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return this.options.jss.plugins.onProcessRule(r),r},t.indexOf=function(e){return this.rules.indexOf(e)},t.toString=function(){return this.rules.toString()},e}(),ze=function(){function e(e,t,n){this.type="global",this.at=Re,this.options=void 0,this.rule=void 0,this.isProcessed=!1,this.key=void 0,this.key=e,this.options=n;var i=e.substr("@global ".length);this.rule=n.jss.createRule(i,t,Object(r.a)({},n,{parent:this}))}return e.prototype.toString=function(e){return this.rule?this.rule.toString(e):""},e}(),Ie=/\s*,\s*/g;function Le(e,t){for(var n=e.split(Ie),r="",i=0;i<n.length;i++)r+=t+" "+n[i].trim(),n[i+1]&&(r+=", ");return r}var De=function(){return{onCreateRule:function(e,t,n){if(!e)return null;if(e===Re)return new Ae(e,t,n);if("@"===e[0]&&"@global "===e.substr(0,"@global ".length))return new ze(e,t,n);var r=n.parent;return r&&("global"===r.type||r.options.parent&&"global"===r.options.parent.type)&&(n.scoped=!1),!1===n.scoped&&(n.selector=e),null},onProcessRule:function(e){"style"===e.type&&(function(e){var t=e.options,n=e.style,i=n?n[Re]:null;if(i){for(var a in i)t.sheet.addRule(a,i[a],Object(r.a)({},t,{selector:Le(a,e.selector)}));delete n[Re]}}(e),function(e){var t=e.options,n=e.style;for(var i in n)if("@"===i[0]&&i.substr(0,Re.length)===Re){var a=Le(i.substr(Re.length),e.selector);t.sheet.addRule(a,n[i],Object(r.a)({},t,{selector:a})),delete n[i]}}(e))}}},Fe=/\s*,\s*/g,Ue=/&/g,Be=/\$([\w-]+)/g;var He=function(){function e(e,t){return function(n,r){var i=e.getRule(r)||t&&t.getRule(r);return i?(i=i).selector:r}}function t(e,t){for(var n=t.split(Fe),r=e.split(Fe),i="",a=0;a<n.length;a++)for(var o=n[a],l=0;l<r.length;l++){var u=r[l];i&&(i+=", "),i+=-1!==u.indexOf("&")?u.replace(Ue,o):o+" "+u}return i}function n(e,t,n){if(n)return Object(r.a)({},n,{index:n.index+1});var i=e.options.nestingLevel;i=void 0===i?1:i+1;var a=Object(r.a)({},e.options,{nestingLevel:i,index:t.indexOf(e)+1});return delete a.name,a}return{onProcessStyle:function(i,a,o){if("style"!==a.type)return i;var l,u,c=a,s=c.options.parent;for(var f in i){var d=-1!==f.indexOf("&"),p="@"===f[0];if(d||p){if(l=n(c,s,l),d){var h=t(f,c.selector);u||(u=e(s,o)),h=h.replace(Be,u),s.addRule(h,i[f],Object(r.a)({},l,{selector:h}))}else p&&s.addRule(f,{},l).addRule(c.key,i[f],{selector:c.selector});delete i[f]}}return i}}},Ve=/[A-Z]/g,We=/^ms-/,$e={};function qe(e){return"-"+e.toLowerCase()}var Ge=function(e){if($e.hasOwnProperty(e))return $e[e];var t=e.replace(Ve,qe);return $e[e]=We.test(t)?"-"+t:t};function Ke(e){var t={};for(var n in e){t[0===n.indexOf("--")?n:Ge(n)]=e[n]}return e.fallbacks&&(Array.isArray(e.fallbacks)?t.fallbacks=e.fallbacks.map(Ke):t.fallbacks=Ke(e.fallbacks)),t}var Qe=function(){return{onProcessStyle:function(e){if(Array.isArray(e)){for(var t=0;t<e.length;t++)e[t]=Ke(e[t]);return e}return Ke(e)},onChangeValue:function(e,t,n){if(0===t.indexOf("--"))return e;var r=Ge(t);return t===r?e:(n.prop(r,e),null)}}},Je=xe&&CSS?CSS.px:"px",Ze=xe&&CSS?CSS.ms:"ms",Ye=xe&&CSS?CSS.percent:"%";function Xe(e){var t=/(-[a-z])/g,n=function(e){return e[1].toUpperCase()},r={};for(var i in e)r[i]=e[i],r[i.replace(t,n)]=e[i];return r}var et=Xe({"animation-delay":Ze,"animation-duration":Ze,"background-position":Je,"background-position-x":Je,"background-position-y":Je,"background-size":Je,border:Je,"border-bottom":Je,"border-bottom-left-radius":Je,"border-bottom-right-radius":Je,"border-bottom-width":Je,"border-left":Je,"border-left-width":Je,"border-radius":Je,"border-right":Je,"border-right-width":Je,"border-top":Je,"border-top-left-radius":Je,"border-top-right-radius":Je,"border-top-width":Je,"border-width":Je,margin:Je,"margin-bottom":Je,"margin-left":Je,"margin-right":Je,"margin-top":Je,padding:Je,"padding-bottom":Je,"padding-left":Je,"padding-right":Je,"padding-top":Je,"mask-position-x":Je,"mask-position-y":Je,"mask-size":Je,height:Je,width:Je,"min-height":Je,"max-height":Je,"min-width":Je,"max-width":Je,bottom:Je,left:Je,top:Je,right:Je,"box-shadow":Je,"text-shadow":Je,"column-gap":Je,"column-rule":Je,"column-rule-width":Je,"column-width":Je,"font-size":Je,"font-size-delta":Je,"letter-spacing":Je,"text-indent":Je,"text-stroke":Je,"text-stroke-width":Je,"word-spacing":Je,motion:Je,"motion-offset":Je,outline:Je,"outline-offset":Je,"outline-width":Je,perspective:Je,"perspective-origin-x":Ye,"perspective-origin-y":Ye,"transform-origin":Ye,"transform-origin-x":Ye,"transform-origin-y":Ye,"transform-origin-z":Ye,"transition-delay":Ze,"transition-duration":Ze,"vertical-align":Je,"flex-basis":Je,"shape-margin":Je,size:Je,grid:Je,"grid-gap":Je,"grid-row-gap":Je,"grid-column-gap":Je,"grid-template-rows":Je,"grid-template-columns":Je,"grid-auto-rows":Je,"grid-auto-columns":Je,"box-shadow-x":Je,"box-shadow-y":Je,"box-shadow-blur":Je,"box-shadow-spread":Je,"font-line-height":Je,"text-shadow-x":Je,"text-shadow-y":Je,"text-shadow-blur":Je});function tt(e,t,n){if(!t)return t;if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]=tt(e,t[r],n);else if("object"==typeof t)if("fallbacks"===e)for(var i in t)t[i]=tt(i,t[i],n);else for(var a in t)t[a]=tt(e+"-"+a,t[a],n);else if("number"==typeof t)return n[e]?""+t+n[e]:et[e]?"function"==typeof et[e]?et[e](t).toString():""+t+et[e]:t.toString();return t}var nt=function(e){void 0===e&&(e={});var t=Xe(e);return{onProcessStyle:function(e,n){if("style"!==n.type)return e;for(var r in e)e[r]=tt(r,e[r],t);return e},onChangeValue:function(e,n){return tt(n,e,t)}}};function rt(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var it="",at="",ot="",lt=p&&"ontouchstart"in document.documentElement;if(p){var ut={Moz:"-moz-",ms:"-ms-",O:"-o-",Webkit:"-webkit-"},ct=document.createElement("p").style;for(var st in ut)if(st+"Transform"in ct){it=st,at=ut[st];break}"Webkit"===it&&"msHyphens"in ct&&(it="ms",at=ut.ms,"edge"),"Webkit"===it&&"-apple-trailing-word"in ct&&(ot="apple")}var ft=it,dt=at,pt=ot,ht=lt;var mt={noPrefill:["appearance"],supportedProperty:function(e){return"appearance"===e&&("ms"===ft?"-webkit-"+e:dt+e)}},vt={noPrefill:["color-adjust"],supportedProperty:function(e){return"color-adjust"===e&&("Webkit"===ft?dt+"print-"+e:e)}},yt=/[-\s]+(.)?/g;function gt(e,t){return t?t.toUpperCase():""}function bt(e){return e.replace(yt,gt)}function wt(e){return bt("-"+e)}var xt,kt={noPrefill:["mask"],supportedProperty:function(e,t){if(!/^mask/.test(e))return!1;if("Webkit"===ft){if(bt("mask-image")in t)return e;if(ft+wt("mask-image")in t)return dt+e}return e}},Et={noPrefill:["text-orientation"],supportedProperty:function(e){return"text-orientation"===e&&("apple"!==pt||ht?e:dt+e)}},St={noPrefill:["transform"],supportedProperty:function(e,t,n){return"transform"===e&&(n.transform?e:dt+e)}},_t={noPrefill:["transition"],supportedProperty:function(e,t,n){return"transition"===e&&(n.transition?e:dt+e)}},Tt={noPrefill:["writing-mode"],supportedProperty:function(e){return"writing-mode"===e&&("Webkit"===ft||"ms"===ft?dt+e:e)}},Pt={noPrefill:["user-select"],supportedProperty:function(e){return"user-select"===e&&("Moz"===ft||"ms"===ft||"apple"===pt?dt+e:e)}},Ct={supportedProperty:function(e,t){return!!/^break-/.test(e)&&("Webkit"===ft?"WebkitColumn"+wt(e)in t&&dt+"column-"+e:"Moz"===ft&&("page"+wt(e)in t&&"page-"+e))}},Ot={supportedProperty:function(e,t){if(!/^(border|margin|padding)-inline/.test(e))return!1;if("Moz"===ft)return e;var n=e.replace("-inline","");return ft+wt(n)in t&&dt+n}},Nt={supportedProperty:function(e,t){return bt(e)in t&&e}},jt={supportedProperty:function(e,t){var n=wt(e);return"-"===e[0]||"-"===e[0]&&"-"===e[1]?e:ft+n in t?dt+e:"Webkit"!==ft&&"Webkit"+n in t&&"-webkit-"+e}},Mt={supportedProperty:function(e){return"scroll-snap"===e.substring(0,11)&&("ms"===ft?""+dt+e:e)}},Rt={supportedProperty:function(e){return"overscroll-behavior"===e&&("ms"===ft?dt+"scroll-chaining":e)}},At={"flex-grow":"flex-positive","flex-shrink":"flex-negative","flex-basis":"flex-preferred-size","justify-content":"flex-pack",order:"flex-order","align-items":"flex-align","align-content":"flex-line-pack"},zt={supportedProperty:function(e,t){var n=At[e];return!!n&&(ft+wt(n)in t&&dt+n)}},It={flex:"box-flex","flex-grow":"box-flex","flex-direction":["box-orient","box-direction"],order:"box-ordinal-group","align-items":"box-align","flex-flow":["box-orient","box-direction"],"justify-content":"box-pack"},Lt=Object.keys(It),Dt=function(e){return dt+e},Ft=[mt,vt,kt,Et,St,_t,Tt,Pt,Ct,Ot,Nt,jt,Mt,Rt,zt,{supportedProperty:function(e,t,n){var r=n.multiple;if(Lt.indexOf(e)>-1){var i=It[e];if(!Array.isArray(i))return ft+wt(i)in t&&dt+i;if(!r)return!1;for(var a=0;a<i.length;a++)if(!(ft+wt(i[0])in t))return!1;return i.map(Dt)}return!1}}],Ut=Ft.filter((function(e){return e.supportedProperty})).map((function(e){return e.supportedProperty})),Bt=Ft.filter((function(e){return e.noPrefill})).reduce((function(e,t){return e.push.apply(e,rt(t.noPrefill)),e}),[]),Ht={};if(p){xt=document.createElement("p");var Vt=window.getComputedStyle(document.documentElement,"");for(var Wt in Vt)isNaN(Wt)||(Ht[Vt[Wt]]=Vt[Wt]);Bt.forEach((function(e){return delete Ht[e]}))}function $t(e,t){if(void 0===t&&(t={}),!xt)return e;if(null!=Ht[e])return Ht[e];"transition"!==e&&"transform"!==e||(t[e]=e in xt.style);for(var n=0;n<Ut.length&&(Ht[e]=Ut[n](e,xt.style,t),!Ht[e]);n++);try{xt.style[e]=""}catch(e){return!1}return Ht[e]}var qt,Gt={},Kt={transition:1,"transition-property":1,"-webkit-transition":1,"-webkit-transition-property":1},Qt=/(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;function Jt(e,t,n){if("var"===t)return"var";if("all"===t)return"all";if("all"===n)return", all";var r=t?$t(t):", "+$t(n);return r||(t||n)}function Zt(e,t){var n=t;if(!qt||"content"===e)return t;if("string"!=typeof n||!isNaN(parseInt(n,10)))return n;var r=e+n;if(null!=Gt[r])return Gt[r];try{qt.style[e]=n}catch(e){return Gt[r]=!1,!1}if(Kt[e])n=n.replace(Qt,Jt);else if(""===qt.style[e]&&("-ms-flex"===(n=dt+n)&&(qt.style[e]="-ms-flexbox"),qt.style[e]=n,""===qt.style[e]))return Gt[r]=!1,!1;return qt.style[e]="",Gt[r]=n,Gt[r]}p&&(qt=document.createElement("p"));var Yt=function(){function e(t){for(var n in t){var r=t[n];if("fallbacks"===n&&Array.isArray(r))t[n]=r.map(e);else{var i=!1,a=$t(n);a&&a!==n&&(i=!0);var o=!1,l=Zt(a,k(r));l&&l!==r&&(o=!0),(i||o)&&(i&&delete t[n],t[a||n]=l||r)}}return t}return{onProcessRule:function(e){if("keyframes"===e.type){var t=e;t.at="-"===(n=t.at)[1]||"ms"===ft?n:"@"+dt+"keyframes"+n.substr(10)}var n},onProcessStyle:function(t,n){return"style"!==n.type?t:e(t)},onChangeValue:function(e,t){return Zt(t,k(e))||e}}};var Xt=function(){var e=function(e,t){return e.length===t.length?e>t?1:-1:e.length-t.length};return{onProcessStyle:function(t,n){if("style"!==n.type)return t;for(var r={},i=Object.keys(t).sort(e),a=0;a<i.length;a++)r[i[a]]=t[i[a]];return r}}};var en=function(){return{plugins:[Me(),De(),He(),Qe(),nt(),"undefined"==typeof window?null:Yt(),Xt()]}},tn=ke(en()),nn={disableGeneration:!1,generateClassName:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.disableGlobal,n=void 0!==t&&t,r=e.productionPrefix,i=void 0===r?"jss":r,a=e.seed,o=void 0===a?"":a,l=""===o?"":"".concat(o,"-"),u=0;return function(e,t){u+=1;var r=t.options.name;if(r&&0===r.indexOf("Mui")&&!t.options.link&&!n){if(-1!==Ce.indexOf(e.key))return"Mui-".concat(e.key);var a="".concat(l).concat(r,"-").concat(e.key);return t.options.theme[Pe]&&""===o?"".concat(a,"-").concat(u):a}return"".concat(l).concat(i).concat(u)}}(),jss:tn,sheetsCache:null,sheetsManager:new Map,sheetsRegistry:null},rn=l.a.createContext(nn);var an=-1e9;function on(){return an+=1}function ln(e){return(ln="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function un(e){return e&&"object"===ln(e)&&!Array.isArray(e)}function cn(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{clone:!0},i=n.clone?Object(r.a)({},e):e;return un(e)&&un(t)&&Object.keys(t).forEach((function(r){"__proto__"!==r&&(un(t[r])&&r in e?i[r]=cn(e[r],t[r],n):i[r]=t[r])})),i}var sn=function(e){var t="function"==typeof e;return{create:function(n,i){var a;try{a=t?e(n):e}catch(e){throw e}if(!i||!n.overrides||!n.overrides[i])return a;var o=n.overrides[i],l=Object(r.a)({},a);return Object.keys(o).forEach((function(e){l[e]=cn(l[e],o[e])})),l},options:{}}},fn={};function dn(e,t,n){var r=e.state;if(e.stylesOptions.disableGeneration)return t||{};r.cacheClasses||(r.cacheClasses={value:null,lastProp:null,lastJSS:{}});var i=!1;return r.classes!==r.cacheClasses.lastJSS&&(r.cacheClasses.lastJSS=r.classes,i=!0),t!==r.cacheClasses.lastProp&&(r.cacheClasses.lastProp=t,i=!0),i&&(r.cacheClasses.value=Ee({baseClasses:r.cacheClasses.lastJSS,newClasses:t,Component:n})),r.cacheClasses.value}function pn(e,t){var n=e.state,i=e.theme,a=e.stylesOptions,o=e.stylesCreator,l=e.name;if(!a.disableGeneration){var u=Se.get(a.sheetsManager,o,i);u||(u={refs:0,staticSheet:null,dynamicStyles:null},Se.set(a.sheetsManager,o,i,u));var c=Object(r.a)({},o.options,{},a,{theme:i,flip:"boolean"==typeof a.flip?a.flip:"rtl"===i.direction});c.generateId=c.serverGenerateClassName||c.generateClassName;var s=a.sheetsRegistry;if(0===u.refs){var f;a.sheetsCache&&(f=Se.get(a.sheetsCache,o,i));var d=o.create(i,l);f||((f=a.jss.createStyleSheet(d,Object(r.a)({link:!1},c))).attach(),a.sheetsCache&&Se.set(a.sheetsCache,o,i,f)),s&&s.add(f),u.staticSheet=f,u.dynamicStyles=function e(t){var n=null;for(var r in t){var i=t[r],a=typeof i;if("function"===a)n||(n={}),n[r]=i;else if("object"===a&&null!==i&&!Array.isArray(i)){var o=e(i);o&&(n||(n={}),n[r]=o)}}return n}(d)}if(u.dynamicStyles){var p=a.jss.createStyleSheet(u.dynamicStyles,Object(r.a)({link:!0},c));p.update(t),p.attach(),n.dynamicSheet=p,n.classes=Ee({baseClasses:u.staticSheet.classes,newClasses:p.classes}),s&&s.add(p)}else n.classes=u.staticSheet.classes;u.refs+=1}}function hn(e,t){var n=e.state;n.dynamicSheet&&n.dynamicSheet.update(t)}function mn(e){var t=e.state,n=e.theme,r=e.stylesOptions,i=e.stylesCreator;if(!r.disableGeneration){var a=Se.get(r.sheetsManager,i,n);a.refs-=1;var o=r.sheetsRegistry;0===a.refs&&(Se.delete(r.sheetsManager,i,n),r.jss.removeStyleSheet(a.staticSheet),o&&o.remove(a.staticSheet)),t.dynamicSheet&&(r.jss.removeStyleSheet(t.dynamicSheet),o&&o.remove(t.dynamicSheet))}}function vn(e,t){var n,r=l.a.useRef([]),i=l.a.useMemo((function(){return{}}),t);r.current!==i&&(r.current=i,n=e()),l.a.useEffect((function(){return function(){n&&n()}}),[i])}var yn=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.name,i=t.classNamePrefix,o=t.Component,u=t.defaultTheme,c=void 0===u?fn:u,s=a(t,["name","classNamePrefix","Component","defaultTheme"]),f=sn(e),d=n||i||"makeStyles";return f.options={index:on(),name:n,meta:d,classNamePrefix:d},function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Te()||c,i=Object(r.a)({},l.a.useContext(rn),{},s),a=l.a.useRef(),u=l.a.useRef();return vn((function(){var r={name:n,state:{},stylesCreator:f,stylesOptions:i,theme:t};return pn(r,e),u.current=!1,a.current=r,function(){mn(r)}}),[t,f]),l.a.useEffect((function(){u.current&&hn(a.current,e),u.current=!0})),dn(a.current,e.classes,o)}};var gn=function(e){var t=e.theme,n=e.name,r=e.props;if(!t||!t.props||!t.props[n])return r;var i,a=t.props[n];for(i in a)void 0===r[i]&&(r[i]=a[i]);return r},bn=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return function(n){var i=t.defaultTheme,o=t.withTheme,u=void 0!==o&&o,c=t.name,s=a(t,["defaultTheme","withTheme","name"]);var d=c,p=yn(e,Object(r.a)({defaultTheme:i,Component:n,name:c||n.displayName,classNamePrefix:d},s)),h=l.a.forwardRef((function(e,t){e.classes;var o,s=e.innerRef,f=a(e,["classes","innerRef"]),d=p(e),h=f;return("string"==typeof c||u)&&(o=Te()||i,c&&(h=gn({theme:o,name:c,props:f})),u&&!h.theme&&(h.theme=o)),l.a.createElement(n,Object(r.a)({ref:s||t,classes:d},h))}));return h.defaultProps=n.defaultProps,f()(h,n),h}};function wn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var xn=["xs","sm","md","lg","xl"];function kn(e){var t=e.values,n=void 0===t?{xs:0,sm:600,md:960,lg:1280,xl:1920}:t,i=e.unit,o=void 0===i?"px":i,l=e.step,u=void 0===l?5:l,c=a(e,["values","unit","step"]);function s(e){var t="number"==typeof n[e]?n[e]:e;return"@media (min-width:".concat(t).concat(o,")")}function f(e,t){var r=xn.indexOf(t);return r===xn.length-1?s(e):"@media (min-width:".concat("number"==typeof n[e]?n[e]:e).concat(o,") and ")+"(max-width:".concat((-1!==r&&"number"==typeof n[xn[r+1]]?n[xn[r+1]]:t)-u/100).concat(o,")")}return Object(r.a)({keys:xn,values:n,up:s,down:function(e){var t=xn.indexOf(e)+1,r=n[xn[t]];return t===xn.length?s("xs"):"@media (max-width:".concat(("number"==typeof r&&t>0?r:e)-u/100).concat(o,")")},between:f,only:function(e){return f(e,e)},width:function(e){return n[e]}},c)}function En(e,t,n){var i;return Object(r.a)({gutters:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object(r.a)({paddingLeft:t(2),paddingRight:t(2)},n,wn({},e.up("sm"),Object(r.a)({paddingLeft:t(3),paddingRight:t(3)},n[e.up("sm")])))},toolbar:(i={minHeight:56},wn(i,"".concat(e.up("xs")," and (orientation: landscape)"),{minHeight:48}),wn(i,e.up("sm"),{minHeight:64}),i)},n)}var Sn={black:"#000",white:"#fff"},_n={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#d5d5d5",A200:"#aaaaaa",A400:"#303030",A700:"#616161"},Tn={50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",A100:"#8c9eff",A200:"#536dfe",A400:"#3d5afe",A700:"#304ffe"},Pn={50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",A100:"#ff80ab",A200:"#ff4081",A400:"#f50057",A700:"#c51162"},Cn={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"},On={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"},Nn={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"},jn={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"};function Mn(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return Math.min(Math.max(t,e),n)}function Rn(e){if(e.type)return e;if("#"===e.charAt(0))return Rn(function(e){e=e.substr(1);var t=new RegExp(".{1,".concat(e.length/3,"}"),"g"),n=e.match(t);return n&&1===n[0].length&&(n=n.map((function(e){return e+e}))),n?"rgb(".concat(n.map((function(e){return parseInt(e,16)})).join(", "),")"):""}(e));var t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla"].indexOf(n))throw new Error(["Material-UI: unsupported `".concat(e,"` color."),"We support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()."].join("\n"));var r=e.substring(t+1,e.length-1).split(",");return{type:n,values:r=r.map((function(e){return parseFloat(e)}))}}function An(e){var t=e.type,n=e.values;return-1!==t.indexOf("rgb")?n=n.map((function(e,t){return t<3?parseInt(e,10):e})):-1!==t.indexOf("hsl")&&(n[1]="".concat(n[1],"%"),n[2]="".concat(n[2],"%")),"".concat(t,"(").concat(n.join(", "),")")}function zn(e){var t="hsl"===(e=Rn(e)).type?Rn(function(e){var t=(e=Rn(e)).values,n=t[0],r=t[1]/100,i=t[2]/100,a=r*Math.min(i,1-i),o=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:(e+n/30)%12;return i-a*Math.max(Math.min(t-3,9-t,1),-1)},l="rgb",u=[Math.round(255*o(0)),Math.round(255*o(8)),Math.round(255*o(4))];return"hsla"===e.type&&(l+="a",u.push(t[3])),An({type:l,values:u})}(e)).values:e.values;return t=t.map((function(e){return(e/=255)<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)})),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function In(e,t){if(e=Rn(e),t=Mn(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]*=1-t;return An(e)}function Ln(e,t){if(e=Rn(e),t=Mn(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;return An(e)}var Dn={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",hint:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:Sn.white,default:_n[50]},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},Fn={text:{primary:Sn.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",hint:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:_n[800],default:"#303030"},action:{active:Sn.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function Un(e,t,n,r){e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=Ln(e.main,r):"dark"===t&&(e.dark=In(e.main,1.5*r)))}function Bn(e){var t=e.primary,n=void 0===t?{light:Tn[300],main:Tn[500],dark:Tn[700]}:t,i=e.secondary,o=void 0===i?{light:Pn.A200,main:Pn.A400,dark:Pn.A700}:i,l=e.error,u=void 0===l?{light:Cn[300],main:Cn[500],dark:Cn[700]}:l,c=e.warning,s=void 0===c?{light:On[300],main:On[500],dark:On[700]}:c,f=e.info,d=void 0===f?{light:Nn[300],main:Nn[500],dark:Nn[700]}:f,p=e.success,h=void 0===p?{light:jn[300],main:jn[500],dark:jn[700]}:p,m=e.type,v=void 0===m?"light":m,y=e.contrastThreshold,g=void 0===y?3:y,b=e.tonalOffset,w=void 0===b?.2:b,x=a(e,["primary","secondary","error","warning","info","success","type","contrastThreshold","tonalOffset"]);function k(e){if(!e)throw new TypeError("Material-UI: missing background argument in getContrastText(".concat(e,")."));return function(e,t){var n=zn(e),r=zn(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}(e,Fn.text.primary)>=g?Fn.text.primary:Dn.text.primary}function E(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:300,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:700;return!(e=Object(r.a)({},e)).main&&e[t]&&(e.main=e[t]),Un(e,"light",n,w),Un(e,"dark",i,w),e.contrastText||(e.contrastText=k(e.main)),e}var S={dark:Fn,light:Dn};return cn(Object(r.a)({common:Sn,type:v,primary:E(n),secondary:E(o,"A400","A200","A700"),error:E(u),warning:E(s),info:E(d),success:E(h),grey:_n,contrastThreshold:g,getContrastText:k,augmentColor:E,tonalOffset:w},S[v]),x)}function Hn(e){return Math.round(1e5*e)/1e5}var Vn={textTransform:"uppercase"};function Wn(e,t){var n="function"==typeof t?t(e):t,i=n.fontFamily,o=void 0===i?'"Roboto", "Helvetica", "Arial", sans-serif':i,l=n.fontSize,u=void 0===l?14:l,c=n.fontWeightLight,s=void 0===c?300:c,f=n.fontWeightRegular,d=void 0===f?400:f,p=n.fontWeightMedium,h=void 0===p?500:p,m=n.fontWeightBold,v=void 0===m?700:m,y=n.htmlFontSize,g=void 0===y?16:y,b=n.allVariants,w=n.pxToRem,x=a(n,["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"]);var k=u/14,E=w||function(e){return"".concat(e/g*k,"rem")},S=function(e,t,n,i,a){return Object(r.a)({fontFamily:o,fontWeight:e,fontSize:E(t),lineHeight:n},'"Roboto", "Helvetica", "Arial", sans-serif'===o?{letterSpacing:"".concat(Hn(i/t),"em")}:{},{},a,{},b)},_={h1:S(s,96,1.167,-1.5),h2:S(s,60,1.2,-.5),h3:S(d,48,1.167,0),h4:S(d,34,1.235,.25),h5:S(d,24,1.334,0),h6:S(h,20,1.6,.15),subtitle1:S(d,16,1.75,.15),subtitle2:S(h,14,1.57,.1),body1:S(d,16,1.5,.15),body2:S(d,14,1.43,.15),button:S(h,14,1.75,.4,Vn),caption:S(d,12,1.66,.4),overline:S(d,12,2.66,1,Vn)};return cn(Object(r.a)({htmlFontSize:g,pxToRem:E,round:Hn,fontFamily:o,fontSize:u,fontWeightLight:s,fontWeightRegular:d,fontWeightMedium:h,fontWeightBold:v},_),x,{clone:!1})}function $n(){return["".concat(arguments.length<=0?void 0:arguments[0],"px ").concat(arguments.length<=1?void 0:arguments[1],"px ").concat(arguments.length<=2?void 0:arguments[2],"px ").concat(arguments.length<=3?void 0:arguments[3],"px rgba(0,0,0,").concat(.2,")"),"".concat(arguments.length<=4?void 0:arguments[4],"px ").concat(arguments.length<=5?void 0:arguments[5],"px ").concat(arguments.length<=6?void 0:arguments[6],"px ").concat(arguments.length<=7?void 0:arguments[7],"px rgba(0,0,0,").concat(.14,")"),"".concat(arguments.length<=8?void 0:arguments[8],"px ").concat(arguments.length<=9?void 0:arguments[9],"px ").concat(arguments.length<=10?void 0:arguments[10],"px ").concat(arguments.length<=11?void 0:arguments[11],"px rgba(0,0,0,").concat(.12,")")].join(",")}var qn=["none",$n(0,2,1,-1,0,1,1,0,0,1,3,0),$n(0,3,1,-2,0,2,2,0,0,1,5,0),$n(0,3,3,-2,0,3,4,0,0,1,8,0),$n(0,2,4,-1,0,4,5,0,0,1,10,0),$n(0,3,5,-1,0,5,8,0,0,1,14,0),$n(0,3,5,-1,0,6,10,0,0,1,18,0),$n(0,4,5,-2,0,7,10,1,0,2,16,1),$n(0,5,5,-3,0,8,10,1,0,3,14,2),$n(0,5,6,-3,0,9,12,1,0,3,16,2),$n(0,6,6,-3,0,10,14,1,0,4,18,3),$n(0,6,7,-4,0,11,15,1,0,4,20,3),$n(0,7,8,-4,0,12,17,2,0,5,22,4),$n(0,7,8,-4,0,13,19,2,0,5,24,4),$n(0,7,9,-4,0,14,21,2,0,5,26,4),$n(0,8,9,-5,0,15,22,2,0,6,28,5),$n(0,8,10,-5,0,16,24,2,0,6,30,5),$n(0,8,11,-5,0,17,26,2,0,6,32,5),$n(0,9,11,-5,0,18,28,2,0,7,34,6),$n(0,9,12,-6,0,19,29,2,0,7,36,6),$n(0,10,13,-6,0,20,31,3,0,8,38,7),$n(0,10,13,-6,0,21,33,3,0,8,40,7),$n(0,10,14,-6,0,22,35,3,0,8,42,7),$n(0,11,14,-7,0,23,36,3,0,9,44,8),$n(0,11,15,-7,0,24,38,3,0,9,46,8)],Gn={borderRadius:4};function Kn(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:8;if(t.mui)return t;e="function"==typeof t?t:function(e){return t*e};var n=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return 0===n.length?e(1):1===n.length?e(n[0]):n.map((function(t){var n=e(t);return"number"==typeof n?"".concat(n,"px"):n})).join(" ")};return Object.defineProperty(n,"unit",{get:function(){return t}}),n.mui=!0,n}var Qn={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},Jn={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function Zn(e){return"".concat(Math.round(e),"ms")}var Yn={easing:Qn,duration:Jn,create:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["all"],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.duration,r=void 0===n?Jn.standard:n,i=t.easing,o=void 0===i?Qn.easeInOut:i,l=t.delay,u=void 0===l?0:l;a(t,["duration","easing","delay"]);return(Array.isArray(e)?e:[e]).map((function(e){return"".concat(e," ").concat("string"==typeof r?r:Zn(r)," ").concat(o," ").concat("string"==typeof u?u:Zn(u))})).join(",")},getAutoHeightDuration:function(e){if(!e)return 0;var t=e/36;return Math.round(10*(4+15*Math.pow(t,.25)+t/5))}},Xn={mobileStepper:1e3,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500};var er=function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.breakpoints,n=void 0===t?{}:t,r=e.mixins,i=void 0===r?{}:r,o=e.palette,l=void 0===o?{}:o,u=e.spacing,c=e.typography,s=void 0===c?{}:c,f=a(e,["breakpoints","mixins","palette","spacing","typography"]),d=Bn(l),p=kn(n),h=Kn(u),m=cn({breakpoints:p,direction:"ltr",mixins:En(p,h,i),overrides:{},palette:d,props:{},shadows:qn,typography:Wn(d,s),spacing:h,shape:Gn,transitions:Yn,zIndex:Xn},f),v=arguments.length,y=new Array(v>1?v-1:0),g=1;g<v;g++)y[g-1]=arguments[g];return m=y.reduce((function(e,t){return cn(e,t)}),m)}();var tr=function(e,t){return bn(e,Object(r.a)({defaultTheme:er},t))};function nr(e){return e.charAt(0).toUpperCase()+e.slice(1)}var rr=l.a.forwardRef((function(e,t){var n=e.children,i=e.classes,o=e.className,u=e.color,s=void 0===u?"inherit":u,f=e.component,d=void 0===f?"svg":f,p=e.fontSize,h=void 0===p?"default":p,m=e.htmlColor,v=e.titleAccess,y=e.viewBox,g=void 0===y?"0 0 24 24":y,b=a(e,["children","classes","className","color","component","fontSize","htmlColor","titleAccess","viewBox"]);return l.a.createElement(d,Object(r.a)({className:c(i.root,o,"inherit"!==s&&i["color".concat(nr(s))],"default"!==h&&i["fontSize".concat(nr(h))]),focusable:"false",viewBox:g,color:m,"aria-hidden":v?void 0:"true",role:v?"img":"presentation",ref:t},b),n,v?l.a.createElement("title",null,v):null)}));rr.muiName="SvgIcon";var ir=tr((function(e){return{root:{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:"currentColor",flexShrink:0,fontSize:e.typography.pxToRem(24),transition:e.transitions.create("fill",{duration:e.transitions.duration.shorter})},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorAction:{color:e.palette.action.active},colorError:{color:e.palette.error.main},colorDisabled:{color:e.palette.action.disabled},fontSizeInherit:{fontSize:"inherit"},fontSizeSmall:{fontSize:e.typography.pxToRem(20)},fontSizeLarge:{fontSize:e.typography.pxToRem(35)}}}),{name:"MuiSvgIcon"})(rr);n.d(t,"default",(function(){return ir}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnZhcmlhbnQvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Rpbnktd2FybmluZy9kaXN0L3Rpbnktd2FybmluZy5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL3V0aWxzL2NyZWF0ZVN2Z0ljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdG8tY2FtZWwtY2FzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGF0aC10by1yZWdleHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZXJ0aWZpY2F0ZXNQYWdlL1NlcnRpZmljYXRlc1BhZ2UuY3NzPzQ3ZDEiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ndWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9Gb2xkZXJTaGFyZWRUd29Ub25lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvTWVudUJvb2tUd29Ub25lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvVGltZWxhcHNlVHdvVG9uZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL0J1aWxkVHdvVG9uZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL1dvcmtUd29Ub25lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvUmVjZWlwdFR3b1RvbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9TcGVha2VyUGhvbmVUd29Ub25lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90by1zcGFjZS1jYXNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90by1uby1jYXNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vaGFybW9ueS1tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUmVzaXphYmxlUGFuZWwvUmVzaXphYmxlUGFuZWwuY3NzP2RmMDgiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUmVzaXphYmxlUGFuZWwvUmVzaXphYmxlUGFuZWwuY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0xlZnROYXZCYXIvTGVmdE5hdkJhci5jc3M/ZTQ0NCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9MZWZ0TmF2QmFyL0xlZnROYXZCYXIuY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUmlnaHRUaXRsZS9SaWdodFRpdGxlLmNzcz9iMDJmIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1JpZ2h0VGl0bGUvUmlnaHRUaXRsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQWJvdXRNZS9BYm91dE1lLmNzcz9hNDg5Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0Fib3V0TWUvQWJvdXRNZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRWR1Y2F0aW9uUGFnZS9FZHVjYXRpb25QYWdlLmNzcz9mYmYwIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0VkdWNhdGlvblBhZ2UvRWR1Y2F0aW9uUGFnZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VydGlmaWNhdGVzUGFnZS9TZXJ0aWZpY2F0ZXNQYWdlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Db250YWN0c1BhZ2UvQ29udGFjdHNQYWdlLmNzcz81MGY5Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NvbnRhY3RzUGFnZS9Db250YWN0c1BhZ2UuY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1BvcnRmb2xpb1BhZ2UvUG9ydGZvbGlvUGFnZS5jc3M/NDA2NCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Qb3J0Zm9saW9QYWdlL1BvcnRmb2xpb1BhZ2UuY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXBhdGhuYW1lL2VzbS9yZXNvbHZlLXBhdGhuYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW55LWludmFyaWFudC9kaXN0L3RpbnktaW52YXJpYW50LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lc20vaGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dC9kaXN0L2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzbS9yZWFjdC1yb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXNtL3JlYWN0LXJvdXRlci1kb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LWFjdGlvbnMvZXMvdXRpbHMvaXNQbGFpbk9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtYWN0aW9ucy9lcy91dGlscy9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1hY3Rpb25zL2VzL3V0aWxzL2lkZW50aXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1hY3Rpb25zL2VzL3V0aWxzL2lzQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LWFjdGlvbnMvZXMvdXRpbHMvaXNTdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LWFjdGlvbnMvZXMvdXRpbHMvaXNOaWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LWFjdGlvbnMvZXMvdXRpbHMvZ2V0TGFzdEVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LWFjdGlvbnMvZXMvdXRpbHMvY2FtZWxDYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1hY3Rpb25zL2VzL3V0aWxzL2FycmF5VG9PYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LWFjdGlvbnMvZXMvdXRpbHMvaXNNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LWFjdGlvbnMvZXMvdXRpbHMvb3duS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtYWN0aW9ucy9lcy91dGlscy9nZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LWFjdGlvbnMvZXMvdXRpbHMvZmxhdHRlbldoZW5Ob2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1hY3Rpb25zL2VzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtYWN0aW9ucy9lcy91dGlscy9mbGF0dGVuQWN0aW9uTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1hY3Rpb25zL2VzL3V0aWxzL3VuZmxhdHRlbkFjdGlvbkNyZWF0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1hY3Rpb25zL2VzL3V0aWxzL2lzRW1wdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LWFjdGlvbnMvZXMvdXRpbHMvaXNOdWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1hY3Rpb25zL2VzL2NyZWF0ZUFjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtYWN0aW9ucy9lcy9jcmVhdGVBY3Rpb25zLmpzIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS9teUFjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvYmF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Qcm92aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3Qvd3JhcE1hcFRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwRGlzcGF0Y2hUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcFN0YXRlVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tZXJnZVByb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3NlbGVjdG9yRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9jb25uZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHVjZS1yZWR1Y2Vycy9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtYWN0aW9ucy9lcy91dGlscy9mbGF0dGVuUmVkdWNlck1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtYWN0aW9ucy9lcy91dGlscy9oYXNHZW5lcmF0b3JJbnRlcmZhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LWFjdGlvbnMvZXMvdXRpbHMvdG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL215RGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUvbXlSZWR1Y2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS9zdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtYWN0aW9ucy9lcy9oYW5kbGVBY3Rpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1hY3Rpb25zL2VzL2hhbmRsZUFjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtYWN0aW9ucy9lcy91dGlscy9pc1VuZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9SZXNpemFibGVQYW5lbC9SZXNpemFibGVQYW5lbC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRhaW5lcnMvTGVmdE5hdkJhckNvbnRhaW5lci5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTGVmdE5hdkJhci9MZWZ0TmF2QmFyLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGFpbmVycy9SaWdodFRpdGxlQ29udGFpbmVyLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9SaWdodFRpdGxlL1JpZ2h0VGl0bGUuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb250YWluZXJzL0Fib3V0TWVDb250YWluZXIuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0Fib3V0TWUvQWJvdXRNZS5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRWR1Y2F0aW9uUGFnZS9NYWluRWR1Y2F0aW9uSXRlbS5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRWR1Y2F0aW9uUGFnZS9BZGRpdGlvbmFsRWR1Y2F0aW9uSXRlbS5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRWR1Y2F0aW9uUGFnZS9FZHVjYXRpb25QYWdlLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGFpbmVycy9FZHVjYXRpb25QYWdlQ29udGFpbmVyLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGFpbmVycy9NYWluRWR1Y2F0aW9uUGFnZUNvbnRhaW5lci5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRWR1Y2F0aW9uUGFnZS9NYWluRWR1Y2F0aW9uUGFnZS5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRWR1Y2F0aW9uUGFnZS9BZGRpdGlvbmFsRWR1Y2F0aW9uUGFnZS5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRhaW5lcnMvQWRkaXRpb25hbEVkdWNhdGlvblBhZ2VDb250YWluZXIuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1F1YWxpZmljYXRpb25QYWdlL1F1YWxpZmljYXRpb25JdGVtLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9RdWFsaWZpY2F0aW9uUGFnZS9RdWFsaWZpY2F0aW9uUGFnZS5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRhaW5lcnMvUXVhbGlmaWNhdGlvblBhZ2VDb250YWluZXIuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NjaWxsc1BhZ2UvU2NpbGxzSXRlbS5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2NpbGxzUGFnZS9TY2lsbHNQYWdlLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGFpbmVycy9TY2lsbHNQYWdlQ29udGFpbmVyLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZXJ0aWZpY2F0ZXNQYWdlL1NlcnRpZmljYXRlSXRlbS5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VydGlmaWNhdGVzUGFnZS9TZXJ0aWZpY2F0ZXNQYWdlLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGFpbmVycy9TZXJ0aWZpY2F0ZXNQYWdlQ29udGFpbmVyLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGFpbmVycy9TZXJ0aWZpY2F0ZVBhZ2VDb250YWluZXIuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NlcnRpZmljYXRlc1BhZ2UvU2VydGlmaWNhdGVQYWdlLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGFpbmVycy9Db250YWN0c1BhZ2VDb250YWluZXIuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NvbnRhY3RzUGFnZS9Db250YWN0c1BhZ2UuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1BvcnRmb2xpb1BhZ2UvUG9ydGZvbGlvSXRlbS5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUG9ydGZvbGlvUGFnZS9Qb3J0Zm9saW9QYWdlLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGFpbmVycy9Qb3J0Zm9saW9QYWdlQ29udGFpbmVyLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU3RhcnRQYWdlL1N0YXJ0UGFnZS5qc3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jbHN4L2Rpc3QvY2xzeC5tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1pbi1icm93c2VyL2Rpc3QvbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvZGlzdC9qc3MuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9tZXJnZUNsYXNzZXMvbWVyZ2VDbGFzc2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9tYWtlU3R5bGVzL211bHRpS2V5U3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL3VzZVRoZW1lL1RoZW1lQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vdXNlVGhlbWUvdXNlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL1RoZW1lUHJvdmlkZXIvbmVzdGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZS9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1ydWxlLXZhbHVlLWZ1bmN0aW9uL2Rpc3QvanNzLXBsdWdpbi1ydWxlLXZhbHVlLWZ1bmN0aW9uLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1nbG9iYWwvZGlzdC9qc3MtcGx1Z2luLWdsb2JhbC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tbmVzdGVkL2Rpc3QvanNzLXBsdWdpbi1uZXN0ZWQuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oeXBoZW5hdGUtc3R5bGUtbmFtZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1jYW1lbC1jYXNlL2Rpc3QvanNzLXBsdWdpbi1jYW1lbC1jYXNlLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1kZWZhdWx0LXVuaXQvZGlzdC9qc3MtcGx1Z2luLWRlZmF1bHQtdW5pdC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheVdpdGhvdXRIb2xlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVNwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLXZlbmRvci9kaXN0L2Nzcy12ZW5kb3IuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLXZlbmRvci1wcmVmaXhlci9kaXN0L2pzcy1wbHVnaW4tdmVuZG9yLXByZWZpeGVyLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1wcm9wcy1zb3J0L2Rpc3QvanNzLXBsdWdpbi1wcm9wcy1zb3J0LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vanNzUHJlc2V0L2pzc1ByZXNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vU3R5bGVzUHJvdmlkZXIvU3R5bGVzUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL21ha2VTdHlsZXMvaW5kZXhDb3VudGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS91dGlscy9lc20vZGVlcG1lcmdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9nZXRTdHlsZXNDcmVhdG9yL2dldFN0eWxlc0NyZWF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL2dldFN0eWxlc0NyZWF0b3Ivbm9vcFRoZW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9tYWtlU3R5bGVzL21ha2VTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL2dldFRoZW1lUHJvcHMvZ2V0VGhlbWVQcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vd2l0aFN0eWxlcy93aXRoU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jcmVhdGVCcmVha3BvaW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jcmVhdGVNaXhpbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvY29tbW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL2dyZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvaW5kaWdvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL3BpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL29yYW5nZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9ibHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL2dyZWVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2NvbG9yTWFuaXB1bGF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY3JlYXRlUGFsZXR0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jcmVhdGVUeXBvZ3JhcGh5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3NoYWRvd3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvc2hhcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY3JlYXRlU3BhY2luZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy90cmFuc2l0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy96SW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY3JlYXRlTXVpVGhlbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvZGVmYXVsdFRoZW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3dpdGhTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy9jYXBpdGFsaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vU3ZnSWNvbi9TdmdJY29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vU3ZnSWNvbi9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiYXBwbHkiLCJ0aGlzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJrZXlzIiwiaW5kZXhPZiIsIl9pbmhlcml0c0xvb3NlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY29uc3RydWN0b3IiLCJfX3Byb3RvX18iLCJjb25kaXRpb24iLCJmb3JtYXQiLCJhIiwiYiIsImUiLCJmIiwiZXJyb3IiLCJ1bmRlZmluZWQiLCJFcnJvciIsImFyZ3MiLCJhcmdJbmRleCIsInJlcGxhY2UiLCJmcmFtZXNUb1BvcCIsIm1lbW8iLCJpc09sZElFIiwiQm9vbGVhbiIsIndpbmRvdyIsImRvY3VtZW50IiwiYWxsIiwiYXRvYiIsImdldFRhcmdldCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwibGlzdCIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJpdGVtIiwiaWQiLCJiYXNlIiwiY291bnQiLCJjb25jYXQiLCJpbmRleCIsIm9iaiIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJwdXNoIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJmb3JFYWNoIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0IiwiYXBwZW5kQ2hpbGQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiam9pbiIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJyZW1vdmUiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJyZW1vdmVDaGlsZCIsImluc2VydEJlZm9yZSIsImFwcGx5VG9UYWciLCJyZW1vdmVBdHRyaWJ1dGUiLCJidG9hIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZmlyc3RDaGlsZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJ0b1N0cmluZyIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4Iiwic3BsaWNlIiwidXNlU291cmNlTWFwIiwibWFwIiwiY29udGVudCIsImNzc01hcHBpbmciLCJzb3VyY2VNYXBwaW5nIiwiYmFzZTY0IiwiZGF0YSIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlUm9vdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsIm1lc3NhZ2UiLCJjaGVja0RDRSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImVyciIsImNvbnNvbGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiZGVmYXVsdCIsInBhdGgiLCJkaXNwbGF5TmFtZSIsIkNvbXBvbmVudCIsIl9yZWFjdCIsImZvcndhcmRSZWYiLCJwcm9wcyIsInJlZiIsIl9TdmdJY29uIiwiX2V4dGVuZHMyIiwibXVpTmFtZSIsInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImRlZmF1bHRQcm9wcyIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsInByb3BUeXBlcyIsInR5cGUiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJpdHkiLCJNRU1PX1NUQVRJQ1MiLCJjb21wYXJlIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImNvbXBvbmVudCIsImlzTWVtbyIsIkZvcndhcmRSZWYiLCJyZW5kZXIiLCJNZW1vIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJ0YXJnZXRTdGF0aWNzIiwic291cmNlU3RhdGljcyIsImRlc2NyaXB0b3IiLCJzcGFjZSIsInN0cmluZyIsIm1hdGNoZXMiLCJsZXR0ZXIiLCJ0b1VwcGVyQ2FzZSIsInJvb3QiLCJzZWxmIiwiZ2xvYmFsIiwiaXNhcnJheSIsInBhdGhUb1JlZ2V4cCIsInBhcnNlIiwiY29tcGlsZSIsInN0ciIsInRva2Vuc1RvRnVuY3Rpb24iLCJ0b2tlbnNUb1JlZ0V4cCIsIlBBVEhfUkVHRVhQIiwiUmVnRXhwIiwicmVzIiwidG9rZW5zIiwiZGVmYXVsdERlbGltaXRlciIsImRlbGltaXRlciIsImV4ZWMiLCJlc2NhcGVkIiwib2Zmc2V0Iiwic2xpY2UiLCJuZXh0IiwicHJlZml4IiwiY2FwdHVyZSIsImdyb3VwIiwibW9kaWZpZXIiLCJhc3RlcmlzayIsInBhcnRpYWwiLCJyZXBlYXQiLCJvcHRpb25hbCIsInBhdHRlcm4iLCJlc2NhcGVHcm91cCIsImVzY2FwZVN0cmluZyIsInN1YnN0ciIsImVuY29kZVVSSUNvbXBvbmVudFByZXR0eSIsImVuY29kZVVSSSIsImNoYXJDb2RlQXQiLCJBcnJheSIsImZsYWdzIiwib3B0cyIsImVuY29kZSIsInByZXR0eSIsInRva2VuIiwic2VnbWVudCIsIlR5cGVFcnJvciIsImoiLCJ0ZXN0IiwiYXR0YWNoS2V5cyIsInJlIiwic2Vuc2l0aXZlIiwic3RyaWN0IiwiZW5kIiwicm91dGUiLCJlbmRzV2l0aERlbGltaXRlciIsImdyb3VwcyIsIm1hdGNoIiwicmVnZXhwVG9SZWdleHAiLCJwYXJ0cyIsImFycmF5VG9SZWdleHAiLCJzdHJpbmdUb1JlZ2V4cCIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInRvT2JqZWN0IiwidmFsIiwidGVzdDEiLCJTdHJpbmciLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsInRlc3QzIiwic3BsaXQiLCJzaG91bGRVc2VOYXRpdmUiLCJmcm9tIiwic3ltYm9scyIsInRvIiwiZyIsIkZ1bmN0aW9uIiwiYXBpIiwiZXhwb3J0ZWQiLCJsb2NhbHMiLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJvYnNlcnZhYmxlIiwiX2RlZmF1bHQiLCJGcmFnbWVudCIsIm9wYWNpdHkiLCJoIiwiZm9yIiwicSIsInUiLCJ2IiwidyIsIngiLCJ5IiwieiIsImFhIiwiQSIsIml0ZXJhdG9yIiwiQiIsIkMiLCJpc01vdW50ZWQiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZVNldFN0YXRlIiwiRCIsIkUiLCJjb250ZXh0IiwicmVmcyIsIkYiLCJHIiwiaXNSZWFjdENvbXBvbmVudCIsInNldFN0YXRlIiwiZm9yY2VVcGRhdGUiLCJIIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJJIiwiY3VycmVudCIsIkoiLCJLIiwiTCIsIl9fc2VsZiIsIl9fc291cmNlIiwiTSIsImNoaWxkcmVuIiwiayIsIiQkdHlwZW9mIiwiX293bmVyIiwiTiIsIk8iLCJQIiwiUSIsInBvcCIsImtleVByZWZpeCIsImZ1bmMiLCJSIiwiVSIsIlMiLCJUIiwiaXNBcnJheSIsImRvbmUiLCJlc2NhcGUiLCJjYSIsImRhIiwiViIsImJhIiwiVyIsIlgiLCJDaGlsZHJlbiIsInRvQXJyYXkiLCJvbmx5IiwiY3JlYXRlUmVmIiwiUHVyZUNvbXBvbmVudCIsImNyZWF0ZUNvbnRleHQiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiX2NvbnRleHQiLCJsYXp5IiwiX2N0b3IiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsIlByb2ZpbGVyIiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlRmFjdG9yeSIsImlzVmFsaWRFbGVtZW50IiwidmVyc2lvbiIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwic3VzcGVuc2UiLCJSZWFjdEN1cnJlbnRPd25lciIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwiWSIsIloiLCJlYSIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwiZmEiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsImhhIiwicmVnaXN0cmF0aW9uTmFtZSIsImlhIiwiamEiLCJkZXBlbmRlbmNpZXMiLCJrYSIsIm9uRXJyb3IiLCJsYSIsIm1hIiwibmEiLCJvYSIsInBhIiwicWEiLCJzYSIsInVhIiwidmEiLCJ3YSIsImN1cnJlbnRUYXJnZXQiLCJyYSIsInhhIiwieWEiLCJ6YSIsIkFhIiwiX2Rpc3BhdGNoTGlzdGVuZXJzIiwiX2Rpc3BhdGNoSW5zdGFuY2VzIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc1BlcnNpc3RlbnQiLCJyZWxlYXNlIiwiQmEiLCJDYSIsImluamVjdEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUiLCJEYSIsInN0YXRlTm9kZSIsImRpc2FibGVkIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiS2EiLCJMYSIsIk1hIiwiTmEiLCJPYSIsIlBhIiwiUWEiLCJSYSIsIlNhIiwiVGEiLCJVYSIsIldhIiwiWGEiLCJ0YWciLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsInJldHVybiIsIllhIiwiWmEiLCIkYSIsImFiIiwiYmIiLCJjYiIsImRiIiwiZWIiLCJmYiIsImdiIiwiaGIiLCJpYiIsImpiIiwia2IiLCJNYXAiLCJsYiIsIm1iIiwibmIiLCJvYiIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsInRvTG93ZXJDYXNlIiwic2IiLCJ0YiIsInViIiwidmIiLCJxYiIsImlzTmFOIiwicmIiLCJwYiIsInNldEF0dHJpYnV0ZU5TIiwid2IiLCJub2RlTmFtZSIsInliIiwiX3ZhbHVlVHJhY2tlciIsInNldCIsImNvbmZpZ3VyYWJsZSIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJ4YiIsInpiIiwiY2hlY2tlZCIsIkFiIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJCYiIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJDYiIsIkViIiwiRmIiLCJHYiIsIm93bmVyRG9jdW1lbnQiLCJhY3RpdmVFbGVtZW50IiwiSWIiLCJIYiIsIkpiIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJLYiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiTGIiLCJNYiIsIk5iIiwidGV4dENvbnRlbnQiLCJ4bGlua0hyZWYiLCJPYiIsIlBiIiwiUWIiLCJSYiIsIlNiIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInZhbHVlT2YiLCJUYiIsImxhc3RDaGlsZCIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwiVWIiLCJWYiIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIldiIiwiWGIiLCJZYiIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJaYiIsIiRiIiwiYWMiLCJiYyIsImNjIiwiZWMiLCJhbHRlcm5hdGUiLCJlZmZlY3RUYWciLCJmYyIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiZ2MiLCJpYyIsImNoaWxkIiwic2libGluZyIsImhjIiwiamMiLCJrYyIsImxjIiwibWMiLCJuYyIsIm9jIiwicGMiLCJxYyIsInJjIiwic2MiLCJ0YyIsInVjIiwidmMiLCJ6YyIsImJsb2NrZWRPbiIsInRvcExldmVsVHlwZSIsImV2ZW50U3lzdGVtRmxhZ3MiLCJuYXRpdmVFdmVudCIsIkFjIiwiZGVsZXRlIiwicG9pbnRlcklkIiwiQmMiLCJDYyIsIkVjIiwiRmMiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJwcmlvcml0eSIsImh5ZHJhdGUiLCJjb250YWluZXJJbmZvIiwiR2MiLCJIYyIsIkljIiwiSmMiLCJzaGlmdCIsIktjIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiTGMiLCJNYyIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsIk5jIiwiT2MiLCJkaXNwYXRjaENvbmZpZyIsIlBjIiwiX3RhcmdldEluc3QiLCJRYyIsIlJjIiwiU2MiLCJUYyIsIlVjIiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiV2MiLCJldmVudFBvb2wiLCJYYyIsImRlc3RydWN0b3IiLCJWYyIsImdldFBvb2xlZCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIkRhdGUiLCJub3ciLCJpc1RydXN0ZWQiLCJleHRlbmQiLCJZYyIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJaYyIsImNsaXBib2FyZERhdGEiLCIkYyIsInZpZXciLCJkZXRhaWwiLCJhZCIsInJlbGF0ZWRUYXJnZXQiLCJiZCIsImtleUNvZGUiLCJjaGFyQ29kZSIsImNkIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsImRkIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsImVkIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsImdkIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsImhkIiwibG9jYXRpb24iLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwibG9jYWxlIiwid2hpY2giLCJqZCIsImtkIiwibGQiLCJtZCIsIm5kIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJidXR0b24iLCJidXR0b25zIiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJvZCIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsInBkIiwiZGF0YVRyYW5zZmVyIiwicWQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwicmQiLCJzZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwidGQiLCJ1ZCIsInZkIiwid2QiLCJ5ZCIsInpkIiwiQWQiLCJCZCIsIkNkIiwiRGQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJldmVudFByaW9yaXR5IiwiRWQiLCJnZXRFdmVudFByaW9yaXR5IiwiRmQiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsIkdkIiwiSGQiLCJKZCIsIktkIiwidGFyZ2V0SW5zdCIsImFuY2VzdG9ycyIsIkxkIiwiTWQiLCJOZCIsIk9kIiwiUGQiLCJhZGRFdmVudExpc3RlbmVyIiwiUWQiLCJEYyIsIlJkIiwiU2QiLCJXZWFrTWFwIiwieGMiLCJTZXQiLCJ5YyIsImhhcyIsImFkZCIsIlRkIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsIlVkIiwiVmQiLCJ0cmltIiwiV2QiLCJzZXRQcm9wZXJ0eSIsImNoYXJBdCIsInN1YnN0cmluZyIsIlhkIiwibWVudWl0ZW0iLCJhcmVhIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJZZCIsIlpkIiwiaXMiLCIkZCIsImFlIiwiYmUiLCJib2R5IiwiY2UiLCJkZSIsIm5vZGUiLCJuZXh0U2libGluZyIsImZlIiwiY29udGVudFdpbmRvdyIsImhyZWYiLCJnZSIsImNvbnRlbnRFZGl0YWJsZSIsImxlIiwibWUiLCJuZSIsImF1dG9Gb2N1cyIsIm9lIiwiX19odG1sIiwicGUiLCJzZXRUaW1lb3V0IiwicWUiLCJjbGVhclRpbWVvdXQiLCJzZSIsInByZXZpb3VzU2libGluZyIsInRlIiwiTWF0aCIsInJhbmRvbSIsInVlIiwidmUiLCJ3ZSIsInhlIiwieWUiLCJ6ZSIsIkFlIiwiQmUiLCJDZSIsIkRlIiwiRWUiLCJGZSIsIkdlIiwiSGUiLCJkb2N1bWVudE1vZGUiLCJJZSIsIkplIiwiS2UiLCJMZSIsImJlZm9yZUlucHV0IiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJNZSIsIk5lIiwiT2UiLCJQZSIsIlNlIiwiUWUiLCJjaGFyIiwiUmUiLCJUZSIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsIm51bWJlciIsInBhc3N3b3JkIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsInVybCIsIndlZWsiLCJVZSIsIlZlIiwiY2hhbmdlIiwiV2UiLCJYZSIsIlllIiwiWmUiLCIkZSIsImFmIiwiYmYiLCJjZiIsImRldGFjaEV2ZW50IiwiZGYiLCJlZiIsImF0dGFjaEV2ZW50IiwiZmYiLCJnZiIsImhmIiwibGYiLCJqZiIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJrZiIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwicG9pbnRlckVudGVyIiwicG9pbnRlckxlYXZlIiwibWYiLCJkZWZhdWx0VmlldyIsInBhcmVudFdpbmRvdyIsIm9mIiwicGYiLCJxZiIsInJmIiwic2YiLCJzZWxlY3QiLCJ0ZiIsInVmIiwidmYiLCJ3ZiIsInhmIiwic3RhcnQiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImFuY2hvck5vZGUiLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsInlmIiwib25TZWxlY3QiLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwiQWYiLCJCZiIsIkNmIiwiRGYiLCJFZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIkZmIiwiR2YiLCJIZiIsIklmIiwiZ2V0Q2hpbGRDb250ZXh0IiwiSmYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIktmIiwiTGYiLCJNZiIsIk5mIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJPZiIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiUGYiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJRZiIsInVuc3RhYmxlX25vdyIsIlJmIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJTZiIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwiVGYiLCJVZiIsIlZmIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJXZiIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsIlhmIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJiZyIsImNnIiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJxZyIsInJnIiwic2ciLCJ0ZyIsInVnIiwiY2hpbGRFeHBpcmF0aW9uVGltZSIsInZnIiwiZmlyc3RDb250ZXh0IiwiZXhwaXJhdGlvblRpbWUiLCJ3ZyIsInhnIiwib2JzZXJ2ZWRCaXRzIiwicmVzcG9uZGVycyIsInlnIiwiemciLCJiYXNlU3RhdGUiLCJmaXJzdFVwZGF0ZSIsImxhc3RVcGRhdGUiLCJmaXJzdENhcHR1cmVkVXBkYXRlIiwibGFzdENhcHR1cmVkVXBkYXRlIiwiZmlyc3RFZmZlY3QiLCJsYXN0RWZmZWN0IiwiZmlyc3RDYXB0dXJlZEVmZmVjdCIsImxhc3RDYXB0dXJlZEVmZmVjdCIsIkFnIiwiQmciLCJzdXNwZW5zZUNvbmZpZyIsInBheWxvYWQiLCJjYWxsYmFjayIsIm5leHRFZmZlY3QiLCJDZyIsIkRnIiwidXBkYXRlUXVldWUiLCJFZyIsIkZnIiwiR2ciLCJIZyIsIklnIiwiSmciLCJLZyIsIkxnIiwiTWciLCJOZyIsIk9nIiwiU2ciLCJfcmVhY3RJbnRlcm5hbEZpYmVyIiwiUGciLCJRZyIsIlJnIiwiVGciLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJVZyIsInN0YXRlIiwiVmciLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJXZyIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50IiwiWGciLCJZZyIsIl9zdHJpbmdSZWYiLCJaZyIsIiRnIiwiYWgiLCJiaCIsImVsZW1lbnRUeXBlIiwiY2giLCJpbXBsZW1lbnRhdGlvbiIsImRoIiwiZWgiLCJ0YSIsImZoIiwiZ2giLCJoaCIsImloIiwiamgiLCJraCIsImxoIiwibWgiLCJkb2N1bWVudEVsZW1lbnQiLCJ0YWdOYW1lIiwibmgiLCJvaCIsInBoIiwicWgiLCJtZW1vaXplZFByb3BzIiwicmV2ZWFsT3JkZXIiLCJyaCIsInJlc3BvbmRlciIsInNoIiwidGgiLCJ1aCIsInZoIiwid2giLCJ4aCIsInloIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJNaCIsIk5oIiwicXVldWUiLCJiYXNlVXBkYXRlIiwiT2giLCJQaCIsIlFoIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImRpc3BhdGNoIiwiYWN0aW9uIiwibGFzdCIsImxhc3RSZW5kZXJlZFN0YXRlIiwiZWFnZXJSZWR1Y2VyIiwiZWFnZXJTdGF0ZSIsIlJoIiwiU2giLCJUaCIsIlVoIiwiZGVzdHJveSIsImRlcHMiLCJWaCIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwicmVhZENvbnRleHQiLCJ1c2VSZXNwb25kZXIiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsInVuc3RhYmxlX25leHQiLCJjaSIsImRpIiwiZWkiLCJmaSIsImdpIiwiaGkiLCJwZW5kaW5nUHJvcHMiLCJpaSIsImppIiwia2kiLCJsaSIsIm1pIiwibmkiLCJvaSIsInBpIiwicWkiLCJyaSIsInNpIiwidGkiLCJ1aSIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsInZpIiwid2kiLCJwZW5kaW5nQ29udGV4dCIsIkhpIiwiSmkiLCJLaSIsInhpIiwicmV0cnlUaW1lIiwieWkiLCJmYWxsYmFjayIsInVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrIiwiemkiLCJBaSIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwidGFpbCIsInRhaWxFeHBpcmF0aW9uIiwidGFpbE1vZGUiLCJCaSIsIkNpIiwiTGkiLCJNaSIsIk5pIiwic3RhY2siLCJvbkNsaWNrIiwib25jbGljayIsIk9pIiwiV2Vha1NldCIsIlBpIiwiU2kiLCJSaSIsIlRpIiwiVWkiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlZpIiwiV2kiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIlFpIiwiWGkiLCJZaSIsIlppIiwiJGkiLCJpbnN0YW5jZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJhaiIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJiaiIsImRpc3BsYXkiLCJjaiIsImRqIiwidGhlbiIsImVqIiwiZmoiLCJlbGVtZW50IiwiZ2oiLCJoaiIsImlqIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJqaiIsImNvbXBvbmVudFN0YWNrIiwiZ2siLCJraiIsImNlaWwiLCJsaiIsIm1qIiwid2oiLCJ4aiIsInlqIiwiemoiLCJBaiIsIkJqIiwiRGoiLCJFaiIsIkZqIiwiR2oiLCJIaiIsIklqIiwiSmoiLCJ0aW1lb3V0TXMiLCJLaiIsIkxqIiwiTWoiLCJOaiIsIk9qIiwibGFzdEV4cGlyZWRUaW1lIiwiUGoiLCJmaXJzdFBlbmRpbmdUaW1lIiwibGFzdFBpbmdlZFRpbWUiLCJuZXh0S25vd25QZW5kaW5nTGV2ZWwiLCJjYWxsYmFja0V4cGlyYXRpb25UaW1lIiwiY2FsbGJhY2tQcmlvcml0eSIsImNhbGxiYWNrTm9kZSIsIlFqIiwidGltZW91dCIsIlJqIiwiU2oiLCJUaiIsIlVqIiwiVmoiLCJXaiIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkRXhwaXJhdGlvblRpbWUiLCJsYXN0U3VzcGVuZGVkVGltZSIsIlhqIiwidGltZW91dEhhbmRsZSIsIllqIiwiYnVzeU1pbkR1cmF0aW9uTXMiLCJidXN5RGVsYXlNcyIsIlpqIiwiYmsiLCJjayIsInBpbmdDYWNoZSIsImRrIiwiZWsiLCJmayIsInNpemUiLCJjcmVhdGVFbGVtZW50TlMiLCJpayIsImZpcnN0U3VzcGVuZGVkVGltZSIsInJhbmdlQ291bnQiLCJEYiIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJqayIsImVlIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIm1pbiIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwiZm9jdXMiLCJEaCIsImRjIiwiZmQiLCJoayIsIkVoIiwiRmgiLCJ4ayIsIkRpIiwiRWkiLCJGaSIsInhkIiwiR2kiLCJrayIsImxrIiwibWsiLCJoaWRkZW4iLCJWYSIsIm5rIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwicGsiLCJwZW5kaW5nQ2hpbGRyZW4iLCJxayIsInJrIiwic2siLCJ0ayIsInVrIiwidmsiLCJ3YyIsIl9pbnRlcm5hbFJvb3QiLCJ3ayIsInprIiwiaGFzQXR0cmlidXRlIiwieWsiLCJBayIsIkJrIiwidW5tb3VudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtIiwiYWsiLCJDayIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJmbHVzaFN5bmMiLCJFdmVudHMiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50Iiwib2siLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlUHJvcHMiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsIkRrIiwiRWsiLCJNZXNzYWdlQ2hhbm5lbCIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwicGVyZm9ybWFuY2UiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImZsb29yIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwic29ydEluZGV4Iiwic3RhcnRUaW1lIiwicHJpb3JpdHlMZXZlbCIsImRlbGF5IiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfUHJvZmlsaW5nIiwiY2xlYW4iLCJoYXNTcGFjZSIsImhhc1NlcGFyYXRvciIsInNlcGFyYXRvclNwbGl0dGVyIiwidW5zZXBhcmF0ZSIsImhhc0NhbWVsIiwiY2FtZWxTcGxpdHRlciIsInByZXZpb3VzIiwidXBwZXJzIiwidW5jYW1lbGl6ZSIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsInNoaW0iLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiaXNSZXF1aXJlZCIsIlJlYWN0UHJvcFR5cGVzIiwiYXJyYXkiLCJib29sIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwidHlwZU9mIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJFbGVtZW50IiwiTGF6eSIsIlBvcnRhbCIsImlzVmFsaWRFbGVtZW50VHlwZSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsIm9yaWdpbmFsTW9kdWxlIiwid2VicGFja1BvbHlmaWxsIiwiX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIiwiYXJyIiwiaXNBYnNvbHV0ZSIsInBhdGhuYW1lIiwic3BsaWNlT25lIiwiaGFzVHJhaWxpbmdTbGFzaCIsInRvUGFydHMiLCJmcm9tUGFydHMiLCJpc1RvQWJzIiwiaXNGcm9tQWJzIiwibXVzdEVuZEFicyIsInVwIiwicGFydCIsInVuc2hpZnQiLCJhZGRMZWFkaW5nU2xhc2giLCJzdHJpcExlYWRpbmdTbGFzaCIsInN0cmlwQmFzZW5hbWUiLCJoYXNCYXNlbmFtZSIsInN0cmlwVHJhaWxpbmdTbGFzaCIsImNyZWF0ZVBhdGgiLCJoYXNoIiwiY3JlYXRlTG9jYXRpb24iLCJjdXJyZW50TG9jYXRpb24iLCJoYXNoSW5kZXgiLCJzZWFyY2hJbmRleCIsInBhcnNlUGF0aCIsImRlY29kZVVSSSIsIlVSSUVycm9yIiwiY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIiLCJwcm9tcHQiLCJsaXN0ZW5lcnMiLCJzZXRQcm9tcHQiLCJuZXh0UHJvbXB0IiwiY29uZmlybVRyYW5zaXRpb25UbyIsImdldFVzZXJDb25maXJtYXRpb24iLCJhcHBlbmRMaXN0ZW5lciIsImZuIiwiaXNBY3RpdmUiLCJsaXN0ZW5lciIsIm5vdGlmeUxpc3RlbmVycyIsIl9sZW4iLCJfa2V5IiwiY2FuVXNlRE9NIiwiZ2V0Q29uZmlybWF0aW9uIiwiY29uZmlybSIsImdldEhpc3RvcnlTdGF0ZSIsImhpc3RvcnkiLCJjcmVhdGVCcm93c2VySGlzdG9yeSIsImdsb2JhbEhpc3RvcnkiLCJjYW5Vc2VIaXN0b3J5IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwibmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIiLCJfcHJvcHMiLCJfcHJvcHMkZm9yY2VSZWZyZXNoIiwiZm9yY2VSZWZyZXNoIiwiX3Byb3BzJGdldFVzZXJDb25maXJtIiwiX3Byb3BzJGtleUxlbmd0aCIsImtleUxlbmd0aCIsImJhc2VuYW1lIiwiZ2V0RE9NTG9jYXRpb24iLCJoaXN0b3J5U3RhdGUiLCJfcmVmIiwiX3dpbmRvdyRsb2NhdGlvbiIsImNyZWF0ZUtleSIsInRyYW5zaXRpb25NYW5hZ2VyIiwibmV4dFN0YXRlIiwiaGFuZGxlUG9wU3RhdGUiLCJldmVudCIsImlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQiLCJoYW5kbGVQb3AiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiZm9yY2VOZXh0UG9wIiwiZnJvbUxvY2F0aW9uIiwidG9Mb2NhdGlvbiIsInRvSW5kZXgiLCJhbGxLZXlzIiwiZnJvbUluZGV4IiwiZGVsdGEiLCJnbyIsInJldmVydFBvcCIsImluaXRpYWxMb2NhdGlvbiIsImNyZWF0ZUhyZWYiLCJsaXN0ZW5lckNvdW50IiwiY2hlY2tET01MaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaXNCbG9ja2VkIiwicHVzaFN0YXRlIiwicHJldkluZGV4IiwibmV4dEtleXMiLCJyZXBsYWNlU3RhdGUiLCJnb0JhY2siLCJnb0ZvcndhcmQiLCJibG9jayIsInVuYmxvY2siLCJsaXN0ZW4iLCJ1bmxpc3RlbiIsIkhhc2hQYXRoQ29kZXJzIiwiaGFzaGJhbmciLCJlbmNvZGVQYXRoIiwiZGVjb2RlUGF0aCIsIm5vc2xhc2giLCJzbGFzaCIsInN0cmlwSGFzaCIsImdldEhhc2hQYXRoIiwicmVwbGFjZUhhc2hQYXRoIiwiY3JlYXRlSGFzaEhpc3RvcnkiLCJfcHJvcHMkaGFzaFR5cGUiLCJoYXNoVHlwZSIsIl9IYXNoUGF0aENvZGVycyRoYXNoVCIsImlnbm9yZVBhdGgiLCJlbmNvZGVkUGF0aCIsInByZXZMb2NhdGlvbiIsImFsbFBhdGhzIiwibGFzdEluZGV4T2YiLCJiYXNlVGFnIiwiZ2V0QXR0cmlidXRlIiwicHVzaEhhc2hQYXRoIiwibmV4dFBhdGhzIiwiY2xhbXAiLCJsb3dlckJvdW5kIiwidXBwZXJCb3VuZCIsIm1heCIsImNyZWF0ZU1lbW9yeUhpc3RvcnkiLCJfcHJvcHMkaW5pdGlhbEVudHJpZXMiLCJpbml0aWFsRW50cmllcyIsIl9wcm9wcyRpbml0aWFsSW5kZXgiLCJpbml0aWFsSW5kZXgiLCJlbnRyaWVzIiwiZW50cnkiLCJuZXh0SW5kZXgiLCJuZXh0RW50cmllcyIsImNhbkdvIiwiY3JlYXRlRXZlbnRFbWl0dGVyIiwiaGFuZGxlcnMiLCJvbiIsImhhbmRsZXIiLCJvZmYiLCJuZXdWYWx1ZSIsImNoYW5nZWRCaXRzIiwiY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfUHJvdmlkZXIkY2hpbGRDb250ZXgiLCJfQ29uc3VtZXIkY29udGV4dFR5cGUiLCJjb250ZXh0UHJvcCIsIl9Db21wb25lbnQiLCJfdGhpcyIsImVtaXR0ZXIiLCJfcHJvdG8iLCJuZXh0UHJvcHMiLCJvbGRWYWx1ZSIsIl9Db21wb25lbnQyIiwiX3RoaXMyIiwib25VcGRhdGUiLCJfcHJvdG8yIiwiX1JlYWN0JENvbXBvbmVudCIsIlJvdXRlciIsIl9pc01vdW50ZWQiLCJfcGVuZGluZ0xvY2F0aW9uIiwic3RhdGljQ29udGV4dCIsImNvbXB1dGVSb290TWF0Y2giLCJwYXJhbXMiLCJpc0V4YWN0IiwiY2FjaGUkMSIsImNhY2hlQ291bnQkMSIsIm1hdGNoUGF0aCIsIl9vcHRpb25zIiwiX29wdGlvbnMkZXhhY3QiLCJfb3B0aW9ucyRzdHJpY3QiLCJfb3B0aW9ucyRzZW5zaXRpdmUiLCJyZWR1Y2UiLCJtYXRjaGVkIiwiX2NvbXBpbGVQYXRoIiwiY2FjaGVLZXkiLCJwYXRoQ2FjaGUiLCJyZWdleHAiLCJjb21waWxlUGF0aCQxIiwidmFsdWVzIiwiUm91dGUiLCJjb250ZXh0JDEiLCJjb21wdXRlZE1hdGNoIiwiX3RoaXMkcHJvcHMiLCJjcmVhdGVVUkwiLCJzdGF0aWNIYW5kbGVyIiwibWV0aG9kTmFtZSIsIm5vb3AiLCJTd2l0Y2giLCJCcm93c2VyUm91dGVyIiwicmVzb2x2ZVRvTG9jYXRpb24iLCJmb3J3YXJkUmVmU2hpbSIsIkxpbmtBbmNob3IiLCJmb3J3YXJkZWRSZWYiLCJpbm5lclJlZiIsIm5hdmlnYXRlIiwiX29uQ2xpY2siLCJyZXN0IiwiZXgiLCJpc01vZGlmaWVkRXZlbnQiLCJMaW5rIiwiX3JlZjIiLCJfcmVmMiRjb21wb25lbnQiLCJmb3J3YXJkUmVmU2hpbSQxIiwiZm9yd2FyZFJlZiQxIiwiTmF2TGluayIsIl9yZWYkYXJpYUN1cnJlbnQiLCJhcmlhQ3VycmVudCIsIl9yZWYkYWN0aXZlQ2xhc3NOYW1lIiwiYWN0aXZlQ2xhc3NOYW1lIiwiYWN0aXZlU3R5bGUiLCJjbGFzc05hbWVQcm9wIiwiY2xhc3NOYW1lIiwiaXNBY3RpdmVQcm9wIiwibG9jYXRpb25Qcm9wIiwic3R5bGVQcm9wIiwiZXNjYXBlZFBhdGgiLCJjbGFzc25hbWVzIiwiam9pbkNsYXNzbmFtZXMiLCJwcm90byIsInBhcnRpYWxPYmplY3QiLCJvd25LZXlzIiwiaXNNYXAiLCJSZWZsZWN0IiwiZmxhdHRlbiIsIl90ZW1wIiwicGFydGlhbEZsYXRNYXAiLCJwYXJ0aWFsRmxhdEFjdGlvblR5cGUiLCJfcmVmJG5hbWVzcGFjZSIsIm5hbWVzcGFjZSIsIm5leHROYW1lc3BhY2UiLCJjb25uZWN0UHJlZml4IiwidHlwZXMiLCJwYXJ0aWFscyIsImNvbm5lY3ROYW1lc3BhY2UiLCJtYXBWYWx1ZSIsInByZWRpY2F0ZSIsImZsYXR0ZW5XaGVuTm9kZSIsImlzUGxhaW5PYmplY3QiLCJ1bmZsYXR0ZW5BY3Rpb25DcmVhdG9ycyIsImZsYXRBY3Rpb25DcmVhdG9ycyIsIm5lc3RlZEFjdGlvbkNyZWF0b3JzIiwidW5wcmVmaXhlZFR5cGUiLCJ1bmZsYXR0ZW4iLCJmbGF0QWN0aW9uVHlwZSIsInBhcnRpYWxOZXN0ZWRBY3Rpb25DcmVhdG9ycyIsInBhcnRpYWxGbGF0QWN0aW9uVHlwZVBhdGgiLCJjYW1lbENhc2UiLCJjcmVhdGVBY3Rpb24iLCJwYXlsb2FkQ3JlYXRvciIsIm1ldGFDcmVhdG9yIiwiaWRlbnRpdHkiLCJpc0Z1bmN0aW9uIiwiaXNOdWxsIiwiZmluYWxQYXlsb2FkQ3JlYXRvciIsImhhc01ldGEiLCJ0eXBlU3RyaW5nIiwiYWN0aW9uQ3JlYXRvciIsIl9vYmplY3RTcHJlYWQiLCJzeW0iLCJfZGVmaW5lUHJvcGVydHkiLCJ3cml0YWJsZSIsImFjdGlvbkNyZWF0b3JzRnJvbUFjdGlvbk1hcCIsImFjdGlvbk1hcCIsImFjdGlvbk1hcFRvQWN0aW9uQ3JlYXRvcnMiLCJmbGF0dGVuQWN0aW9uTWFwIiwiYXJyYXlUb09iamVjdCIsInBhcnRpYWxBY3Rpb25DcmVhdG9ycyIsIl9vYmplY3RTcHJlYWQyIiwiYWN0aW9uTWFwVmFsdWUiLCJpc05pbCIsIl9hY3Rpb25NYXBWYWx1ZSQiLCJpc1ZhbGlkQWN0aW9uTWFwVmFsdWUiLCJwcmVmaXhlZFR5cGUiLCJhY3Rpb25DcmVhdG9yc0Zyb21JZGVudGl0eUFjdGlvbnMiLCJpZGVudGl0eUFjdGlvbnMiLCJhY3Rpb25DcmVhdG9ycyIsInBhcnRpYWxBY3Rpb25NYXAiLCJfb2JqZWN0U3ByZWFkMyIsIl9vYmplY3RTcHJlYWQ0IiwibG9hZERhdGEiLCJnZXRMYXN0RWxlbWVudCIsImV2ZXJ5IiwiaXNTdHJpbmciLCJjcmVhdGVBY3Rpb25zIiwiTE9BRF9EQVRBIiwiUmVhY3RSZWR1eENvbnRleHQiLCJudWxsTGlzdGVuZXJzIiwibm90aWZ5IiwiY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uIiwiYmF0Y2giLCJmaXJzdCIsImNsZWFyIiwic3Vic2NyaWJlIiwiaXNTdWJzY3JpYmVkIiwicHJldiIsIlN1YnNjcmlwdGlvbiIsInN0b3JlIiwicGFyZW50U3ViIiwidW5zdWJzY3JpYmUiLCJoYW5kbGVDaGFuZ2VXcmFwcGVyIiwiYWRkTmVzdGVkU3ViIiwidHJ5U3Vic2NyaWJlIiwibm90aWZ5TmVzdGVkU3VicyIsIm9uU3RhdGVDaGFuZ2UiLCJ0cnlVbnN1YnNjcmliZSIsImNvbnRleHRWYWx1ZSIsInN1YnNjcmlwdGlvbiIsInByZXZpb3VzU3RhdGUiLCJnZXRTdGF0ZSIsIkNvbnRleHQiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IiwiRU1QVFlfQVJSQVkiLCJOT19TVUJTQ1JJUFRJT05fQVJSQVkiLCJzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIiLCJ1cGRhdGVDb3VudCIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyIsImVmZmVjdEZ1bmMiLCJlZmZlY3RBcmdzIiwiY2FwdHVyZVdyYXBwZXJQcm9wcyIsImxhc3RXcmFwcGVyUHJvcHMiLCJsYXN0Q2hpbGRQcm9wcyIsInJlbmRlcklzU2NoZWR1bGVkIiwid3JhcHBlclByb3BzIiwiYWN0dWFsQ2hpbGRQcm9wcyIsImNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUiLCJzdWJzY3JpYmVVcGRhdGVzIiwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzIiwiY2hpbGRQcm9wc1NlbGVjdG9yIiwiZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCIsImRpZFVuc3Vic2NyaWJlIiwibGFzdFRocm93bkVycm9yIiwiY2hlY2tGb3JVcGRhdGVzIiwibmV3Q2hpbGRQcm9wcyIsImxhdGVzdFN0b3JlU3RhdGUiLCJpbml0U3RhdGVVcGRhdGVzIiwiY29ubmVjdEFkdmFuY2VkIiwic2VsZWN0b3JGYWN0b3J5IiwiX3JlZjIkZ2V0RGlzcGxheU5hbWUiLCJnZXREaXNwbGF5TmFtZSIsIl9yZWYyJG1ldGhvZE5hbWUiLCJfcmVmMiRyZW5kZXJDb3VudFByb3AiLCJyZW5kZXJDb3VudFByb3AiLCJfcmVmMiRzaG91bGRIYW5kbGVTdGEiLCJfcmVmMiRzdG9yZUtleSIsInN0b3JlS2V5IiwiX3JlZjIkZm9yd2FyZFJlZiIsIndpdGhSZWYiLCJfcmVmMiRjb250ZXh0IiwiY29ubmVjdE9wdGlvbnMiLCJXcmFwcGVkQ29tcG9uZW50Iiwid3JhcHBlZENvbXBvbmVudE5hbWUiLCJzZWxlY3RvckZhY3RvcnlPcHRpb25zIiwicHVyZSIsInVzZVB1cmVPbmx5TWVtbyIsIkNvbm5lY3RGdW5jdGlvbiIsIl91c2VNZW1vIiwicHJvcHNDb250ZXh0IiwiQ29udGV4dFRvVXNlIiwiZGlkU3RvcmVDb21lRnJvbVByb3BzIiwiY3JlYXRlQ2hpbGRTZWxlY3RvciIsIl91c2VNZW1vMiIsIm92ZXJyaWRkZW5Db250ZXh0VmFsdWUiLCJfdXNlUmVkdWNlciIsInByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQiLCJyZW5kZXJlZFdyYXBwZWRDb21wb25lbnQiLCJDb25uZWN0IiwiZm9yd2FyZGVkIiwic2hhbGxvd0VxdWFsIiwib2JqQSIsIm9iakIiLCJrZXlzQSIsImtleXNCIiwicmFuZG9tU3RyaW5nIiwiQWN0aW9uVHlwZXMiLCJJTklUIiwiUkVQTEFDRSIsIlBST0JFX1VOS05PV05fQUNUSU9OIiwiY3JlYXRlU3RvcmUiLCJyZWR1Y2VyIiwicHJlbG9hZGVkU3RhdGUiLCJlbmhhbmNlciIsImN1cnJlbnRSZWR1Y2VyIiwiY3VycmVudFN0YXRlIiwiY3VycmVudExpc3RlbmVycyIsIm5leHRMaXN0ZW5lcnMiLCJpc0Rpc3BhdGNoaW5nIiwiZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycyIsInJlcGxhY2VSZWR1Y2VyIiwibmV4dFJlZHVjZXIiLCJvdXRlclN1YnNjcmliZSIsIm9ic2VydmVyIiwib2JzZXJ2ZVN0YXRlIiwiZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UiLCJhY3Rpb25UeXBlIiwiYmluZEFjdGlvbkNyZWF0b3IiLCJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJib3VuZEFjdGlvbkNyZWF0b3JzIiwid3JhcE1hcFRvUHJvcHNDb25zdGFudCIsImdldENvbnN0YW50IiwiY29uc3RhbnQiLCJjb25zdGFudFNlbGVjdG9yIiwiZGVwZW5kc09uT3duUHJvcHMiLCJnZXREZXBlbmRzT25Pd25Qcm9wcyIsIm1hcFRvUHJvcHMiLCJ3cmFwTWFwVG9Qcm9wc0Z1bmMiLCJwcm94eSIsInN0YXRlT3JEaXNwYXRjaCIsIm93blByb3BzIiwibWFwRGlzcGF0Y2hUb1Byb3BzIiwibWFwU3RhdGVUb1Byb3BzIiwiZGVmYXVsdE1lcmdlUHJvcHMiLCJzdGF0ZVByb3BzIiwiZGlzcGF0Y2hQcm9wcyIsIm1lcmdlUHJvcHMiLCJtZXJnZWRQcm9wcyIsImFyZU1lcmdlZFByb3BzRXF1YWwiLCJoYXNSdW5PbmNlIiwibmV4dE1lcmdlZFByb3BzIiwid3JhcE1lcmdlUHJvcHNGdW5jIiwiaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsInB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwiYXJlU3RhdGVzRXF1YWwiLCJhcmVPd25Qcm9wc0VxdWFsIiwiYXJlU3RhdGVQcm9wc0VxdWFsIiwiaGFzUnVuQXRMZWFzdE9uY2UiLCJoYW5kbGVTdWJzZXF1ZW50Q2FsbHMiLCJuZXh0T3duUHJvcHMiLCJuZXh0U3RhdGVQcm9wcyIsInN0YXRlUHJvcHNDaGFuZ2VkIiwicHJvcHNDaGFuZ2VkIiwic3RhdGVDaGFuZ2VkIiwiZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImluaXRNYXBTdGF0ZVRvUHJvcHMiLCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzIiwiaW5pdE1lcmdlUHJvcHMiLCJhcmciLCJmYWN0b3JpZXMiLCJzdHJpY3RFcXVhbCIsImNyZWF0ZUNvbm5lY3QiLCJfcmVmJGNvbm5lY3RIT0MiLCJjb25uZWN0SE9DIiwiX3JlZiRtYXBTdGF0ZVRvUHJvcHNGIiwibWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtYXBEaXNwYXRjaFRvUHJvIiwibWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtZXJnZVByb3BzRmFjdG9yIiwibWVyZ2VQcm9wc0ZhY3RvcmllcyIsIl9yZWYkc2VsZWN0b3JGYWN0b3J5IiwiX3JlZjMiLCJfcmVmMyRwdXJlIiwiX3JlZjMkYXJlU3RhdGVzRXF1YWwiLCJfcmVmMyRhcmVPd25Qcm9wc0VxdWEiLCJfcmVmMyRhcmVTdGF0ZVByb3BzRXEiLCJfcmVmMyRhcmVNZXJnZWRQcm9wc0UiLCJleHRyYU9wdGlvbnMiLCJuZXdCYXRjaCIsImluaXRpYWxTdGF0ZSIsInJlZHVjZXJzIiwicHJldlN0YXRlIiwiX2xlbjIiLCJfa2V5MiIsInByZXZTdGF0ZUlzVW5kZWZpbmVkIiwidmFsdWVJc1VuZGVmaW5lZCIsIm5ld1N0YXRlIiwiaGFzT25seUludGVyZmFjZU5hbWVzIiwib3duS2V5IiwibXlEYXRhIiwiYmlydGhkYXRlIiwid2lzaEpvYiIsImV4cGlyaWVuY2UiLCJ3b3JrZGF5Iiwic2NoZWR1bGUiLCJhYm91dE1lIiwiY2l0eSIsImNpdGl6ZW4iLCJnZW5kZXIiLCJzZWxmSW5mb3JtYXRpb24iLCJtYWluRWR1Y2F0aW9uIiwieWVhciIsImluc3RpdHV0ZSIsImZhY3VsdHkiLCJhZGRpdGlvbmFsRWR1Y2F0aW9uIiwiMSIsImNvdXJzZU5hbWUiLCIyIiwicXVhbGlmaWNhdGlvbiIsImNvbXBhbnkiLCJjb21wYW55TGluayIsImpvYiIsImR1dHkiLCJtYWluU2NpbGxzIiwibGFuZ3VhZ2VzIiwicnVzc2lhbiIsImVuZ2xpc2giLCJjYXIiLCJjb250YWN0cyIsInBob25lIiwiaWNxIiwic2t5cGUiLCJ0ZXN0cyIsInNlcnRpZmljYXRlcyIsInNjaG9vbCIsImZ1bGxOYW1lIiwiZGVzY3JpcHRpb24iLCJzcmMiLCJwb3J0Zm9saW9fZ2Vla2JyYWlucyIsImNvdXJzZSIsIndvcmtOYW1lIiwiZGVtb2xpbmsiLCJjb2RlbGluayIsImNvbW1lbnQiLCJyZWR1Y2VyS2V5cyIsImZpbmFsUmVkdWNlcnMiLCJzaGFwZUFzc2VydGlvbkVycm9yIiwiZmluYWxSZWR1Y2VyS2V5cyIsImFzc2VydFJlZHVjZXJTaGFwZSIsImhhc0NoYW5nZWQiLCJwcmV2aW91c1N0YXRlRm9yS2V5IiwibmV4dFN0YXRlRm9yS2V5IiwiZXJyb3JNZXNzYWdlIiwiY29tYmluZVJlZHVjZXJzIiwibXlSZWR1Y2VyIiwiZGVmYXVsdFN0YXRlIiwiZmxhdHRlbmVkUmVkdWNlck1hcCIsImZsYXR0ZW5SZWR1Y2VyTWFwIiwidGhyb3ciLCJhUmVkdWNlciIsInRocm93UmVkdWNlciIsImhhbmRsZUFjdGlvbiIsImhhbmRsZUFjdGlvbnMiLCJSZWFjdCIsImNvbm5lY3QiLCJhbHQiLCJNYWluRWR1Y2F0aW9uSXRlbSIsIkFkZGl0aW9uYWxFZHVjYXRpb25JdGVtIiwiYWRkaXRpb25hbEVkdWNhdGlvbkl0ZW0iLCJJdGVtSWQiLCJpZHgiLCJRdWFsaWZpY2F0aW9uSXRlbSIsInF1YWxpZmljYXRpb25JdGVtIiwicmV2ZXJzZSIsIlNjaWxsc0l0ZW0iLCJzY2lsbHNJdGVtIiwic2NpbGxzIiwiU2VydGlmaWNhdGVJdGVtIiwic2VydGlmaWNhdGVJdGVtIiwic2VydGlmaWNhdGVQYXRoIiwic2VydGlmaWNhdGUiLCJQb3J0Zm9saW9JdGVtIiwicG9ydGZvbGlvSXRlbSIsImluaXRTdG9yZSIsIlJlYWN0RG9tIiwiTGVmdE5hdkJhckNvbnRhaW5lciIsIlJpZ2h0VGl0bGVDb250YWluZXIiLCJBYm91dE1lQ29udGFpbmVyIiwiRWR1Y2F0aW9uUGFnZUNvbnRhaW5lciIsIk1haW5FZHVjYXRpb25QYWdlQ29udGFpbmVyIiwiQWRkaXRpb25hbEVkdWNhdGlvblBhZ2VDb250YWluZXIiLCJRdWFsaWZpY2F0aW9uUGFnZUNvbnRhaW5lciIsIlNjaWxsc1BhZ2VDb250YWluZXIiLCJQb3J0Zm9saW9QYWdlQ29udGFpbmVyIiwiU2VydGlmaWNhdGVzUGFnZUNvbnRhaW5lciIsIlNlcnRpZmljYXRlUGFnZUNvbnRhaW5lciIsIkNvbnRhY3RzUGFnZUNvbnRhaW5lciIsImdldEVsZW1lbnRCeUlkIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwib2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsInNvdXJjZVN5bWJvbEtleXMiLCJ0b1ZhbCIsIm1peCIsIl90eXBlb2YiLCJfZGVmaW5lUHJvcGVydGllcyIsIl9jcmVhdGVDbGFzcyIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIlJlZmVyZW5jZUVycm9yIiwicGxhaW5PYmplY3RDb25zdHJ1cmN0b3IiLCJjbG9uZVN0eWxlIiwibmV3U3R5bGUiLCJjcmVhdGVSdWxlIiwiZGVjbCIsImpzcyIsImRlY2xDb3B5IiwicnVsZSIsInBsdWdpbnMiLCJvbkNyZWF0ZVJ1bGUiLCJieSIsInRvQ3NzVmFsdWUiLCJpZ25vcmVJbXBvcnRhbnQiLCJjc3NWYWx1ZSIsImluZGVudFN0ciIsImluZGVudCIsInRvQ3NzIiwic2VsZWN0b3IiLCJfb3B0aW9ucyRpbmRlbnQiLCJmYWxsYmFja3MiLCJwcm9wIiwiX3Byb3AiLCJfdmFsdWUiLCJfcHJvcDIiLCJfdmFsdWUyIiwiYWxsb3dFbXB0eSIsImVzY2FwZVJlZ2V4IiwibmF0aXZlRXNjYXBlIiwiQ1NTIiwiQmFzZVN0eWxlUnVsZSIsImlzUHJvY2Vzc2VkIiwicmVuZGVyZXIiLCJyZW5kZXJhYmxlIiwic2hlZXQiLCJSZW5kZXJlciIsImZvcmNlIiwicHJvY2VzcyIsIm9uQ2hhbmdlVmFsdWUiLCJpc0VtcHR5IiwiaXNEZWZpbmVkIiwicmVtb3ZlUHJvcGVydHkiLCJhdHRhY2hlZCIsIl9CYXNlU3R5bGVSdWxlIiwiU3R5bGVSdWxlIiwic2VsZWN0b3JUZXh0Iiwic2NvcGVkIiwiZ2VuZXJhdGVJZCIsImFwcGx5VG8iLCJqc29uIiwidG9KU09OIiwic2V0U2VsZWN0b3IiLCJyZXBsYWNlUnVsZSIsInBsdWdpblN0eWxlUnVsZSIsInBhcmVudCIsImRlZmF1bHRUb1N0cmluZ09wdGlvbnMiLCJhdFJlZ0V4cCIsIkNvbmRpdGlvbmFsUnVsZSIsInN0eWxlcyIsImF0IiwicXVlcnkiLCJydWxlcyIsImF0TWF0Y2giLCJnZXRSdWxlIiwiYWRkUnVsZSIsIm9uUHJvY2Vzc1J1bGUiLCJrZXlSZWdFeHAiLCJwbHVnaW5Db25kaXRpb25hbFJ1bGUiLCJkZWZhdWx0VG9TdHJpbmdPcHRpb25zJDEiLCJuYW1lUmVnRXhwIiwiS2V5ZnJhbWVzUnVsZSIsImZyYW1lcyIsIm5hbWVNYXRjaCIsImtleVJlZ0V4cCQxIiwicmVmUmVnRXhwIiwiZmluZFJlZmVyZW5jZWRLZXlmcmFtZSIsImtleWZyYW1lcyIsInJlZktleWZyYW1lIiwib25Qcm9jZXNzU3R5bGUiLCJLZXlmcmFtZVJ1bGUiLCJwbHVnaW5LZXlmcmFtZVJ1bGUiLCJGb250RmFjZVJ1bGUiLCJwbHVnaW5Gb250RmFjZVJ1bGUiLCJWaWV3cG9ydFJ1bGUiLCJwbHVnaW5WaWV3cG9ydFJ1bGUiLCJTaW1wbGVSdWxlIiwia2V5c01hcCIsImRlZmF1bHRVcGRhdGVPcHRpb25zIiwiZm9yY2VVcGRhdGVPcHRpb25zIiwiUnVsZUxpc3QiLCJyYXciLCJjb3VudGVyIiwiY2xhc3NlcyIsInJ1bGVPcHRpb25zIiwiX3RoaXMkb3B0aW9ucyIsInJlZ2lzdGVyIiwidW5yZWdpc3RlciIsInBsdWdpbnMkJDEiLCJ1cGRhdGVPbmUiLCJfdGhpcyRvcHRpb25zMiIsInN0eWxlUnVsZSIsIm5leHRWYWx1ZSIsIl9uZXh0VmFsdWUiLCJfcHJldlZhbHVlIiwiU3R5bGVTaGVldCIsImRlcGxveWVkIiwiYXR0YWNoIiwiZGVwbG95IiwiZGV0YWNoIiwiaW5zZXJ0UnVsZSIsImFkZFJ1bGVzIiwiYWRkZWQiLCJkZWxldGVSdWxlIiwiX3RoaXMkcnVsZXMiLCJQbHVnaW5zUmVnaXN0cnkiLCJpbnRlcm5hbCIsImV4dGVybmFsIiwicmVnaXN0cnkiLCJvblByb2Nlc3NTaGVldCIsInByb2Nlc3NlZFZhbHVlIiwidXNlIiwibmV3UGx1Z2luIiwicGx1Z2luIiwic2hlZXRzIiwiU2hlZXRzUmVnaXN0cnkiLCJyZXNldCIsImdsb2JhbFRoaXMiLCJjcmVhdGVHZW5lcmF0ZUlkIiwicnVsZUNvdW50ZXIiLCJqc3NJZCIsImNsYXNzTmFtZVByZWZpeCIsIm1pbmlmeSIsIm1lbW9pemUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiY3NzUnVsZSIsImF0dHJpYnV0ZVN0eWxlTWFwIiwiZ2V0SGVhZCIsImZpbmRQcmV2Tm9kZSIsImluc2VydGlvblBvaW50IiwiZmluZEhpZ2hlclNoZWV0IiwiZmluZEhpZ2hlc3RTaGVldCIsImZpbmRDb21tZW50Tm9kZSIsImdldE5vbmNlIiwiX2luc2VydFJ1bGUiLCJjb250YWluZXIiLCJtYXhJbmRleCIsImNzc1J1bGVzIiwiYXBwZW5kUnVsZSIsIkRvbVJlbmRlcmVyIiwiaGFzSW5zZXJ0ZWRSdWxlcyIsImVsIiwiY3JlYXRlU3R5bGUiLCJuZXh0Tm9kZSIsImluc2VydGlvblBvaW50RWxlbWVudCIsImluc2VydFN0eWxlIiwiaW5zZXJ0UnVsZXMiLCJuYXRpdmVQYXJlbnQiLCJsYXRlc3ROYXRpdmVQYXJlbnQiLCJwYXJlbnRTdHlsZVNoZWV0IiwicnVsZVN0ciIsIm5hdGl2ZVJ1bGUiLCJnZXRSdWxlcyIsImluc3RhbmNlQ291bnRlciIsIkpzcyIsInNldHVwIiwiY3JlYXRlU3R5bGVTaGVldCIsInJlbW92ZVN0eWxlU2hlZXQiLCJoYXNDU1NUT01TdXBwb3J0IiwiYmFzZUNsYXNzZXMiLCJuZXdDbGFzc2VzIiwibmV4dENsYXNzZXMiLCJjYWNoZSIsImtleTEiLCJrZXkyIiwic3ViQ2FjaGUiLCJ1c2VUaGVtZSIsImZuVmFsdWVzTnMiLCJmblJ1bGVOcyIsImZuVmFsdWVzIiwiZm5SdWxlIiwiR2xvYmFsQ29udGFpbmVyUnVsZSIsIkdsb2JhbFByZWZpeGVkUnVsZSIsInNlcGFyYXRvclJlZ0V4cCIsImFkZFNjb3BlIiwic2NvcGUiLCJoYW5kbGVOZXN0ZWRHbG9iYWxDb250YWluZXJSdWxlIiwiaGFuZGxlUHJlZml4ZWRHbG9iYWxSdWxlIiwicGFyZW50UmVnRXhwIiwiZ2V0UmVwbGFjZVJlZiIsInJlcGxhY2VQYXJlbnRSZWZzIiwibmVzdGVkUHJvcCIsInBhcmVudFByb3AiLCJwYXJlbnRTZWxlY3RvcnMiLCJuZXN0ZWRTZWxlY3RvcnMiLCJuZXN0ZWQiLCJnZXRPcHRpb25zIiwicHJldk9wdGlvbnMiLCJuZXN0aW5nTGV2ZWwiLCJyZXBsYWNlUmVmIiwiaXNOZXN0ZWQiLCJpc05lc3RlZENvbmRpdGlvbmFsIiwidXBwZXJjYXNlUGF0dGVybiIsIm1zUGF0dGVybiIsInRvSHlwaGVuTG93ZXIiLCJoTmFtZSIsImNvbnZlcnRDYXNlIiwiY29udmVydGVkIiwiaHlwaGVuYXRlZFByb3AiLCJweCIsIm1zIiwicGVyY2VudCIsImFkZENhbWVsQ2FzZWRWZXJzaW9uIiwicmVnRXhwIiwidW5pdHMiLCJib3JkZXIiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm90dG9tIiwicmlnaHQiLCJtb3Rpb24iLCJvdXRsaW5lIiwicGVyc3BlY3RpdmUiLCJncmlkIiwiaXRlcmF0ZSIsImlubmVyUHJvcCIsIl9pbm5lclByb3AiLCJjYW1lbENhc2VkT3B0aW9ucyIsIl90b0NvbnN1bWFibGVBcnJheSIsImFycjIiLCJpdGVyIiwianMiLCJ2ZW5kb3IiLCJpc1RvdWNoIiwianNDc3NNYXAiLCJNb3oiLCJXZWJraXQiLCJhcHBlYXJlbmNlIiwibm9QcmVmaWxsIiwic3VwcG9ydGVkUHJvcGVydHkiLCJjb2xvckFkanVzdCIsInRvVXBwZXIiLCJjYW1lbGl6ZSIsInBhc2NhbGl6ZSIsIm1hc2siLCJ0ZXh0T3JpZW50YXRpb24iLCJ0cmFuc2Zvcm0iLCJ3cml0aW5nTW9kZSIsInVzZXJTZWxlY3QiLCJicmVha1Byb3BzT2xkIiwiaW5saW5lTG9naWNhbE9sZCIsIm5ld1Byb3AiLCJ1bnByZWZpeGVkIiwicHJlZml4ZWQiLCJwYXNjYWxpemVkIiwic2Nyb2xsU25hcCIsIm92ZXJzY3JvbGxCZWhhdmlvciIsInByb3BNYXAiLCJmbGV4MjAxMiIsInByb3BNYXAkMSIsInByb3BLZXlzIiwicHJlZml4Q3NzIiwicHJvcGVydHlEZXRlY3RvcnMiLCJjb21wdXRlZCIsImdldENvbXB1dGVkU3R5bGUiLCJrZXkkMSIsImVsJDEiLCJ0cmFuc2l0aW9uUHJvcGVydGllcyIsInRyYW5zUHJvcHNSZWdFeHAiLCJwcmVmaXhUcmFuc2l0aW9uQ2FsbGJhY2siLCJwMSIsInAyIiwicHJlZml4ZWRWYWx1ZSIsInN1cHBvcnRlZFZhbHVlIiwicGFyc2VJbnQiLCJwcmVmaXhTdHlsZSIsImNoYW5nZVByb3AiLCJzdXBwb3J0ZWRQcm9wIiwiY2hhbmdlVmFsdWUiLCJzdXBwb3J0ZWRWYWx1ZSQkMSIsImF0UnVsZSIsInNvcnQiLCJwcm9wMCIsInByb3AxIiwiZGVmYXVsdE9wdGlvbnMiLCJkaXNhYmxlR2VuZXJhdGlvbiIsImdlbmVyYXRlQ2xhc3NOYW1lIiwiX29wdGlvbnMkZGlzYWJsZUdsb2JhIiwiZGlzYWJsZUdsb2JhbCIsIl9vcHRpb25zJHByb2R1Y3Rpb25QciIsInByb2R1Y3Rpb25QcmVmaXgiLCJfb3B0aW9ucyRzZWVkIiwic2VlZCIsInNlZWRQcmVmaXgiLCJ0aGVtZSIsImNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lIiwic2hlZXRzQ2FjaGUiLCJzaGVldHNNYW5hZ2VyIiwic2hlZXRzUmVnaXN0cnkiLCJTdHlsZXNDb250ZXh0IiwiaW5kZXhDb3VudGVyIiwiaW5jcmVtZW50IiwiaXNPYmplY3QiLCJkZWVwbWVyZ2UiLCJjbG9uZSIsIm91dHB1dCIsInN0eWxlc09yQ3JlYXRvciIsInRoZW1pbmdFbmFibGVkIiwib3ZlcnJpZGVzIiwic3R5bGVzV2l0aE92ZXJyaWRlcyIsImdldENsYXNzZXMiLCJzdHlsZXNPcHRpb25zIiwiY2FjaGVDbGFzc2VzIiwibGFzdFByb3AiLCJsYXN0SlNTIiwiZ2VuZXJhdGUiLCJzdHlsZXNDcmVhdG9yIiwic2hlZXRNYW5hZ2VyIiwic3RhdGljU2hlZXQiLCJkeW5hbWljU3R5bGVzIiwiZmxpcCIsImRpcmVjdGlvbiIsInNlcnZlckdlbmVyYXRlQ2xhc3NOYW1lIiwiZ2V0RHluYW1pY1N0eWxlcyIsImV4dHJhY3RlZCIsImR5bmFtaWNTaGVldCIsIl9yZWY0IiwidXNlU3luY2hyb25vdXNFZmZlY3QiLCJjdXJyZW50S2V5IiwiY2xhc3NOYW1lUHJlZml4T3B0aW9uIiwiX29wdGlvbnMkZGVmYXVsdFRoZW1lIiwiZGVmYXVsdFRoZW1lIiwic3R5bGVzT3B0aW9uczIiLCJzaG91bGRVcGRhdGUiLCJfb3B0aW9ucyR3aXRoVGhlbWUiLCJ3aXRoVGhlbWUiLCJ1c2VTdHlsZXMiLCJXaXRoU3R5bGVzIiwib3RoZXIiLCJtb3JlIiwiY3JlYXRlQnJlYWtwb2ludHMiLCJicmVha3BvaW50cyIsIl9icmVha3BvaW50cyR2YWx1ZXMiLCJ4cyIsInNtIiwieGwiLCJfYnJlYWtwb2ludHMkdW5pdCIsInVuaXQiLCJfYnJlYWtwb2ludHMkc3RlcCIsInN0ZXAiLCJiZXR3ZWVuIiwiZW5kSW5kZXgiLCJkb3duIiwidXBwZXJib3VuZCIsImNyZWF0ZU1peGlucyIsInNwYWNpbmciLCJfdG9vbGJhciIsImd1dHRlcnMiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsInRvb2xiYXIiLCJtaW5IZWlnaHQiLCJibGFjayIsIndoaXRlIiwiNTAiLCIxMDAiLCIyMDAiLCIzMDAiLCI0MDAiLCI1MDAiLCI2MDAiLCI3MDAiLCI4MDAiLCI5MDAiLCJBMTAwIiwiQTIwMCIsIkE0MDAiLCJBNzAwIiwiZGVjb21wb3NlQ29sb3IiLCJjb2xvcnMiLCJoZXhUb1JnYiIsIm1hcmtlciIsInBhcnNlRmxvYXQiLCJyZWNvbXBvc2VDb2xvciIsImdldEx1bWluYW5jZSIsInJnYiIsInJvdW5kIiwiaHNsVG9SZ2IiLCJwb3ciLCJOdW1iZXIiLCJ0b0ZpeGVkIiwiZGFya2VuIiwiY29lZmZpY2llbnQiLCJsaWdodGVuIiwibGlnaHQiLCJwcmltYXJ5Iiwic2Vjb25kYXJ5IiwiaGludCIsImRpdmlkZXIiLCJiYWNrZ3JvdW5kIiwicGFwZXIiLCJhY3RpdmUiLCJob3ZlciIsImhvdmVyT3BhY2l0eSIsInNlbGVjdGVkT3BhY2l0eSIsImRpc2FibGVkQmFja2dyb3VuZCIsImRpc2FibGVkT3BhY2l0eSIsImZvY3VzT3BhY2l0eSIsImFjdGl2YXRlZE9wYWNpdHkiLCJkYXJrIiwiaWNvbiIsImFkZExpZ2h0T3JEYXJrIiwiaW50ZW50Iiwic2hhZGUiLCJ0b25hbE9mZnNldCIsIm1haW4iLCJjcmVhdGVQYWxldHRlIiwicGFsZXR0ZSIsIl9wYWxldHRlJHByaW1hcnkiLCJfcGFsZXR0ZSRzZWNvbmRhcnkiLCJfcGFsZXR0ZSRlcnJvciIsIl9wYWxldHRlJHdhcm5pbmciLCJ3YXJuaW5nIiwiX3BhbGV0dGUkaW5mbyIsImluZm8iLCJfcGFsZXR0ZSRzdWNjZXNzIiwic3VjY2VzcyIsIl9wYWxldHRlJHR5cGUiLCJfcGFsZXR0ZSRjb250cmFzdFRocmUiLCJjb250cmFzdFRocmVzaG9sZCIsIl9wYWxldHRlJHRvbmFsT2Zmc2V0IiwiZ2V0Q29udHJhc3RUZXh0IiwiZm9yZWdyb3VuZCIsImx1bUEiLCJsdW1CIiwiZ2V0Q29udHJhc3RSYXRpbyIsImF1Z21lbnRDb2xvciIsIm1haW5TaGFkZSIsImxpZ2h0U2hhZGUiLCJkYXJrU2hhZGUiLCJjb250cmFzdFRleHQiLCJjb21tb24iLCJncmV5IiwiY2FzZUFsbENhcHMiLCJ0ZXh0VHJhbnNmb3JtIiwiY3JlYXRlVHlwb2dyYXBoeSIsInR5cG9ncmFwaHkiLCJfcmVmJGZvbnRGYW1pbHkiLCJmb250RmFtaWx5IiwiX3JlZiRmb250U2l6ZSIsImZvbnRTaXplIiwiX3JlZiRmb250V2VpZ2h0TGlnaHQiLCJmb250V2VpZ2h0TGlnaHQiLCJfcmVmJGZvbnRXZWlnaHRSZWd1bGEiLCJmb250V2VpZ2h0UmVndWxhciIsIl9yZWYkZm9udFdlaWdodE1lZGl1bSIsImZvbnRXZWlnaHRNZWRpdW0iLCJfcmVmJGZvbnRXZWlnaHRCb2xkIiwiZm9udFdlaWdodEJvbGQiLCJfcmVmJGh0bWxGb250U2l6ZSIsImh0bWxGb250U2l6ZSIsImFsbFZhcmlhbnRzIiwicHhUb1JlbTIiLCJweFRvUmVtIiwiY29lZiIsImJ1aWxkVmFyaWFudCIsImxldHRlclNwYWNpbmciLCJjYXNpbmciLCJ2YXJpYW50cyIsImgxIiwiaDIiLCJoMyIsImg0IiwiaDUiLCJoNiIsInN1YnRpdGxlMSIsInN1YnRpdGxlMiIsImJvZHkxIiwiYm9keTIiLCJjYXB0aW9uIiwib3ZlcmxpbmUiLCJjcmVhdGVTaGFkb3ciLCJib3JkZXJSYWRpdXMiLCJjcmVhdGVTcGFjaW5nIiwic3BhY2luZ0lucHV0IiwibXVpIiwiZmFjdG9yIiwiZWFzaW5nIiwiZWFzZUluT3V0IiwiZWFzZU91dCIsImVhc2VJbiIsInNoYXJwIiwiZHVyYXRpb24iLCJzaG9ydGVzdCIsInNob3J0ZXIiLCJzaG9ydCIsInN0YW5kYXJkIiwiY29tcGxleCIsImVudGVyaW5nU2NyZWVuIiwibGVhdmluZ1NjcmVlbiIsImZvcm1hdE1zIiwibWlsbGlzZWNvbmRzIiwiX29wdGlvbnMkZHVyYXRpb24iLCJkdXJhdGlvbk9wdGlvbiIsIl9vcHRpb25zJGVhc2luZyIsImVhc2luZ09wdGlvbiIsIl9vcHRpb25zJGRlbGF5IiwiYW5pbWF0ZWRQcm9wIiwiZ2V0QXV0b0hlaWdodER1cmF0aW9uIiwibW9iaWxlU3RlcHBlciIsInNwZWVkRGlhbCIsImFwcEJhciIsImRyYXdlciIsIm1vZGFsIiwic25hY2tiYXIiLCJ0b29sdGlwIiwiX29wdGlvbnMkYnJlYWtwb2ludHMiLCJicmVha3BvaW50c0lucHV0IiwiX29wdGlvbnMkbWl4aW5zIiwibWl4aW5zSW5wdXQiLCJfb3B0aW9ucyRwYWxldHRlIiwicGFsZXR0ZUlucHV0IiwiX29wdGlvbnMkdHlwb2dyYXBoeSIsInR5cG9ncmFwaHlJbnB1dCIsIm11aVRoZW1lIiwic2hhZG93cyIsInRyYW5zaXRpb25zIiwiYWNjIiwiYXJndW1lbnQiLCJjYXBpdGFsaXplIiwiX3Byb3BzJGNvbG9yIiwiX3Byb3BzJGNvbXBvbmVudCIsIl9wcm9wcyRmb250U2l6ZSIsImh0bWxDb2xvciIsInRpdGxlQWNjZXNzIiwiX3Byb3BzJHZpZXdCb3giLCJ2aWV3Qm94IiwiZm9jdXNhYmxlIiwicm9sZSIsImZpbGwiLCJjb2xvclByaW1hcnkiLCJjb2xvclNlY29uZGFyeSIsImNvbG9yQWN0aW9uIiwiY29sb3JFcnJvciIsImNvbG9yRGlzYWJsZWQiLCJmb250U2l6ZUluaGVyaXQiLCJmb250U2l6ZVNtYWxsIiwiZm9udFNpemVMYXJnZSJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFB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Q0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsS0FBTSxVQUNOQyxLQUFNLFVBQ05DLEtBQU0sVUFDTkMsS0FBTSxXQ0VPLEdBaEJGLENBQ1hiLEdBQUksVUFDSkMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsS0FBTSxVQUNOQyxLQUFNLFVBQ05DLEtBQU0sVUFDTkMsS0FBTSxXQ0VPLEdBaEJKLENBQ1RiLEdBQUksVUFDSkMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsS0FBTSxVQUNOQyxLQUFNLFVBQ05DLEtBQU0sVUFDTkMsS0FBTSxXQ0VPLEdBaEJMLENBQ1JiLEdBQUksVUFDSkMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsS0FBTSxVQUNOQyxLQUFNLFVBQ05DLEtBQU0sVUFDTkMsS0FBTSxXQ0VPLEdBaEJGLENBQ1hiLEdBQUksVUFDSkMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsS0FBTSxVQUNOQyxLQUFNLFVBQ05DLEtBQU0sVUFDTkMsS0FBTSxXQ0VPLEdBaEJKLENBQ1RiLEdBQUksVUFDSkMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsS0FBTSxVQUNOQyxLQUFNLFVBQ05DLEtBQU0s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QUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEdBQUksSUFBSyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEdBQUksSUFBSyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEdBQUksSUFBSyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEdBQUksSUFBSyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FB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QUFLQSxHQUNKbXRFLEdBQVE1aUUsRUFBVWd2RSxFQUFjLElBQU03OUUsY0FBYyxRQUFTLEtBQU02OUUsR0FBZSxTQW9FdkYsR0FBUXA1RSxRQUFVLFVBQ0gsV0F0SkssU0FBZ0JvcUUsR0FDbEMsTUFBTyxDQUVMeG5FLEtBQU0sQ0FDSjBrRSxXQUFZLE9BQ1puakQsTUFBTyxNQUNQQyxPQUFRLE1BQ1I4Z0IsUUFBUyxlQUNUdTBDLEtBQU0sZUFDTjF3RCxXQUFZLEVBQ1ppckQsU0FBVTVKLEVBQU13SixXQUFXaUIsUUFBUSxJQUNuQ3I4RCxXQUFZNHhELEVBQU13TyxZQUFZcGlGLE9BQU8sT0FBUSxDQUMzQ2tnRixTQUFVdE0sRUFBTXdPLFlBQVlsQyxTQUFTRSxXQUt6QzhDLGFBQWMsQ0FDWnpwRCxNQUFPbTZDLEVBQU0ySCxRQUFRdEIsUUFBUW9CLE1BSS9COEgsZUFBZ0IsQ0FDZDFwRCxNQUFPbTZDLEVBQU0ySCxRQUFRckIsVUFBVW1CLE1BSWpDK0gsWUFBYSxDQUNYM3BELE1BQU9tNkMsRUFBTTJILFFBQVE1eUMsT0FBTzR4QyxRQUk5QjhJLFdBQVksQ0FDVjVwRCxNQUFPbTZDLEVBQU0ySCxRQUFRcjVFLE1BQU1tNUUsTUFJN0JpSSxjQUFlLENBQ2I3cEQsTUFBT202QyxFQUFNMkgsUUFBUTV5QyxPQUFPdHVCLFVBSTlCa3BFLGdCQUFpQixDQUNmL0YsU0FBVSxXQUlaZ0csY0FBZSxDQUNiaEcsU0FBVTVKLEVBQU13SixXQUFXaUIsUUFBUSxLQUlyQ29GLGNBQWUsQ0FDYmpHLFNBQVU1SixFQUFNd0osV0FBV2lCLFFBQVEsUUFpR1AsQ0FDaENwL0UsS0FBTSxjQURPLENBRVosSUMvSkgiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNjApO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn0iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIGludmFyaWFudCA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgK1xuICAgICAgICAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJnc1thcmdJbmRleCsrXTsgfSlcbiAgICAgICk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGlzT2xkSUUgPSBmdW5jdGlvbiBpc09sZElFKCkge1xuICB2YXIgbWVtbztcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKCkge1xuICAgIGlmICh0eXBlb2YgbWVtbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG4gICAgICAvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG4gICAgICAvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcbiAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuICAgICAgbWVtbyA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufSgpO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICB2YXIgbWVtbyA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vW3RhcmdldF07XG4gIH07XG59KCk7XG5cbnZhciBzdHlsZXNJbkRvbSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRG9tLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRG9tW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM11cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlc0luRG9tLnB1c2goe1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiBhZGRTdHlsZShvYmosIG9wdGlvbnMpLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB2YXIgYXR0cmlidXRlcyA9IG9wdGlvbnMuYXR0cmlidXRlcyB8fCB7fTtcblxuICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLm1lZGlhID8gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKS5jb25jYXQob2JqLmNzcywgXCJ9XCIpIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoJ21lZGlhJyk7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIGJ0b2EpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXNlU291cmNlTWFwKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oJycpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgJyddXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIlwiLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIiBhbmQgXCIpLmNvbmNhdChpdGVtWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcblxuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCAnJykuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufSAvLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5cblxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG4gIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgcmV0dXJuIFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbn0iLCJmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgIFwiZGVmYXVsdFwiOiBvYmpcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0OyIsInZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xuZnVuY3Rpb24gd2FybmluZyhjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgaWYgKCFpc1Byb2R1Y3Rpb24pIHtcbiAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHRleHQgPSBcIldhcm5pbmc6IFwiICsgbWVzc2FnZTtcblxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUud2Fybih0ZXh0KTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgdGhyb3cgRXJyb3IodGV4dCk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB3YXJuaW5nO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlU3ZnSWNvbjtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBtYXRlcmlhbC11aS9jb3JlL1N2Z0ljb25cIikpO1xuXG5mdW5jdGlvbiBjcmVhdGVTdmdJY29uKHBhdGgsIGRpc3BsYXlOYW1lKSB7XG4gIHZhciBDb21wb25lbnQgPSBfcmVhY3QuZGVmYXVsdC5tZW1vKF9yZWFjdC5kZWZhdWx0LmZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU3ZnSWNvbi5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgIHJlZjogcmVmXG4gICAgfSwgcHJvcHMpLCBwYXRoKTtcbiAgfSkpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gXCJcIi5jb25jYXQoZGlzcGxheU5hbWUsIFwiSWNvblwiKTtcbiAgfVxuXG4gIENvbXBvbmVudC5tdWlOYW1lID0gX1N2Z0ljb24uZGVmYXVsdC5tdWlOYW1lO1xuICByZXR1cm4gQ29tcG9uZW50O1xufSIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlOiB0cnVlLFxuICBjb250ZXh0VHlwZXM6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIG1peGluczogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICByZW5kZXI6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZVxufTtcbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIGNvbXBhcmU6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tyZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblRZUEVfU1RBVElDU1tyZWFjdElzLk1lbW9dID0gTUVNT19TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAvLyBSZWFjdCB2MTYuMTEgYW5kIGJlbG93XG4gIGlmIChyZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgfSAvLyBSZWFjdCB2MTYuMTIgYW5kIGFib3ZlXG5cblxuICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJcbnZhciBzcGFjZSA9IHJlcXVpcmUoJ3RvLXNwYWNlLWNhc2UnKVxuXG4vKipcbiAqIEV4cG9ydC5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHRvQ2FtZWxDYXNlXG5cbi8qKlxuICogQ29udmVydCBhIGBzdHJpbmdgIHRvIGNhbWVsIGNhc2UuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5cbmZ1bmN0aW9uIHRvQ2FtZWxDYXNlKHN0cmluZykge1xuICByZXR1cm4gc3BhY2Uoc3RyaW5nKS5yZXBsYWNlKC9cXHMoXFx3KS9nLCBmdW5jdGlvbiAobWF0Y2hlcywgbGV0dGVyKSB7XG4gICAgcmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG4iLCIvKiBnbG9iYWwgd2luZG93ICovXG5pbXBvcnQgcG9ueWZpbGwgZnJvbSAnLi9wb255ZmlsbC5qcyc7XG5cbnZhciByb290O1xuXG5pZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBzZWxmO1xufSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gd2luZG93O1xufSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gZ2xvYmFsO1xufSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gbW9kdWxlO1xufSBlbHNlIHtcbiAgcm9vdCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG59XG5cbnZhciByZXN1bHQgPSBwb255ZmlsbChyb290KTtcbmV4cG9ydCBkZWZhdWx0IHJlc3VsdDtcbiIsImZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW5oZXJpdHNMb29zZTsiLCJ2YXIgaXNhcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG4vKipcbiAqIEV4cG9zZSBgcGF0aFRvUmVnZXhwYC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBwYXRoVG9SZWdleHBcbm1vZHVsZS5leHBvcnRzLnBhcnNlID0gcGFyc2Vcbm1vZHVsZS5leHBvcnRzLmNvbXBpbGUgPSBjb21waWxlXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb0Z1bmN0aW9uID0gdG9rZW5zVG9GdW5jdGlvblxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9SZWdFeHAgPSB0b2tlbnNUb1JlZ0V4cFxuXG4vKipcbiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xudmFyIFBBVEhfUkVHRVhQID0gbmV3IFJlZ0V4cChbXG4gIC8vIE1hdGNoIGVzY2FwZWQgY2hhcmFjdGVycyB0aGF0IHdvdWxkIG90aGVyd2lzZSBhcHBlYXIgaW4gZnV0dXJlIG1hdGNoZXMuXG4gIC8vIFRoaXMgYWxsb3dzIHRoZSB1c2VyIHRvIGVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgdGhhdCB3b24ndCB0cmFuc2Zvcm0uXG4gICcoXFxcXFxcXFwuKScsXG4gIC8vIE1hdGNoIEV4cHJlc3Mtc3R5bGUgcGFyYW1ldGVycyBhbmQgdW4tbmFtZWQgcGFyYW1ldGVycyB3aXRoIGEgcHJlZml4XG4gIC8vIGFuZCBvcHRpb25hbCBzdWZmaXhlcy4gTWF0Y2hlcyBhcHBlYXIgYXM6XG4gIC8vXG4gIC8vIFwiLzp0ZXN0KFxcXFxkKyk/XCIgPT4gW1wiL1wiLCBcInRlc3RcIiwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgXCI/XCIsIHVuZGVmaW5lZF1cbiAgLy8gXCIvcm91dGUoXFxcXGQrKVwiICA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAvLyBcIi8qXCIgICAgICAgICAgICA9PiBbXCIvXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCIqXCJdXG4gICcoW1xcXFwvLl0pPyg/Oig/OlxcXFw6KFxcXFx3KykoPzpcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKT98XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSkoWysqP10pP3woXFxcXCopKSdcbl0uam9pbignfCcpLCAnZycpXG5cbi8qKlxuICogUGFyc2UgYSBzdHJpbmcgZm9yIHRoZSByYXcgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IUFycmF5fVxuICovXG5mdW5jdGlvbiBwYXJzZSAoc3RyLCBvcHRpb25zKSB7XG4gIHZhciB0b2tlbnMgPSBbXVxuICB2YXIga2V5ID0gMFxuICB2YXIgaW5kZXggPSAwXG4gIHZhciBwYXRoID0gJydcbiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJ1xuICB2YXIgcmVzXG5cbiAgd2hpbGUgKChyZXMgPSBQQVRIX1JFR0VYUC5leGVjKHN0cikpICE9IG51bGwpIHtcbiAgICB2YXIgbSA9IHJlc1swXVxuICAgIHZhciBlc2NhcGVkID0gcmVzWzFdXG4gICAgdmFyIG9mZnNldCA9IHJlcy5pbmRleFxuICAgIHBhdGggKz0gc3RyLnNsaWNlKGluZGV4LCBvZmZzZXQpXG4gICAgaW5kZXggPSBvZmZzZXQgKyBtLmxlbmd0aFxuXG4gICAgLy8gSWdub3JlIGFscmVhZHkgZXNjYXBlZCBzZXF1ZW5jZXMuXG4gICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgIHBhdGggKz0gZXNjYXBlZFsxXVxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHN0cltpbmRleF1cbiAgICB2YXIgcHJlZml4ID0gcmVzWzJdXG4gICAgdmFyIG5hbWUgPSByZXNbM11cbiAgICB2YXIgY2FwdHVyZSA9IHJlc1s0XVxuICAgIHZhciBncm91cCA9IHJlc1s1XVxuICAgIHZhciBtb2RpZmllciA9IHJlc1s2XVxuICAgIHZhciBhc3RlcmlzayA9IHJlc1s3XVxuXG4gICAgLy8gUHVzaCB0aGUgY3VycmVudCBwYXRoIG9udG8gdGhlIHRva2Vucy5cbiAgICBpZiAocGF0aCkge1xuICAgICAgdG9rZW5zLnB1c2gocGF0aClcbiAgICAgIHBhdGggPSAnJ1xuICAgIH1cblxuICAgIHZhciBwYXJ0aWFsID0gcHJlZml4ICE9IG51bGwgJiYgbmV4dCAhPSBudWxsICYmIG5leHQgIT09IHByZWZpeFxuICAgIHZhciByZXBlYXQgPSBtb2RpZmllciA9PT0gJysnIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgb3B0aW9uYWwgPSBtb2RpZmllciA9PT0gJz8nIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgZGVsaW1pdGVyID0gcmVzWzJdIHx8IGRlZmF1bHREZWxpbWl0ZXJcbiAgICB2YXIgcGF0dGVybiA9IGNhcHR1cmUgfHwgZ3JvdXBcblxuICAgIHRva2Vucy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUgfHwga2V5KyssXG4gICAgICBwcmVmaXg6IHByZWZpeCB8fCAnJyxcbiAgICAgIGRlbGltaXRlcjogZGVsaW1pdGVyLFxuICAgICAgb3B0aW9uYWw6IG9wdGlvbmFsLFxuICAgICAgcmVwZWF0OiByZXBlYXQsXG4gICAgICBwYXJ0aWFsOiBwYXJ0aWFsLFxuICAgICAgYXN0ZXJpc2s6ICEhYXN0ZXJpc2ssXG4gICAgICBwYXR0ZXJuOiBwYXR0ZXJuID8gZXNjYXBlR3JvdXAocGF0dGVybikgOiAoYXN0ZXJpc2sgPyAnLionIDogJ1teJyArIGVzY2FwZVN0cmluZyhkZWxpbWl0ZXIpICsgJ10rPycpXG4gICAgfSlcbiAgfVxuXG4gIC8vIE1hdGNoIGFueSBjaGFyYWN0ZXJzIHN0aWxsIHJlbWFpbmluZy5cbiAgaWYgKGluZGV4IDwgc3RyLmxlbmd0aCkge1xuICAgIHBhdGggKz0gc3RyLnN1YnN0cihpbmRleClcbiAgfVxuXG4gIC8vIElmIHRoZSBwYXRoIGV4aXN0cywgcHVzaCBpdCBvbnRvIHRoZSBlbmQuXG4gIGlmIChwYXRoKSB7XG4gICAgdG9rZW5zLnB1c2gocGF0aClcbiAgfVxuXG4gIHJldHVybiB0b2tlbnNcbn1cblxuLyoqXG4gKiBDb21waWxlIGEgc3RyaW5nIHRvIGEgdGVtcGxhdGUgZnVuY3Rpb24gZm9yIHRoZSBwYXRoLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFmdW5jdGlvbihPYmplY3Q9LCBPYmplY3Q9KX1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZSAoc3RyLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb0Z1bmN0aW9uKHBhcnNlKHN0ciwgb3B0aW9ucyksIG9wdGlvbnMpXG59XG5cbi8qKlxuICogUHJldHRpZXIgZW5jb2Rpbmcgb2YgVVJJIHBhdGggc2VnbWVudHMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvW1xcLz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFbmNvZGUgdGhlIGFzdGVyaXNrIHBhcmFtZXRlci4gU2ltaWxhciB0byBgcHJldHR5YCwgYnV0IGFsbG93cyBzbGFzaGVzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlQXN0ZXJpc2sgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBtZXRob2QgZm9yIHRyYW5zZm9ybWluZyB0b2tlbnMgaW50byB0aGUgcGF0aCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9GdW5jdGlvbiAodG9rZW5zLCBvcHRpb25zKSB7XG4gIC8vIENvbXBpbGUgYWxsIHRoZSB0b2tlbnMgaW50byByZWdleHBzLlxuICB2YXIgbWF0Y2hlcyA9IG5ldyBBcnJheSh0b2tlbnMubGVuZ3RoKVxuXG4gIC8vIENvbXBpbGUgYWxsIHRoZSBwYXR0ZXJucyBiZWZvcmUgY29tcGlsYXRpb24uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHR5cGVvZiB0b2tlbnNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICBtYXRjaGVzW2ldID0gbmV3IFJlZ0V4cCgnXig/OicgKyB0b2tlbnNbaV0ucGF0dGVybiArICcpJCcsIGZsYWdzKG9wdGlvbnMpKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJ1xuICAgIHZhciBkYXRhID0gb2JqIHx8IHt9XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW5cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdXG4gICAgICB2YXIgc2VnbWVudFxuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pXG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpXG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnRcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18XFwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhdHRhY2hLZXlzIChyZSwga2V5cykge1xuICByZS5rZXlzID0ga2V5c1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucyAmJiBvcHRpb25zLnNlbnNpdGl2ZSA/ICcnIDogJ2knXG59XG5cbi8qKlxuICogUHVsbCBvdXQga2V5cyBmcm9tIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHJlZ2V4cFRvUmVnZXhwIChwYXRoLCBrZXlzKSB7XG4gIC8vIFVzZSBhIG5lZ2F0aXZlIGxvb2thaGVhZCB0byBtYXRjaCBvbmx5IGNhcHR1cmluZyBncm91cHMuXG4gIHZhciBncm91cHMgPSBwYXRoLnNvdXJjZS5tYXRjaCgvXFwoKD8hXFw/KS9nKVxuXG4gIGlmIChncm91cHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgbmFtZTogaSxcbiAgICAgICAgcHJlZml4OiBudWxsLFxuICAgICAgICBkZWxpbWl0ZXI6IG51bGwsXG4gICAgICAgIG9wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgcmVwZWF0OiBmYWxzZSxcbiAgICAgICAgcGFydGlhbDogZmFsc2UsXG4gICAgICAgIGFzdGVyaXNrOiBmYWxzZSxcbiAgICAgICAgcGF0dGVybjogbnVsbFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhwYXRoLCBrZXlzKVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBhcnJheSBpbnRvIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gIHBhdGhcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnRzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0cy5wdXNoKHBhdGhUb1JlZ2V4cChwYXRoW2ldLCBrZXlzLCBvcHRpb25zKS5zb3VyY2UpXG4gIH1cblxuICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKD86JyArIHBhcnRzLmpvaW4oJ3wnKSArICcpJywgZmxhZ3Mob3B0aW9ucykpXG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocmVnZXhwLCBrZXlzKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIHBhdGggcmVnZXhwIGZyb20gc3RyaW5nIGlucHV0LlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb1JlZ0V4cChwYXJzZShwYXRoLCBvcHRpb25zKSwga2V5cywgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBmdW5jdGlvbiBmb3IgdGFraW5nIHRva2VucyBhbmQgcmV0dXJuaW5nIGEgUmVnRXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gICAgICAgICAgdG9rZW5zXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19IGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9SZWdFeHAgKHRva2Vucywga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICB2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3RcbiAgdmFyIGVuZCA9IG9wdGlvbnMuZW5kICE9PSBmYWxzZVxuICB2YXIgcm91dGUgPSAnJ1xuXG4gIC8vIEl0ZXJhdGUgb3ZlciB0aGUgdG9rZW5zIGFuZCBjcmVhdGUgb3VyIHJlZ2V4cCBzdHJpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKHRva2VuKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcHJlZml4ID0gZXNjYXBlU3RyaW5nKHRva2VuLnByZWZpeClcbiAgICAgIHZhciBjYXB0dXJlID0gJyg/OicgKyB0b2tlbi5wYXR0ZXJuICsgJyknXG5cbiAgICAgIGtleXMucHVzaCh0b2tlbilcblxuICAgICAgaWYgKHRva2VuLnJlcGVhdCkge1xuICAgICAgICBjYXB0dXJlICs9ICcoPzonICsgcHJlZml4ICsgY2FwdHVyZSArICcpKidcbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgIGlmICghdG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgIGNhcHR1cmUgPSAnKD86JyArIHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSk/J1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyk/J1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpJ1xuICAgICAgfVxuXG4gICAgICByb3V0ZSArPSBjYXB0dXJlXG4gICAgfVxuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGVzY2FwZVN0cmluZyhvcHRpb25zLmRlbGltaXRlciB8fCAnLycpXG4gIHZhciBlbmRzV2l0aERlbGltaXRlciA9IHJvdXRlLnNsaWNlKC1kZWxpbWl0ZXIubGVuZ3RoKSA9PT0gZGVsaW1pdGVyXG5cbiAgLy8gSW4gbm9uLXN0cmljdCBtb2RlIHdlIGFsbG93IGEgc2xhc2ggYXQgdGhlIGVuZCBvZiBtYXRjaC4gSWYgdGhlIHBhdGggdG9cbiAgLy8gbWF0Y2ggYWxyZWFkeSBlbmRzIHdpdGggYSBzbGFzaCwgd2UgcmVtb3ZlIGl0IGZvciBjb25zaXN0ZW5jeS4gVGhlIHNsYXNoXG4gIC8vIGlzIHZhbGlkIGF0IHRoZSBlbmQgb2YgYSBwYXRoIG1hdGNoLCBub3QgaW4gdGhlIG1pZGRsZS4gVGhpcyBpcyBpbXBvcnRhbnRcbiAgLy8gaW4gbm9uLWVuZGluZyBtb2RlLCB3aGVyZSBcIi90ZXN0L1wiIHNob3VsZG4ndCBtYXRjaCBcIi90ZXN0Ly9yb3V0ZVwiLlxuICBpZiAoIXN0cmljdCkge1xuICAgIHJvdXRlID0gKGVuZHNXaXRoRGVsaW1pdGVyID8gcm91dGUuc2xpY2UoMCwgLWRlbGltaXRlci5sZW5ndGgpIDogcm91dGUpICsgJyg/OicgKyBkZWxpbWl0ZXIgKyAnKD89JCkpPydcbiAgfVxuXG4gIGlmIChlbmQpIHtcbiAgICByb3V0ZSArPSAnJCdcbiAgfSBlbHNlIHtcbiAgICAvLyBJbiBub24tZW5kaW5nIG1vZGUsIHdlIG5lZWQgdGhlIGNhcHR1cmluZyBncm91cHMgdG8gbWF0Y2ggYXMgbXVjaCBhc1xuICAgIC8vIHBvc3NpYmxlIGJ5IHVzaW5nIGEgcG9zaXRpdmUgbG9va2FoZWFkIHRvIHRoZSBlbmQgb3IgbmV4dCBwYXRoIHNlZ21lbnQuXG4gICAgcm91dGUgKz0gc3RyaWN0ICYmIGVuZHNXaXRoRGVsaW1pdGVyID8gJycgOiAnKD89JyArIGRlbGltaXRlciArICd8JCknXG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhuZXcgUmVnRXhwKCdeJyArIHJvdXRlLCBmbGFncyhvcHRpb25zKSksIGtleXMpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIHRoZSBnaXZlbiBwYXRoIHN0cmluZywgcmV0dXJuaW5nIGEgcmVndWxhciBleHByZXNzaW9uLlxuICpcbiAqIEFuIGVtcHR5IGFycmF5IGNhbiBiZSBwYXNzZWQgaW4gZm9yIHRoZSBrZXlzLCB3aGljaCB3aWxsIGhvbGQgdGhlXG4gKiBwbGFjZWhvbGRlciBrZXkgZGVzY3JpcHRpb25zLiBGb3IgZXhhbXBsZSwgdXNpbmcgYC91c2VyLzppZGAsIGBrZXlzYCB3aWxsXG4gKiBjb250YWluIGBbeyBuYW1lOiAnaWQnLCBkZWxpbWl0ZXI6ICcvJywgb3B0aW9uYWw6IGZhbHNlLCByZXBlYXQ6IGZhbHNlIH1dYC5cbiAqXG4gKiBAcGFyYW0gIHsoc3RyaW5nfFJlZ0V4cHxBcnJheSl9IHBhdGhcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0gICAgICAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBwYXRoVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgaWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gcmVnZXhwVG9SZWdleHAocGF0aCwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSlcbiAgfVxuXG4gIGlmIChpc2FycmF5KHBhdGgpKSB7XG4gICAgcmV0dXJuIGFycmF5VG9SZWdleHAoLyoqIEB0eXBlIHshQXJyYXl9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBzdHJpbmdUb1JlZ2V4cCgvKiogQHR5cGUge3N0cmluZ30gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxufVxuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TZXJ0aWZpY2F0ZXNQYWdlLmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxudmFyIGV4cG9ydGVkID0gY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHt9O1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlZDsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gQGZsb3dcbid1c2Ugc3RyaWN0JztcblxudmFyIGtleSA9ICdfX2dsb2JhbF91bmlxdWVfaWRfXyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBnbG9iYWxba2V5XSA9IChnbG9iYWxba2V5XSB8fCAwKSArIDE7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xMS4xNyA4bC0uNTktLjU5TDkuMTcgNkg0djEyaDE2VjhoLTguODN6TTE5IDE2djFoLTh2LTFjMC0xLjMzIDIuNjctMiA0LTJzNCAuNjcgNCAyem0tNC03YzEuMSAwIDIgLjkgMiAycy0uOSAyLTIgMi0yLS45LTItMiAuOS0yIDItMnpcIixcbiAgb3BhY2l0eTogXCIuM1wiXG59KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0yMCA2aC04bC0yLTJINGMtMS4xIDAtMS45OS45LTEuOTkgMkwyIDE4YzAgMS4xLjkgMiAyIDJoMTZjMS4xIDAgMi0uOSAyLTJWOGMwLTEuMS0uOS0yLTItMnptMCAxMkg0VjZoNS4xN2wyIDJIMjB2MTB6bS01LTVjMS4xIDAgMi0uOSAyLTJzLS45LTItMi0yLTIgLjktMiAyIC45IDIgMiAyem0tNCAzdjFoOHYtMWMwLTEuMzMtMi42Ny0yLTQtMnMtNCAuNjctNCAyelwiXG59KSksICdGb2xkZXJTaGFyZWRUd29Ub25lJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMjEgNWMtMS4xMS0uMzUtMi4zMy0uNS0zLjUtLjUtMS45NSAwLTQuMDUuNC01LjUgMS41LTEuNDUtMS4xLTMuNTUtMS41LTUuNS0xLjVTMi40NSA0LjkgMSA2djE0LjY1YzAgLjI1LjI1LjUuNS41LjEgMCAuMTUtLjA1LjI1LS4wNUMzLjEgMjAuNDUgNS4wNSAyMCA2LjUgMjBjMS45NSAwIDQuMDUuNCA1LjUgMS41IDEuMzUtLjg1IDMuOC0xLjUgNS41LTEuNSAxLjY1IDAgMy4zNS4zIDQuNzUgMS4wNS4xLjA1LjE1LjA1LjI1LjA1LjI1IDAgLjUtLjI1LjUtLjVWNmMtLjYtLjQ1LTEuMjUtLjc1LTItMXpNMyAxOC41VjdjMS4xLS4zNSAyLjMtLjUgMy41LS41IDEuMzQgMCAzLjEzLjQxIDQuNS45OXYxMS41QzkuNjMgMTguNDEgNy44NCAxOCA2LjUgMThjLTEuMiAwLTIuNC4xNS0zLjUuNXptMTggMGMtMS4xLS4zNS0yLjMtLjUtMy41LS41LTEuMzQgMC0zLjEzLjQxLTQuNS45OVY3LjQ5YzEuMzctLjU5IDMuMTYtLjk5IDQuNS0uOTkgMS4yIDAgMi40LjE1IDMuNS41djExLjV6XCJcbn0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTExIDcuNDljLTEuMzctLjU4LTMuMTYtLjk5LTQuNS0uOTktMS4yIDAtMi40LjE1LTMuNS41djExLjVjMS4xLS4zNSAyLjMtLjUgMy41LS41IDEuMzQgMCAzLjEzLjQxIDQuNS45OVY3LjQ5elwiLFxuICBvcGFjaXR5OiBcIi4zXCJcbn0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZ1wiLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE3LjUgMTAuNWMuODggMCAxLjczLjA5IDIuNS4yNlY5LjI0Yy0uNzktLjE1LTEuNjQtLjI0LTIuNS0uMjQtMS4yOCAwLTIuNDYuMTYtMy41LjQ3djEuNTdjLjk5LS4zNSAyLjE4LS41NCAzLjUtLjU0ek0xNy41IDEzLjE2Yy44OCAwIDEuNzMuMDkgMi41LjI2VjExLjljLS43OS0uMTUtMS42NC0uMjQtMi41LS4yNC0xLjI4IDAtMi40Ni4xNi0zLjUuNDd2MS41N2MuOTktLjM0IDIuMTgtLjU0IDMuNS0uNTR6TTE3LjUgMTUuODNjLjg4IDAgMS43My4wOSAyLjUuMjZ2LTEuNTJjLS43OS0uMTUtMS42NC0uMjQtMi41LS4yNC0xLjI4IDAtMi40Ni4xNi0zLjUuNDd2MS41N2MuOTktLjM1IDIuMTgtLjU0IDMuNS0uNTR6XCJcbn0pKSksICdNZW51Qm9va1R3b1RvbmUnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xMiAzLjk5Yy00LjQyIDAtOCAzLjU4LTggOHMzLjU4IDggOCA4IDgtMy41OCA4LTgtMy41OC04LTgtOHptNC4yNSAxMi4yNGMtMi4zNSAyLjM0LTYuMTUgMi4zNC04LjQ5IDBMMTIgMTEuOTl2LTZjMS41NCAwIDMuMDcuNTkgNC4yNCAxLjc2IDIuMzUgMi4zNCAyLjM1IDYuMTQuMDEgOC40OHpcIixcbiAgb3BhY2l0eTogXCIuM1wiXG59KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xNi4yNCA3Ljc1Yy0xLjE3LTEuMTctMi43LTEuNzYtNC4yNC0xLjc2djZsLTQuMjQgNC4yNGMyLjM0IDIuMzQgNi4xNCAyLjM0IDguNDkgMCAyLjM0LTIuMzQgMi4zNC02LjE0LS4wMS04LjQ4ek0xMiAxLjk5Yy01LjUyIDAtMTAgNC40OC0xMCAxMHM0LjQ4IDEwIDEwIDEwIDEwLTQuNDggMTAtMTAtNC40OC0xMC0xMC0xMHptMCAxOGMtNC40MiAwLTgtMy41OC04LThzMy41OC04IDgtOCA4IDMuNTggOCA4LTMuNTggOC04IDh6XCJcbn0pKSwgJ1RpbWVsYXBzZVR3b1RvbmUnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xMS45MiA4LjI4Yy4yNC0xLjQtLjE2LTIuODktMS4yNC0zLjk2LS45NC0uOTUtMi4yLTEuMzktMy40NC0xLjMybDMuMDkgMy4wOS00LjI0IDQuMjRMMyA3LjI0Yy0uMDcgMS4yNC4zNyAyLjQ5IDEuMzEgMy40NCAxLjA0IDEuMDQgMi40NyAxLjQ1IDMuODMgMS4yNS43MS0uMSAxLjQtLjM4IDItLjgybDkuNDYgOS40Ni44OC0uODgtOS40NS05LjQ1Yy40Ny0uNi43Ny0xLjI2Ljg5LTEuOTZ6XCIsXG4gIG9wYWNpdHk6IFwiLjNcIlxufSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMjIuNjEgMTguOTdMMTMuNTQgOS45Yy45My0yLjM0LjQ1LTUuMS0xLjQ0LTdDOS44LjYgNi4yMi4zOSAzLjY3IDIuMjVMNy41IDYuMDggNi4wOCA3LjUgMi4yNSAzLjY3Qy4zOSA2LjIxLjYgOS43OSAyLjkgMTIuMDljMS44NiAxLjg2IDQuNTcgMi4zNSA2Ljg5IDEuNDhsOS4xMSA5LjExYy4zOS4zOSAxLjAyLjM5IDEuNDEgMGwyLjMtMi4zYy40LS4zOC40LTEuMDIgMC0xLjQxem0tMyAxLjZsLTkuNDYtOS40NmMtLjYxLjQ1LTEuMjkuNzItMiAuODItMS4zNi4yLTIuNzktLjIxLTMuODMtMS4yNS0uOTUtLjk0LTEuMzktMi4yLTEuMzItMy40NGwzLjA5IDMuMDkgNC4yNC00LjI0TDcuMjQgM2MxLjI0LS4wNyAyLjQ5LjM3IDMuNDQgMS4zMSAxLjA4IDEuMDggMS40OSAyLjU3IDEuMjQgMy45Ni0uMTIuNy0uNDIgMS4zNi0uODggMS45NWw5LjQ1IDkuNDUtLjg4Ljl6XCJcbn0pKSwgJ0J1aWxkVHdvVG9uZScpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTQgOGgxNnYxMUg0elwiLFxuICBvcGFjaXR5OiBcIi4zXCJcbn0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTIwIDZoLTRWNGMwLTEuMTEtLjg5LTItMi0yaC00Yy0xLjExIDAtMiAuODktMiAydjJINGMtMS4xMSAwLTEuOTkuODktMS45OSAyTDIgMTljMCAxLjExLjg5IDIgMiAyaDE2YzEuMTEgMCAyLS44OSAyLTJWOGMwLTEuMTEtLjg5LTItMi0yek0xMCA0aDR2MmgtNFY0em0xMCAxNUg0VjhoMTZ2MTF6XCJcbn0pKSwgJ1dvcmtUd29Ub25lJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNNSAxOS4wOWgxNFY0LjkxSDV2MTQuMTh6TTYgN2gxMnYySDZWN3ptMCA0aDEydjJINnYtMnptMCA0aDEydjJINnYtMnpcIixcbiAgb3BhY2l0eTogXCIuM1wiXG59KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xOS41IDMuNUwxOCAybC0xLjUgMS41TDE1IDJsLTEuNSAxLjVMMTIgMmwtMS41IDEuNUw5IDIgNy41IDMuNSA2IDIgNC41IDMuNSAzIDJ2MjBsMS41LTEuNUw2IDIybDEuNS0xLjVMOSAyMmwxLjUtMS41TDEyIDIybDEuNS0xLjVMMTUgMjJsMS41LTEuNUwxOCAyMmwxLjUtMS41TDIxIDIyVjJsLTEuNSAxLjV6TTE5IDE5LjA5SDVWNC45MWgxNHYxNC4xOHpNNiAxNWgxMnYySDZ6bTAtNGgxMnYySDZ6bTAtNGgxMnYySDZ6XCJcbn0pKSwgJ1JlY2VpcHRUd29Ub25lJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNOSAxMmg2djhIOXpcIixcbiAgb3BhY2l0eTogXCIuM1wiXG59KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xMiAxQzguOTggMSA2LjI0IDIuMjMgNC4yNSA0LjIxbDEuNDEgMS40MUM3LjI4IDQgOS41MyAzIDEyIDNzNC43MiAxIDYuMzQgMi42MmwxLjQxLTEuNDFDMTcuNzYgMi4yMyAxNS4wMiAxIDEyIDF6TTcgNy4wN0w4LjQzIDguNWMuOTEtLjkxIDIuMTgtMS40OCAzLjU3LTEuNDhzMi42Ni41NyAzLjU3IDEuNDhMMTcgNy4wN0MxNS43MiA1Ljc5IDEzLjk1IDUgMTIgNXMtMy43Mi43OS01IDIuMDd6bTcuODYgMi45NEw5LjE0IDEwQzguNTEgMTAgOCAxMC41MSA4IDExLjE0djkuNzFjMCAuNjMuNTEgMS4xNCAxLjE0IDEuMTRoNS43MWMuNjMgMCAxLjE0LS41MSAxLjE0LTEuMTR2LTkuNzFjLjAxLS42My0uNS0xLjEzLTEuMTMtMS4xM3pNMTUgMjBIOXYtOGg2djh6XCJcbn0pKSwgJ1NwZWFrZXJQaG9uZVR3b1RvbmUnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMi4wXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgaD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IscD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHE9bj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHI9bj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx1PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LHY9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdz1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHg9bj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIseT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMztuJiZTeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTtcbnZhciB6PW4/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsYWE9bj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNjtuJiZTeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik7biYmU3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTtuJiZTeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik7dmFyIEE9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO1xuZnVuY3Rpb24gQihhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn12YXIgQz17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sRD17fTtcbmZ1bmN0aW9uIEUoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9Y3x8Q31FLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0UucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcihCKDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtFLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBGKCl7fUYucHJvdG90eXBlPUUucHJvdG90eXBlO2Z1bmN0aW9uIEcoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9Y3x8Q312YXIgSD1HLnByb3RvdHlwZT1uZXcgRjtcbkguY29uc3RydWN0b3I9RztoKEgsRS5wcm90b3R5cGUpO0guaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEk9e2N1cnJlbnQ6bnVsbH0sSj17Y3VycmVudDpudWxsfSxLPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsYyl7dmFyIGUsZD17fSxnPW51bGwsbD1udWxsO2lmKG51bGwhPWIpZm9yKGUgaW4gdm9pZCAwIT09Yi5yZWYmJihsPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilLLmNhbGwoYixlKSYmIUwuaGFzT3duUHJvcGVydHkoZSkmJihkW2VdPWJbZV0pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGYpe2Zvcih2YXIgaz1BcnJheShmKSxtPTA7bTxmO20rKylrW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49a31pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZSBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZFtlXSYmKGRbZV09ZltlXSk7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLGtleTpnLHJlZjpsLHByb3BzOmQsX293bmVyOkouY3VycmVudH19XG5mdW5jdGlvbiBiYShhLGIpe3JldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09cH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBPPS9cXC8rL2csUD1bXTtmdW5jdGlvbiBRKGEsYixjLGUpe2lmKFAubGVuZ3RoKXt2YXIgZD1QLnBvcCgpO2QucmVzdWx0PWE7ZC5rZXlQcmVmaXg9YjtkLmZ1bmM9YztkLmNvbnRleHQ9ZTtkLmNvdW50PTA7cmV0dXJuIGR9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6Yyxjb250ZXh0OmUsY291bnQ6MH19XG5mdW5jdGlvbiBSKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+UC5sZW5ndGgmJlAucHVzaChhKX1cbmZ1bmN0aW9uIFMoYSxiLGMsZSl7dmFyIGQ9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWR8fFwiYm9vbGVhblwiPT09ZClhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChkKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHA6Y2FzZSBxOmc9ITB9fWlmKGcpcmV0dXJuIGMoZSxhLFwiXCI9PT1iP1wiLlwiK1QoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGw9MDtsPGEubGVuZ3RoO2wrKyl7ZD1hW2xdO3ZhciBmPWIrVChkLGwpO2crPVMoZCxmLGMsZSl9ZWxzZSBpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhP2Y9bnVsbDooZj1BJiZhW0FdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGw9XG4wOyEoZD1hLm5leHQoKSkuZG9uZTspZD1kLnZhbHVlLGY9YitUKGQsbCsrKSxnKz1TKGQsZixjLGUpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWQpdGhyb3cgYz1cIlwiK2EsRXJyb3IoQigzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09Yz9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpjLFwiXCIpKTtyZXR1cm4gZ31mdW5jdGlvbiBVKGEsYixjKXtyZXR1cm4gbnVsbD09YT8wOlMoYSxcIlwiLGIsYyl9ZnVuY3Rpb24gVChhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gY2EoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gZGEoYSxiLGMpe3ZhciBlPWEucmVzdWx0LGQ9YS5rZXlQcmVmaXg7YT1hLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspO0FycmF5LmlzQXJyYXkoYSk/VihhLGUsYyxmdW5jdGlvbihhKXtyZXR1cm4gYX0pOm51bGwhPWEmJihOKGEpJiYoYT1iYShhLGQrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpK2MpKSxlLnB1c2goYSkpfWZ1bmN0aW9uIFYoYSxiLGMsZSxkKXt2YXIgZz1cIlwiO251bGwhPWMmJihnPShcIlwiK2MpLnJlcGxhY2UoTyxcIiQmL1wiKStcIi9cIik7Yj1RKGIsZyxlLGQpO1UoYSxkYSxiKTtSKGIpfWZ1bmN0aW9uIFcoKXt2YXIgYT1JLmN1cnJlbnQ7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoQigzMjEpKTtyZXR1cm4gYX1cbnZhciBYPXtDaGlsZHJlbjp7bWFwOmZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBlPVtdO1YoYSxlLG51bGwsYixjKTtyZXR1cm4gZX0sZm9yRWFjaDpmdW5jdGlvbihhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTtiPVEobnVsbCxudWxsLGIsYyk7VShhLGNhLGIpO1IoYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBVKGEsZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107VihhLGIsbnVsbCxmdW5jdGlvbihhKXtyZXR1cm4gYX0pO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFOKGEpKXRocm93IEVycm9yKEIoMTQzKSk7cmV0dXJuIGF9fSxjcmVhdGVSZWY6ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX0sQ29tcG9uZW50OkUsUHVyZUNvbXBvbmVudDpHLGNyZWF0ZUNvbnRleHQ6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjp3LF9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLFxuX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp2LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9LGZvcndhcmRSZWY6ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOngscmVuZGVyOmF9fSxsYXp5OmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjphYSxfY3RvcjphLF9zdGF0dXM6LTEsX3Jlc3VsdDpudWxsfX0sbWVtbzpmdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp6LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX0sdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUNhbGxiYWNrKGEsYil9LHVzZUNvbnRleHQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUNvbnRleHQoYSxiKX0sdXNlRWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VFZmZlY3QoYSxiKX0sdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLFxuYixjKXtyZXR1cm4gVygpLnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGMpfSx1c2VEZWJ1Z1ZhbHVlOmZ1bmN0aW9uKCl7fSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUxheW91dEVmZmVjdChhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VNZW1vKGEsYil9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBXKCkudXNlUmVkdWNlcihhLGIsYyl9LHVzZVJlZjpmdW5jdGlvbihhKXtyZXR1cm4gVygpLnVzZVJlZihhKX0sdXNlU3RhdGU6ZnVuY3Rpb24oYSl7cmV0dXJuIFcoKS51c2VTdGF0ZShhKX0sRnJhZ21lbnQ6cixQcm9maWxlcjp1LFN0cmljdE1vZGU6dCxTdXNwZW5zZTp5LGNyZWF0ZUVsZW1lbnQ6TSxjbG9uZUVsZW1lbnQ6ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKEIoMjY3LGEpKTt2YXIgZT1oKHt9LGEucHJvcHMpLGQ9YS5rZXksZz1hLnJlZixsPWEuX293bmVyO1xuaWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihnPWIucmVmLGw9Si5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBmPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGsgaW4gYilLLmNhbGwoYixrKSYmIUwuaGFzT3duUHJvcGVydHkoaykmJihlW2tdPXZvaWQgMD09PWJba10mJnZvaWQgMCE9PWY/ZltrXTpiW2tdKX12YXIgaz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWspZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxrKXtmPUFycmF5KGspO2Zvcih2YXIgbT0wO208azttKyspZlttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWZ9cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmQscmVmOmcscHJvcHM6ZSxfb3duZXI6bH19LGNyZWF0ZUZhY3Rvcnk6ZnVuY3Rpb24oYSl7dmFyIGI9TS5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9LGlzVmFsaWRFbGVtZW50Ok4sdmVyc2lvbjpcIjE2LjEyLjBcIixcbl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntSZWFjdEN1cnJlbnREaXNwYXRjaGVyOkksUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6e3N1c3BlbnNlOm51bGx9LFJlYWN0Q3VycmVudE93bmVyOkosSXNTb21lUmVuZGVyZXJBY3Rpbmc6e2N1cnJlbnQ6ITF9LGFzc2lnbjpofX0sWT17ZGVmYXVsdDpYfSxaPVkmJlh8fFk7bW9kdWxlLmV4cG9ydHM9Wi5kZWZhdWx0fHxaO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMi4wXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG49cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscT1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHUoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9aWYoIWFhKXRocm93IEVycm9yKHUoMjI3KSk7dmFyIGJhPW51bGwsY2E9e307XG5mdW5jdGlvbiBkYSgpe2lmKGJhKWZvcih2YXIgYSBpbiBjYSl7dmFyIGI9Y2FbYV0sYz1iYS5pbmRleE9mKGEpO2lmKCEoLTE8YykpdGhyb3cgRXJyb3IodSg5NixhKSk7aWYoIWVhW2NdKXtpZighYi5leHRyYWN0RXZlbnRzKXRocm93IEVycm9yKHUoOTcsYSkpO2VhW2NdPWI7Yz1iLmV2ZW50VHlwZXM7Zm9yKHZhciBkIGluIGMpe3ZhciBlPXZvaWQgMDt2YXIgZj1jW2RdLGc9YixoPWQ7aWYoZmEuaGFzT3duUHJvcGVydHkoaCkpdGhyb3cgRXJyb3IodSg5OSxoKSk7ZmFbaF09Zjt2YXIgaz1mLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO2lmKGspe2ZvcihlIGluIGspay5oYXNPd25Qcm9wZXJ0eShlKSYmaGEoa1tlXSxnLGgpO2U9ITB9ZWxzZSBmLnJlZ2lzdHJhdGlvbk5hbWU/KGhhKGYucmVnaXN0cmF0aW9uTmFtZSxnLGgpLGU9ITApOmU9ITE7aWYoIWUpdGhyb3cgRXJyb3IodSg5OCxkLGEpKTt9fX19XG5mdW5jdGlvbiBoYShhLGIsYyl7aWYoaWFbYV0pdGhyb3cgRXJyb3IodSgxMDAsYSkpO2lhW2FdPWI7amFbYV09Yi5ldmVudFR5cGVzW2NdLmRlcGVuZGVuY2llc312YXIgZWE9W10sZmE9e30saWE9e30samE9e307ZnVuY3Rpb24ga2EoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG0pe3RoaXMub25FcnJvcihtKX19dmFyIGxhPSExLG1hPW51bGwsbmE9ITEsb2E9bnVsbCxwYT17b25FcnJvcjpmdW5jdGlvbihhKXtsYT0hMDttYT1hfX07ZnVuY3Rpb24gcWEoYSxiLGMsZCxlLGYsZyxoLGspe2xhPSExO21hPW51bGw7a2EuYXBwbHkocGEsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIHJhKGEsYixjLGQsZSxmLGcsaCxrKXtxYS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYobGEpe2lmKGxhKXt2YXIgbD1tYTtsYT0hMTttYT1udWxsfWVsc2UgdGhyb3cgRXJyb3IodSgxOTgpKTtuYXx8KG5hPSEwLG9hPWwpfX12YXIgc2E9bnVsbCx1YT1udWxsLHZhPW51bGw7ZnVuY3Rpb24gd2EoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PXZhKGMpO3JhKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9ZnVuY3Rpb24geGEoYSxiKXtpZihudWxsPT1iKXRocm93IEVycm9yKHUoMzApKTtpZihudWxsPT1hKXJldHVybiBiO2lmKEFycmF5LmlzQXJyYXkoYSkpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEucHVzaC5hcHBseShhLGIpLGE7YS5wdXNoKGIpO3JldHVybiBhfXJldHVybiBBcnJheS5pc0FycmF5KGIpP1thXS5jb25jYXQoYik6W2EsYl19XG5mdW5jdGlvbiB5YShhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIgemE9bnVsbDtmdW5jdGlvbiBBYShhKXtpZihhKXt2YXIgYj1hLl9kaXNwYXRjaExpc3RlbmVycyxjPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYikpZm9yKHZhciBkPTA7ZDxiLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtkKyspd2EoYSxiW2RdLGNbZF0pO2Vsc2UgYiYmd2EoYSxiLGMpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fWZ1bmN0aW9uIEJhKGEpe251bGwhPT1hJiYoemE9eGEoemEsYSkpO2E9emE7emE9bnVsbDtpZihhKXt5YShhLEFhKTtpZih6YSl0aHJvdyBFcnJvcih1KDk1KSk7aWYobmEpdGhyb3cgYT1vYSxuYT0hMSxvYT1udWxsLGE7fX1cbnZhciBDYT17aW5qZWN0RXZlbnRQbHVnaW5PcmRlcjpmdW5jdGlvbihhKXtpZihiYSl0aHJvdyBFcnJvcih1KDEwMSkpO2JhPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEpO2RhKCl9LGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTpmdW5jdGlvbihhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtpZighY2EuaGFzT3duUHJvcGVydHkoYyl8fGNhW2NdIT09ZCl7aWYoY2FbY10pdGhyb3cgRXJyb3IodSgxMDIsYykpO2NhW2NdPWQ7Yj0hMH19YiYmZGEoKX19O1xuZnVuY3Rpb24gRGEoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZighYylyZXR1cm4gbnVsbDt2YXIgZD1zYShjKTtpZighZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYyl0aHJvdyBFcnJvcih1KDIzMSxiLHR5cGVvZiBjKSk7XG5yZXR1cm4gY312YXIgRWE9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ7RWEuaGFzT3duUHJvcGVydHkoXCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyXCIpfHwoRWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcj17Y3VycmVudDpudWxsfSk7RWEuaGFzT3duUHJvcGVydHkoXCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZ1wiKXx8KEVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnPXtzdXNwZW5zZTpudWxsfSk7XG52YXIgRmE9L14oLiopW1xcXFxcXC9dLyx3PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsR2E9dz9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxIYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsSWE9dz9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsSmE9dz9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsS2E9dz9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsTGE9dz9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksTWE9dz9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxOYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsT2E9dz9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIsUGE9dz9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsUWE9dz9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTpcbjYwMTIwLFJhPXc/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsU2E9dz9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNjt3JiZTeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik7dyYmU3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTt3JiZTeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik7dmFyIFRhPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBVYShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9VGEmJmFbVGFdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9XG5mdW5jdGlvbiBWYShhKXtpZigtMT09PWEuX3N0YXR1cyl7YS5fc3RhdHVzPTA7dmFyIGI9YS5fY3RvcjtiPWIoKTthLl9yZXN1bHQ9YjtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pfX1cbmZ1bmN0aW9uIFdhKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgSWE6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgSGE6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIEthOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIEphOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgUGE6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgUWE6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgTWE6cmV0dXJuXCJDb250ZXh0LkNvbnN1bWVyXCI7Y2FzZSBMYTpyZXR1cm5cIkNvbnRleHQuUHJvdmlkZXJcIjtjYXNlIE9hOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO3JldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXCIpXCI6XG5cIkZvcndhcmRSZWZcIik7Y2FzZSBSYTpyZXR1cm4gV2EoYS50eXBlKTtjYXNlIFNhOmlmKGE9MT09PWEuX3N0YXR1cz9hLl9yZXN1bHQ6bnVsbClyZXR1cm4gV2EoYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gWGEoYSl7dmFyIGI9XCJcIjtkb3thOnN3aXRjaChhLnRhZyl7Y2FzZSAzOmNhc2UgNDpjYXNlIDY6Y2FzZSA3OmNhc2UgMTA6Y2FzZSA5OnZhciBjPVwiXCI7YnJlYWsgYTtkZWZhdWx0OnZhciBkPWEuX2RlYnVnT3duZXIsZT1hLl9kZWJ1Z1NvdXJjZSxmPVdhKGEudHlwZSk7Yz1udWxsO2QmJihjPVdhKGQudHlwZSkpO2Q9ZjtmPVwiXCI7ZT9mPVwiIChhdCBcIitlLmZpbGVOYW1lLnJlcGxhY2UoRmEsXCJcIikrXCI6XCIrZS5saW5lTnVtYmVyK1wiKVwiOmMmJihmPVwiIChjcmVhdGVkIGJ5IFwiK2MrXCIpXCIpO2M9XCJcXG4gICAgaW4gXCIrKGR8fFwiVW5rbm93blwiKStmfWIrPWM7YT1hLnJldHVybn13aGlsZShhKTtyZXR1cm4gYn1cbnZhciBZYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksWmE9bnVsbCwkYT1udWxsLGFiPW51bGw7ZnVuY3Rpb24gYmIoYSl7aWYoYT11YShhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIFphKXRocm93IEVycm9yKHUoMjgwKSk7dmFyIGI9c2EoYS5zdGF0ZU5vZGUpO1phKGEuc3RhdGVOb2RlLGEudHlwZSxiKX19ZnVuY3Rpb24gY2IoYSl7JGE/YWI/YWIucHVzaChhKTphYj1bYV06JGE9YX1mdW5jdGlvbiBkYigpe2lmKCRhKXt2YXIgYT0kYSxiPWFiO2FiPSRhPW51bGw7YmIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWJiKGJbYV0pfX1mdW5jdGlvbiBlYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIGZiKGEsYixjLGQpe3JldHVybiBhKGIsYyxkKX1mdW5jdGlvbiBnYigpe31cbnZhciBoYj1lYixpYj0hMSxqYj0hMTtmdW5jdGlvbiBrYigpe2lmKG51bGwhPT0kYXx8bnVsbCE9PWFiKWdiKCksZGIoKX1uZXcgTWFwO3ZhciBsYj0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sbWI9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxuYj17fSxvYj17fTtcbmZ1bmN0aW9uIHBiKGEpe2lmKG1iLmNhbGwob2IsYSkpcmV0dXJuITA7aWYobWIuY2FsbChuYixhKSlyZXR1cm4hMTtpZihsYi50ZXN0KGEpKXJldHVybiBvYlthXT0hMDtuYlthXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBxYihhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIHJiKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fHFiKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gQihhLGIsYyxkLGUsZil7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWZ9dmFyIEQ9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwwLCExLGEsbnVsbCwhMSl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07RFtiXT1uZXcgQihiLDEsITEsYVsxXSxudWxsLCExKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwyLCExLGEsbnVsbCwhMSl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwzLCEwLGEsbnVsbCwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw0LCExLGEsbnVsbCwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDYsITEsYSxudWxsLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7dmFyIHNiPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gdGIoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uoc2IsXG50Yik7RFtiXT1uZXcgQihiLDEsITEsYSxudWxsLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHNiLHRiKTtEW2JdPW5ldyBCKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHNiLHRiKTtEW2JdPW5ldyBCKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5ELnhsaW5rSHJlZj1uZXcgQihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITApO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITApfSk7ZnVuY3Rpb24gdWIoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gdmIoYSxiLGMsZCl7dmFyIGU9RC5oYXNPd25Qcm9wZXJ0eShiKT9EW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwocmIoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP3BiKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG5mdW5jdGlvbiB3YihhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24geGIoYSl7dmFyIGI9d2IoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIHliKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj14YihhKSl9ZnVuY3Rpb24gemIoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPXdiKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9ZnVuY3Rpb24gQWIoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIG4oe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfVxuZnVuY3Rpb24gQmIoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9dWIobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBDYihhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnZiKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBFYihhLGIpe0NiKGEsYik7dmFyIGM9dWIoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/RmIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmRmIoYSxiLnR5cGUsdWIoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBHYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBGYihhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fGEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9ZnVuY3Rpb24gSGIoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gSWIoYSxiKXthPW4oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1IYihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBKYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrdWIoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIEtiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcih1KDkxKSk7cmV0dXJuIG4oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gTGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5kZWZhdWx0VmFsdWU7Yj1iLmNoaWxkcmVuO2lmKG51bGwhPWIpe2lmKG51bGwhPWMpdGhyb3cgRXJyb3IodSg5MikpO2lmKEFycmF5LmlzQXJyYXkoYikpe2lmKCEoMT49Yi5sZW5ndGgpKXRocm93IEVycm9yKHUoOTMpKTtiPWJbMF19Yz1ifW51bGw9PWMmJihjPVwiXCIpfWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOnViKGMpfX1cbmZ1bmN0aW9uIE1iKGEsYil7dmFyIGM9dWIoYi52YWx1ZSksZD11YihiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIE5iKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9dmFyIE9iPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIFBiKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gUWIoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP1BiKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIFJiLFNiPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PU9iLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle1JiPVJifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1JiLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPVJiLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIFRiKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9ZnVuY3Rpb24gVWIoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVmI9e2FuaW1hdGlvbmVuZDpVYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpVYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlViKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlViKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sV2I9e30sWGI9e307XG5ZYSYmKFhiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFZiLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFZiLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFZiLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFZiLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gWWIoYSl7aWYoV2JbYV0pcmV0dXJuIFdiW2FdO2lmKCFWYlthXSlyZXR1cm4gYTt2YXIgYj1WYlthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBYYilyZXR1cm4gV2JbYV09YltjXTtyZXR1cm4gYX12YXIgWmI9WWIoXCJhbmltYXRpb25lbmRcIiksJGI9WWIoXCJhbmltYXRpb25pdGVyYXRpb25cIiksYWM9WWIoXCJhbmltYXRpb25zdGFydFwiKSxiYz1ZYihcInRyYW5zaXRpb25lbmRcIiksY2M9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gZWMoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmVmZmVjdFRhZyYxMDI2KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gZmMoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBnYyhhKXtpZihlYyhhKSE9PWEpdGhyb3cgRXJyb3IodSgxODgpKTt9XG5mdW5jdGlvbiBoYyhhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1lYyhhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcih1KDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBnYyhlKSxhO2lmKGY9PT1kKXJldHVybiBnYyhlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHUoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IodSgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcih1KDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IodSgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIGljKGEpe2E9aGMoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG52YXIgamMsa2MsbGMsbWM9ITEsbmM9W10sb2M9bnVsbCxwYz1udWxsLHFjPW51bGwscmM9bmV3IE1hcCxzYz1uZXcgTWFwLHRjPVtdLHVjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY2xvc2UgY2FuY2VsIGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIiksdmM9XCJmb2N1cyBibHVyIGRyYWdlbnRlciBkcmFnbGVhdmUgbW91c2VvdmVyIG1vdXNlb3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJvdXQgZ290cG9pbnRlcmNhcHR1cmUgbG9zdHBvaW50ZXJjYXB0dXJlXCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gd2MoYSl7dmFyIGI9eGMoYSk7dWMuZm9yRWFjaChmdW5jdGlvbihjKXt5YyhjLGEsYil9KTt2Yy5mb3JFYWNoKGZ1bmN0aW9uKGMpe3ljKGMsYSxiKX0pfWZ1bmN0aW9uIHpjKGEsYixjLGQpe3JldHVybntibG9ja2VkT246YSx0b3BMZXZlbFR5cGU6YixldmVudFN5c3RlbUZsYWdzOmN8MzIsbmF0aXZlRXZlbnQ6ZH19ZnVuY3Rpb24gQWMoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImJsdXJcIjpvYz1udWxsO2JyZWFrO2Nhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6cGM9bnVsbDticmVhaztjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcIm1vdXNlb3V0XCI6cWM9bnVsbDticmVhaztjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcm91dFwiOnJjLmRlbGV0ZShiLnBvaW50ZXJJZCk7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOnNjLmRlbGV0ZShiLnBvaW50ZXJJZCl9fVxuZnVuY3Rpb24gQmMoYSxiLGMsZCxlKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWUpcmV0dXJuIGE9emMoYixjLGQsZSksbnVsbCE9PWImJihiPUNjKGIpLG51bGwhPT1iJiZrYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7cmV0dXJuIGF9ZnVuY3Rpb24gRGMoYSxiLGMsZCl7c3dpdGNoKGIpe2Nhc2UgXCJmb2N1c1wiOnJldHVybiBvYz1CYyhvYyxhLGIsYyxkKSwhMDtjYXNlIFwiZHJhZ2VudGVyXCI6cmV0dXJuIHBjPUJjKHBjLGEsYixjLGQpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gcWM9QmMocWMsYSxiLGMsZCksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGU9ZC5wb2ludGVySWQ7cmMuc2V0KGUsQmMocmMuZ2V0KGUpfHxudWxsLGEsYixjLGQpKTtyZXR1cm4hMDtjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpyZXR1cm4gZT1kLnBvaW50ZXJJZCxzYy5zZXQoZSxCYyhzYy5nZXQoZSl8fG51bGwsYSxiLGMsZCkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gRWMoYSl7dmFyIGI9RmMoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1lYyhiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj1mYyhjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtxLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7bGMoYyl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmh5ZHJhdGUpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfWZ1bmN0aW9uIEdjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTt2YXIgYj1IYyhhLnRvcExldmVsVHlwZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWIpe3ZhciBjPUNjKGIpO251bGwhPT1jJiZrYyhjKTthLmJsb2NrZWRPbj1iO3JldHVybiExfXJldHVybiEwfVxuZnVuY3Rpb24gSWMoYSxiLGMpe0djKGEpJiZjLmRlbGV0ZShiKX1mdW5jdGlvbiBKYygpe2ZvcihtYz0hMTswPG5jLmxlbmd0aDspe3ZhciBhPW5jWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1DYyhhLmJsb2NrZWRPbik7bnVsbCE9PWEmJmpjKGEpO2JyZWFrfXZhciBiPUhjKGEudG9wTGV2ZWxUeXBlLGEuZXZlbnRTeXN0ZW1GbGFncyxhLm5hdGl2ZUV2ZW50KTtudWxsIT09Yj9hLmJsb2NrZWRPbj1iOm5jLnNoaWZ0KCl9bnVsbCE9PW9jJiZHYyhvYykmJihvYz1udWxsKTtudWxsIT09cGMmJkdjKHBjKSYmKHBjPW51bGwpO251bGwhPT1xYyYmR2MocWMpJiYocWM9bnVsbCk7cmMuZm9yRWFjaChJYyk7c2MuZm9yRWFjaChJYyl9ZnVuY3Rpb24gS2MoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLG1jfHwobWM9ITAscS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHEudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksSmMpKSl9XG5mdW5jdGlvbiBMYyhhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBLYyhiLGEpfWlmKDA8bmMubGVuZ3RoKXtLYyhuY1swXSxhKTtmb3IodmFyIGM9MTtjPG5jLmxlbmd0aDtjKyspe3ZhciBkPW5jW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09b2MmJktjKG9jLGEpO251bGwhPT1wYyYmS2MocGMsYSk7bnVsbCE9PXFjJiZLYyhxYyxhKTtyYy5mb3JFYWNoKGIpO3NjLmZvckVhY2goYik7Zm9yKGM9MDtjPHRjLmxlbmd0aDtjKyspZD10Y1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8dGMubGVuZ3RoJiYoYz10Y1swXSxudWxsPT09Yy5ibG9ja2VkT24pOylFYyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJnRjLnNoaWZ0KCl9XG5mdW5jdGlvbiBNYyhhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9ZnVuY3Rpb24gTmMoYSl7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1mdW5jdGlvbiBPYyhhLGIsYyl7aWYoYj1EYShhLGMuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbYl0pKWMuX2Rpc3BhdGNoTGlzdGVuZXJzPXhhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPXhhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpfVxuZnVuY3Rpb24gUGMoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7Zm9yKHZhciBiPWEuX3RhcmdldEluc3QsYz1bXTtiOyljLnB1c2goYiksYj1OYyhiKTtmb3IoYj1jLmxlbmd0aDswPGItLTspT2MoY1tiXSxcImNhcHR1cmVkXCIsYSk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKylPYyhjW2JdLFwiYnViYmxlZFwiLGEpfX1mdW5jdGlvbiBRYyhhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1EYShhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9eGEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9eGEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIFJjKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmUWMoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfVxuZnVuY3Rpb24gU2MoYSl7eWEoYSxQYyl9ZnVuY3Rpb24gVGMoKXtyZXR1cm4hMH1mdW5jdGlvbiBVYygpe3JldHVybiExfWZ1bmN0aW9uIEUoYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP1RjOlVjO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9VWM7cmV0dXJuIHRoaXN9XG5uKEUucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9VGMpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9VGMpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9VGN9LGlzUGVyc2lzdGVudDpVYyxkZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsXG5iO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO3RoaXMubmF0aXZlRXZlbnQ9dGhpcy5fdGFyZ2V0SW5zdD10aGlzLmRpc3BhdGNoQ29uZmlnPW51bGw7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD10aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1VYzt0aGlzLl9kaXNwYXRjaEluc3RhbmNlcz10aGlzLl9kaXNwYXRjaExpc3RlbmVycz1udWxsfX0pO0UuSW50ZXJmYWNlPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpmdW5jdGlvbigpe3JldHVybiBudWxsfSxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xuRS5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7bihlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9bih7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtWYyhjKTtyZXR1cm4gY307VmMoRSk7ZnVuY3Rpb24gV2MoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9XG5mdW5jdGlvbiBYYyhhKXtpZighKGEgaW5zdGFuY2VvZiB0aGlzKSl0aHJvdyBFcnJvcih1KDI3OSkpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1mdW5jdGlvbiBWYyhhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1XYzthLnJlbGVhc2U9WGN9dmFyIFljPUUuZXh0ZW5kKHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxaYz1FLmV4dGVuZCh7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLCRjPUUuZXh0ZW5kKHt2aWV3Om51bGwsZGV0YWlsOm51bGx9KSxhZD0kYy5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO1xuZnVuY3Rpb24gYmQoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgY2Q9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LGRkPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxlZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gZ2QoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1lZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIGhkKCl7cmV0dXJuIGdkfVxudmFyIGlkPSRjLmV4dGVuZCh7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1jZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1iZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/ZGRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxsb2NhdGlvbjpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxyZXBlYXQ6bnVsbCxsb2NhbGU6bnVsbCxnZXRNb2RpZmllclN0YXRlOmhkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9iZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP2JkKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksamQ9MCxrZD0wLGxkPSExLG1kPSExLG5kPSRjLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpoZCxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WDt2YXIgYj1qZDtqZD1hLnNjcmVlblg7cmV0dXJuIGxkP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5YLVxuYjowOihsZD0hMCwwKX0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRZXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WTt2YXIgYj1rZDtrZD1hLnNjcmVlblk7cmV0dXJuIG1kP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5ZLWI6MDoobWQ9ITAsMCl9fSksb2Q9bmQuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGFuZ2VudGlhbFByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHR3aXN0Om51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLHBkPW5kLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSxxZD0kYy5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpoZH0pLHJkPUUuZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxcbmVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksc2Q9bmQuZXh0ZW5kKHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLHRkPVtbXCJibHVyXCIsXCJibHVyXCIsMF0sW1wiY2FuY2VsXCIsXCJjYW5jZWxcIiwwXSxbXCJjbGlja1wiLFwiY2xpY2tcIiwwXSxbXCJjbG9zZVwiLFwiY2xvc2VcIiwwXSxbXCJjb250ZXh0bWVudVwiLFwiY29udGV4dE1lbnVcIiwwXSxbXCJjb3B5XCIsXCJjb3B5XCIsMF0sW1wiY3V0XCIsXCJjdXRcIiwwXSxbXCJhdXhjbGlja1wiLFwiYXV4Q2xpY2tcIiwwXSxbXCJkYmxjbGlja1wiLFwiZG91YmxlQ2xpY2tcIiwwXSxbXCJkcmFnZW5kXCIsXCJkcmFnRW5kXCIsXG4wXSxbXCJkcmFnc3RhcnRcIixcImRyYWdTdGFydFwiLDBdLFtcImRyb3BcIixcImRyb3BcIiwwXSxbXCJmb2N1c1wiLFwiZm9jdXNcIiwwXSxbXCJpbnB1dFwiLFwiaW5wdXRcIiwwXSxbXCJpbnZhbGlkXCIsXCJpbnZhbGlkXCIsMF0sW1wia2V5ZG93blwiLFwia2V5RG93blwiLDBdLFtcImtleXByZXNzXCIsXCJrZXlQcmVzc1wiLDBdLFtcImtleXVwXCIsXCJrZXlVcFwiLDBdLFtcIm1vdXNlZG93blwiLFwibW91c2VEb3duXCIsMF0sW1wibW91c2V1cFwiLFwibW91c2VVcFwiLDBdLFtcInBhc3RlXCIsXCJwYXN0ZVwiLDBdLFtcInBhdXNlXCIsXCJwYXVzZVwiLDBdLFtcInBsYXlcIixcInBsYXlcIiwwXSxbXCJwb2ludGVyY2FuY2VsXCIsXCJwb2ludGVyQ2FuY2VsXCIsMF0sW1wicG9pbnRlcmRvd25cIixcInBvaW50ZXJEb3duXCIsMF0sW1wicG9pbnRlcnVwXCIsXCJwb2ludGVyVXBcIiwwXSxbXCJyYXRlY2hhbmdlXCIsXCJyYXRlQ2hhbmdlXCIsMF0sW1wicmVzZXRcIixcInJlc2V0XCIsMF0sW1wic2Vla2VkXCIsXCJzZWVrZWRcIiwwXSxbXCJzdWJtaXRcIixcInN1Ym1pdFwiLDBdLFtcInRvdWNoY2FuY2VsXCIsXCJ0b3VjaENhbmNlbFwiLFxuMF0sW1widG91Y2hlbmRcIixcInRvdWNoRW5kXCIsMF0sW1widG91Y2hzdGFydFwiLFwidG91Y2hTdGFydFwiLDBdLFtcInZvbHVtZWNoYW5nZVwiLFwidm9sdW1lQ2hhbmdlXCIsMF0sW1wiZHJhZ1wiLFwiZHJhZ1wiLDFdLFtcImRyYWdlbnRlclwiLFwiZHJhZ0VudGVyXCIsMV0sW1wiZHJhZ2V4aXRcIixcImRyYWdFeGl0XCIsMV0sW1wiZHJhZ2xlYXZlXCIsXCJkcmFnTGVhdmVcIiwxXSxbXCJkcmFnb3ZlclwiLFwiZHJhZ092ZXJcIiwxXSxbXCJtb3VzZW1vdmVcIixcIm1vdXNlTW92ZVwiLDFdLFtcIm1vdXNlb3V0XCIsXCJtb3VzZU91dFwiLDFdLFtcIm1vdXNlb3ZlclwiLFwibW91c2VPdmVyXCIsMV0sW1wicG9pbnRlcm1vdmVcIixcInBvaW50ZXJNb3ZlXCIsMV0sW1wicG9pbnRlcm91dFwiLFwicG9pbnRlck91dFwiLDFdLFtcInBvaW50ZXJvdmVyXCIsXCJwb2ludGVyT3ZlclwiLDFdLFtcInNjcm9sbFwiLFwic2Nyb2xsXCIsMV0sW1widG9nZ2xlXCIsXCJ0b2dnbGVcIiwxXSxbXCJ0b3VjaG1vdmVcIixcInRvdWNoTW92ZVwiLDFdLFtcIndoZWVsXCIsXCJ3aGVlbFwiLDFdLFtcImFib3J0XCIsXCJhYm9ydFwiLFxuMl0sW1piLFwiYW5pbWF0aW9uRW5kXCIsMl0sWyRiLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCIsMl0sW2FjLFwiYW5pbWF0aW9uU3RhcnRcIiwyXSxbXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsMl0sW1wiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCIsMl0sW1wiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCIsMl0sW1wiZW1wdGllZFwiLFwiZW1wdGllZFwiLDJdLFtcImVuY3J5cHRlZFwiLFwiZW5jcnlwdGVkXCIsMl0sW1wiZW5kZWRcIixcImVuZGVkXCIsMl0sW1wiZXJyb3JcIixcImVycm9yXCIsMl0sW1wiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCIsMl0sW1wibG9hZFwiLFwibG9hZFwiLDJdLFtcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIiwyXSxbXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIiwyXSxbXCJsb2Fkc3RhcnRcIixcImxvYWRTdGFydFwiLDJdLFtcImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCIsMl0sW1wicGxheWluZ1wiLFwicGxheWluZ1wiLDJdLFtcInByb2dyZXNzXCIsXG5cInByb2dyZXNzXCIsMl0sW1wic2Vla2luZ1wiLFwic2Vla2luZ1wiLDJdLFtcInN0YWxsZWRcIixcInN0YWxsZWRcIiwyXSxbXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCIsMl0sW1widGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLDJdLFtiYyxcInRyYW5zaXRpb25FbmRcIiwyXSxbXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCIsMl1dLHVkPXt9LHZkPXt9LHdkPTA7Zm9yKDt3ZDx0ZC5sZW5ndGg7d2QrKyl7dmFyIHlkPXRkW3dkXSx6ZD15ZFswXSxBZD15ZFsxXSxCZD15ZFsyXSxDZD1cIm9uXCIrKEFkWzBdLnRvVXBwZXJDYXNlKCkrQWQuc2xpY2UoMSkpLERkPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpDZCxjYXB0dXJlZDpDZCtcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlt6ZF0sZXZlbnRQcmlvcml0eTpCZH07dWRbQWRdPURkO3ZkW3pkXT1EZH1cbnZhciBFZD17ZXZlbnRUeXBlczp1ZCxnZXRFdmVudFByaW9yaXR5OmZ1bmN0aW9uKGEpe2E9dmRbYV07cmV0dXJuIHZvaWQgMCE9PWE/YS5ldmVudFByaW9yaXR5OjJ9LGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dmRbYV07aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1iZChjKSlyZXR1cm4gbnVsbDtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOmE9aWQ7YnJlYWs7Y2FzZSBcImJsdXJcIjpjYXNlIFwiZm9jdXNcIjphPWFkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmE9bmQ7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6YT1cbnBkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOmE9cWQ7YnJlYWs7Y2FzZSBaYjpjYXNlICRiOmNhc2UgYWM6YT1ZYzticmVhaztjYXNlIGJjOmE9cmQ7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOmE9JGM7YnJlYWs7Y2FzZSBcIndoZWVsXCI6YT1zZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjphPVpjO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmE9b2Q7YnJlYWs7ZGVmYXVsdDphPUV9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtTYyhiKTtyZXR1cm4gYn19LEZkPXEudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksXG5HZD1xLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxIZD1FZC5nZXRFdmVudFByaW9yaXR5LElkPTEwLEpkPVtdO1xuZnVuY3Rpb24gS2QoYSl7dmFyIGI9YS50YXJnZXRJbnN0LGM9Yjtkb3tpZighYyl7YS5hbmNlc3RvcnMucHVzaChjKTticmVha312YXIgZD1jO2lmKDM9PT1kLnRhZylkPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZWxzZXtmb3IoO2QucmV0dXJuOylkPWQucmV0dXJuO2Q9MyE9PWQudGFnP251bGw6ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mb31pZighZClicmVhaztiPWMudGFnOzUhPT1iJiY2IT09Ynx8YS5hbmNlc3RvcnMucHVzaChjKTtjPUZjKGQpfXdoaWxlKGMpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKXtiPWEuYW5jZXN0b3JzW2NdO3ZhciBlPU1jKGEubmF0aXZlRXZlbnQpO2Q9YS50b3BMZXZlbFR5cGU7Zm9yKHZhciBmPWEubmF0aXZlRXZlbnQsZz1hLmV2ZW50U3lzdGVtRmxhZ3MsaD1udWxsLGs9MDtrPGVhLmxlbmd0aDtrKyspe3ZhciBsPWVhW2tdO2wmJihsPWwuZXh0cmFjdEV2ZW50cyhkLGIsZixlLGcpKSYmKGg9eGEoaCxsKSl9QmEoaCl9fVxudmFyIExkPSEwO2Z1bmN0aW9uIEYoYSxiKXtNZChiLGEsITEpfWZ1bmN0aW9uIE1kKGEsYixjKXtzd2l0Y2goSGQoYikpe2Nhc2UgMDp2YXIgZD1OZC5iaW5kKG51bGwsYiwxKTticmVhaztjYXNlIDE6ZD1PZC5iaW5kKG51bGwsYiwxKTticmVhaztkZWZhdWx0OmQ9UGQuYmluZChudWxsLGIsMSl9Yz9hLmFkZEV2ZW50TGlzdGVuZXIoYixkLCEwKTphLmFkZEV2ZW50TGlzdGVuZXIoYixkLCExKX1mdW5jdGlvbiBOZChhLGIsYyl7aWJ8fGdiKCk7dmFyIGQ9UGQsZT1pYjtpYj0hMDt0cnl7ZmIoZCxhLGIsYyl9ZmluYWxseXsoaWI9ZSl8fGtiKCl9fWZ1bmN0aW9uIE9kKGEsYixjKXtHZChGZCxQZC5iaW5kKG51bGwsYSxiLGMpKX1cbmZ1bmN0aW9uIFFkKGEsYixjLGQpe2lmKEpkLmxlbmd0aCl7dmFyIGU9SmQucG9wKCk7ZS50b3BMZXZlbFR5cGU9YTtlLmV2ZW50U3lzdGVtRmxhZ3M9YjtlLm5hdGl2ZUV2ZW50PWM7ZS50YXJnZXRJbnN0PWQ7YT1lfWVsc2UgYT17dG9wTGV2ZWxUeXBlOmEsZXZlbnRTeXN0ZW1GbGFnczpiLG5hdGl2ZUV2ZW50OmMsdGFyZ2V0SW5zdDpkLGFuY2VzdG9yczpbXX07dHJ5e2lmKGI9S2QsYz1hLGpiKWIoYyx2b2lkIDApO2Vsc2V7amI9ITA7dHJ5e2hiKGIsYyx2b2lkIDApfWZpbmFsbHl7amI9ITEsa2IoKX19fWZpbmFsbHl7YS50b3BMZXZlbFR5cGU9bnVsbCxhLm5hdGl2ZUV2ZW50PW51bGwsYS50YXJnZXRJbnN0PW51bGwsYS5hbmNlc3RvcnMubGVuZ3RoPTAsSmQubGVuZ3RoPElkJiZKZC5wdXNoKGEpfX1cbmZ1bmN0aW9uIFBkKGEsYixjKXtpZihMZClpZigwPG5jLmxlbmd0aCYmLTE8dWMuaW5kZXhPZihhKSlhPXpjKG51bGwsYSxiLGMpLG5jLnB1c2goYSk7ZWxzZXt2YXIgZD1IYyhhLGIsYyk7bnVsbD09PWQ/QWMoYSxjKTotMTx1Yy5pbmRleE9mKGEpPyhhPXpjKGQsYSxiLGMpLG5jLnB1c2goYSkpOkRjKGQsYSxiLGMpfHwoQWMoYSxjKSxRZChhLGIsYyxudWxsKSl9fWZ1bmN0aW9uIEhjKGEsYixjKXt2YXIgZD1NYyhjKTtkPUZjKGQpO2lmKG51bGwhPT1kKXt2YXIgZT1lYyhkKTtpZihudWxsPT09ZSlkPW51bGw7ZWxzZXt2YXIgZj1lLnRhZztpZigxMz09PWYpe2Q9ZmMoZSk7aWYobnVsbCE9PWQpcmV0dXJuIGQ7ZD1udWxsfWVsc2UgaWYoMz09PWYpe2lmKGUuc3RhdGVOb2RlLmh5ZHJhdGUpcmV0dXJuIDM9PT1lLnRhZz9lLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7ZD1udWxsfWVsc2UgZSE9PWQmJihkPW51bGwpfX1RZChhLGIsYyxkKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFJkKGEpe2lmKCFZYSlyZXR1cm4hMTthPVwib25cIithO3ZhciBiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn12YXIgU2Q9bmV3IChcImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcCk7ZnVuY3Rpb24geGMoYSl7dmFyIGI9U2QuZ2V0KGEpO3ZvaWQgMD09PWImJihiPW5ldyBTZXQsU2Quc2V0KGEsYikpO3JldHVybiBifVxuZnVuY3Rpb24geWMoYSxiLGMpe2lmKCFjLmhhcyhhKSl7c3dpdGNoKGEpe2Nhc2UgXCJzY3JvbGxcIjpNZChiLFwic2Nyb2xsXCIsITApO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6TWQoYixcImZvY3VzXCIsITApO01kKGIsXCJibHVyXCIsITApO2MuYWRkKFwiYmx1clwiKTtjLmFkZChcImZvY3VzXCIpO2JyZWFrO2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xvc2VcIjpSZChhKSYmTWQoYixhLCEwKTticmVhaztjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztkZWZhdWx0Oi0xPT09Y2MuaW5kZXhPZihhKSYmRihhLGIpfWMuYWRkKGEpfX1cbnZhciBUZD17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsXG5mbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxVZD1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMoVGQpLmZvckVhY2goZnVuY3Rpb24oYSl7VWQuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtUZFtiXT1UZFthXX0pfSk7ZnVuY3Rpb24gVmQoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fFRkLmhhc093blByb3BlcnR5KGEpJiZUZFthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBXZChhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1WZChjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBYZD1uKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gWWQoYSxiKXtpZihiKXtpZihYZFthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHUoMTM3LGEsXCJcIikpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IodSg2MCkpO2lmKCEoXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IodSg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IodSg2MixcIlwiKSk7fX1cbmZ1bmN0aW9uIFpkKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX1mdW5jdGlvbiAkZChhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz14YyhhKTtiPWphW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXljKGJbZF0sYSxjKX1mdW5jdGlvbiBhZSgpe31cbmZ1bmN0aW9uIGJlKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1mdW5jdGlvbiBjZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9ZnVuY3Rpb24gZGUoYSxiKXt2YXIgYz1jZShhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1jZShjKX19XG5mdW5jdGlvbiBlZShhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP2VlKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1mdW5jdGlvbiBmZSgpe2Zvcih2YXIgYT13aW5kb3csYj1iZSgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1iZShhLmRvY3VtZW50KX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGdlKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9dmFyIGhlPVwiJFwiLGllPVwiLyRcIixqZT1cIiQ/XCIsa2U9XCIkIVwiLGxlPW51bGwsbWU9bnVsbDtmdW5jdGlvbiBuZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9XG5mdW5jdGlvbiBvZShhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9dmFyIHBlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLHFlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMDtmdW5jdGlvbiByZShhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVha31yZXR1cm4gYX1cbmZ1bmN0aW9uIHNlKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoYz09PWhlfHxjPT09a2V8fGM9PT1qZSl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2UgYz09PWllJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgdGU9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksdWU9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIit0ZSx2ZT1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK3RlLHdlPVwiX19yZWFjdENvbnRhaW5lcmUkXCIrdGU7XG5mdW5jdGlvbiBGYyhhKXt2YXIgYj1hW3VlXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1t3ZV18fGNbdWVdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9c2UoYSk7bnVsbCE9PWE7KXtpZihjPWFbdWVdKXJldHVybiBjO2E9c2UoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIENjKGEpe2E9YVt1ZV18fGFbd2VdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB4ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IodSgzMykpO31mdW5jdGlvbiB5ZShhKXtyZXR1cm4gYVt2ZV18fG51bGx9dmFyIHplPW51bGwsQWU9bnVsbCxCZT1udWxsO1xuZnVuY3Rpb24gQ2UoKXtpZihCZSlyZXR1cm4gQmU7dmFyIGEsYj1BZSxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiB6ZT96ZS52YWx1ZTp6ZS50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBCZT1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfXZhciBEZT1FLmV4dGVuZCh7ZGF0YTpudWxsfSksRWU9RS5leHRlbmQoe2RhdGE6bnVsbH0pLEZlPVs5LDEzLDI3LDMyXSxHZT1ZYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csSGU9bnVsbDtZYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoSGU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciBJZT1ZYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIUhlLEplPVlhJiYoIUdlfHxIZSYmODxIZSYmMTE+PUhlKSxLZT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxMZT17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbmVuZCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb251cGRhdGUga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9fSxNZT0hMTtcbmZ1bmN0aW9uIE5lKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09RmUuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBPZShhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBQZT0hMTtmdW5jdGlvbiBRZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gT2UoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO01lPSEwO3JldHVybiBLZTtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1LZSYmTWU/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gUmUoYSxiKXtpZihQZSlyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhR2UmJk5lKGEsYik/KGE9Q2UoKSxCZT1BZT16ZT1udWxsLFBlPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBKZSYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgU2U9e2V2ZW50VHlwZXM6TGUsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZTtpZihHZSliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjp2YXIgZj1MZS5jb21wb3NpdGlvblN0YXJ0O2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6Zj1MZS5jb21wb3NpdGlvbkVuZDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmY9TGUuY29tcG9zaXRpb25VcGRhdGU7YnJlYWsgYn1mPXZvaWQgMH1lbHNlIFBlP05lKGEsYykmJihmPUxlLmNvbXBvc2l0aW9uRW5kKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGY9TGUuY29tcG9zaXRpb25TdGFydCk7Zj8oSmUmJlwia29cIiE9PWMubG9jYWxlJiYoUGV8fGYhPT1MZS5jb21wb3NpdGlvblN0YXJ0P2Y9PT1MZS5jb21wb3NpdGlvbkVuZCYmUGUmJihlPUNlKCkpOih6ZT1kLEFlPVwidmFsdWVcImluIHplP3plLnZhbHVlOnplLnRleHRDb250ZW50LFBlPSEwKSksZj1EZS5nZXRQb29sZWQoZixcbmIsYyxkKSxlP2YuZGF0YT1lOihlPU9lKGMpLG51bGwhPT1lJiYoZi5kYXRhPWUpKSxTYyhmKSxlPWYpOmU9bnVsbDsoYT1JZT9RZShhLGMpOlJlKGEsYykpPyhiPUVlLmdldFBvb2xlZChMZS5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsU2MoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWU/YjpudWxsPT09Yj9lOltlLGJdfX0sVGU9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gVWUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFUZVthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9XG52YXIgVmU9e2NoYW5nZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNoYW5nZVwiLGNhcHR1cmVkOlwib25DaGFuZ2VDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY2hhbmdlIGNsaWNrIGZvY3VzIGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX07ZnVuY3Rpb24gV2UoYSxiLGMpe2E9RS5nZXRQb29sZWQoVmUuY2hhbmdlLGEsYixjKTthLnR5cGU9XCJjaGFuZ2VcIjtjYihjKTtTYyhhKTtyZXR1cm4gYX12YXIgWGU9bnVsbCxZZT1udWxsO2Z1bmN0aW9uIFplKGEpe0JhKGEpfWZ1bmN0aW9uICRlKGEpe3ZhciBiPXhlKGEpO2lmKHpiKGIpKXJldHVybiBhfWZ1bmN0aW9uIGFmKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIGJmPSExO1lhJiYoYmY9UmQoXCJpbnB1dFwiKSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSk7XG5mdW5jdGlvbiBjZigpe1hlJiYoWGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsZGYpLFllPVhlPW51bGwpfWZ1bmN0aW9uIGRmKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiYkZShZZSkpaWYoYT1XZShZZSxhLE1jKGEpKSxpYilCYShhKTtlbHNle2liPSEwO3RyeXtlYihaZSxhKX1maW5hbGx5e2liPSExLGtiKCl9fX1mdW5jdGlvbiBlZihhLGIsYyl7XCJmb2N1c1wiPT09YT8oY2YoKSxYZT1iLFllPWMsWGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsZGYpKTpcImJsdXJcIj09PWEmJmNmKCl9ZnVuY3Rpb24gZmYoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gJGUoWWUpfWZ1bmN0aW9uIGdmKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gJGUoYil9ZnVuY3Rpb24gaGYoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gJGUoYil9XG52YXIgamY9e2V2ZW50VHlwZXM6VmUsX2lzSW5wdXRFdmVudFN1cHBvcnRlZDpiZixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWI/eGUoYik6d2luZG93LGY9ZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1mfHxcImlucHV0XCI9PT1mJiZcImZpbGVcIj09PWUudHlwZSl2YXIgZz1hZjtlbHNlIGlmKFVlKGUpKWlmKGJmKWc9aGY7ZWxzZXtnPWZmO3ZhciBoPWVmfWVsc2UoZj1lLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09Zi50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09ZS50eXBlfHxcInJhZGlvXCI9PT1lLnR5cGUpJiYoZz1nZik7aWYoZyYmKGc9ZyhhLGIpKSlyZXR1cm4gV2UoZyxjLGQpO2gmJmgoYSxlLGIpO1wiYmx1clwiPT09YSYmKGE9ZS5fd3JhcHBlclN0YXRlKSYmYS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09ZS50eXBlJiZGYihlLFwibnVtYmVyXCIsZS52YWx1ZSl9fSxrZj17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLFxuZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfX0sbGYsbWY9e2V2ZW50VHlwZXM6a2YsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hLGc9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGYmJjA9PT0oZSYzMikmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHwhZyYmIWYpcmV0dXJuIG51bGw7XG5lPWQud2luZG93PT09ZD9kOihlPWQub3duZXJEb2N1bWVudCk/ZS5kZWZhdWx0Vmlld3x8ZS5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGcpe2lmKGc9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP0ZjKGIpOm51bGwsbnVsbCE9PWImJihmPWVjKGIpLGIhPT1mfHw1IT09Yi50YWcmJjYhPT1iLnRhZykpYj1udWxsfWVsc2UgZz1udWxsO2lmKGc9PT1iKXJldHVybiBudWxsO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1hKXt2YXIgaD1uZDt2YXIgaz1rZi5tb3VzZUxlYXZlO3ZhciBsPWtmLm1vdXNlRW50ZXI7dmFyIG09XCJtb3VzZVwifWVsc2UgaWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKWg9b2Qsaz1rZi5wb2ludGVyTGVhdmUsbD1rZi5wb2ludGVyRW50ZXIsbT1cInBvaW50ZXJcIjthPW51bGw9PWc/ZTp4ZShnKTtlPW51bGw9PWI/ZTp4ZShiKTtrPWguZ2V0UG9vbGVkKGssZyxjLGQpO2sudHlwZT1tK1wibGVhdmVcIjtrLnRhcmdldD1cbmE7ay5yZWxhdGVkVGFyZ2V0PWU7ZD1oLmdldFBvb2xlZChsLGIsYyxkKTtkLnR5cGU9bStcImVudGVyXCI7ZC50YXJnZXQ9ZTtkLnJlbGF0ZWRUYXJnZXQ9YTtoPWc7bT1iO2lmKGgmJm0pYTp7bD1oO2E9bTtnPTA7Zm9yKGI9bDtiO2I9TmMoYikpZysrO2I9MDtmb3IoZT1hO2U7ZT1OYyhlKSliKys7Zm9yKDswPGctYjspbD1OYyhsKSxnLS07Zm9yKDswPGItZzspYT1OYyhhKSxiLS07Zm9yKDtnLS07KXtpZihsPT09YXx8bD09PWEuYWx0ZXJuYXRlKWJyZWFrIGE7bD1OYyhsKTthPU5jKGEpfWw9bnVsbH1lbHNlIGw9bnVsbDthPWw7Zm9yKGw9W107aCYmaCE9PWE7KXtnPWguYWx0ZXJuYXRlO2lmKG51bGwhPT1nJiZnPT09YSlicmVhaztsLnB1c2goaCk7aD1OYyhoKX1mb3IoaD1bXTttJiZtIT09YTspe2c9bS5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1hKWJyZWFrO2gucHVzaChtKTttPU5jKG0pfWZvcihtPTA7bTxsLmxlbmd0aDttKyspUWMobFttXSxcImJ1YmJsZWRcIixrKTtmb3IobT1cbmgubGVuZ3RoOzA8bS0tOylRYyhoW21dLFwiY2FwdHVyZWRcIixkKTtpZihjPT09bGYpcmV0dXJuIGxmPW51bGwsW2tdO2xmPWM7cmV0dXJuW2ssZF19fTtmdW5jdGlvbiBuZihhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIG9mPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOm5mLHBmPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7ZnVuY3Rpb24gcWYoYSxiKXtpZihvZihhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspaWYoIXBmLmNhbGwoYixjW2RdKXx8IW9mKGFbY1tkXV0sYltjW2RdXSkpcmV0dXJuITE7cmV0dXJuITB9XG52YXIgcmY9WWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxzZj17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX0sdGY9bnVsbCx1Zj1udWxsLHZmPW51bGwsd2Y9ITE7XG5mdW5jdGlvbiB4ZihhLGIpe3ZhciBjPWIud2luZG93PT09Yj9iLmRvY3VtZW50Ojk9PT1iLm5vZGVUeXBlP2I6Yi5vd25lckRvY3VtZW50O2lmKHdmfHxudWxsPT10Znx8dGYhPT1iZShjKSlyZXR1cm4gbnVsbDtjPXRmO1wic2VsZWN0aW9uU3RhcnRcImluIGMmJmdlKGMpP2M9e3N0YXJ0OmMuc2VsZWN0aW9uU3RhcnQsZW5kOmMuc2VsZWN0aW9uRW5kfTooYz0oYy5vd25lckRvY3VtZW50JiZjLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksYz17YW5jaG9yTm9kZTpjLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmMuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpjLmZvY3VzTm9kZSxmb2N1c09mZnNldDpjLmZvY3VzT2Zmc2V0fSk7cmV0dXJuIHZmJiZxZih2ZixjKT9udWxsOih2Zj1jLGE9RS5nZXRQb29sZWQoc2Yuc2VsZWN0LHVmLGEsYiksYS50eXBlPVwic2VsZWN0XCIsYS50YXJnZXQ9dGYsU2MoYSksYSl9XG52YXIgeWY9e2V2ZW50VHlwZXM6c2YsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1kLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCxmO2lmKCEoZj0hZSkpe2E6e2U9eGMoZSk7Zj1qYS5vblNlbGVjdDtmb3IodmFyIGc9MDtnPGYubGVuZ3RoO2crKylpZighZS5oYXMoZltnXSkpe2U9ITE7YnJlYWsgYX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/eGUoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjppZihVZShlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSl0Zj1lLHVmPWIsdmY9bnVsbDticmVhaztjYXNlIFwiYmx1clwiOnZmPXVmPXRmPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOndmPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpyZXR1cm4gd2Y9ITEseGYoYyxkKTtjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYocmYpYnJlYWs7XG5jYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOnJldHVybiB4ZihjLGQpfXJldHVybiBudWxsfX07Q2EuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihcIlJlc3BvbmRlckV2ZW50UGx1Z2luIFNpbXBsZUV2ZW50UGx1Z2luIEVudGVyTGVhdmVFdmVudFBsdWdpbiBDaGFuZ2VFdmVudFBsdWdpbiBTZWxlY3RFdmVudFBsdWdpbiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIuc3BsaXQoXCIgXCIpKTt2YXIgemY9Q2M7c2E9eWU7dWE9emY7dmE9eGU7Q2EuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtTaW1wbGVFdmVudFBsdWdpbjpFZCxFbnRlckxlYXZlRXZlbnRQbHVnaW46bWYsQ2hhbmdlRXZlbnRQbHVnaW46amYsU2VsZWN0RXZlbnRQbHVnaW46eWYsQmVmb3JlSW5wdXRFdmVudFBsdWdpbjpTZX0pO25ldyBTZXQ7dmFyIEFmPVtdLEJmPS0xO2Z1bmN0aW9uIEcoYSl7MD5CZnx8KGEuY3VycmVudD1BZltCZl0sQWZbQmZdPW51bGwsQmYtLSl9XG5mdW5jdGlvbiBJKGEsYil7QmYrKztBZltCZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBDZj17fSxKPXtjdXJyZW50OkNmfSxLPXtjdXJyZW50OiExfSxEZj1DZjtmdW5jdGlvbiBFZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIENmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIEwoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1cbmZ1bmN0aW9uIEZmKGEpe0coSyxhKTtHKEosYSl9ZnVuY3Rpb24gR2YoYSl7RyhLLGEpO0coSixhKX1mdW5jdGlvbiBIZihhLGIsYyl7aWYoSi5jdXJyZW50IT09Q2YpdGhyb3cgRXJyb3IodSgxNjgpKTtJKEosYixhKTtJKEssYyxhKX1mdW5jdGlvbiBJZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7YT1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGEpKXRocm93IEVycm9yKHUoMTA4LFdhKGIpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIG4oe30sYyx7fSxkKX1mdW5jdGlvbiBKZihhKXt2YXIgYj1hLnN0YXRlTm9kZTtiPWImJmIuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fENmO0RmPUouY3VycmVudDtJKEosYixhKTtJKEssSy5jdXJyZW50LGEpO3JldHVybiEwfVxuZnVuY3Rpb24gS2YoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHUoMTY5KSk7Yz8oYj1JZihhLGIsRGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YixHKEssYSksRyhKLGEpLEkoSixiLGEpKTpHKEssYSk7SShLLGMsYSl9XG52YXIgTGY9cS51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksTWY9cS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLE5mPXEudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssT2Y9cS51bnN0YWJsZV9zaG91bGRZaWVsZCxQZj1xLnVuc3RhYmxlX3JlcXVlc3RQYWludCxRZj1xLnVuc3RhYmxlX25vdyxSZj1xLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLFNmPXEudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksVGY9cS51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxVZj1xLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFZmPXEudW5zdGFibGVfTG93UHJpb3JpdHksV2Y9cS51bnN0YWJsZV9JZGxlUHJpb3JpdHksWGY9e30sWWY9dm9pZCAwIT09UGY/UGY6ZnVuY3Rpb24oKXt9LFpmPW51bGwsJGY9bnVsbCxhZz0hMSxiZz1RZigpLGNnPTFFND5iZz9RZjpmdW5jdGlvbigpe3JldHVybiBRZigpLWJnfTtcbmZ1bmN0aW9uIGRnKCl7c3dpdGNoKFJmKCkpe2Nhc2UgU2Y6cmV0dXJuIDk5O2Nhc2UgVGY6cmV0dXJuIDk4O2Nhc2UgVWY6cmV0dXJuIDk3O2Nhc2UgVmY6cmV0dXJuIDk2O2Nhc2UgV2Y6cmV0dXJuIDk1O2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMzIpKTt9fWZ1bmN0aW9uIGVnKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiBTZjtjYXNlIDk4OnJldHVybiBUZjtjYXNlIDk3OnJldHVybiBVZjtjYXNlIDk2OnJldHVybiBWZjtjYXNlIDk1OnJldHVybiBXZjtkZWZhdWx0OnRocm93IEVycm9yKHUoMzMyKSk7fX1mdW5jdGlvbiBmZyhhLGIpe2E9ZWcoYSk7cmV0dXJuIExmKGEsYil9ZnVuY3Rpb24gZ2coYSxiLGMpe2E9ZWcoYSk7cmV0dXJuIE1mKGEsYixjKX1mdW5jdGlvbiBoZyhhKXtudWxsPT09WmY/KFpmPVthXSwkZj1NZihTZixpZykpOlpmLnB1c2goYSk7cmV0dXJuIFhmfWZ1bmN0aW9uIGpnKCl7aWYobnVsbCE9PSRmKXt2YXIgYT0kZjskZj1udWxsO05mKGEpfWlnKCl9XG5mdW5jdGlvbiBpZygpe2lmKCFhZyYmbnVsbCE9PVpmKXthZz0hMDt2YXIgYT0wO3RyeXt2YXIgYj1aZjtmZyg5OSxmdW5jdGlvbigpe2Zvcig7YTxiLmxlbmd0aDthKyspe3ZhciBjPWJbYV07ZG8gYz1jKCEwKTt3aGlsZShudWxsIT09Yyl9fSk7WmY9bnVsbH1jYXRjaChjKXt0aHJvdyBudWxsIT09WmYmJihaZj1aZi5zbGljZShhKzEpKSxNZihTZixqZyksYzt9ZmluYWxseXthZz0hMX19fXZhciBrZz0zO2Z1bmN0aW9uIGxnKGEsYixjKXtjLz0xMDtyZXR1cm4gMTA3Mzc0MTgyMS0oKCgxMDczNzQxODIxLWErYi8xMCkvY3wwKSsxKSpjfWZ1bmN0aW9uIG1nKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9bih7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pfXJldHVybiBifXZhciBuZz17Y3VycmVudDpudWxsfSxvZz1udWxsLHBnPW51bGwscWc9bnVsbDtmdW5jdGlvbiByZygpe3FnPXBnPW9nPW51bGx9XG5mdW5jdGlvbiBzZyhhLGIpe3ZhciBjPWEudHlwZS5fY29udGV4dDtJKG5nLGMuX2N1cnJlbnRWYWx1ZSxhKTtjLl9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiB0ZyhhKXt2YXIgYj1uZy5jdXJyZW50O0cobmcsYSk7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiB1ZyhhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmFsdGVybmF0ZTtpZihhLmNoaWxkRXhwaXJhdGlvblRpbWU8YilhLmNoaWxkRXhwaXJhdGlvblRpbWU9YixudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihjLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7ZWxzZSBpZihudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGIpYy5jaGlsZEV4cGlyYXRpb25UaW1lPWI7ZWxzZSBicmVhazthPWEucmV0dXJufX1cbmZ1bmN0aW9uIHZnKGEsYil7b2c9YTtxZz1wZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKGEuZXhwaXJhdGlvblRpbWU+PWImJih3Zz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9ZnVuY3Rpb24geGcoYSxiKXtpZihxZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpcWc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07aWYobnVsbD09PXBnKXtpZihudWxsPT09b2cpdGhyb3cgRXJyb3IodSgzMDgpKTtwZz1iO29nLmRlcGVuZGVuY2llcz17ZXhwaXJhdGlvblRpbWU6MCxmaXJzdENvbnRleHQ6YixyZXNwb25kZXJzOm51bGx9fWVsc2UgcGc9cGcubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyIHlnPSExO1xuZnVuY3Rpb24gemcoYSl7cmV0dXJue2Jhc2VTdGF0ZTphLGZpcnN0VXBkYXRlOm51bGwsbGFzdFVwZGF0ZTpudWxsLGZpcnN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxsYXN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxmaXJzdEVmZmVjdDpudWxsLGxhc3RFZmZlY3Q6bnVsbCxmaXJzdENhcHR1cmVkRWZmZWN0Om51bGwsbGFzdENhcHR1cmVkRWZmZWN0Om51bGx9fWZ1bmN0aW9uIEFnKGEpe3JldHVybntiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RVcGRhdGU6YS5maXJzdFVwZGF0ZSxsYXN0VXBkYXRlOmEubGFzdFVwZGF0ZSxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1cbmZ1bmN0aW9uIEJnKGEsYil7cmV0dXJue2V4cGlyYXRpb25UaW1lOmEsc3VzcGVuc2VDb25maWc6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGwsbmV4dEVmZmVjdDpudWxsfX1mdW5jdGlvbiBDZyhhLGIpe251bGw9PT1hLmxhc3RVcGRhdGU/YS5maXJzdFVwZGF0ZT1hLmxhc3RVcGRhdGU9YjooYS5sYXN0VXBkYXRlLm5leHQ9YixhLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiBEZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKG51bGw9PT1jKXt2YXIgZD1hLnVwZGF0ZVF1ZXVlO3ZhciBlPW51bGw7bnVsbD09PWQmJihkPWEudXBkYXRlUXVldWU9emcoYS5tZW1vaXplZFN0YXRlKSl9ZWxzZSBkPWEudXBkYXRlUXVldWUsZT1jLnVwZGF0ZVF1ZXVlLG51bGw9PT1kP251bGw9PT1lPyhkPWEudXBkYXRlUXVldWU9emcoYS5tZW1vaXplZFN0YXRlKSxlPWMudXBkYXRlUXVldWU9emcoYy5tZW1vaXplZFN0YXRlKSk6ZD1hLnVwZGF0ZVF1ZXVlPUFnKGUpOm51bGw9PT1lJiYoZT1jLnVwZGF0ZVF1ZXVlPUFnKGQpKTtudWxsPT09ZXx8ZD09PWU/Q2coZCxiKTpudWxsPT09ZC5sYXN0VXBkYXRlfHxudWxsPT09ZS5sYXN0VXBkYXRlPyhDZyhkLGIpLENnKGUsYikpOihDZyhkLGIpLGUubGFzdFVwZGF0ZT1iKX1cbmZ1bmN0aW9uIEVnKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZTtjPW51bGw9PT1jP2EudXBkYXRlUXVldWU9emcoYS5tZW1vaXplZFN0YXRlKTpGZyhhLGMpO251bGw9PT1jLmxhc3RDYXB0dXJlZFVwZGF0ZT9jLmZpcnN0Q2FwdHVyZWRVcGRhdGU9Yy5sYXN0Q2FwdHVyZWRVcGRhdGU9YjooYy5sYXN0Q2FwdHVyZWRVcGRhdGUubmV4dD1iLGMubGFzdENhcHR1cmVkVXBkYXRlPWIpfWZ1bmN0aW9uIEZnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmI9PT1jLnVwZGF0ZVF1ZXVlJiYoYj1hLnVwZGF0ZVF1ZXVlPUFnKGIpKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIEdnKGEsYixjLGQsZSxmKXtzd2l0Y2goYy50YWcpe2Nhc2UgMTpyZXR1cm4gYT1jLnBheWxvYWQsXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2Nhc2UgMzphLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtNDA5N3w2NDtjYXNlIDA6YT1jLnBheWxvYWQ7ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoZixkLGUpOmE7aWYobnVsbD09PWV8fHZvaWQgMD09PWUpYnJlYWs7cmV0dXJuIG4oe30sZCxlKTtjYXNlIDI6eWc9ITB9cmV0dXJuIGR9XG5mdW5jdGlvbiBIZyhhLGIsYyxkLGUpe3lnPSExO2I9RmcoYSxiKTtmb3IodmFyIGY9Yi5iYXNlU3RhdGUsZz1udWxsLGg9MCxrPWIuZmlyc3RVcGRhdGUsbD1mO251bGwhPT1rOyl7dmFyIG09ay5leHBpcmF0aW9uVGltZTttPGU/KG51bGw9PT1nJiYoZz1rLGY9bCksaDxtJiYoaD1tKSk6KElnKG0say5zdXNwZW5zZUNvbmZpZyksbD1HZyhhLGIsayxsLGMsZCksbnVsbCE9PWsuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9MzIsay5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdEVmZmVjdD9iLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1rOihiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1rLGIubGFzdEVmZmVjdD1rKSkpO2s9ay5uZXh0fW09bnVsbDtmb3Ioaz1iLmZpcnN0Q2FwdHVyZWRVcGRhdGU7bnVsbCE9PWs7KXt2YXIgQz1rLmV4cGlyYXRpb25UaW1lO0M8ZT8obnVsbD09PW0mJihtPWssbnVsbD09PWcmJihmPWwpKSxoPEMmJihoPUMpKToobD1HZyhhLGIsayxsLGMsZCksbnVsbCE9PVxuay5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD0zMixrLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q/Yi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PWs6KGIubGFzdENhcHR1cmVkRWZmZWN0Lm5leHRFZmZlY3Q9ayxiLmxhc3RDYXB0dXJlZEVmZmVjdD1rKSkpO2s9ay5uZXh0fW51bGw9PT1nJiYoYi5sYXN0VXBkYXRlPW51bGwpO251bGw9PT1tP2IubGFzdENhcHR1cmVkVXBkYXRlPW51bGw6YS5lZmZlY3RUYWd8PTMyO251bGw9PT1nJiZudWxsPT09bSYmKGY9bCk7Yi5iYXNlU3RhdGU9ZjtiLmZpcnN0VXBkYXRlPWc7Yi5maXJzdENhcHR1cmVkVXBkYXRlPW07SmcoaCk7YS5leHBpcmF0aW9uVGltZT1oO2EubWVtb2l6ZWRTdGF0ZT1sfVxuZnVuY3Rpb24gS2coYSxiLGMpe251bGwhPT1iLmZpcnN0Q2FwdHVyZWRVcGRhdGUmJihudWxsIT09Yi5sYXN0VXBkYXRlJiYoYi5sYXN0VXBkYXRlLm5leHQ9Yi5maXJzdENhcHR1cmVkVXBkYXRlLGIubGFzdFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZSksYi5maXJzdENhcHR1cmVkVXBkYXRlPWIubGFzdENhcHR1cmVkVXBkYXRlPW51bGwpO0xnKGIuZmlyc3RFZmZlY3QsYyk7Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbDtMZyhiLmZpcnN0Q2FwdHVyZWRFZmZlY3QsYyk7Yi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PW51bGx9ZnVuY3Rpb24gTGcoYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5jYWxsYmFjaztpZihudWxsIT09Yyl7YS5jYWxsYmFjaz1udWxsO3ZhciBkPWI7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGMpdGhyb3cgRXJyb3IodSgxOTEsYykpO2MuY2FsbChkKX1hPWEubmV4dEVmZmVjdH19XG52YXIgTWc9RWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsTmc9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7ZnVuY3Rpb24gT2coYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOm4oe30sYixjKTthLm1lbW9pemVkU3RhdGU9YztkPWEudXBkYXRlUXVldWU7bnVsbCE9PWQmJjA9PT1hLmV4cGlyYXRpb25UaW1lJiYoZC5iYXNlU3RhdGU9Yyl9XG52YXIgU2c9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpP2VjKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1QZygpLGU9TWcuc3VzcGVuc2U7ZD1RZyhkLGEsZSk7ZT1CZyhkLGUpO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtEZyhhLGUpO1JnKGEsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPVBnKCksZT1NZy5zdXNwZW5zZTtkPVFnKGQsYSxlKTtlPUJnKGQsZSk7ZS50YWc9MTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7RGcoYSxlKTtSZyhhLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgYz1QZygpLGQ9TWcuc3VzcGVuc2U7XG5jPVFnKGMsYSxkKTtkPUJnKGMsZCk7ZC50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGQuY2FsbGJhY2s9Yik7RGcoYSxkKTtSZyhhLGMpfX07ZnVuY3Rpb24gVGcoYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hcWYoYyxkKXx8IXFmKGUsZik6ITB9XG5mdW5jdGlvbiBVZyhhLGIsYyl7dmFyIGQ9ITEsZT1DZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj14ZyhmKTooZT1MKGIpP0RmOkouY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0VmKGEsZSk6Q2YpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1TZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxGaWJlcj1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBWZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmU2cuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBXZyhhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPU5nO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9eGcoZik6KGY9TChiKT9EZjpKLmN1cnJlbnQsZS5jb250ZXh0PUVmKGEsZikpO2Y9YS51cGRhdGVRdWV1ZTtudWxsIT09ZiYmKEhnKGEsZixjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihPZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZTZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxmPWEudXBkYXRlUXVldWUsbnVsbCE9PWYmJihIZyhhLGYsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9dmFyIFhnPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBZZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHUoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IodSgxNDcsYSkpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09TmcmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IodSgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IodSgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIFpnKGEsYil7aWYoXCJ0ZXh0YXJlYVwiIT09YS50eXBlKXRocm93IEVycm9yKHUoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpKTt9XG5mdW5jdGlvbiAkZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYixjKXthPWFoKGEsYixjKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuMixjKTpkO2IuZWZmZWN0VGFnPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmVmZmVjdFRhZz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9YmgoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzLGQpLGQucmVmPVlnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1jaChjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1ZZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09XG5jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPWRoKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG0oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPWVoKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBDKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1iaChcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBHYTpyZXR1cm4gYz1jaChiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj1ZZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgSGE6cmV0dXJuIGI9ZGgoYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKFhnKGIpfHxcblVhKGIpKXJldHVybiBiPWVoKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO1pnKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24geShhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBHYTpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PUlhP20oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSBIYTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbH1pZihYZyhjKXx8VWEoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO1pnKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSChhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPVxuYS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIEdhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1JYT9tKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSBIYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKX1pZihYZyhkKXx8VWEoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO1pnKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geihlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCxtPW51bGwscj1nLHg9Zz0wLEE9bnVsbDtudWxsIT09ciYmeDxoLmxlbmd0aDt4Kyspe3IuaW5kZXg+eD8oQT1yLHI9bnVsbCk6QT1yLnNpYmxpbmc7dmFyIHA9eShlLHIsaFt4XSxrKTtpZihudWxsPT09cCl7bnVsbD09PXImJihyPUEpO2JyZWFrfWEmJlxuciYmbnVsbD09PXAuYWx0ZXJuYXRlJiZiKGUscik7Zz1mKHAsZyx4KTtudWxsPT09bT9sPXA6bS5zaWJsaW5nPXA7bT1wO3I9QX1pZih4PT09aC5sZW5ndGgpcmV0dXJuIGMoZSxyKSxsO2lmKG51bGw9PT1yKXtmb3IoO3g8aC5sZW5ndGg7eCsrKXI9QyhlLGhbeF0sayksbnVsbCE9PXImJihnPWYocixnLHgpLG51bGw9PT1tP2w9cjptLnNpYmxpbmc9cixtPXIpO3JldHVybiBsfWZvcihyPWQoZSxyKTt4PGgubGVuZ3RoO3grKylBPUgocixlLHgsaFt4XSxrKSxudWxsIT09QSYmKGEmJm51bGwhPT1BLmFsdGVybmF0ZSYmci5kZWxldGUobnVsbD09PUEua2V5P3g6QS5rZXkpLGc9ZihBLGcseCksbnVsbD09PW0/bD1BOm0uc2libGluZz1BLG09QSk7YSYmci5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1mdW5jdGlvbiB0YShlLGcsaCxrKXt2YXIgbD1VYShoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgbCl0aHJvdyBFcnJvcih1KDE1MCkpO2g9bC5jYWxsKGgpO1xuaWYobnVsbD09aCl0aHJvdyBFcnJvcih1KDE1MSkpO2Zvcih2YXIgbT1sPW51bGwscj1nLHg9Zz0wLEE9bnVsbCxwPWgubmV4dCgpO251bGwhPT1yJiYhcC5kb25lO3grKyxwPWgubmV4dCgpKXtyLmluZGV4Png/KEE9cixyPW51bGwpOkE9ci5zaWJsaW5nO3ZhciB6PXkoZSxyLHAudmFsdWUsayk7aWYobnVsbD09PXope251bGw9PT1yJiYocj1BKTticmVha31hJiZyJiZudWxsPT09ei5hbHRlcm5hdGUmJmIoZSxyKTtnPWYoeixnLHgpO251bGw9PT1tP2w9ejptLnNpYmxpbmc9ejttPXo7cj1BfWlmKHAuZG9uZSlyZXR1cm4gYyhlLHIpLGw7aWYobnVsbD09PXIpe2Zvcig7IXAuZG9uZTt4KysscD1oLm5leHQoKSlwPUMoZSxwLnZhbHVlLGspLG51bGwhPT1wJiYoZz1mKHAsZyx4KSxudWxsPT09bT9sPXA6bS5zaWJsaW5nPXAsbT1wKTtyZXR1cm4gbH1mb3Iocj1kKGUscik7IXAuZG9uZTt4KysscD1oLm5leHQoKSlwPUgocixlLHgscC52YWx1ZSxrKSxudWxsIT09cCYmKGEmJm51bGwhPT1cbnAuYWx0ZXJuYXRlJiZyLmRlbGV0ZShudWxsPT09cC5rZXk/eDpwLmtleSksZz1mKHAsZyx4KSxudWxsPT09bT9sPXA6bS5zaWJsaW5nPXAsbT1wKTthJiZyLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1JYSYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBHYTphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpaWYoNz09PWsudGFnP2YudHlwZT09PUlhOmsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYudHlwZT09PUlhP2YucHJvcHMuY2hpbGRyZW46Zi5wcm9wcyxoKTtkLnJlZj1ZZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxcbmspO2JyZWFrfWVsc2UgYihhLGspO2s9ay5zaWJsaW5nfWYudHlwZT09PUlhPyhkPWVoKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1jaChmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1ZZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgSGE6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdLGgpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1kaChmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09XG50eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmLGgpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9YmgoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoWGcoZikpcmV0dXJuIHooYSxkLGYsaCk7aWYoVWEoZikpcmV0dXJuIHRhKGEsZCxmLGgpO2wmJlpnKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmJiYhaylzd2l0Y2goYS50YWcpe2Nhc2UgMTpjYXNlIDA6dGhyb3cgYT1hLnR5cGUsRXJyb3IodSgxNTIsYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxcIkNvbXBvbmVudFwiKSk7fXJldHVybiBjKGEsZCl9fXZhciBmaD0kZyghMCksZ2g9JGcoITEpLGhoPXt9LGloPXtjdXJyZW50OmhofSxqaD17Y3VycmVudDpoaH0sa2g9e2N1cnJlbnQ6aGh9O2Z1bmN0aW9uIGxoKGEpe2lmKGE9PT1oaCl0aHJvdyBFcnJvcih1KDE3NCkpO3JldHVybiBhfVxuZnVuY3Rpb24gbWgoYSxiKXtJKGtoLGIsYSk7SShqaCxhLGEpO0koaWgsaGgsYSk7dmFyIGM9Yi5ub2RlVHlwZTtzd2l0Y2goYyl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6UWIobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmM9OD09PWM/Yi5wYXJlbnROb2RlOmIsYj1jLm5hbWVzcGFjZVVSSXx8bnVsbCxjPWMudGFnTmFtZSxiPVFiKGIsYyl9RyhpaCxhKTtJKGloLGIsYSl9ZnVuY3Rpb24gbmgoYSl7RyhpaCxhKTtHKGpoLGEpO0coa2gsYSl9ZnVuY3Rpb24gb2goYSl7bGgoa2guY3VycmVudCk7dmFyIGI9bGgoaWguY3VycmVudCk7dmFyIGM9UWIoYixhLnR5cGUpO2IhPT1jJiYoSShqaCxhLGEpLEkoaWgsYyxhKSl9ZnVuY3Rpb24gcGgoYSl7amguY3VycmVudD09PWEmJihHKGloLGEpLEcoamgsYSkpfXZhciBNPXtjdXJyZW50OjB9O1xuZnVuY3Rpb24gcWgoYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8Yy5kYXRhPT09amV8fGMuZGF0YT09PWtlKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfWZ1bmN0aW9uIHJoKGEsYil7cmV0dXJue3Jlc3BvbmRlcjphLHByb3BzOmJ9fVxudmFyIHNoPUVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsTj1FYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyx0aD0wLHVoPW51bGwsTz1udWxsLHZoPW51bGwsd2g9bnVsbCxQPW51bGwseGg9bnVsbCx5aD0wLHpoPW51bGwsQWg9MCxCaD0hMSxDaD1udWxsLEdoPTA7ZnVuY3Rpb24gUSgpe3Rocm93IEVycm9yKHUoMzIxKSk7fWZ1bmN0aW9uIEhoKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIW9mKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBJaChhLGIsYyxkLGUsZil7dGg9Zjt1aD1iO3ZoPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO3NoLmN1cnJlbnQ9bnVsbD09PXZoP0poOktoO2I9YyhkLGUpO2lmKEJoKXtkbyBCaD0hMSxHaCs9MSx2aD1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbCx4aD13aCx6aD1QPU89bnVsbCxzaC5jdXJyZW50PUtoLGI9YyhkLGUpO3doaWxlKEJoKTtDaD1udWxsO0doPTB9c2guY3VycmVudD1MaDthPXVoO2EubWVtb2l6ZWRTdGF0ZT13aDthLmV4cGlyYXRpb25UaW1lPXloO2EudXBkYXRlUXVldWU9emg7YS5lZmZlY3RUYWd8PUFoO2E9bnVsbCE9PU8mJm51bGwhPT1PLm5leHQ7dGg9MDt4aD1QPXdoPXZoPU89dWg9bnVsbDt5aD0wO3poPW51bGw7QWg9MDtpZihhKXRocm93IEVycm9yKHUoMzAwKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBNaCgpe3NoLmN1cnJlbnQ9TGg7dGg9MDt4aD1QPXdoPXZoPU89dWg9bnVsbDt5aD0wO3poPW51bGw7QWg9MDtCaD0hMTtDaD1udWxsO0doPTB9ZnVuY3Rpb24gTmgoKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLHF1ZXVlOm51bGwsYmFzZVVwZGF0ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVA/d2g9UD1hOlA9UC5uZXh0PWE7cmV0dXJuIFB9ZnVuY3Rpb24gT2goKXtpZihudWxsIT09eGgpUD14aCx4aD1QLm5leHQsTz12aCx2aD1udWxsIT09Tz9PLm5leHQ6bnVsbDtlbHNle2lmKG51bGw9PT12aCl0aHJvdyBFcnJvcih1KDMxMCkpO089dmg7dmFyIGE9e21lbW9pemVkU3RhdGU6Ty5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpPLmJhc2VTdGF0ZSxxdWV1ZTpPLnF1ZXVlLGJhc2VVcGRhdGU6Ty5iYXNlVXBkYXRlLG5leHQ6bnVsbH07UD1udWxsPT09UD93aD1hOlAubmV4dD1hO3ZoPU8ubmV4dH1yZXR1cm4gUH1cbmZ1bmN0aW9uIFBoKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gUWgoYSl7dmFyIGI9T2goKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IodSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTtpZigwPEdoKXt2YXIgZD1jLmRpc3BhdGNoO2lmKG51bGwhPT1DaCl7dmFyIGU9Q2guZ2V0KGMpO2lmKHZvaWQgMCE9PWUpe0NoLmRlbGV0ZShjKTt2YXIgZj1iLm1lbW9pemVkU3RhdGU7ZG8gZj1hKGYsZS5hY3Rpb24pLGU9ZS5uZXh0O3doaWxlKG51bGwhPT1lKTtvZihmLGIubWVtb2l6ZWRTdGF0ZSl8fCh3Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7Yi5iYXNlVXBkYXRlPT09Yy5sYXN0JiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mO3JldHVybltmLGRdfX1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGRdfWQ9Yy5sYXN0O3ZhciBnPWIuYmFzZVVwZGF0ZTtmPWIuYmFzZVN0YXRlO251bGwhPT1nPyhudWxsIT09ZCYmKGQubmV4dD1udWxsKSxkPWcubmV4dCk6ZD1udWxsIT09ZD9kLm5leHQ6bnVsbDtpZihudWxsIT09XG5kKXt2YXIgaD1lPW51bGwsaz1kLGw9ITE7ZG97dmFyIG09ay5leHBpcmF0aW9uVGltZTttPHRoPyhsfHwobD0hMCxoPWcsZT1mKSxtPnloJiYoeWg9bSxKZyh5aCkpKTooSWcobSxrLnN1c3BlbnNlQ29uZmlnKSxmPWsuZWFnZXJSZWR1Y2VyPT09YT9rLmVhZ2VyU3RhdGU6YShmLGsuYWN0aW9uKSk7Zz1rO2s9ay5uZXh0fXdoaWxlKG51bGwhPT1rJiZrIT09ZCk7bHx8KGg9ZyxlPWYpO29mKGYsYi5tZW1vaXplZFN0YXRlKXx8KHdnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtiLmJhc2VVcGRhdGU9aDtiLmJhc2VTdGF0ZT1lO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gUmgoYSl7dmFyIGI9TmgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e2xhc3Q6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6UGgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPVNoLmJpbmQobnVsbCx1aCxhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfWZ1bmN0aW9uIFRoKGEpe3JldHVybiBRaChQaCxhKX1mdW5jdGlvbiBVaChhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07bnVsbD09PXpoPyh6aD17bGFzdEVmZmVjdDpudWxsfSx6aC5sYXN0RWZmZWN0PWEubmV4dD1hKTooYj16aC5sYXN0RWZmZWN0LG51bGw9PT1iP3poLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGM9Yi5uZXh0LGIubmV4dD1hLGEubmV4dD1jLHpoLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfVxuZnVuY3Rpb24gVmgoYSxiLGMsZCl7dmFyIGU9TmgoKTtBaHw9YTtlLm1lbW9pemVkU3RhdGU9VWgoYixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9ZnVuY3Rpb24gV2goYSxiLGMsZCl7dmFyIGU9T2goKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Tyl7dmFyIGc9Ty5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZIaChkLGcuZGVwcykpe1VoKDAsYyxmLGQpO3JldHVybn19QWh8PWE7ZS5tZW1vaXplZFN0YXRlPVVoKGIsYyxmLGQpfWZ1bmN0aW9uIFhoKGEsYil7cmV0dXJuIFZoKDUxNiwxOTIsYSxiKX1mdW5jdGlvbiBZaChhLGIpe3JldHVybiBXaCg1MTYsMTkyLGEsYil9XG5mdW5jdGlvbiBaaChhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fWZ1bmN0aW9uICRoKCl7fWZ1bmN0aW9uIGFpKGEsYil7TmgoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX1mdW5jdGlvbiBiaShhLGIpe3ZhciBjPU9oKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZIaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIFNoKGEsYixjKXtpZighKDI1PkdoKSl0aHJvdyBFcnJvcih1KDMwMSkpO3ZhciBkPWEuYWx0ZXJuYXRlO2lmKGE9PT11aHx8bnVsbCE9PWQmJmQ9PT11aClpZihCaD0hMCxhPXtleHBpcmF0aW9uVGltZTp0aCxzdXNwZW5zZUNvbmZpZzpudWxsLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LG51bGw9PT1DaCYmKENoPW5ldyBNYXApLGM9Q2guZ2V0KGIpLHZvaWQgMD09PWMpQ2guc2V0KGIsYSk7ZWxzZXtmb3IoYj1jO251bGwhPT1iLm5leHQ7KWI9Yi5uZXh0O2IubmV4dD1hfWVsc2V7dmFyIGU9UGcoKSxmPU1nLnN1c3BlbnNlO2U9UWcoZSxhLGYpO2Y9e2V4cGlyYXRpb25UaW1lOmUsc3VzcGVuc2VDb25maWc6ZixhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTt2YXIgZz1iLmxhc3Q7aWYobnVsbD09PWcpZi5uZXh0PWY7ZWxzZXt2YXIgaD1nLm5leHQ7bnVsbCE9PWgmJlxuKGYubmV4dD1oKTtnLm5leHQ9Zn1iLmxhc3Q9ZjtpZigwPT09YS5leHBpcmF0aW9uVGltZSYmKG51bGw9PT1kfHwwPT09ZC5leHBpcmF0aW9uVGltZSkmJihkPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZCkpdHJ5e3ZhciBrPWIubGFzdFJlbmRlcmVkU3RhdGUsbD1kKGssYyk7Zi5lYWdlclJlZHVjZXI9ZDtmLmVhZ2VyU3RhdGU9bDtpZihvZihsLGspKXJldHVybn1jYXRjaChtKXt9ZmluYWxseXt9UmcoYSxlKX19XG52YXIgTGg9e3JlYWRDb250ZXh0OnhnLHVzZUNhbGxiYWNrOlEsdXNlQ29udGV4dDpRLHVzZUVmZmVjdDpRLHVzZUltcGVyYXRpdmVIYW5kbGU6USx1c2VMYXlvdXRFZmZlY3Q6USx1c2VNZW1vOlEsdXNlUmVkdWNlcjpRLHVzZVJlZjpRLHVzZVN0YXRlOlEsdXNlRGVidWdWYWx1ZTpRLHVzZVJlc3BvbmRlcjpRLHVzZURlZmVycmVkVmFsdWU6USx1c2VUcmFuc2l0aW9uOlF9LEpoPXtyZWFkQ29udGV4dDp4Zyx1c2VDYWxsYmFjazphaSx1c2VDb250ZXh0OnhnLHVzZUVmZmVjdDpYaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVmgoNCwzNixaaC5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFZoKDQsMzYsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPU5oKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9XG5bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9TmgoKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9ZC5xdWV1ZT17bGFzdDpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2E9YS5kaXNwYXRjaD1TaC5iaW5kKG51bGwsdWgsYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPU5oKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOlJoLHVzZURlYnVnVmFsdWU6JGgsdXNlUmVzcG9uZGVyOnJoLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz1SaChhKSxkPWNbMF0sZT1jWzFdO1hoKGZ1bmN0aW9uKCl7cS51bnN0YWJsZV9uZXh0KGZ1bmN0aW9uKCl7dmFyIGM9Ti5zdXNwZW5zZTtOLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXtlKGEpfWZpbmFsbHl7Ti5zdXNwZW5zZT1cbmN9fSl9LFthLGJdKTtyZXR1cm4gZH0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbihhKXt2YXIgYj1SaCghMSksYz1iWzBdLGQ9YlsxXTtyZXR1cm5bYWkoZnVuY3Rpb24oYil7ZCghMCk7cS51bnN0YWJsZV9uZXh0KGZ1bmN0aW9uKCl7dmFyIGM9Ti5zdXNwZW5zZTtOLnN1c3BlbnNlPXZvaWQgMD09PWE/bnVsbDphO3RyeXtkKCExKSxiKCl9ZmluYWxseXtOLnN1c3BlbnNlPWN9fSl9LFthLGNdKSxjXX19LEtoPXtyZWFkQ29udGV4dDp4Zyx1c2VDYWxsYmFjazpiaSx1c2VDb250ZXh0OnhnLHVzZUVmZmVjdDpZaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gV2goNCwzNixaaC5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFdoKDQsMzYsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPU9oKCk7Yj12b2lkIDA9PT1iP1xubnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkhoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOlFoLHVzZVJlZjpmdW5jdGlvbigpe3JldHVybiBPaCgpLm1lbW9pemVkU3RhdGV9LHVzZVN0YXRlOlRoLHVzZURlYnVnVmFsdWU6JGgsdXNlUmVzcG9uZGVyOnJoLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz1UaChhKSxkPWNbMF0sZT1jWzFdO1loKGZ1bmN0aW9uKCl7cS51bnN0YWJsZV9uZXh0KGZ1bmN0aW9uKCl7dmFyIGM9Ti5zdXNwZW5zZTtOLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXtlKGEpfWZpbmFsbHl7Ti5zdXNwZW5zZT1jfX0pfSxbYSxiXSk7cmV0dXJuIGR9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9VGgoITEpLGM9YlswXSxkPWJbMV07cmV0dXJuW2JpKGZ1bmN0aW9uKGIpe2QoITApO3EudW5zdGFibGVfbmV4dChmdW5jdGlvbigpe3ZhciBjPVxuTi5zdXNwZW5zZTtOLnN1c3BlbnNlPXZvaWQgMD09PWE/bnVsbDphO3RyeXtkKCExKSxiKCl9ZmluYWxseXtOLnN1c3BlbnNlPWN9fSl9LFthLGNdKSxjXX19LGNpPW51bGwsZGk9bnVsbCxlaT0hMTtmdW5jdGlvbiBmaShhLGIpe3ZhciBjPWdpKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9XG5mdW5jdGlvbiBoaShhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gaWkoYSl7aWYoZWkpe3ZhciBiPWRpO2lmKGIpe3ZhciBjPWI7aWYoIWhpKGEsYikpe2I9cmUoYy5uZXh0U2libGluZyk7aWYoIWJ8fCFoaShhLGIpKXthLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMTAyNXwyO2VpPSExO2NpPWE7cmV0dXJufWZpKGNpLGMpfWNpPWE7ZGk9cmUoYi5maXJzdENoaWxkKX1lbHNlIGEuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0xMDI1fDIsZWk9ITEsY2k9YX19ZnVuY3Rpb24gamkoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO2NpPWF9XG5mdW5jdGlvbiBraShhKXtpZihhIT09Y2kpcmV0dXJuITE7aWYoIWVpKXJldHVybiBqaShhKSxlaT0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIW9lKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj1kaTtiOylmaShhLGIpLGI9cmUoYi5uZXh0U2libGluZyk7amkoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcih1KDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKGM9PT1pZSl7aWYoMD09PWIpe2RpPXJlKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2UgYyE9PWhlJiZjIT09a2UmJmMhPT1qZXx8YisrfWE9YS5uZXh0U2libGluZ31kaT1udWxsfX1lbHNlIGRpPWNpP3JlKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gbGkoKXtkaT1jaT1udWxsO2VpPSExfXZhciBtaT1FYS5SZWFjdEN1cnJlbnRPd25lcix3Zz0hMTtmdW5jdGlvbiBSKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/Z2goYixudWxsLGMsZCk6ZmgoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gbmkoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO3ZnKGIsZSk7ZD1JaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiF3ZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLG9pKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtSKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gcGkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFxaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxyaShhLGIsZyxkLGUsZik7YT1jaChjLnR5cGUsbnVsbCxkLG51bGwsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoZTxmJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOnFmLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIG9pKGEsYixmKTtiLmVmZmVjdFRhZ3w9MTthPWFoKGcsZCxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiByaShhLGIsYyxkLGUsZil7cmV0dXJuIG51bGwhPT1hJiZxZihhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYmJih3Zz0hMSxlPGYpP29pKGEsYixmKTpzaShhLGIsYyxkLGYpfWZ1bmN0aW9uIHRpKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gc2koYSxiLGMsZCxlKXt2YXIgZj1MKGMpP0RmOkouY3VycmVudDtmPUVmKGIsZik7dmcoYixlKTtjPUloKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXdnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksb2koYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1IoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiB1aShhLGIsYyxkLGUpe2lmKEwoYykpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTt2ZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksVWcoYixjLGQsZSksV2coYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9eGcobCk6KGw9TChjKT9EZjpKLmN1cnJlbnQsbD1FZihiLGwpKTt2YXIgbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxDPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtDfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmVmcoYixnLGQsbCk7eWc9ITE7dmFyIHk9Yi5tZW1vaXplZFN0YXRlO2s9Zy5zdGF0ZT15O3ZhciBIPWIudXBkYXRlUXVldWU7bnVsbCE9PUgmJihIZyhiLEgsZCxnLGUpLGs9Yi5tZW1vaXplZFN0YXRlKTtoIT09ZHx8eSE9PWt8fEsuY3VycmVudHx8eWc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoT2coYixjLG0sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPXlnfHxUZyhiLGMsaCxkLHksayxsKSk/KEN8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcbmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGQ9ITEpfWVsc2UgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcyxnLnByb3BzPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDptZyhiLnR5cGUsaCksaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlLFwib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD14ZyhsKToobD1MKGMpP0RmOkouY3VycmVudCxsPUVmKGIsbCkpLG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsKEM9XG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJlZnKGIsZyxkLGwpLHlnPSExLGs9Yi5tZW1vaXplZFN0YXRlLHk9Zy5zdGF0ZT1rLEg9Yi51cGRhdGVRdWV1ZSxudWxsIT09SCYmKEhnKGIsSCxkLGcsZSkseT1iLm1lbW9pemVkU3RhdGUpLGghPT1kfHxrIT09eXx8Sy5jdXJyZW50fHx5Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihPZyhiLGMsbSxkKSx5PWIubWVtb2l6ZWRTdGF0ZSksKG09eWd8fFRnKGIsYyxoLGQsayx5LGwpKT8oQ3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fFxuKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLHksbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCx5LGwpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmVmZmVjdFRhZ3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1cbmQsYi5tZW1vaXplZFN0YXRlPXkpLGcucHJvcHM9ZCxnLnN0YXRlPXksZy5jb250ZXh0PWwsZD1tKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksZD0hMSk7cmV0dXJuIHZpKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIHZpKGEsYixjLGQsZSxmKXt0aShhLGIpO3ZhciBnPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmS2YoYixjLCExKSxvaShhLGIsZik7ZD1iLnN0YXRlTm9kZTttaS5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1maChiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPWZoKGIsbnVsbCxoLGYpKTpSKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJktmKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gd2koYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9IZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZIZihhLGIuY29udGV4dCwhMSk7bWgoYSxiLmNvbnRhaW5lckluZm8pfVxudmFyIHhpPXtkZWh5ZHJhdGVkOm51bGwscmV0cnlUaW1lOjB9O1xuZnVuY3Rpb24geWkoYSxiLGMpe3ZhciBkPWIubW9kZSxlPWIucGVuZGluZ1Byb3BzLGY9TS5jdXJyZW50LGc9ITEsaDsoaD0wIT09KGIuZWZmZWN0VGFnJjY0KSl8fChoPTAhPT0oZiYyKSYmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlKSk7aD8oZz0hMCxiLmVmZmVjdFRhZyY9LTY1KTpudWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZXx8dm9pZCAwPT09ZS5mYWxsYmFja3x8ITA9PT1lLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwoZnw9MSk7SShNLGYmMSxiKTtpZihudWxsPT09YSl7dm9pZCAwIT09ZS5mYWxsYmFjayYmaWkoYik7aWYoZyl7Zz1lLmZhbGxiYWNrO2U9ZWgobnVsbCxkLDAsbnVsbCk7ZS5yZXR1cm49YjtpZigwPT09KGIubW9kZSYyKSlmb3IoYT1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxlLmNoaWxkPWE7bnVsbCE9PWE7KWEucmV0dXJuPWUsYT1hLnNpYmxpbmc7Yz1laChnLGQsYyxudWxsKTtjLnJldHVybj1cbmI7ZS5zaWJsaW5nPWM7Yi5tZW1vaXplZFN0YXRlPXhpO2IuY2hpbGQ9ZTtyZXR1cm4gY31kPWUuY2hpbGRyZW47Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGIuY2hpbGQ9Z2goYixudWxsLGQsYyl9aWYobnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSl7YT1hLmNoaWxkO2Q9YS5zaWJsaW5nO2lmKGcpe2U9ZS5mYWxsYmFjaztjPWFoKGEsYS5wZW5kaW5nUHJvcHMsMCk7Yy5yZXR1cm49YjtpZigwPT09KGIubW9kZSYyKSYmKGc9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZyE9PWEuY2hpbGQpKWZvcihjLmNoaWxkPWc7bnVsbCE9PWc7KWcucmV0dXJuPWMsZz1nLnNpYmxpbmc7ZD1haChkLGUsZC5leHBpcmF0aW9uVGltZSk7ZC5yZXR1cm49YjtjLnNpYmxpbmc9ZDtjLmNoaWxkRXhwaXJhdGlvblRpbWU9MDtiLm1lbW9pemVkU3RhdGU9eGk7Yi5jaGlsZD1jO3JldHVybiBkfWM9ZmgoYixhLmNoaWxkLGUuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPVxubnVsbDtyZXR1cm4gYi5jaGlsZD1jfWE9YS5jaGlsZDtpZihnKXtnPWUuZmFsbGJhY2s7ZT1laChudWxsLGQsMCxudWxsKTtlLnJldHVybj1iO2UuY2hpbGQ9YTtudWxsIT09YSYmKGEucmV0dXJuPWUpO2lmKDA9PT0oYi5tb2RlJjIpKWZvcihhPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGUuY2hpbGQ9YTtudWxsIT09YTspYS5yZXR1cm49ZSxhPWEuc2libGluZztjPWVoKGcsZCxjLG51bGwpO2MucmV0dXJuPWI7ZS5zaWJsaW5nPWM7Yy5lZmZlY3RUYWd8PTI7ZS5jaGlsZEV4cGlyYXRpb25UaW1lPTA7Yi5tZW1vaXplZFN0YXRlPXhpO2IuY2hpbGQ9ZTtyZXR1cm4gY31iLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYi5jaGlsZD1maChiLGEsZS5jaGlsZHJlbixjKX1cbmZ1bmN0aW9uIHppKGEsYil7YS5leHBpcmF0aW9uVGltZTxiJiYoYS5leHBpcmF0aW9uVGltZT1iKTt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTxiJiYoYy5leHBpcmF0aW9uVGltZT1iKTt1ZyhhLnJldHVybixiKX1mdW5jdGlvbiBBaShhLGIsYyxkLGUsZil7dmFyIGc9YS5tZW1vaXplZFN0YXRlO251bGw9PT1nP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxsYXN0OmQsdGFpbDpjLHRhaWxFeHBpcmF0aW9uOjAsdGFpbE1vZGU6ZSxsYXN0RWZmZWN0OmZ9OihnLmlzQmFja3dhcmRzPWIsZy5yZW5kZXJpbmc9bnVsbCxnLmxhc3Q9ZCxnLnRhaWw9YyxnLnRhaWxFeHBpcmF0aW9uPTAsZy50YWlsTW9kZT1lLGcubGFzdEVmZmVjdD1mKX1cbmZ1bmN0aW9uIEJpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7UihhLGIsZC5jaGlsZHJlbixjKTtkPU0uY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmVmZmVjdFRhZ3w9NjQ7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmVmZmVjdFRhZyY2NCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZ6aShhLGMpO2Vsc2UgaWYoMTk9PT1hLnRhZyl6aShhLGMpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1JKE0sZCxiKTtpZigwPT09KGIubW9kZSYyKSliLm1lbW9pemVkU3RhdGU9XG5udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylhPWMuYWx0ZXJuYXRlLG51bGwhPT1hJiZudWxsPT09cWgoYSkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTtBaShiLCExLGUsYyxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1xaChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9QWkoYiwhMCxjLG51bGwsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOkFpKGIsITEsbnVsbCxudWxsLHZvaWQgMCxiLmxhc3RFZmZlY3QpO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBvaShhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTswIT09ZCYmSmcoZCk7aWYoYi5jaGlsZEV4cGlyYXRpb25UaW1lPGMpcmV0dXJuIG51bGw7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHUoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPWFoKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPWFoKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBDaShhKXthLmVmZmVjdFRhZ3w9NH12YXIgSGksSWksSmksS2k7XG5IaT1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07SWk9ZnVuY3Rpb24oKXt9O1xuSmk9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoZiE9PWQpe3ZhciBnPWIuc3RhdGVOb2RlO2xoKGloLmN1cnJlbnQpO2E9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6Zj1BYihnLGYpO2Q9QWIoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPUliKGcsZik7ZD1JYihnLGQpO2E9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmY9bih7fSxmLHt2YWx1ZTp2b2lkIDB9KTtkPW4oe30sZCx7dmFsdWU6dm9pZCAwfSk7YT1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpmPUtiKGcsZik7ZD1LYihnLGQpO2E9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZi5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoZy5vbmNsaWNrPWFlKX1ZZChjLGQpO3ZhciBoLGs7Yz1udWxsO2ZvcihoIGluIGYpaWYoIWQuaGFzT3duUHJvcGVydHkoaCkmJmYuaGFzT3duUHJvcGVydHkoaCkmJm51bGwhPWZbaF0paWYoXCJzdHlsZVwiPT09XG5oKWZvcihrIGluIGc9ZltoXSxnKWcuaGFzT3duUHJvcGVydHkoaykmJihjfHwoYz17fSksY1trXT1cIlwiKTtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09aCYmXCJjaGlsZHJlblwiIT09aCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWgmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1oJiZcImF1dG9Gb2N1c1wiIT09aCYmKGlhLmhhc093blByb3BlcnR5KGgpP2F8fChhPVtdKTooYT1hfHxbXSkucHVzaChoLG51bGwpKTtmb3IoaCBpbiBkKXt2YXIgbD1kW2hdO2c9bnVsbCE9Zj9mW2hdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGgpJiZsIT09ZyYmKG51bGwhPWx8fG51bGwhPWcpKWlmKFwic3R5bGVcIj09PWgpaWYoZyl7Zm9yKGsgaW4gZykhZy5oYXNPd25Qcm9wZXJ0eShrKXx8bCYmbC5oYXNPd25Qcm9wZXJ0eShrKXx8KGN8fChjPXt9KSxjW2tdPVwiXCIpO2ZvcihrIGluIGwpbC5oYXNPd25Qcm9wZXJ0eShrKSYmZ1trXSE9PWxba10mJihjfHwoYz17fSksXG5jW2tdPWxba10pfWVsc2UgY3x8KGF8fChhPVtdKSxhLnB1c2goaCxjKSksYz1sO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1oPyhsPWw/bC5fX2h0bWw6dm9pZCAwLGc9Zz9nLl9faHRtbDp2b2lkIDAsbnVsbCE9bCYmZyE9PWwmJihhPWF8fFtdKS5wdXNoKGgsXCJcIitsKSk6XCJjaGlsZHJlblwiPT09aD9nPT09bHx8XCJzdHJpbmdcIiE9PXR5cGVvZiBsJiZcIm51bWJlclwiIT09dHlwZW9mIGx8fChhPWF8fFtdKS5wdXNoKGgsXCJcIitsKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09aCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWgmJihpYS5oYXNPd25Qcm9wZXJ0eShoKT8obnVsbCE9bCYmJGQoZSxoKSxhfHxnPT09bHx8KGE9W10pKTooYT1hfHxbXSkucHVzaChoLGwpKX1jJiYoYT1hfHxbXSkucHVzaChcInN0eWxlXCIsYyk7ZT1hOyhiLnVwZGF0ZVF1ZXVlPWUpJiZDaShiKX19O0tpPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiZDaShiKX07XG5mdW5jdGlvbiBMaShhLGIpe3N3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBNaShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMTpMKGEudHlwZSkmJkZmKGEpO3ZhciBiPWEuZWZmZWN0VGFnO3JldHVybiBiJjQwOTY/KGEuZWZmZWN0VGFnPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDM6bmgoYSk7R2YoYSk7Yj1hLmVmZmVjdFRhZztpZigwIT09KGImNjQpKXRocm93IEVycm9yKHUoMjg1KSk7YS5lZmZlY3RUYWc9YiYtNDA5N3w2NDtyZXR1cm4gYTtjYXNlIDU6cmV0dXJuIHBoKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gRyhNLGEpLGI9YS5lZmZlY3RUYWcsYiY0MDk2PyhhLmVmZmVjdFRhZz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAxOTpyZXR1cm4gRyhNLGEpLG51bGw7Y2FzZSA0OnJldHVybiBuaChhKSxudWxsO2Nhc2UgMTA6cmV0dXJuIHRnKGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19ZnVuY3Rpb24gTmkoYSxiKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazpYYShiKX19XG52YXIgT2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7ZnVuY3Rpb24gUGkoYSxiKXt2YXIgYz1iLnNvdXJjZSxkPWIuc3RhY2s7bnVsbD09PWQmJm51bGwhPT1jJiYoZD1YYShjKSk7bnVsbCE9PWMmJldhKGMudHlwZSk7Yj1iLnZhbHVlO251bGwhPT1hJiYxPT09YS50YWcmJldhKGEudHlwZSk7dHJ5e2NvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGU7fSl9fWZ1bmN0aW9uIFFpKGEsYil7dHJ5e2IucHJvcHM9YS5tZW1vaXplZFByb3BzLGIuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGIuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChjKXtSaShhLGMpfX1mdW5jdGlvbiBTaShhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtSaShhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBUaShhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpVaSgyLDAsYik7YnJlYWs7Y2FzZSAxOmlmKGIuZWZmZWN0VGFnJjI1NiYmbnVsbCE9PWEpe3ZhciBjPWEubWVtb2l6ZWRQcm9wcyxkPWEubWVtb2l6ZWRTdGF0ZTthPWIuc3RhdGVOb2RlO2I9YS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP2M6bWcoYi50eXBlLGMpLGQpO2EuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Yn1icmVhaztjYXNlIDM6Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpicmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMTYzKSk7fX1cbmZ1bmN0aW9uIFVpKGEsYixjKXtjPWMudXBkYXRlUXVldWU7Yz1udWxsIT09Yz9jLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yyl7dmFyIGQ9Yz1jLm5leHQ7ZG97aWYoMCE9PShkLnRhZyZhKSl7dmFyIGU9ZC5kZXN0cm95O2QuZGVzdHJveT12b2lkIDA7dm9pZCAwIT09ZSYmZSgpfTAhPT0oZC50YWcmYikmJihlPWQuY3JlYXRlLGQuZGVzdHJveT1lKCkpO2Q9ZC5uZXh0fXdoaWxlKGQhPT1jKX19XG5mdW5jdGlvbiBWaShhLGIsYyl7XCJmdW5jdGlvblwiPT09dHlwZW9mIFdpJiZXaShiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTphPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWEmJihhPWEubGFzdEVmZmVjdCxudWxsIT09YSkpe3ZhciBkPWEubmV4dDtmZyg5NzxjPzk3OmMsZnVuY3Rpb24oKXt2YXIgYT1kO2Rve3ZhciBjPWEuZGVzdHJveTtpZih2b2lkIDAhPT1jKXt2YXIgZz1iO3RyeXtjKCl9Y2F0Y2goaCl7UmkoZyxoKX19YT1hLm5leHR9d2hpbGUoYSE9PWQpfSl9YnJlYWs7Y2FzZSAxOlNpKGIpO2M9Yi5zdGF0ZU5vZGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuY29tcG9uZW50V2lsbFVubW91bnQmJlFpKGIsYyk7YnJlYWs7Y2FzZSA1OlNpKGIpO2JyZWFrO2Nhc2UgNDpYaShhLGIsYyl9fVxuZnVuY3Rpb24gWWkoYSl7dmFyIGI9YS5hbHRlcm5hdGU7YS5yZXR1cm49bnVsbDthLmNoaWxkPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5hbHRlcm5hdGU9bnVsbDthLmZpcnN0RWZmZWN0PW51bGw7YS5sYXN0RWZmZWN0PW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDtudWxsIT09YiYmWWkoYil9ZnVuY3Rpb24gWmkoYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiAkaShhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZihaaShiKSl7dmFyIGM9YjticmVhayBhfWI9Yi5yZXR1cm59dGhyb3cgRXJyb3IodSgxNjApKTt9Yj1jLnN0YXRlTm9kZTtzd2l0Y2goYy50YWcpe2Nhc2UgNTp2YXIgZD0hMTticmVhaztjYXNlIDM6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMTYxKSk7fWMuZWZmZWN0VGFnJjE2JiYoVGIoYixcIlwiKSxjLmVmZmVjdFRhZyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fFppKGMucmV0dXJuKSl7Yz1udWxsO2JyZWFrIGF9Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZyYmMTghPT1jLnRhZzspe2lmKGMuZWZmZWN0VGFnJjIpY29udGludWUgYjtcbmlmKG51bGw9PT1jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19Zm9yKHZhciBlPWE7Oyl7dmFyIGY9NT09PWUudGFnfHw2PT09ZS50YWc7aWYoZil7dmFyIGc9Zj9lLnN0YXRlTm9kZTplLnN0YXRlTm9kZS5pbnN0YW5jZTtpZihjKWlmKGQpe2Y9Yjt2YXIgaD1nO2c9Yzs4PT09Zi5ub2RlVHlwZT9mLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGgsZyk6Zi5pbnNlcnRCZWZvcmUoaCxnKX1lbHNlIGIuaW5zZXJ0QmVmb3JlKGcsYyk7ZWxzZSBkPyhoPWIsOD09PWgubm9kZVR5cGU/KGY9aC5wYXJlbnROb2RlLGYuaW5zZXJ0QmVmb3JlKGcsaCkpOihmPWgsZi5hcHBlbmRDaGlsZChnKSksaD1oLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWgmJnZvaWQgMCE9PWh8fG51bGwhPT1mLm9uY2xpY2t8fChmLm9uY2xpY2s9YWUpKTpiLmFwcGVuZENoaWxkKGcpfWVsc2UgaWYoNCE9PVxuZS50YWcmJm51bGwhPT1lLmNoaWxkKXtlLmNoaWxkLnJldHVybj1lO2U9ZS5jaGlsZDtjb250aW51ZX1pZihlPT09YSlicmVhaztmb3IoO251bGw9PT1lLnNpYmxpbmc7KXtpZihudWxsPT09ZS5yZXR1cm58fGUucmV0dXJuPT09YSlyZXR1cm47ZT1lLnJldHVybn1lLnNpYmxpbmcucmV0dXJuPWUucmV0dXJuO2U9ZS5zaWJsaW5nfX1cbmZ1bmN0aW9uIFhpKGEsYixjKXtmb3IodmFyIGQ9YixlPSExLGYsZzs7KXtpZighZSl7ZT1kLnJldHVybjthOmZvcig7Oyl7aWYobnVsbD09PWUpdGhyb3cgRXJyb3IodSgxNjApKTtmPWUuc3RhdGVOb2RlO3N3aXRjaChlLnRhZyl7Y2FzZSA1Omc9ITE7YnJlYWsgYTtjYXNlIDM6Zj1mLmNvbnRhaW5lckluZm87Zz0hMDticmVhayBhO2Nhc2UgNDpmPWYuY29udGFpbmVySW5mbztnPSEwO2JyZWFrIGF9ZT1lLnJldHVybn1lPSEwfWlmKDU9PT1kLnRhZ3x8Nj09PWQudGFnKXthOmZvcih2YXIgaD1hLGs9ZCxsPWMsbT1rOzspaWYoVmkoaCxtLGwpLG51bGwhPT1tLmNoaWxkJiY0IT09bS50YWcpbS5jaGlsZC5yZXR1cm49bSxtPW0uY2hpbGQ7ZWxzZXtpZihtPT09aylicmVhaztmb3IoO251bGw9PT1tLnNpYmxpbmc7KXtpZihudWxsPT09bS5yZXR1cm58fG0ucmV0dXJuPT09aylicmVhayBhO209bS5yZXR1cm59bS5zaWJsaW5nLnJldHVybj1tLnJldHVybjttPW0uc2libGluZ31nPyhoPVxuZixrPWQuc3RhdGVOb2RlLDg9PT1oLm5vZGVUeXBlP2gucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChrKTpoLnJlbW92ZUNoaWxkKGspKTpmLnJlbW92ZUNoaWxkKGQuc3RhdGVOb2RlKX1lbHNlIGlmKDQ9PT1kLnRhZyl7aWYobnVsbCE9PWQuY2hpbGQpe2Y9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztnPSEwO2QuY2hpbGQucmV0dXJuPWQ7ZD1kLmNoaWxkO2NvbnRpbnVlfX1lbHNlIGlmKFZpKGEsZCxjKSxudWxsIT09ZC5jaGlsZCl7ZC5jaGlsZC5yZXR1cm49ZDtkPWQuY2hpbGQ7Y29udGludWV9aWYoZD09PWIpYnJlYWs7Zm9yKDtudWxsPT09ZC5zaWJsaW5nOyl7aWYobnVsbD09PWQucmV0dXJufHxkLnJldHVybj09PWIpcmV0dXJuO2Q9ZC5yZXR1cm47ND09PWQudGFnJiYoZT0hMSl9ZC5zaWJsaW5nLnJldHVybj1kLnJldHVybjtkPWQuc2libGluZ319XG5mdW5jdGlvbiBhaihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OlVpKDQsOCxiKTticmVhaztjYXNlIDE6YnJlYWs7Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wcyxlPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO2E9Yi50eXBlO3ZhciBmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1mKXtjW3ZlXT1kO1wiaW5wdXRcIj09PWEmJlwicmFkaW9cIj09PWQudHlwZSYmbnVsbCE9ZC5uYW1lJiZDYihjLGQpO1pkKGEsZSk7Yj1aZChhLGQpO2ZvcihlPTA7ZTxmLmxlbmd0aDtlKz0yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/V2QoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP1NiKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9UYihjLGgpOnZiKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjpFYihjLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOk1iKGMsXG5kKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZC5tdWx0aXBsZSxhPWQudmFsdWUsbnVsbCE9YT9KYihjLCEhZC5tdWx0aXBsZSxhLCExKTpiIT09ISFkLm11bHRpcGxlJiYobnVsbCE9ZC5kZWZhdWx0VmFsdWU/SmIoYywhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApOkpiKGMsISFkLm11bHRpcGxlLGQubXVsdGlwbGU/W106XCJcIiwhMSkpfX19YnJlYWs7Y2FzZSA2OmlmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih1KDE2MikpO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iLm1lbW9pemVkUHJvcHM7YnJlYWs7Y2FzZSAzOmI9Yi5zdGF0ZU5vZGU7Yi5oeWRyYXRlJiYoYi5oeWRyYXRlPSExLExjKGIuY29udGFpbmVySW5mbykpO2JyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSAxMzpjPWI7bnVsbD09PWIubWVtb2l6ZWRTdGF0ZT9kPSExOihkPSEwLGM9Yi5jaGlsZCxiaj1jZygpKTtcbmlmKG51bGwhPT1jKWE6Zm9yKGE9Yzs7KXtpZig1PT09YS50YWcpZj1hLnN0YXRlTm9kZSxkPyhmPWYuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuc2V0UHJvcGVydHk/Zi5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpmLmRpc3BsYXk9XCJub25lXCIpOihmPWEuc3RhdGVOb2RlLGU9YS5tZW1vaXplZFByb3BzLnN0eWxlLGU9dm9pZCAwIT09ZSYmbnVsbCE9PWUmJmUuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2UuZGlzcGxheTpudWxsLGYuc3R5bGUuZGlzcGxheT1WZChcImRpc3BsYXlcIixlKSk7ZWxzZSBpZig2PT09YS50YWcpYS5zdGF0ZU5vZGUubm9kZVZhbHVlPWQ/XCJcIjphLm1lbW9pemVkUHJvcHM7ZWxzZSBpZigxMz09PWEudGFnJiZudWxsIT09YS5tZW1vaXplZFN0YXRlJiZudWxsPT09YS5tZW1vaXplZFN0YXRlLmRlaHlkcmF0ZWQpe2Y9YS5jaGlsZC5zaWJsaW5nO2YucmV0dXJuPWE7YT1mO2NvbnRpbnVlfWVsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPVxuYTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWMpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YylicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31jaihiKTticmVhaztjYXNlIDE5OmNqKGIpO2JyZWFrO2Nhc2UgMTc6YnJlYWs7Y2FzZSAyMDpicmVhaztjYXNlIDIxOmJyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgxNjMpKTt9fWZ1bmN0aW9uIGNqKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IE9pKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9ZGouYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19dmFyIGVqPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO1xuZnVuY3Rpb24gZmooYSxiLGMpe2M9QmcoYyxudWxsKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtnanx8KGdqPSEwLGhqPWQpO1BpKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gaWooYSxiLGMpe2M9QmcoYyxudWxsKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7UGkoYSxiKTtyZXR1cm4gZChlKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PWpqP2pqPW5ldyBTZXQoW3RoaXNdKTpqai5hZGQodGhpcyksUGkoYSxiKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9XG52YXIga2o9TWF0aC5jZWlsLGxqPUVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsbWo9RWEuUmVhY3RDdXJyZW50T3duZXIsUz0wLG5qPTgsb2o9MTYscGo9MzIscWo9MCxyaj0xLHNqPTIsdGo9Myx1aj00LHZqPTUsVD1TLFU9bnVsbCxWPW51bGwsVz0wLFg9cWosd2o9bnVsbCx4aj0xMDczNzQxODIzLHlqPTEwNzM3NDE4MjMsemo9bnVsbCxBaj0wLEJqPSExLGJqPTAsQ2o9NTAwLFk9bnVsbCxnaj0hMSxoaj1udWxsLGpqPW51bGwsRGo9ITEsRWo9bnVsbCxGaj05MCxHaj1udWxsLEhqPTAsSWo9bnVsbCxKaj0wO2Z1bmN0aW9uIFBnKCl7cmV0dXJuKFQmKG9qfHBqKSkhPT1TPzEwNzM3NDE4MjEtKGNnKCkvMTB8MCk6MCE9PUpqP0pqOkpqPTEwNzM3NDE4MjEtKGNnKCkvMTB8MCl9XG5mdW5jdGlvbiBRZyhhLGIsYyl7Yj1iLm1vZGU7aWYoMD09PShiJjIpKXJldHVybiAxMDczNzQxODIzO3ZhciBkPWRnKCk7aWYoMD09PShiJjQpKXJldHVybiA5OT09PWQ/MTA3Mzc0MTgyMzoxMDczNzQxODIyO2lmKChUJm9qKSE9PVMpcmV0dXJuIFc7aWYobnVsbCE9PWMpYT1sZyhhLGMudGltZW91dE1zfDB8fDVFMywyNTApO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgOTk6YT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgOTg6YT1sZyhhLDE1MCwxMDApO2JyZWFrO2Nhc2UgOTc6Y2FzZSA5NjphPWxnKGEsNUUzLDI1MCk7YnJlYWs7Y2FzZSA5NTphPTI7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMyNikpO31udWxsIT09VSYmYT09PVcmJi0tYTtyZXR1cm4gYX1cbmZ1bmN0aW9uIFJnKGEsYil7aWYoNTA8SGopdGhyb3cgSGo9MCxJaj1udWxsLEVycm9yKHUoMTg1KSk7YT1LaihhLGIpO2lmKG51bGwhPT1hKXt2YXIgYz1kZygpOzEwNzM3NDE4MjM9PT1iPyhUJm5qKSE9PVMmJihUJihvanxwaikpPT09Uz9MaihhKTooWihhKSxUPT09UyYmamcoKSk6WihhKTsoVCY0KT09PVN8fDk4IT09YyYmOTkhPT1jfHwobnVsbD09PUdqP0dqPW5ldyBNYXAoW1thLGJdXSk6KGM9R2ouZ2V0KGEpLCh2b2lkIDA9PT1jfHxjPmIpJiZHai5zZXQoYSxiKSkpfX1cbmZ1bmN0aW9uIEtqKGEsYil7YS5leHBpcmF0aW9uVGltZTxiJiYoYS5leHBpcmF0aW9uVGltZT1iKTt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTxiJiYoYy5leHBpcmF0aW9uVGltZT1iKTt2YXIgZD1hLnJldHVybixlPW51bGw7aWYobnVsbD09PWQmJjM9PT1hLnRhZyllPWEuc3RhdGVOb2RlO2Vsc2UgZm9yKDtudWxsIT09ZDspe2M9ZC5hbHRlcm5hdGU7ZC5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihkLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7bnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2lmKG51bGw9PT1kLnJldHVybiYmMz09PWQudGFnKXtlPWQuc3RhdGVOb2RlO2JyZWFrfWQ9ZC5yZXR1cm59bnVsbCE9PWUmJihVPT09ZSYmKEpnKGIpLFg9PT11aiYmTWooZSxXKSksTmooZSxiKSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBPaihhKXt2YXIgYj1hLmxhc3RFeHBpcmVkVGltZTtpZigwIT09YilyZXR1cm4gYjtiPWEuZmlyc3RQZW5kaW5nVGltZTtpZighUGooYSxiKSlyZXR1cm4gYjtiPWEubGFzdFBpbmdlZFRpbWU7YT1hLm5leHRLbm93blBlbmRpbmdMZXZlbDtyZXR1cm4gYj5hP2I6YX1cbmZ1bmN0aW9uIFooYSl7aWYoMCE9PWEubGFzdEV4cGlyZWRUaW1lKWEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT0xMDczNzQxODIzLGEuY2FsbGJhY2tQcmlvcml0eT05OSxhLmNhbGxiYWNrTm9kZT1oZyhMai5iaW5kKG51bGwsYSkpO2Vsc2V7dmFyIGI9T2ooYSksYz1hLmNhbGxiYWNrTm9kZTtpZigwPT09YiludWxsIT09YyYmKGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTAsYS5jYWxsYmFja1ByaW9yaXR5PTkwKTtlbHNle3ZhciBkPVBnKCk7MTA3Mzc0MTgyMz09PWI/ZD05OToxPT09Ynx8Mj09PWI/ZD05NTooZD0xMCooMTA3Mzc0MTgyMS1iKS0xMCooMTA3Mzc0MTgyMS1kKSxkPTA+PWQ/OTk6MjUwPj1kPzk4OjUyNTA+PWQ/OTc6OTUpO2lmKG51bGwhPT1jKXt2YXIgZT1hLmNhbGxiYWNrUHJpb3JpdHk7aWYoYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPT09YiYmZT49ZClyZXR1cm47YyE9PVhmJiZOZihjKX1hLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9XG5iO2EuY2FsbGJhY2tQcmlvcml0eT1kO2I9MTA3Mzc0MTgyMz09PWI/aGcoTGouYmluZChudWxsLGEpKTpnZyhkLFFqLmJpbmQobnVsbCxhKSx7dGltZW91dDoxMCooMTA3Mzc0MTgyMS1iKS1jZygpfSk7YS5jYWxsYmFja05vZGU9Yn19fVxuZnVuY3Rpb24gUWooYSxiKXtKaj0wO2lmKGIpcmV0dXJuIGI9UGcoKSxSaihhLGIpLFooYSksbnVsbDt2YXIgYz1PaihhKTtpZigwIT09Yyl7Yj1hLmNhbGxiYWNrTm9kZTtpZigoVCYob2p8cGopKSE9PVMpdGhyb3cgRXJyb3IodSgzMjcpKTtTaigpO2E9PT1VJiZjPT09V3x8VGooYSxjKTtpZihudWxsIT09Vil7dmFyIGQ9VDtUfD1vajt2YXIgZT1VaihhKTtkbyB0cnl7VmooKTticmVha31jYXRjaChoKXtXaihhLGgpfXdoaWxlKDEpO3JnKCk7VD1kO2xqLmN1cnJlbnQ9ZTtpZihYPT09cmopdGhyb3cgYj13aixUaihhLGMpLE1qKGEsYyksWihhKSxiO2lmKG51bGw9PT1WKXN3aXRjaChlPWEuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGUsYS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPWMsZD1YLFU9bnVsbCxkKXtjYXNlIHFqOmNhc2Ugcmo6dGhyb3cgRXJyb3IodSgzNDUpKTtjYXNlIHNqOlJqKGEsMjxjPzI6Yyk7YnJlYWs7Y2FzZSB0ajpNaihhLGMpO2Q9YS5sYXN0U3VzcGVuZGVkVGltZTtcbmM9PT1kJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9WGooZSkpO2lmKDEwNzM3NDE4MjM9PT14aiYmKGU9YmorQ2otY2coKSwxMDxlKSl7aWYoQmope3ZhciBmPWEubGFzdFBpbmdlZFRpbWU7aWYoMD09PWZ8fGY+PWMpe2EubGFzdFBpbmdlZFRpbWU9YztUaihhLGMpO2JyZWFrfX1mPU9qKGEpO2lmKDAhPT1mJiZmIT09YylicmVhaztpZigwIT09ZCYmZCE9PWMpe2EubGFzdFBpbmdlZFRpbWU9ZDticmVha31hLnRpbWVvdXRIYW5kbGU9cGUoWWouYmluZChudWxsLGEpLGUpO2JyZWFrfVlqKGEpO2JyZWFrO2Nhc2UgdWo6TWooYSxjKTtkPWEubGFzdFN1c3BlbmRlZFRpbWU7Yz09PWQmJihhLm5leHRLbm93blBlbmRpbmdMZXZlbD1YaihlKSk7aWYoQmomJihlPWEubGFzdFBpbmdlZFRpbWUsMD09PWV8fGU+PWMpKXthLmxhc3RQaW5nZWRUaW1lPWM7VGooYSxjKTticmVha31lPU9qKGEpO2lmKDAhPT1lJiZlIT09YylicmVhaztpZigwIT09ZCYmZCE9PWMpe2EubGFzdFBpbmdlZFRpbWU9XG5kO2JyZWFrfTEwNzM3NDE4MjMhPT15aj9kPTEwKigxMDczNzQxODIxLXlqKS1jZygpOjEwNzM3NDE4MjM9PT14aj9kPTA6KGQ9MTAqKDEwNzM3NDE4MjEteGopLTVFMyxlPWNnKCksYz0xMCooMTA3Mzc0MTgyMS1jKS1lLGQ9ZS1kLDA+ZCYmKGQ9MCksZD0oMTIwPmQ/MTIwOjQ4MD5kPzQ4MDoxMDgwPmQ/MTA4MDoxOTIwPmQ/MTkyMDozRTM+ZD8zRTM6NDMyMD5kPzQzMjA6MTk2MCpraihkLzE5NjApKS1kLGM8ZCYmKGQ9YykpO2lmKDEwPGQpe2EudGltZW91dEhhbmRsZT1wZShZai5iaW5kKG51bGwsYSksZCk7YnJlYWt9WWooYSk7YnJlYWs7Y2FzZSB2ajppZigxMDczNzQxODIzIT09eGomJm51bGwhPT16ail7Zj14ajt2YXIgZz16ajtkPWcuYnVzeU1pbkR1cmF0aW9uTXN8MDswPj1kP2Q9MDooZT1nLmJ1c3lEZWxheU1zfDAsZj1jZygpLSgxMCooMTA3Mzc0MTgyMS1mKS0oZy50aW1lb3V0TXN8MHx8NUUzKSksZD1mPD1lPzA6ZStkLWYpO2lmKDEwPGQpe01qKGEsYyk7YS50aW1lb3V0SGFuZGxlPVxucGUoWWouYmluZChudWxsLGEpLGQpO2JyZWFrfX1ZaihhKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMzI5KSk7fVooYSk7aWYoYS5jYWxsYmFja05vZGU9PT1iKXJldHVybiBRai5iaW5kKG51bGwsYSl9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gTGooYSl7dmFyIGI9YS5sYXN0RXhwaXJlZFRpbWU7Yj0wIT09Yj9iOjEwNzM3NDE4MjM7aWYoYS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPT09YilZaihhKTtlbHNle2lmKChUJihvanxwaikpIT09Uyl0aHJvdyBFcnJvcih1KDMyNykpO1NqKCk7YT09PVUmJmI9PT1XfHxUaihhLGIpO2lmKG51bGwhPT1WKXt2YXIgYz1UO1R8PW9qO3ZhciBkPVVqKGEpO2RvIHRyeXtaaigpO2JyZWFrfWNhdGNoKGUpe1dqKGEsZSl9d2hpbGUoMSk7cmcoKTtUPWM7bGouY3VycmVudD1kO2lmKFg9PT1yail0aHJvdyBjPXdqLFRqKGEsYiksTWooYSxiKSxaKGEpLGM7aWYobnVsbCE9PVYpdGhyb3cgRXJyb3IodSgyNjEpKTthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT1iO1U9bnVsbDtZaihhKTtaKGEpfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGFrKCl7aWYobnVsbCE9PUdqKXt2YXIgYT1HajtHaj1udWxsO2EuZm9yRWFjaChmdW5jdGlvbihhLGMpe1JqKGMsYSk7WihjKX0pO2pnKCl9fWZ1bmN0aW9uIGJrKGEsYil7dmFyIGM9VDtUfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1Q9YyxUPT09UyYmamcoKX19ZnVuY3Rpb24gY2soYSxiKXt2YXIgYz1UO1QmPS0yO1R8PW5qO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1Q9YyxUPT09UyYmamcoKX19XG5mdW5jdGlvbiBUaihhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxxZShjKSk7aWYobnVsbCE9PVYpZm9yKGM9Vi5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3N3aXRjaChkLnRhZyl7Y2FzZSAxOnZhciBlPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZSYmdm9pZCAwIT09ZSYmRmYoZCk7YnJlYWs7Y2FzZSAzOm5oKGQpO0dmKGQpO2JyZWFrO2Nhc2UgNTpwaChkKTticmVhaztjYXNlIDQ6bmgoZCk7YnJlYWs7Y2FzZSAxMzpHKE0sZCk7YnJlYWs7Y2FzZSAxOTpHKE0sZCk7YnJlYWs7Y2FzZSAxMDp0ZyhkKX1jPWMucmV0dXJufVU9YTtWPWFoKGEuY3VycmVudCxudWxsLGIpO1c9YjtYPXFqO3dqPW51bGw7eWo9eGo9MTA3Mzc0MTgyMzt6aj1udWxsO0FqPTA7Qmo9ITF9XG5mdW5jdGlvbiBXaihhLGIpe2Rve3RyeXtyZygpO01oKCk7aWYobnVsbD09PVZ8fG51bGw9PT1WLnJldHVybilyZXR1cm4gWD1yaix3aj1iLG51bGw7YTp7dmFyIGM9YSxkPVYucmV0dXJuLGU9VixmPWI7Yj1XO2UuZWZmZWN0VGFnfD0yMDQ4O2UuZmlyc3RFZmZlY3Q9ZS5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PWYmJlwib2JqZWN0XCI9PT10eXBlb2YgZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYudGhlbil7dmFyIGc9ZixoPTAhPT0oTS5jdXJyZW50JjEpLGs9ZDtkb3t2YXIgbDtpZihsPTEzPT09ay50YWcpe3ZhciBtPWsubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09bSlsPW51bGwhPT1tLmRlaHlkcmF0ZWQ/ITA6ITE7ZWxzZXt2YXIgQz1rLm1lbW9pemVkUHJvcHM7bD12b2lkIDA9PT1DLmZhbGxiYWNrPyExOiEwIT09Qy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjaz8hMDpoPyExOiEwfX1pZihsKXt2YXIgeT1rLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT15KXt2YXIgSD1uZXcgU2V0O1xuSC5hZGQoZyk7ay51cGRhdGVRdWV1ZT1IfWVsc2UgeS5hZGQoZyk7aWYoMD09PShrLm1vZGUmMikpe2suZWZmZWN0VGFnfD02NDtlLmVmZmVjdFRhZyY9LTI5ODE7aWYoMT09PWUudGFnKWlmKG51bGw9PT1lLmFsdGVybmF0ZSllLnRhZz0xNztlbHNle3ZhciB6PUJnKDEwNzM3NDE4MjMsbnVsbCk7ei50YWc9MjtEZyhlLHopfWUuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMzticmVhayBhfWY9dm9pZCAwO2U9Yjt2YXIgdGE9Yy5waW5nQ2FjaGU7bnVsbD09PXRhPyh0YT1jLnBpbmdDYWNoZT1uZXcgZWosZj1uZXcgU2V0LHRhLnNldChnLGYpKTooZj10YS5nZXQoZyksdm9pZCAwPT09ZiYmKGY9bmV3IFNldCx0YS5zZXQoZyxmKSkpO2lmKCFmLmhhcyhlKSl7Zi5hZGQoZSk7dmFyIHI9ZGsuYmluZChudWxsLGMsZyxlKTtnLnRoZW4ocixyKX1rLmVmZmVjdFRhZ3w9NDA5NjtrLmV4cGlyYXRpb25UaW1lPWI7YnJlYWsgYX1rPWsucmV0dXJufXdoaWxlKG51bGwhPT1rKTtmPUVycm9yKChXYShlLnR5cGUpfHxcblwiQSBSZWFjdCBjb21wb25lbnRcIikrXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIitYYShlKSl9WCE9PXZqJiYoWD1zaik7Zj1OaShmLGUpO2s9ZDtkb3tzd2l0Y2goay50YWcpe2Nhc2UgMzpnPWY7ay5lZmZlY3RUYWd8PTQwOTY7ay5leHBpcmF0aW9uVGltZT1iO3ZhciB4PWZqKGssZyxiKTtFZyhrLHgpO2JyZWFrIGE7Y2FzZSAxOmc9Zjt2YXIgQT1rLnR5cGUscD1rLnN0YXRlTm9kZTtpZigwPT09KGsuZWZmZWN0VGFnJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBBLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PXAmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwLmNvbXBvbmVudERpZENhdGNoJiZcbihudWxsPT09amp8fCFqai5oYXMocCkpKSl7ay5lZmZlY3RUYWd8PTQwOTY7ay5leHBpcmF0aW9uVGltZT1iO3ZhciB0PWlqKGssZyxiKTtFZyhrLHQpO2JyZWFrIGF9fWs9ay5yZXR1cm59d2hpbGUobnVsbCE9PWspfVY9ZWsoVil9Y2F0Y2godil7Yj12O2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfWZ1bmN0aW9uIFVqKCl7dmFyIGE9bGouY3VycmVudDtsai5jdXJyZW50PUxoO3JldHVybiBudWxsPT09YT9MaDphfWZ1bmN0aW9uIElnKGEsYil7YTx4aiYmMjxhJiYoeGo9YSk7bnVsbCE9PWImJmE8eWomJjI8YSYmKHlqPWEsemo9Yil9ZnVuY3Rpb24gSmcoYSl7YT5BaiYmKEFqPWEpfWZ1bmN0aW9uIFpqKCl7Zm9yKDtudWxsIT09VjspVj1mayhWKX1mdW5jdGlvbiBWaigpe2Zvcig7bnVsbCE9PVYmJiFPZigpOylWPWZrKFYpfVxuZnVuY3Rpb24gZmsoYSl7dmFyIGI9Z2soYS5hbHRlcm5hdGUsYSxXKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWImJihiPWVrKGEpKTttai5jdXJyZW50PW51bGw7cmV0dXJuIGJ9XG5mdW5jdGlvbiBlayhhKXtWPWE7ZG97dmFyIGI9Vi5hbHRlcm5hdGU7YT1WLnJldHVybjtpZigwPT09KFYuZWZmZWN0VGFnJjIwNDgpKXthOnt2YXIgYz1iO2I9Vjt2YXIgZD1XO3ZhciBlPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmJyZWFrO2Nhc2UgMTY6YnJlYWs7Y2FzZSAxNTpjYXNlIDA6YnJlYWs7Y2FzZSAxOkwoYi50eXBlKSYmRmYoYik7YnJlYWs7Y2FzZSAzOm5oKGIpO0dmKGIpO2U9Yi5zdGF0ZU5vZGU7ZS5wZW5kaW5nQ29udGV4dCYmKGUuY29udGV4dD1lLnBlbmRpbmdDb250ZXh0LGUucGVuZGluZ0NvbnRleHQ9bnVsbCk7KG51bGw9PT1jfHxudWxsPT09Yy5jaGlsZCkmJmtpKGIpJiZDaShiKTtJaShiKTticmVhaztjYXNlIDU6cGgoYik7ZD1saChraC5jdXJyZW50KTt2YXIgZj1iLnR5cGU7aWYobnVsbCE9PWMmJm51bGwhPWIuc3RhdGVOb2RlKUppKGMsYixmLGUsZCksYy5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpO2Vsc2UgaWYoZSl7dmFyIGc9XG5saChpaC5jdXJyZW50KTtpZihraShiKSl7ZT1iO3ZhciBoPWUuc3RhdGVOb2RlO2M9ZS50eXBlO3ZhciBrPWUubWVtb2l6ZWRQcm9wcyxsPWQ7aFt1ZV09ZTtoW3ZlXT1rO2Y9dm9pZCAwO2Q9aDtzd2l0Y2goYyl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpGKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihoPTA7aDxjYy5sZW5ndGg7aCsrKUYoY2NbaF0sZCk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkYoXCJlcnJvclwiLGQpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkYoXCJlcnJvclwiLGQpO0YoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcImZvcm1cIjpGKFwicmVzZXRcIixkKTtGKFwic3VibWl0XCIsZCk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpGKFwidG9nZ2xlXCIsZCk7YnJlYWs7Y2FzZSBcImlucHV0XCI6QmIoZCxrKTtGKFwiaW52YWxpZFwiLGQpOyRkKGwsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhay5tdWx0aXBsZX07RihcImludmFsaWRcIixkKTskZChsLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6TGIoZCxrKSxGKFwiaW52YWxpZFwiLGQpLCRkKGwsXCJvbkNoYW5nZVwiKX1ZZChjLGspO2g9bnVsbDtmb3IoZiBpbiBrKWsuaGFzT3duUHJvcGVydHkoZikmJihnPWtbZl0sXCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGc/ZC50ZXh0Q29udGVudCE9PWcmJihoPVtcImNoaWxkcmVuXCIsZ10pOlwibnVtYmVyXCI9PT10eXBlb2YgZyYmZC50ZXh0Q29udGVudCE9PVwiXCIrZyYmKGg9W1wiY2hpbGRyZW5cIixcIlwiK2ddKTppYS5oYXNPd25Qcm9wZXJ0eShmKSYmbnVsbCE9ZyYmJGQobCxmKSk7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOnliKGQpO0diKGQsaywhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6eWIoZCk7TmIoZCxrKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGsub25DbGljayYmXG4oZC5vbmNsaWNrPWFlKX1mPWg7ZS51cGRhdGVRdWV1ZT1mO2U9bnVsbCE9PWY/ITA6ITE7ZSYmQ2koYil9ZWxzZXtjPWI7bD1mO2s9ZTtoPTk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50O2c9PT1PYi5odG1sJiYoZz1QYihsKSk7Zz09PU9iLmh0bWw/XCJzY3JpcHRcIj09PWw/KGs9aC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGsuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsaD1rLnJlbW92ZUNoaWxkKGsuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2Ygay5pcz9oPWguY3JlYXRlRWxlbWVudChsLHtpczprLmlzfSk6KGg9aC5jcmVhdGVFbGVtZW50KGwpLFwic2VsZWN0XCI9PT1sJiYobD1oLGsubXVsdGlwbGU/bC5tdWx0aXBsZT0hMDprLnNpemUmJihsLnNpemU9ay5zaXplKSkpOmg9aC5jcmVhdGVFbGVtZW50TlMoZyxsKTtrPWg7a1t1ZV09YztrW3ZlXT1lO0hpKGssYiwhMSwhMSk7Yi5zdGF0ZU5vZGU9aztsPWY7Yz1lO3ZhciBtPWQsQz1aZChsLGMpO3N3aXRjaChsKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkYoXCJsb2FkXCIsXG5rKTtkPWM7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGQ9MDtkPGNjLmxlbmd0aDtkKyspRihjY1tkXSxrKTtkPWM7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkYoXCJlcnJvclwiLGspO2Q9YzticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpGKFwiZXJyb3JcIixrKTtGKFwibG9hZFwiLGspO2Q9YzticmVhaztjYXNlIFwiZm9ybVwiOkYoXCJyZXNldFwiLGspO0YoXCJzdWJtaXRcIixrKTtkPWM7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpGKFwidG9nZ2xlXCIsayk7ZD1jO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkJiKGssYyk7ZD1BYihrLGMpO0YoXCJpbnZhbGlkXCIsayk7JGQobSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpkPUliKGssYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmsuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFjLm11bHRpcGxlfTtkPW4oe30sYyx7dmFsdWU6dm9pZCAwfSk7RihcImludmFsaWRcIixrKTskZChtLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6TGIoayxcbmMpO2Q9S2IoayxjKTtGKFwiaW52YWxpZFwiLGspOyRkKG0sXCJvbkNoYW5nZVwiKTticmVhaztkZWZhdWx0OmQ9Y31ZZChsLGQpO2g9dm9pZCAwO2c9bDt2YXIgeT1rLEg9ZDtmb3IoaCBpbiBIKWlmKEguaGFzT3duUHJvcGVydHkoaCkpe3ZhciB6PUhbaF07XCJzdHlsZVwiPT09aD9XZCh5LHopOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWg/KHo9ej96Ll9faHRtbDp2b2lkIDAsbnVsbCE9eiYmU2IoeSx6KSk6XCJjaGlsZHJlblwiPT09aD9cInN0cmluZ1wiPT09dHlwZW9mIHo/KFwidGV4dGFyZWFcIiE9PWd8fFwiXCIhPT16KSYmVGIoeSx6KTpcIm51bWJlclwiPT09dHlwZW9mIHomJlRiKHksXCJcIit6KTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09aCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWgmJlwiYXV0b0ZvY3VzXCIhPT1oJiYoaWEuaGFzT3duUHJvcGVydHkoaCk/bnVsbCE9eiYmJGQobSxoKTpudWxsIT16JiZ2Yih5LGgseixDKSl9c3dpdGNoKGwpe2Nhc2UgXCJpbnB1dFwiOnliKGspO1xuR2IoayxjLCExKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjp5YihrKTtOYihrLGMpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1jLnZhbHVlJiZrLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIit1YihjLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQ9aztkLm11bHRpcGxlPSEhYy5tdWx0aXBsZTtrPWMudmFsdWU7bnVsbCE9az9KYihkLCEhYy5tdWx0aXBsZSxrLCExKTpudWxsIT1jLmRlZmF1bHRWYWx1ZSYmSmIoZCwhIWMubXVsdGlwbGUsYy5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGsub25jbGljaz1hZSl9KGU9bmUoZixlKSkmJkNpKGIpfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfWVsc2UgaWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHUoMTY2KSk7YnJlYWs7Y2FzZSA2OmlmKGMmJm51bGwhPWIuc3RhdGVOb2RlKUtpKGMsYixjLm1lbW9pemVkUHJvcHMsZSk7ZWxzZXtpZihcInN0cmluZ1wiIT09XG50eXBlb2YgZSYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHUoMTY2KSk7ZD1saChraC5jdXJyZW50KTtsaChpaC5jdXJyZW50KTtraShiKT8oZT1iLGY9ZS5zdGF0ZU5vZGUsZD1lLm1lbW9pemVkUHJvcHMsZlt1ZV09ZSwoZT1mLm5vZGVWYWx1ZSE9PWQpJiZDaShiKSk6KGY9YixlPSg5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZSksZVt1ZV09ZixiLnN0YXRlTm9kZT1lKX1icmVhaztjYXNlIDExOmJyZWFrO2Nhc2UgMTM6RyhNLGIpO2U9Yi5tZW1vaXplZFN0YXRlO2lmKDAhPT0oYi5lZmZlY3RUYWcmNjQpKXtiLmV4cGlyYXRpb25UaW1lPWQ7YnJlYWsgYX1lPW51bGwhPT1lO2Y9ITE7bnVsbD09PWM/dm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLmZhbGxiYWNrJiZraShiKTooZD1jLm1lbW9pemVkU3RhdGUsZj1udWxsIT09ZCxlfHxudWxsPT09ZHx8KGQ9Yy5jaGlsZC5zaWJsaW5nLG51bGwhPT1kJiYoaz1iLmZpcnN0RWZmZWN0LFxubnVsbCE9PWs/KGIuZmlyc3RFZmZlY3Q9ZCxkLm5leHRFZmZlY3Q9ayk6KGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWQsZC5uZXh0RWZmZWN0PW51bGwpLGQuZWZmZWN0VGFnPTgpKSk7aWYoZSYmIWYmJjAhPT0oYi5tb2RlJjIpKWlmKG51bGw9PT1jJiYhMCE9PWIubWVtb2l6ZWRQcm9wcy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8MCE9PShNLmN1cnJlbnQmMSkpWD09PXFqJiYoWD10aik7ZWxzZXtpZihYPT09cWp8fFg9PT10ailYPXVqOzAhPT1BaiYmbnVsbCE9PVUmJihNaihVLFcpLE5qKFUsQWopKX1pZihlfHxmKWIuZWZmZWN0VGFnfD00O2JyZWFrO2Nhc2UgNzpicmVhaztjYXNlIDg6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDQ6bmgoYik7SWkoYik7YnJlYWs7Y2FzZSAxMDp0ZyhiKTticmVhaztjYXNlIDk6YnJlYWs7Y2FzZSAxNDpicmVhaztjYXNlIDE3OkwoYi50eXBlKSYmRmYoYik7YnJlYWs7Y2FzZSAxOTpHKE0sYik7ZT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PVxuZSlicmVhaztmPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2s9ZS5yZW5kZXJpbmc7aWYobnVsbD09PWspaWYoZilMaShlLCExKTtlbHNle2lmKFghPT1xanx8bnVsbCE9PWMmJjAhPT0oYy5lZmZlY3RUYWcmNjQpKWZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KXtrPXFoKGMpO2lmKG51bGwhPT1rKXtiLmVmZmVjdFRhZ3w9NjQ7TGkoZSwhMSk7Zj1rLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoYi51cGRhdGVRdWV1ZT1mLGIuZWZmZWN0VGFnfD00KTtudWxsPT09ZS5sYXN0RWZmZWN0JiYoYi5maXJzdEVmZmVjdD1udWxsKTtiLmxhc3RFZmZlY3Q9ZS5sYXN0RWZmZWN0O2U9ZDtmb3IoZj1iLmNoaWxkO251bGwhPT1mOylkPWYsYz1lLGQuZWZmZWN0VGFnJj0yLGQubmV4dEVmZmVjdD1udWxsLGQuZmlyc3RFZmZlY3Q9bnVsbCxkLmxhc3RFZmZlY3Q9bnVsbCxrPWQuYWx0ZXJuYXRlLG51bGw9PT1rPyhkLmNoaWxkRXhwaXJhdGlvblRpbWU9MCxkLmV4cGlyYXRpb25UaW1lPWMsZC5jaGlsZD1udWxsLFxuZC5tZW1vaXplZFByb3BzPW51bGwsZC5tZW1vaXplZFN0YXRlPW51bGwsZC51cGRhdGVRdWV1ZT1udWxsLGQuZGVwZW5kZW5jaWVzPW51bGwpOihkLmNoaWxkRXhwaXJhdGlvblRpbWU9ay5jaGlsZEV4cGlyYXRpb25UaW1lLGQuZXhwaXJhdGlvblRpbWU9ay5leHBpcmF0aW9uVGltZSxkLmNoaWxkPWsuY2hpbGQsZC5tZW1vaXplZFByb3BzPWsubWVtb2l6ZWRQcm9wcyxkLm1lbW9pemVkU3RhdGU9ay5tZW1vaXplZFN0YXRlLGQudXBkYXRlUXVldWU9ay51cGRhdGVRdWV1ZSxjPWsuZGVwZW5kZW5jaWVzLGQuZGVwZW5kZW5jaWVzPW51bGw9PT1jP251bGw6e2V4cGlyYXRpb25UaW1lOmMuZXhwaXJhdGlvblRpbWUsZmlyc3RDb250ZXh0OmMuZmlyc3RDb250ZXh0LHJlc3BvbmRlcnM6Yy5yZXNwb25kZXJzfSksZj1mLnNpYmxpbmc7SShNLE0uY3VycmVudCYxfDIsYik7Yj1iLmNoaWxkO2JyZWFrIGF9Yz1jLnNpYmxpbmd9fWVsc2V7aWYoIWYpaWYoYz1xaChrKSxudWxsIT09Yyl7aWYoYi5lZmZlY3RUYWd8PVxuNjQsZj0hMCxkPWMudXBkYXRlUXVldWUsbnVsbCE9PWQmJihiLnVwZGF0ZVF1ZXVlPWQsYi5lZmZlY3RUYWd8PTQpLExpKGUsITApLG51bGw9PT1lLnRhaWwmJlwiaGlkZGVuXCI9PT1lLnRhaWxNb2RlJiYhay5hbHRlcm5hdGUpe2I9Yi5sYXN0RWZmZWN0PWUubGFzdEVmZmVjdDtudWxsIT09YiYmKGIubmV4dEVmZmVjdD1udWxsKTticmVha319ZWxzZSBjZygpPmUudGFpbEV4cGlyYXRpb24mJjE8ZCYmKGIuZWZmZWN0VGFnfD02NCxmPSEwLExpKGUsITEpLGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPWQtMSk7ZS5pc0JhY2t3YXJkcz8oay5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1rKTooZD1lLmxhc3QsbnVsbCE9PWQ/ZC5zaWJsaW5nPWs6Yi5jaGlsZD1rLGUubGFzdD1rKX1pZihudWxsIT09ZS50YWlsKXswPT09ZS50YWlsRXhwaXJhdGlvbiYmKGUudGFpbEV4cGlyYXRpb249Y2coKSs1MDApO2Q9ZS50YWlsO2UucmVuZGVyaW5nPWQ7ZS50YWlsPWQuc2libGluZztcbmUubGFzdEVmZmVjdD1iLmxhc3RFZmZlY3Q7ZC5zaWJsaW5nPW51bGw7ZT1NLmN1cnJlbnQ7ZT1mP2UmMXwyOmUmMTtJKE0sZSxiKTtiPWQ7YnJlYWsgYX1icmVhaztjYXNlIDIwOmJyZWFrO2Nhc2UgMjE6YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDE1NixiLnRhZykpO31iPW51bGx9ZT1WO2lmKDE9PT1XfHwxIT09ZS5jaGlsZEV4cGlyYXRpb25UaW1lKXtmPTA7Zm9yKGQ9ZS5jaGlsZDtudWxsIT09ZDspYz1kLmV4cGlyYXRpb25UaW1lLGs9ZC5jaGlsZEV4cGlyYXRpb25UaW1lLGM+ZiYmKGY9Yyksaz5mJiYoZj1rKSxkPWQuc2libGluZztlLmNoaWxkRXhwaXJhdGlvblRpbWU9Zn1pZihudWxsIT09YilyZXR1cm4gYjtudWxsIT09YSYmMD09PShhLmVmZmVjdFRhZyYyMDQ4KSYmKG51bGw9PT1hLmZpcnN0RWZmZWN0JiYoYS5maXJzdEVmZmVjdD1WLmZpcnN0RWZmZWN0KSxudWxsIT09Vi5sYXN0RWZmZWN0JiYobnVsbCE9PWEubGFzdEVmZmVjdCYmKGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PVxuVi5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PVYubGFzdEVmZmVjdCksMTxWLmVmZmVjdFRhZyYmKG51bGwhPT1hLmxhc3RFZmZlY3Q/YS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9VjphLmZpcnN0RWZmZWN0PVYsYS5sYXN0RWZmZWN0PVYpKX1lbHNle2I9TWkoVixXKTtpZihudWxsIT09YilyZXR1cm4gYi5lZmZlY3RUYWcmPTIwNDcsYjtudWxsIT09YSYmKGEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PW51bGwsYS5lZmZlY3RUYWd8PTIwNDgpfWI9Vi5zaWJsaW5nO2lmKG51bGwhPT1iKXJldHVybiBiO1Y9YX13aGlsZShudWxsIT09Vik7WD09PXFqJiYoWD12aik7cmV0dXJuIG51bGx9ZnVuY3Rpb24gWGooYSl7dmFyIGI9YS5leHBpcmF0aW9uVGltZTthPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtyZXR1cm4gYj5hP2I6YX1mdW5jdGlvbiBZaihhKXt2YXIgYj1kZygpO2ZnKDk5LGlrLmJpbmQobnVsbCxhLGIpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGlrKGEsYil7ZG8gU2ooKTt3aGlsZShudWxsIT09RWopO2lmKChUJihvanxwaikpIT09Uyl0aHJvdyBFcnJvcih1KDMyNykpO3ZhciBjPWEuZmluaXNoZWRXb3JrLGQ9YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcih1KDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTA7YS5jYWxsYmFja1ByaW9yaXR5PTkwO2EubmV4dEtub3duUGVuZGluZ0xldmVsPTA7dmFyIGU9WGooYyk7YS5maXJzdFBlbmRpbmdUaW1lPWU7ZDw9YS5sYXN0U3VzcGVuZGVkVGltZT9hLmZpcnN0U3VzcGVuZGVkVGltZT1hLmxhc3RTdXNwZW5kZWRUaW1lPWEubmV4dEtub3duUGVuZGluZ0xldmVsPTA6ZDw9YS5maXJzdFN1c3BlbmRlZFRpbWUmJihhLmZpcnN0U3VzcGVuZGVkVGltZT1cbmQtMSk7ZDw9YS5sYXN0UGluZ2VkVGltZSYmKGEubGFzdFBpbmdlZFRpbWU9MCk7ZDw9YS5sYXN0RXhwaXJlZFRpbWUmJihhLmxhc3RFeHBpcmVkVGltZT0wKTthPT09VSYmKFY9VT1udWxsLFc9MCk7MTxjLmVmZmVjdFRhZz9udWxsIT09Yy5sYXN0RWZmZWN0PyhjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGU9Yy5maXJzdEVmZmVjdCk6ZT1jOmU9Yy5maXJzdEVmZmVjdDtpZihudWxsIT09ZSl7dmFyIGY9VDtUfD1wajttai5jdXJyZW50PW51bGw7bGU9TGQ7dmFyIGc9ZmUoKTtpZihnZShnKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZyl2YXIgaD17c3RhcnQ6Zy5zZWxlY3Rpb25TdGFydCxlbmQ6Zy5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7aD0oaD1nLm93bmVyRG9jdW1lbnQpJiZoLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGs9aC5nZXRTZWxlY3Rpb24mJmguZ2V0U2VsZWN0aW9uKCk7aWYoayYmMCE9PWsucmFuZ2VDb3VudCl7aD1rLmFuY2hvck5vZGU7dmFyIGw9ay5hbmNob3JPZmZzZXQsXG5tPWsuZm9jdXNOb2RlO2s9ay5mb2N1c09mZnNldDt0cnl7aC5ub2RlVHlwZSxtLm5vZGVUeXBlfWNhdGNoKERiKXtoPW51bGw7YnJlYWsgYX12YXIgQz0wLHk9LTEsSD0tMSx6PTAsdGE9MCxyPWcseD1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIEE7Oyl7ciE9PWh8fDAhPT1sJiYzIT09ci5ub2RlVHlwZXx8KHk9QytsKTtyIT09bXx8MCE9PWsmJjMhPT1yLm5vZGVUeXBlfHwoSD1DK2spOzM9PT1yLm5vZGVUeXBlJiYoQys9ci5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KEE9ci5maXJzdENoaWxkKSlicmVhazt4PXI7cj1BfWZvcig7Oyl7aWYocj09PWcpYnJlYWsgYjt4PT09aCYmKyt6PT09bCYmKHk9Qyk7eD09PW0mJisrdGE9PT1rJiYoSD1DKTtpZihudWxsIT09KEE9ci5uZXh0U2libGluZykpYnJlYWs7cj14O3g9ci5wYXJlbnROb2RlfXI9QX1oPS0xPT09eXx8LTE9PT1IP251bGw6e3N0YXJ0OnksZW5kOkh9fWVsc2UgaD1udWxsfWg9aHx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgaD1cbm51bGw7bWU9e2ZvY3VzZWRFbGVtOmcsc2VsZWN0aW9uUmFuZ2U6aH07TGQ9ITE7WT1lO2RvIHRyeXtqaygpfWNhdGNoKERiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO1JpKFksRGIpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTtZPWU7ZG8gdHJ5e2ZvcihnPWEsaD1iO251bGwhPT1ZOyl7dmFyIHA9WS5lZmZlY3RUYWc7cCYxNiYmVGIoWS5zdGF0ZU5vZGUsXCJcIik7aWYocCYxMjgpe3ZhciB0PVkuYWx0ZXJuYXRlO2lmKG51bGwhPT10KXt2YXIgdj10LnJlZjtudWxsIT09diYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB2P3YobnVsbCk6di5jdXJyZW50PW51bGwpfX1zd2l0Y2gocCYxMDM4KXtjYXNlIDI6JGkoWSk7WS5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjokaShZKTtZLmVmZmVjdFRhZyY9LTM7YWooWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSAxMDI0OlkuZWZmZWN0VGFnJj0tMTAyNTticmVhaztjYXNlIDEwMjg6WS5lZmZlY3RUYWcmPS0xMDI1O2FqKFkuYWx0ZXJuYXRlLFxuWSk7YnJlYWs7Y2FzZSA0OmFqKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgODpsPVksWGkoZyxsLGgpLFlpKGwpfVk9WS5uZXh0RWZmZWN0fX1jYXRjaChEYil7aWYobnVsbD09PVkpdGhyb3cgRXJyb3IodSgzMzApKTtSaShZLERiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7dj1tZTt0PWZlKCk7cD12LmZvY3VzZWRFbGVtO2g9di5zZWxlY3Rpb25SYW5nZTtpZih0IT09cCYmcCYmcC5vd25lckRvY3VtZW50JiZlZShwLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHApKXtudWxsIT09aCYmZ2UocCkmJih0PWguc3RhcnQsdj1oLmVuZCx2b2lkIDA9PT12JiYodj10KSxcInNlbGVjdGlvblN0YXJ0XCJpbiBwPyhwLnNlbGVjdGlvblN0YXJ0PXQscC5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odixwLnZhbHVlLmxlbmd0aCkpOih2PSh0PXAub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZ0LmRlZmF1bHRWaWV3fHx3aW5kb3csdi5nZXRTZWxlY3Rpb24mJih2PXYuZ2V0U2VsZWN0aW9uKCksXG5sPXAudGV4dENvbnRlbnQubGVuZ3RoLGc9TWF0aC5taW4oaC5zdGFydCxsKSxoPXZvaWQgMD09PWguZW5kP2c6TWF0aC5taW4oaC5lbmQsbCksIXYuZXh0ZW5kJiZnPmgmJihsPWgsaD1nLGc9bCksbD1kZShwLGcpLG09ZGUocCxoKSxsJiZtJiYoMSE9PXYucmFuZ2VDb3VudHx8di5hbmNob3JOb2RlIT09bC5ub2RlfHx2LmFuY2hvck9mZnNldCE9PWwub2Zmc2V0fHx2LmZvY3VzTm9kZSE9PW0ubm9kZXx8di5mb2N1c09mZnNldCE9PW0ub2Zmc2V0KSYmKHQ9dC5jcmVhdGVSYW5nZSgpLHQuc2V0U3RhcnQobC5ub2RlLGwub2Zmc2V0KSx2LnJlbW92ZUFsbFJhbmdlcygpLGc+aD8odi5hZGRSYW5nZSh0KSx2LmV4dGVuZChtLm5vZGUsbS5vZmZzZXQpKToodC5zZXRFbmQobS5ub2RlLG0ub2Zmc2V0KSx2LmFkZFJhbmdlKHQpKSkpKSk7dD1bXTtmb3Iodj1wO3Y9di5wYXJlbnROb2RlOykxPT09di5ub2RlVHlwZSYmdC5wdXNoKHtlbGVtZW50OnYsbGVmdDp2LnNjcm9sbExlZnQsdG9wOnYuc2Nyb2xsVG9wfSk7XG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgcC5mb2N1cyYmcC5mb2N1cygpO2ZvcihwPTA7cDx0Lmxlbmd0aDtwKyspdj10W3BdLHYuZWxlbWVudC5zY3JvbGxMZWZ0PXYubGVmdCx2LmVsZW1lbnQuc2Nyb2xsVG9wPXYudG9wfW1lPW51bGw7TGQ9ISFsZTtsZT1udWxsO2EuY3VycmVudD1jO1k9ZTtkbyB0cnl7Zm9yKHA9ZDtudWxsIT09WTspe3ZhciBEaD1ZLmVmZmVjdFRhZztpZihEaCYzNil7dmFyIGRjPVkuYWx0ZXJuYXRlO3Q9WTt2PXA7c3dpdGNoKHQudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlVpKDE2LDMyLHQpO2JyZWFrO2Nhc2UgMTp2YXIgZmQ9dC5zdGF0ZU5vZGU7aWYodC5lZmZlY3RUYWcmNClpZihudWxsPT09ZGMpZmQuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBoaz10LmVsZW1lbnRUeXBlPT09dC50eXBlP2RjLm1lbW9pemVkUHJvcHM6bWcodC50eXBlLGRjLm1lbW9pemVkUHJvcHMpO2ZkLmNvbXBvbmVudERpZFVwZGF0ZShoayxkYy5tZW1vaXplZFN0YXRlLFxuZmQuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfXZhciBFaD10LnVwZGF0ZVF1ZXVlO251bGwhPT1FaCYmS2codCxFaCxmZCx2KTticmVhaztjYXNlIDM6dmFyIEZoPXQudXBkYXRlUXVldWU7aWYobnVsbCE9PUZoKXtnPW51bGw7aWYobnVsbCE9PXQuY2hpbGQpc3dpdGNoKHQuY2hpbGQudGFnKXtjYXNlIDU6Zz10LmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6Zz10LmNoaWxkLnN0YXRlTm9kZX1LZyh0LEZoLGcsdil9YnJlYWs7Y2FzZSA1OnZhciB4az10LnN0YXRlTm9kZTtudWxsPT09ZGMmJnQuZWZmZWN0VGFnJjQmJm5lKHQudHlwZSx0Lm1lbW9pemVkUHJvcHMpJiZ4ay5mb2N1cygpO2JyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmlmKG51bGw9PT10Lm1lbW9pemVkU3RhdGUpe3ZhciBEaT10LmFsdGVybmF0ZTtpZihudWxsIT09RGkpe3ZhciBFaT1EaS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1FaSl7dmFyIEZpPVxuRWkuZGVoeWRyYXRlZDtudWxsIT09RmkmJkxjKEZpKX19fWJyZWFrO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIwOmNhc2UgMjE6YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDE2MykpO319aWYoRGgmMTI4KXt0PXZvaWQgMDt2YXIgeGQ9WS5yZWY7aWYobnVsbCE9PXhkKXt2YXIgR2k9WS5zdGF0ZU5vZGU7c3dpdGNoKFkudGFnKXtjYXNlIDU6dD1HaTticmVhaztkZWZhdWx0OnQ9R2l9XCJmdW5jdGlvblwiPT09dHlwZW9mIHhkP3hkKHQpOnhkLmN1cnJlbnQ9dH19WT1ZLm5leHRFZmZlY3R9fWNhdGNoKERiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO1JpKFksRGIpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTtZPW51bGw7WWYoKTtUPWZ9ZWxzZSBhLmN1cnJlbnQ9YztpZihEailEaj0hMSxFaj1hLEZqPWI7ZWxzZSBmb3IoWT1lO251bGwhPT1ZOyliPVkubmV4dEVmZmVjdCxZLm5leHRFZmZlY3Q9bnVsbCxZPWI7Yj1hLmZpcnN0UGVuZGluZ1RpbWU7MD09PWImJlxuKGpqPW51bGwpOzEwNzM3NDE4MjM9PT1iP2E9PT1Jaj9IaisrOihIaj0wLElqPWEpOkhqPTA7XCJmdW5jdGlvblwiPT09dHlwZW9mIGtrJiZrayhjLnN0YXRlTm9kZSxkKTtaKGEpO2lmKGdqKXRocm93IGdqPSExLGE9aGosaGo9bnVsbCxhO2lmKChUJm5qKSE9PVMpcmV0dXJuIG51bGw7amcoKTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBqaygpe2Zvcig7bnVsbCE9PVk7KXt2YXIgYT1ZLmVmZmVjdFRhZzswIT09KGEmMjU2KSYmVGkoWS5hbHRlcm5hdGUsWSk7MD09PShhJjUxMil8fERqfHwoRGo9ITAsZ2coOTcsZnVuY3Rpb24oKXtTaigpO3JldHVybiBudWxsfSkpO1k9WS5uZXh0RWZmZWN0fX1mdW5jdGlvbiBTaigpe2lmKDkwIT09Rmope3ZhciBhPTk3PEZqPzk3OkZqO0ZqPTkwO3JldHVybiBmZyhhLGxrKX19XG5mdW5jdGlvbiBsaygpe2lmKG51bGw9PT1FailyZXR1cm4hMTt2YXIgYT1FajtFaj1udWxsO2lmKChUJihvanxwaikpIT09Uyl0aHJvdyBFcnJvcih1KDMzMSkpO3ZhciBiPVQ7VHw9cGo7Zm9yKGE9YS5jdXJyZW50LmZpcnN0RWZmZWN0O251bGwhPT1hOyl7dHJ5e3ZhciBjPWE7aWYoMCE9PShjLmVmZmVjdFRhZyY1MTIpKXN3aXRjaChjLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpVaSgxMjgsMCxjKSxVaSgwLDY0LGMpfX1jYXRjaChkKXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih1KDMzMCkpO1JpKGEsZCl9Yz1hLm5leHRFZmZlY3Q7YS5uZXh0RWZmZWN0PW51bGw7YT1jfVQ9YjtqZygpO3JldHVybiEwfWZ1bmN0aW9uIG1rKGEsYixjKXtiPU5pKGMsYik7Yj1maihhLGIsMTA3Mzc0MTgyMyk7RGcoYSxiKTthPUtqKGEsMTA3Mzc0MTgyMyk7bnVsbCE9PWEmJlooYSl9XG5mdW5jdGlvbiBSaShhLGIpe2lmKDM9PT1hLnRhZyltayhhLGEsYik7ZWxzZSBmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZigzPT09Yy50YWcpe21rKGMsYSxiKTticmVha31lbHNlIGlmKDE9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PWpqfHwhamouaGFzKGQpKSl7YT1OaShiLGEpO2E9aWooYyxhLDEwNzM3NDE4MjMpO0RnKGMsYSk7Yz1LaihjLDEwNzM3NDE4MjMpO251bGwhPT1jJiZaKGMpO2JyZWFrfX1jPWMucmV0dXJufX1cbmZ1bmN0aW9uIGRrKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7VT09PWEmJlc9PT1jP1g9PT11anx8WD09PXRqJiYxMDczNzQxODIzPT09eGomJmNnKCktYmo8Q2o/VGooYSxXKTpCaj0hMDpQaihhLGMpJiYoYj1hLmxhc3RQaW5nZWRUaW1lLDAhPT1iJiZiPGN8fChhLmxhc3RQaW5nZWRUaW1lPWMsYS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPT09YyYmKGEuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wLGEuZmluaXNoZWRXb3JrPW51bGwpLFooYSkpKX1mdW5jdGlvbiBkaihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTA7MD09PWImJihiPVBnKCksYj1RZyhiLGEsbnVsbCkpO2E9S2ooYSxiKTtudWxsIT09YSYmWihhKX12YXIgZ2s7XG5naz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTtpZihudWxsIT09YSl7dmFyIGU9Yi5wZW5kaW5nUHJvcHM7aWYoYS5tZW1vaXplZFByb3BzIT09ZXx8Sy5jdXJyZW50KXdnPSEwO2Vsc2V7aWYoZDxjKXt3Zz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzp3aShiKTtsaSgpO2JyZWFrO2Nhc2UgNTpvaChiKTtpZihiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuKXJldHVybiBiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLG51bGw7YnJlYWs7Y2FzZSAxOkwoYi50eXBlKSYmSmYoYik7YnJlYWs7Y2FzZSA0Om1oKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpzZyhiLGIubWVtb2l6ZWRQcm9wcy52YWx1ZSk7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtkPWIuY2hpbGQuY2hpbGRFeHBpcmF0aW9uVGltZTtpZigwIT09ZCYmZD49YylyZXR1cm4geWkoYSxiLGMpO0koTSxNLmN1cnJlbnQmXG4xLGIpO2I9b2koYSxiLGMpO3JldHVybiBudWxsIT09Yj9iLnNpYmxpbmc6bnVsbH1JKE0sTS5jdXJyZW50JjEsYik7YnJlYWs7Y2FzZSAxOTpkPWIuY2hpbGRFeHBpcmF0aW9uVGltZT49YztpZigwIT09KGEuZWZmZWN0VGFnJjY0KSl7aWYoZClyZXR1cm4gQmkoYSxiLGMpO2IuZWZmZWN0VGFnfD02NH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwpO0koTSxNLmN1cnJlbnQsYik7aWYoIWQpcmV0dXJuIG51bGx9cmV0dXJuIG9pKGEsYixjKX13Zz0hMX19ZWxzZSB3Zz0hMTtiLmV4cGlyYXRpb25UaW1lPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6ZD1iLnR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1FZihiLEouY3VycmVudCk7dmcoYixjKTtlPUloKG51bGwsYixkLGEsZSxjKTtiLmVmZmVjdFRhZ3w9MTtpZihcIm9iamVjdFwiPT09XG50eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtNaCgpO2lmKEwoZCkpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZPZyhiLGQsZyxhKTtlLnVwZGF0ZXI9U2c7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFsRmliZXI9YjtXZyhiLGQsYSxjKTtiPXZpKG51bGwsYixkLCEwLGYsYyl9ZWxzZSBiLnRhZz0wLFIobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6ZT1iLmVsZW1lbnRUeXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTthPWIucGVuZGluZ1Byb3BzO1ZhKGUpO2lmKDEhPT1lLl9zdGF0dXMpdGhyb3cgZS5fcmVzdWx0O1xuZT1lLl9yZXN1bHQ7Yi50eXBlPWU7Zj1iLnRhZz1uayhlKTthPW1nKGUsYSk7c3dpdGNoKGYpe2Nhc2UgMDpiPXNpKG51bGwsYixlLGEsYyk7YnJlYWs7Y2FzZSAxOmI9dWkobnVsbCxiLGUsYSxjKTticmVhaztjYXNlIDExOmI9bmkobnVsbCxiLGUsYSxjKTticmVhaztjYXNlIDE0OmI9cGkobnVsbCxiLGUsbWcoZS50eXBlLGEpLGQsYyk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMwNixlLFwiXCIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTptZyhkLGUpLHNpKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTptZyhkLGUpLHVpKGEsYixkLGUsYyk7Y2FzZSAzOndpKGIpO2Q9Yi51cGRhdGVRdWV1ZTtpZihudWxsPT09ZCl0aHJvdyBFcnJvcih1KDI4MikpO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50OlxubnVsbDtIZyhiLGQsYi5wZW5kaW5nUHJvcHMsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKWxpKCksYj1vaShhLGIsYyk7ZWxzZXtpZihlPWIuc3RhdGVOb2RlLmh5ZHJhdGUpZGk9cmUoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSxjaT1iLGU9ZWk9ITA7aWYoZSlmb3IoYz1naChiLG51bGwsZCxjKSxiLmNoaWxkPWM7YzspYy5lZmZlY3RUYWc9Yy5lZmZlY3RUYWcmLTN8MTAyNCxjPWMuc2libGluZztlbHNlIFIoYSxiLGQsYyksbGkoKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBvaChiKSxudWxsPT09YSYmaWkoYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLGc9ZS5jaGlsZHJlbixvZShkLGUpP2c9bnVsbDpudWxsIT09ZiYmb2UoZCxmKSYmKGIuZWZmZWN0VGFnfD0xNiksdGkoYSxiKSxiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuPyhiLmV4cGlyYXRpb25UaW1lPVxuYi5jaGlsZEV4cGlyYXRpb25UaW1lPTEsYj1udWxsKTooUihhLGIsZyxjKSxiPWIuY2hpbGQpLGI7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmaWkoYiksbnVsbDtjYXNlIDEzOnJldHVybiB5aShhLGIsYyk7Y2FzZSA0OnJldHVybiBtaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1maChiLG51bGwsZCxjKTpSKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bWcoZCxlKSxuaShhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gUihhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIFIoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gUihhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O1xuZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7c2coYixmKTtpZihudWxsIT09Zyl7dmFyIGg9Zy52YWx1ZTtmPW9mKGgsZik/MDooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGgsZik6MTA3Mzc0MTgyMyl8MDtpZigwPT09Zil7aWYoZy5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFLLmN1cnJlbnQpe2I9b2koYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGg9Yi5jaGlsZCxudWxsIT09aCYmKGgucmV0dXJuPWIpO251bGwhPT1oOyl7dmFyIGs9aC5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PWspe2c9aC5jaGlsZDtmb3IodmFyIGw9ay5maXJzdENvbnRleHQ7bnVsbCE9PWw7KXtpZihsLmNvbnRleHQ9PT1kJiYwIT09KGwub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihsPUJnKGMsbnVsbCksbC50YWc9MixEZyhoLGwpKTtoLmV4cGlyYXRpb25UaW1lPGMmJihoLmV4cGlyYXRpb25UaW1lPVxuYyk7bD1oLmFsdGVybmF0ZTtudWxsIT09bCYmbC5leHBpcmF0aW9uVGltZTxjJiYobC5leHBpcmF0aW9uVGltZT1jKTt1ZyhoLnJldHVybixjKTtrLmV4cGlyYXRpb25UaW1lPGMmJihrLmV4cGlyYXRpb25UaW1lPWMpO2JyZWFrfWw9bC5uZXh0fX1lbHNlIGc9MTA9PT1oLnRhZz9oLnR5cGU9PT1iLnR5cGU/bnVsbDpoLmNoaWxkOmguY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49aDtlbHNlIGZvcihnPWg7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWg9Zy5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1nLnJldHVybjtnPWg7YnJlYWt9Zz1nLnJldHVybn1oPWd9fVIoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4sdmcoYixjKSxlPXhnKGUsZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmVmZmVjdFRhZ3w9MSxSKGEsYixkLGMpLGIuY2hpbGQ7XG5jYXNlIDE0OnJldHVybiBlPWIudHlwZSxmPW1nKGUsYi5wZW5kaW5nUHJvcHMpLGY9bWcoZS50eXBlLGYpLHBpKGEsYixlLGYsZCxjKTtjYXNlIDE1OnJldHVybiByaShhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGQsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bWcoZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksYi50YWc9MSxMKGQpPyhhPSEwLEpmKGIpKTphPSExLHZnKGIsYyksVWcoYixkLGUsYyksV2coYixkLGUsYyksdmkobnVsbCxiLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiBCaShhLGIsYyl9dGhyb3cgRXJyb3IodSgxNTYsYi50YWcpKTt9O3ZhciBraz1udWxsLFdpPW51bGw7XG5mdW5jdGlvbiBvayhhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXylyZXR1cm4hMTt2YXIgYj1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoYi5pc0Rpc2FibGVkfHwhYi5zdXBwb3J0c0ZpYmVyKXJldHVybiEwO3RyeXt2YXIgYz1iLmluamVjdChhKTtraz1mdW5jdGlvbihhKXt0cnl7Yi5vbkNvbW1pdEZpYmVyUm9vdChjLGEsdm9pZCAwLDY0PT09KGEuY3VycmVudC5lZmZlY3RUYWcmNjQpKX1jYXRjaChlKXt9fTtXaT1mdW5jdGlvbihhKXt0cnl7Yi5vbkNvbW1pdEZpYmVyVW5tb3VudChjLGEpfWNhdGNoKGUpe319fWNhdGNoKGQpe31yZXR1cm4hMH1cbmZ1bmN0aW9uIHBrKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5lZmZlY3RUYWc9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmNoaWxkRXhwaXJhdGlvblRpbWU9dGhpcy5leHBpcmF0aW9uVGltZT0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gZ2koYSxiLGMsZCl7cmV0dXJuIG5ldyBwayhhLGIsYyxkKX1cbmZ1bmN0aW9uIHFpKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9ZnVuY3Rpb24gbmsoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIHFpKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1PYSlyZXR1cm4gMTE7aWYoYT09PVJhKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIGFoKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9Z2koYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy5lZmZlY3RUYWc9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRFeHBpcmF0aW9uVGltZT1hLmNoaWxkRXhwaXJhdGlvblRpbWU7Yy5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7ZXhwaXJhdGlvblRpbWU6Yi5leHBpcmF0aW9uVGltZSxcbmZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dCxyZXNwb25kZXJzOmIucmVzcG9uZGVyc307Yy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBjaChhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcWkoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgSWE6cmV0dXJuIGVoKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgTmE6Zz04O2V8PTc7YnJlYWs7Y2FzZSBKYTpnPTg7ZXw9MTticmVhaztjYXNlIEthOnJldHVybiBhPWdpKDEyLGMsYixlfDgpLGEuZWxlbWVudFR5cGU9S2EsYS50eXBlPUthLGEuZXhwaXJhdGlvblRpbWU9ZixhO2Nhc2UgUGE6cmV0dXJuIGE9Z2koMTMsYyxiLGUpLGEudHlwZT1QYSxhLmVsZW1lbnRUeXBlPVBhLGEuZXhwaXJhdGlvblRpbWU9ZixhO2Nhc2UgUWE6cmV0dXJuIGE9Z2koMTksYyxiLGUpLGEuZWxlbWVudFR5cGU9UWEsYS5leHBpcmF0aW9uVGltZT1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIExhOmc9XG4xMDticmVhayBhO2Nhc2UgTWE6Zz05O2JyZWFrIGE7Y2FzZSBPYTpnPTExO2JyZWFrIGE7Y2FzZSBSYTpnPTE0O2JyZWFrIGE7Y2FzZSBTYTpnPTE2O2Q9bnVsbDticmVhayBhfXRocm93IEVycm9yKHUoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9Z2koZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IuZXhwaXJhdGlvblRpbWU9ZjtyZXR1cm4gYn1mdW5jdGlvbiBlaChhLGIsYyxkKXthPWdpKDcsYSxkLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBiaChhLGIsYyl7YT1naSg2LGEsbnVsbCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBkaChhLGIsYyl7Yj1naSg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5leHBpcmF0aW9uVGltZT1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIHFrKGEsYixjKXt0aGlzLnRhZz1iO3RoaXMuY3VycmVudD1udWxsO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMucGluZ0NhY2hlPXRoaXMucGVuZGluZ0NoaWxkcmVuPW51bGw7dGhpcy5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7dGhpcy5maW5pc2hlZFdvcms9bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmh5ZHJhdGU9Yzt0aGlzLmNhbGxiYWNrTm9kZT1udWxsO3RoaXMuY2FsbGJhY2tQcmlvcml0eT05MDt0aGlzLmxhc3RFeHBpcmVkVGltZT10aGlzLmxhc3RQaW5nZWRUaW1lPXRoaXMubmV4dEtub3duUGVuZGluZ0xldmVsPXRoaXMubGFzdFN1c3BlbmRlZFRpbWU9dGhpcy5maXJzdFN1c3BlbmRlZFRpbWU9dGhpcy5maXJzdFBlbmRpbmdUaW1lPTB9XG5mdW5jdGlvbiBQaihhLGIpe3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lO2E9YS5sYXN0U3VzcGVuZGVkVGltZTtyZXR1cm4gMCE9PWMmJmM+PWImJmE8PWJ9ZnVuY3Rpb24gTWooYSxiKXt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZSxkPWEubGFzdFN1c3BlbmRlZFRpbWU7YzxiJiYoYS5maXJzdFN1c3BlbmRlZFRpbWU9Yik7aWYoZD5ifHwwPT09YylhLmxhc3RTdXNwZW5kZWRUaW1lPWI7Yjw9YS5sYXN0UGluZ2VkVGltZSYmKGEubGFzdFBpbmdlZFRpbWU9MCk7Yjw9YS5sYXN0RXhwaXJlZFRpbWUmJihhLmxhc3RFeHBpcmVkVGltZT0wKX1cbmZ1bmN0aW9uIE5qKGEsYil7Yj5hLmZpcnN0UGVuZGluZ1RpbWUmJihhLmZpcnN0UGVuZGluZ1RpbWU9Yik7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWU7MCE9PWMmJihiPj1jP2EuZmlyc3RTdXNwZW5kZWRUaW1lPWEubGFzdFN1c3BlbmRlZFRpbWU9YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9MDpiPj1hLmxhc3RTdXNwZW5kZWRUaW1lJiYoYS5sYXN0U3VzcGVuZGVkVGltZT1iKzEpLGI+YS5uZXh0S25vd25QZW5kaW5nTGV2ZWwmJihhLm5leHRLbm93blBlbmRpbmdMZXZlbD1iKSl9ZnVuY3Rpb24gUmooYSxiKXt2YXIgYz1hLmxhc3RFeHBpcmVkVGltZTtpZigwPT09Y3x8Yz5iKWEubGFzdEV4cGlyZWRUaW1lPWJ9XG5mdW5jdGlvbiByayhhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1QZygpLGc9TWcuc3VzcGVuc2U7Zj1RZyhmLGUsZyk7YTppZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjtiOntpZihlYyhjKSE9PWN8fDEhPT1jLnRhZyl0aHJvdyBFcnJvcih1KDE3MCkpO3ZhciBoPWM7ZG97c3dpdGNoKGgudGFnKXtjYXNlIDM6aD1oLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGI7Y2FzZSAxOmlmKEwoaC50eXBlKSl7aD1oLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1oPWgucmV0dXJufXdoaWxlKG51bGwhPT1oKTt0aHJvdyBFcnJvcih1KDE3MSkpO31pZigxPT09Yy50YWcpe3ZhciBrPWMudHlwZTtpZihMKGspKXtjPUlmKGMsayxoKTticmVhayBhfX1jPWh9ZWxzZSBjPUNmO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9QmcoZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1cbmQ/bnVsbDpkO251bGwhPT1kJiYoYi5jYWxsYmFjaz1kKTtEZyhlLGIpO1JnKGUsZik7cmV0dXJuIGZ9ZnVuY3Rpb24gc2soYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiB0ayhhLGIpe2E9YS5tZW1vaXplZFN0YXRlO251bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkJiZhLnJldHJ5VGltZTxiJiYoYS5yZXRyeVRpbWU9Yil9ZnVuY3Rpb24gdWsoYSxiKXt0ayhhLGIpOyhhPWEuYWx0ZXJuYXRlKSYmdGsoYSxiKX1cbmZ1bmN0aW9uIHZrKGEsYixjKXtjPW51bGwhPWMmJiEwPT09Yy5oeWRyYXRlO3ZhciBkPW5ldyBxayhhLGIsYyksZT1naSgzLG51bGwsbnVsbCwyPT09Yj83OjE9PT1iPzM6MCk7ZC5jdXJyZW50PWU7ZS5zdGF0ZU5vZGU9ZDthW3dlXT1kLmN1cnJlbnQ7YyYmMCE9PWImJndjKDk9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50KTt0aGlzLl9pbnRlcm5hbFJvb3Q9ZH12ay5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEsYil7cmsoYSx0aGlzLl9pbnRlcm5hbFJvb3QsbnVsbCx2b2lkIDA9PT1iP251bGw6Yil9O3ZrLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2ludGVybmFsUm9vdCxjPXZvaWQgMD09PWE/bnVsbDphLGQ9Yi5jb250YWluZXJJbmZvO3JrKG51bGwsYixudWxsLGZ1bmN0aW9uKCl7ZFt3ZV09bnVsbDtudWxsIT09YyYmYygpfSl9O1xuZnVuY3Rpb24gd2soYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfWZ1bmN0aW9uIHlrKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgdmsoYSwwLGI/e2h5ZHJhdGU6ITB9OnZvaWQgMCl9XG5mdW5jdGlvbiB6ayhhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXt2YXIgZz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPXNrKGcpO2guY2FsbChhKX19cmsoYixnLGEsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj15ayhjLGQpO2c9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1zayhnKTtrLmNhbGwoYSl9fWNrKGZ1bmN0aW9uKCl7cmsoYixnLGEsZSl9KX1yZXR1cm4gc2soZyl9ZnVuY3Rpb24gQWsoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjpIYSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmpjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWxnKFBnKCksMTUwLDEwMCk7UmcoYSxiKTt1ayhhLGIpfX07a2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7UGcoKTt2YXIgYj1rZysrO1JnKGEsYik7dWsoYSxiKX19O2xjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPVBnKCk7Yj1RZyhiLGEsbnVsbCk7UmcoYSxiKTt1ayhhLGIpfX07XG5aYT1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOkViKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT15ZShkKTtpZighZSl0aHJvdyBFcnJvcih1KDkwKSk7emIoZCk7RWIoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOk1iKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZKYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O2ViPWJrO1xuZmI9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9VDtUfD00O3RyeXtyZXR1cm4gZmcoOTgsYS5iaW5kKG51bGwsYixjLGQpKX1maW5hbGx5e1Q9ZSxUPT09UyYmamcoKX19O2diPWZ1bmN0aW9uKCl7KFQmKDF8b2p8cGopKT09PVMmJihhaygpLFNqKCkpfTtoYj1mdW5jdGlvbihhLGIpe3ZhciBjPVQ7VHw9Mjt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtUPWMsVD09PVMmJmpnKCl9fTtmdW5jdGlvbiBCayhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCF3ayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiBBayhhLGIsbnVsbCxjKX1cbnZhciBDaz17Y3JlYXRlUG9ydGFsOkJrLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcih1KDE4OCkpO3Rocm93IEVycm9yKHUoMjY4LE9iamVjdC5rZXlzKGEpKSk7fWE9aWMoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfSxoeWRyYXRlOmZ1bmN0aW9uKGEsYixjKXtpZighd2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gemsobnVsbCxhLGIsITAsYyl9LHJlbmRlcjpmdW5jdGlvbihhLGIsYyl7aWYoIXdrKGIpKXRocm93IEVycm9yKHUoMjAwKSk7cmV0dXJuIHprKG51bGwsYSxiLCExLGMpfSx1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxkKXtpZighd2soYykpdGhyb3cgRXJyb3IodSgyMDApKTtcbmlmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxGaWJlcil0aHJvdyBFcnJvcih1KDM4KSk7cmV0dXJuIHprKGEsYixjLCExLGQpfSx1bm1vdW50Q29tcG9uZW50QXROb2RlOmZ1bmN0aW9uKGEpe2lmKCF3ayhhKSl0aHJvdyBFcnJvcih1KDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oY2soZnVuY3Rpb24oKXt6ayhudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2Fbd2VdPW51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOmZ1bmN0aW9uKCl7cmV0dXJuIEJrLmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpfSx1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczpiayxmbHVzaFN5bmM6ZnVuY3Rpb24oYSxiKXtpZigoVCYob2p8cGopKSE9PVMpdGhyb3cgRXJyb3IodSgxODcpKTt2YXIgYz1UO1R8PTE7dHJ5e3JldHVybiBmZyg5OSxhLmJpbmQobnVsbCxiKSl9ZmluYWxseXtUPWMsamcoKX19LF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntFdmVudHM6W0NjLFxueGUseWUsQ2EuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lLGZhLFNjLGZ1bmN0aW9uKGEpe3lhKGEsUmMpfSxjYixkYixQZCxCYSxTaix7Y3VycmVudDohMX1dfX07XG4oZnVuY3Rpb24oYSl7dmFyIGI9YS5maW5kRmliZXJCeUhvc3RJbnN0YW5jZTtyZXR1cm4gb2sobih7fSxhLHtvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxzZXRTdXNwZW5zZUhhbmRsZXI6bnVsbCxzY2hlZHVsZVVwZGF0ZTpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOkVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1pYyhhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGI/YihhKTpudWxsfSxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsfSkpfSkoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOkZjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuMTIuMFwiLFxucmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7dmFyIERrPXtkZWZhdWx0OkNrfSxFaz1EayYmQ2t8fERrO21vZHVsZS5leHBvcnRzPUVrLmRlZmF1bHR8fEVrO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4xOC4wXG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGYsZyxoLGssbDtcbmlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciBwPW51bGwscT1udWxsLHQ9ZnVuY3Rpb24oKXtpZihudWxsIT09cCl0cnl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtwKCEwLGEpO3A9bnVsbH1jYXRjaChiKXt0aHJvdyBzZXRUaW1lb3V0KHQsMCksYjt9fSx1PURhdGUubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gRGF0ZS5ub3coKS11fTtmPWZ1bmN0aW9uKGEpe251bGwhPT1wP3NldFRpbWVvdXQoZiwwLGEpOihwPWEsc2V0VGltZW91dCh0LDApKX07Zz1mdW5jdGlvbihhLGIpe3E9c2V0VGltZW91dChhLGIpfTtoPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHEpfTtrPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2w9ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbigpe319ZWxzZXt2YXIgdz13aW5kb3cucGVyZm9ybWFuY2UseD13aW5kb3cuRGF0ZSxcbnk9d2luZG93LnNldFRpbWVvdXQsej13aW5kb3cuY2xlYXJUaW1lb3V0O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIEE9d2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBBJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIil9aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIHcmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiB3Lm5vdylleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiB3Lm5vdygpfTtlbHNle3ZhciBCPXgubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4geC5ub3coKS1CfX12YXIgQz0hMSxEPW51bGwsRT0tMSxGPTUsRz0wO2s9ZnVuY3Rpb24oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKT49R307bD1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZXJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHVuc3VwcG9ydGVkXCIpOkY9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O3ZhciBIPW5ldyBNZXNzYWdlQ2hhbm5lbCxJPUgucG9ydDI7SC5wb3J0MS5vbm1lc3NhZ2U9XG5mdW5jdGlvbigpe2lmKG51bGwhPT1EKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO0c9YStGO3RyeXtEKCEwLGEpP0kucG9zdE1lc3NhZ2UobnVsbCk6KEM9ITEsRD1udWxsKX1jYXRjaChiKXt0aHJvdyBJLnBvc3RNZXNzYWdlKG51bGwpLGI7fX1lbHNlIEM9ITF9O2Y9ZnVuY3Rpb24oYSl7RD1hO0N8fChDPSEwLEkucG9zdE1lc3NhZ2UobnVsbCkpfTtnPWZ1bmN0aW9uKGEsYil7RT15KGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9O2g9ZnVuY3Rpb24oKXt6KEUpO0U9LTF9fWZ1bmN0aW9uIEooYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzspe3ZhciBkPU1hdGguZmxvb3IoKGMtMSkvMiksZT1hW2RdO2lmKHZvaWQgMCE9PWUmJjA8SyhlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gTChhKXthPWFbMF07cmV0dXJuIHZvaWQgMD09PWE/bnVsbDphfVxuZnVuY3Rpb24gTShhKXt2YXIgYj1hWzBdO2lmKHZvaWQgMCE9PWIpe3ZhciBjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGg7ZDxlOyl7dmFyIG09MiooZCsxKS0xLG49YVttXSx2PW0rMSxyPWFbdl07aWYodm9pZCAwIT09biYmMD5LKG4sYykpdm9pZCAwIT09ciYmMD5LKHIsbik/KGFbZF09cixhW3ZdPWMsZD12KTooYVtkXT1uLGFbbV09YyxkPW0pO2Vsc2UgaWYodm9pZCAwIT09ciYmMD5LKHIsYykpYVtkXT1yLGFbdl09YyxkPXY7ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1yZXR1cm4gbnVsbH1mdW5jdGlvbiBLKGEsYil7dmFyIGM9YS5zb3J0SW5kZXgtYi5zb3J0SW5kZXg7cmV0dXJuIDAhPT1jP2M6YS5pZC1iLmlkfXZhciBOPVtdLE89W10sUD0xLFE9bnVsbCxSPTMsUz0hMSxUPSExLFU9ITE7XG5mdW5jdGlvbiBWKGEpe2Zvcih2YXIgYj1MKE8pO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spTShPKTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKU0oTyksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxKKE4sYik7ZWxzZSBicmVhaztiPUwoTyl9fWZ1bmN0aW9uIFcoYSl7VT0hMTtWKGEpO2lmKCFUKWlmKG51bGwhPT1MKE4pKVQ9ITAsZihYKTtlbHNle3ZhciBiPUwoTyk7bnVsbCE9PWImJmcoVyxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBYKGEsYil7VD0hMTtVJiYoVT0hMSxoKCkpO1M9ITA7dmFyIGM9Ujt0cnl7VihiKTtmb3IoUT1MKE4pO251bGwhPT1RJiYoIShRLmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhaygpKTspe3ZhciBkPVEuY2FsbGJhY2s7aWYobnVsbCE9PWQpe1EuY2FsbGJhY2s9bnVsbDtSPVEucHJpb3JpdHlMZXZlbDt2YXIgZT1kKFEuZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT9RLmNhbGxiYWNrPWU6UT09PUwoTikmJk0oTik7VihiKX1lbHNlIE0oTik7UT1MKE4pfWlmKG51bGwhPT1RKXZhciBtPSEwO2Vsc2V7dmFyIG49TChPKTtudWxsIT09biYmZyhXLG4uc3RhcnRUaW1lLWIpO209ITF9cmV0dXJuIG19ZmluYWxseXtRPW51bGwsUj1jLFM9ITF9fVxuZnVuY3Rpb24gWShhKXtzd2l0Y2goYSl7Y2FzZSAxOnJldHVybi0xO2Nhc2UgMjpyZXR1cm4gMjUwO2Nhc2UgNTpyZXR1cm4gMTA3Mzc0MTgyMztjYXNlIDQ6cmV0dXJuIDFFNDtkZWZhdWx0OnJldHVybiA1RTN9fXZhciBaPWw7ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz1SO1I9YTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e1I9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChSKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1SfXZhciBjPVI7Uj1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7Uj1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7dmFyIGU9Yy5kZWxheTtlPVwibnVtYmVyXCI9PT10eXBlb2YgZSYmMDxlP2QrZTpkO2M9XCJudW1iZXJcIj09PXR5cGVvZiBjLnRpbWVvdXQ/Yy50aW1lb3V0OlkoYSl9ZWxzZSBjPVkoYSksZT1kO2M9ZStjO2E9e2lkOlArKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6ZSxleHBpcmF0aW9uVGltZTpjLHNvcnRJbmRleDotMX07ZT5kPyhhLnNvcnRJbmRleD1lLEooTyxhKSxudWxsPT09TChOKSYmYT09PUwoTykmJihVP2goKTpVPSEwLGcoVyxlLWQpKSk6KGEuc29ydEluZGV4PWMsSihOLGEpLFR8fFN8fChUPSEwLGYoWCkpKTtyZXR1cm4gYX07ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O1xuZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9UjtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1SO1I9Yjt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7Uj1jfX19O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4gUn07ZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7VihhKTt2YXIgYj1MKE4pO3JldHVybiBiIT09USYmbnVsbCE9PVEmJm51bGwhPT1iJiZudWxsIT09Yi5jYWxsYmFjayYmYi5zdGFydFRpbWU8PWEmJmIuZXhwaXJhdGlvblRpbWU8US5leHBpcmF0aW9uVGltZXx8aygpfTtleHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1aO2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtUfHxTfHwoVD0hMCxmKFgpKX07XG5leHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIEwoTil9O2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7XG4iLCJcbnZhciBjbGVhbiA9IHJlcXVpcmUoJ3RvLW5vLWNhc2UnKVxuXG4vKipcbiAqIEV4cG9ydC5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHRvU3BhY2VDYXNlXG5cbi8qKlxuICogQ29udmVydCBhIGBzdHJpbmdgIHRvIHNwYWNlIGNhc2UuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5cbmZ1bmN0aW9uIHRvU3BhY2VDYXNlKHN0cmluZykge1xuICByZXR1cm4gY2xlYW4oc3RyaW5nKS5yZXBsYWNlKC9bXFxXX10rKC58JCkvZywgZnVuY3Rpb24gKG1hdGNoZXMsIG1hdGNoKSB7XG4gICAgcmV0dXJuIG1hdGNoID8gJyAnICsgbWF0Y2ggOiAnJ1xuICB9KS50cmltKClcbn1cbiIsIlxuLyoqXG4gKiBFeHBvcnQuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB0b05vQ2FzZVxuXG4vKipcbiAqIFRlc3Qgd2hldGhlciBhIHN0cmluZyBpcyBjYW1lbC1jYXNlLlxuICovXG5cbnZhciBoYXNTcGFjZSA9IC9cXHMvXG52YXIgaGFzU2VwYXJhdG9yID0gLyhffC18XFwufDopL1xudmFyIGhhc0NhbWVsID0gLyhbYS16XVtBLVpdfFtBLVpdW2Etel0pL1xuXG4vKipcbiAqIFJlbW92ZSBhbnkgc3RhcnRpbmcgY2FzZSBmcm9tIGEgYHN0cmluZ2AsIGxpa2UgY2FtZWwgb3Igc25ha2UsIGJ1dCBrZWVwXG4gKiBzcGFjZXMgYW5kIHB1bmN0dWF0aW9uIHRoYXQgbWF5IGJlIGltcG9ydGFudCBvdGhlcndpc2UuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5cbmZ1bmN0aW9uIHRvTm9DYXNlKHN0cmluZykge1xuICBpZiAoaGFzU3BhY2UudGVzdChzdHJpbmcpKSByZXR1cm4gc3RyaW5nLnRvTG93ZXJDYXNlKClcbiAgaWYgKGhhc1NlcGFyYXRvci50ZXN0KHN0cmluZykpIHJldHVybiAodW5zZXBhcmF0ZShzdHJpbmcpIHx8IHN0cmluZykudG9Mb3dlckNhc2UoKVxuICBpZiAoaGFzQ2FtZWwudGVzdChzdHJpbmcpKSByZXR1cm4gdW5jYW1lbGl6ZShzdHJpbmcpLnRvTG93ZXJDYXNlKClcbiAgcmV0dXJuIHN0cmluZy50b0xvd2VyQ2FzZSgpXG59XG5cbi8qKlxuICogU2VwYXJhdG9yIHNwbGl0dGVyLlxuICovXG5cbnZhciBzZXBhcmF0b3JTcGxpdHRlciA9IC9bXFxXX10rKC58JCkvZ1xuXG4vKipcbiAqIFVuLXNlcGFyYXRlIGEgYHN0cmluZ2AuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5cbmZ1bmN0aW9uIHVuc2VwYXJhdGUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShzZXBhcmF0b3JTcGxpdHRlciwgZnVuY3Rpb24gKG0sIG5leHQpIHtcbiAgICByZXR1cm4gbmV4dCA/ICcgJyArIG5leHQgOiAnJ1xuICB9KVxufVxuXG4vKipcbiAqIENhbWVsY2FzZSBzcGxpdHRlci5cbiAqL1xuXG52YXIgY2FtZWxTcGxpdHRlciA9IC8oLikoW0EtWl0rKS9nXG5cbi8qKlxuICogVW4tY2FtZWxjYXNlIGEgYHN0cmluZ2AuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5cbmZ1bmN0aW9uIHVuY2FtZWxpemUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShjYW1lbFNwbGl0dGVyLCBmdW5jdGlvbiAobSwgcHJldmlvdXMsIHVwcGVycykge1xuICAgIHJldHVybiBwcmV2aW91cyArICcgJyArIHVwcGVycy50b0xvd2VyQ2FzZSgpLnNwbGl0KCcnKS5qb2luKCcgJylcbiAgfSlcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEyLjBcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO1xudmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6XG42MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtmdW5jdGlvbiB5KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciB1PWEuJCR0eXBlb2Y7c3dpdGNoKHUpe2Nhc2UgYzpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBsOmNhc2UgbTpjYXNlIGU6Y2FzZSBnOmNhc2UgZjpjYXNlIHA6cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIG46Y2FzZSB0OmNhc2UgcjpjYXNlIGg6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdX19Y2FzZSBkOnJldHVybiB1fX19ZnVuY3Rpb24geihhKXtyZXR1cm4geShhKT09PW19XG5leHBvcnRzLnR5cGVPZj15O2V4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtleHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXZ8fGEuJCR0eXBlb2Y9PT13fHxhLiQkdHlwZW9mPT09eCl9O2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSl8fHkoYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9ejtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWh9O1xuZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT10fTtleHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PXB9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xuXHRpZiAoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdHZhciBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG9yaWdpbmFsTW9kdWxlKTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJleHBvcnRzXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWVcblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9SZXNpemFibGVQYW5lbC5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cbnZhciBleHBvcnRlZCA9IGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB7fTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZWQ7IiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9VWJ1bnR1KTtcIl0pO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJodG1sIHtcXG4gIGJhY2tncm91bmQ6ICMzMzM7XFxuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcXG59XFxuXFxuaDEge1xcbiAgY29sb3I6IHdoaXRlO1xcbn1cXG5cXG4ucGFuZWwtY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgbWluLXdpZHRoOiAxMDAlO1xcbiAgbWluLWhlaWdodDogMTAwJTtcXG59XFxuXFxuLnBhbmVsIHtcXG4gIGJhY2tncm91bmQ6IHdoaXRlO1xcbiAgYm9yZGVyOiAxcHggc29saWQgZ3JheTtcXG4gIHBhZGRpbmc6IDE1cHg7XFxufVxcblxcbi5yZXNpemVyIHtcXG4gIHdpZHRoOiA4cHg7XFxuICBiYWNrZ3JvdW5kOiBkYXJrR3JheTtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGN1cnNvcjogY29sLXJlc2l6ZTtcXG4gIC1tcy1mbGV4LW5lZ2F0aXZlOiAwO1xcbiAgICAgIGZsZXgtc2hyaW5rOiAwO1xcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXG4gIC8qIENocm9tZSBhbGwgLyBTYWZhcmkgYWxsICovXFxuICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcbiAgLyogRmlyZWZveCBhbGwgKi9cXG4gIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcXG4gIC8qIElFIDEwKyAqL1xcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAvKiBMaWtlbHkgZnV0dXJlICovXFxufVxcblxcbi5yZXNpemVyOjphZnRlcixcXG4ucmVzaXplcjo6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjMzMzO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiA1MCU7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMTAwJSk7XFxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMTAwJSk7XFxuICByaWdodDogMDtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGhlaWdodDogMjBweDtcXG4gIG1hcmdpbjogMCAycHg7XFxufVxcblxcbi5yZXNpemVyOjpiZWZvcmUge1xcbiAgbGVmdDogMDtcXG59XCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9MZWZ0TmF2QmFyLmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxudmFyIGV4cG9ydGVkID0gY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHt9O1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlZDsiLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmhlYWRlciB7XFxuICBtaW4taGVpZ2h0OiAxMDAlO1xcbiAgd2lkdGg6IC13ZWJraXQtZml0LWNvbnRlbnQ7XFxuICB3aWR0aDogLW1vei1maXQtY29udGVudDtcXG4gIHdpZHRoOiBmaXQtY29udGVudDtcXG4gIGJhY2tncm91bmQtY29sb3I6IGFsaWNlYmx1ZTtcXG4gIHBhZGRpbmc6IDUlO1xcbiAgY29sb3I6IGRpbWdyYXk7XFxuICAtbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTogMzAlO1xcbiAgICAgIGZsZXgtYmFzaXM6IDMwJTtcXG4gIGJvcmRlci1yYWRpdXM6IDNweDtcXG59XFxuXFxuLmhlYWRlcl9fcGVyc29uYWwge1xcbiAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDEwMCU7XFxuICAgICAgZmxleC1iYXNpczogMTAwJTtcXG59XFxuXFxuLmhlYWRlcl9fcGhvdG8ge1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcblxcbi5oZWFkZXJfX3Bob3RvOmhvdmVyIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLjQ1KTtcXG4gICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxLjQ1KTtcXG59XFxuXFxuLmhlYWRlcl9fcGhvdG8tLWltZyB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGJvcmRlci1yYWRpdXM6IDNweDtcXG59XFxuXFxuLmhlYWRlcl9fbmFtZSB7XFxuICBmb250LXNpemU6IDEycHg7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGNvbG9yOiBuYXZ5O1xcbn1cXG5cXG4uaGVhZGVyX19hZ2Uge1xcbiAgZm9udC1zaXplOiA5cHg7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuLmhlYWRlcl9fYWdlLS10aXRsZSB7XFxuICBmb250LXNpemU6IDhweDtcXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxufVxcblxcbi5oZWFkZXJfX2ljb24ge1xcbiAgd2lkdGg6IDAuNWVtO1xcbiAgaGVpZ2h0OiAwLjVlbTtcXG4gIGZvbnQtc2l6ZTogMTBweDtcXG59XFxuXFxuLmhlYWRlcl9faWNvbjpob3ZlciB7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMS4zKTtcXG4gICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxLjMpO1xcbn1cXG5cXG4uaGVhZGVyX19uYXYge1xcbiAgZm9udC1zaXplOiAxMnB4O1xcbiAgcGFkZGluZzogMTBweCAxMHB4O1xcbiAgbGluZS1oZWlnaHQ6IDI1cHg7XFxufVxcblxcbi5oZWFkZXJfX25hdi0tZmlyc3RsZXZlbCB7XFxuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XFxufVxcblxcbi5oZWFkZXJfX25hdi0tZmlyc3RsZXZlbCA+IGxpOmhvdmVyIHtcXG4gIGNvbG9yOiBuYXZ5O1xcbn1cXG5cXG4uaGVhZGVyX19uYXZfX2xpbmsge1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbn1cXG5cXG4uaGVhZGVyX19uYXZfX2xpbmsgPiBzdmcge1xcbiAgZm9udC1zaXplOiAxLDJlbTtcXG59XFxuXFxuLmhlYWRlcl9fbmF2LS1zZWNvbmRsZXZlbCB7XFxuICBtYXJnaW4tbGVmdDogMjAlO1xcbiAgZm9udC1zaXplOiAxMHB4O1xcbiAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xcbn1cXG5cXG4uaGVhZGVyX19uYXYtLXNlY29uZGxldmVsID4gbGk6aG92ZXIge1xcbiAgY29sb3I6IGRhcmtyZWQ7XFxufVxcblxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDYwMHB4KSB7XFxuICAuaGVhZGVyIHtcXG4gICAgcGFkZGluZzogNXB4O1xcbiAgICAtbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTogMTAwJTtcXG4gICAgICAgIGZsZXgtYmFzaXM6IDEwMCU7XFxuICAgIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgLW1zLWZsZXgtd3JhcDogd3JhcDtcXG4gICAgICAgIGZsZXgtd3JhcDogd3JhcDtcXG4gICAgaGVpZ2h0OiAtd2Via2l0LWZpdC1jb250ZW50O1xcbiAgICBoZWlnaHQ6IC1tb3otZml0LWNvbnRlbnQ7XFxuICAgIGhlaWdodDogZml0LWNvbnRlbnQ7XFxuICB9XFxuICAuaGVhZGVyX19wZXJzb25hbCB7XFxuICAgIC1tcy1mbGV4LXByZWZlcnJlZC1zaXplOiAzMCU7XFxuICAgICAgICBmbGV4LWJhc2lzOiAzMCU7XFxuICB9XFxuICAuaGVhZGVyX19uYXYge1xcbiAgICBmb250LXNpemU6IDhweDtcXG4gICAgbGluZS1oZWlnaHQ6IDEycHg7XFxuICAgIC1tcy1mbGV4LXByZWZlcnJlZC1zaXplOiA3MCU7XFxuICAgICAgICBmbGV4LWJhc2lzOiA3MCU7XFxuICB9XFxuICAuaGVhZGVyX19uYXZfX2xpbmsgPiBzdmcge1xcbiAgICBmb250LXNpemU6IDEuNWVtO1xcbiAgICBoZWlnaHQ6IDEuNWVtO1xcbiAgfVxcbn1cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzOyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9SaWdodFRpdGxlLmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxudmFyIGV4cG9ydGVkID0gY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHt9O1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlZDsiLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnJpZ2h0VGl0bGUge1xcbiAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDcwJTtcXG4gICAgICBmbGV4LWJhc2lzOiA3MCU7XFxuICBoZWlnaHQ6IDkwcHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBncmF5O1xcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgcGFkZGluZzogMTBweCAyMHB4O1xcbn1cXG5cXG4ucmlnaHRUaXRsZS0tc21hbGxGb250IHtcXG4gIGZvbnQtc2l6ZTogMTBweDtcXG4gIGNvbG9yOiBsaWdodGdyYXk7XFxufVxcblxcbi5yaWdodFRpdGxlLS1taWRkbGVGb250IHtcXG4gIGZvbnQtc2l6ZTogMTFweDtcXG4gIGNvbG9yOiB3aGl0ZTtcXG59XCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9BYm91dE1lLmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxudmFyIGV4cG9ydGVkID0gY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHt9O1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlZDsiLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLkFib3V0TWUge1xcbiAgZm9udC1zaXplOiAxMnB4O1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBvdmVyZmxvdy15OiBhdXRvO1xcbn1cXG5cXG4uQWJvdXRNZS0tdGl0bGUge1xcbiAgY29sb3I6IG5hdnk7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG59XFxuXFxuLkFib3V0TWUtLWxhYmVsIHtcXG4gIGZvbnQtc2l6ZTogMTBweDtcXG4gIGNvbG9yOiBncmF5O1xcbn1cXG5cXG4uQWJvdXRNZV9faXRlbSB7XFxuICBtYXJnaW4tdG9wOiAxMHB4O1xcbn1cXG5cXG4uQWJvdXRNZS0tbGFuZ3VhZ2Uge1xcbiAgbWFyZ2luLWxlZnQ6IDUwcHg7XFxufVwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vRWR1Y2F0aW9uUGFnZS5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cbnZhciBleHBvcnRlZCA9IGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB7fTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZWQ7IiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5FZHVjYXRpb24ge1xcbiAgb3ZlcmZsb3cteTogYXV0bztcXG59XFxuXFxuLkVkdWNhdGlvbkl0ZW0ge1xcbiAgbWFyZ2luLXRvcDogMjBweDtcXG59XFxuXFxuLkVkdWNhdGlvbkl0ZW1fX3RpdGxlIHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG5cXG4uRWR1Y2F0aW9uSXRlbV9faXRlbSB7XFxuICBtYXJnaW4tdG9wOiAxMHB4O1xcbn1cXG5cXG4uRWR1Y2F0aW9uSXRlbS0taXRlbWJvcmRlciB7XFxuICBib3JkZXI6IDFweCBzb2xpZCBsaWdodGdyYXk7XFxuICBwYWRkaW5nOiAwIDEwcHggMTBweCAxMHB4O1xcbiAgbWFyZ2luLXRvcDogMTBweDtcXG59XCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJAY2hhcnNldCBcXFwiVVRGLThcXFwiO1xcbi5zZXJ0aWZpY2F0ZXMge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC1tcy1mbGV4LXdyYXA6IHdyYXA7XFxuICAgICAgZmxleC13cmFwOiB3cmFwO1xcbiAgLW1zLWZsZXgtbmVnYXRpdmU6IDA7XFxuICAgICAgZmxleC1zaHJpbms6IDA7XFxuICAtd2Via2l0LWJveC1wYWNrOiBqdXN0aWZ5O1xcbiAgICAgIC1tcy1mbGV4LXBhY2s6IGp1c3RpZnk7XFxuICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIG92ZXJmbG93LXk6IGF1dG87XFxuICBoZWlnaHQ6IGNhbGMoMTAwdmggLSAyMDBweCk7XFxufVxcblxcbi5zZXJ0aWZpY2F0ZXNfX2l0ZW0ge1xcbiAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDMwJTtcXG4gICAgICBmbGV4LWJhc2lzOiAzMCU7XFxuICBtaW4taGVpZ2h0OiAtd2Via2l0LWZpdC1jb250ZW50O1xcbiAgbWluLWhlaWdodDogLW1vei1maXQtY29udGVudDtcXG4gIG1pbi1oZWlnaHQ6IGZpdC1jb250ZW50O1xcbiAgaGVpZ2h0OiBhdXRvO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgbGluZS1oZWlnaHQ6IDIwcHg7XFxuICBib3JkZXI6IDFweCBkb3R0ZWQgbGlnaHRzbGF0ZWdyYXk7XFxuICBib3JkZXItcmFkaXVzOiAzcHg7XFxuICBtYXJnaW46IDEwcHg7XFxuICBwYWRkaW5nOiAxMHB4O1xcbiAgLXdlYmtpdC1ib3gtZmxleDogMDtcXG4gICAgICAtbXMtZmxleC1wb3NpdGl2ZTogMDtcXG4gICAgICAgICAgZmxleC1ncm93OiAwO1xcbn1cXG5cXG4uc2VydGlmaWNhdGVzX19pdGVtLS1kYXRlIHtcXG4gIGZvbnQtc2l6ZTogMTBweDtcXG4gIGxpbmUtaGVpZ2h0OiAxOHB4O1xcbn1cXG5cXG4uc2VydGlmaWNhdGVzX19pdGVtLS1uYW1lIHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG5cXG4uc2VydGlmaWNhdGVzX19pbWcge1xcbiAgd2lkdGg6IDEwMHB4O1xcbiAgaGVpZ2h0OiA4MHB4O1xcbiAgbWFyZ2luOiAxMHB4IGF1dG87XFxufVxcblxcbi5zZXJ0aWZpY2F0ZXNfX2ltZy0tc2l6ZSB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuXFxuLnNlcnRpZmljYXRlc19fbGFyZ2Uge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBtYXJnaW4tdG9wOiAxMHB4O1xcbn1cXG5cXG4uc2VydGlmaWNhdGVzX19jbG9zZSB7XFxuICB3aWR0aDogMjBweDtcXG4gIGhlaWdodDogMjBweDtcXG4gIGZvbnQtc2l6ZTogMTBweDtcXG4gIGxpbmUtaGVpZ2h0OiAyMHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogZGFya2dyYXk7XFxuICBjb2xvcjogd2hpdGU7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgbWFyZ2luLWJvdHRvbTogNXB4O1xcbn1cXG5cXG4uc2VydGlmaWNhdGVzX19kZXNjcmlwdGlvbiB7XFxuICBtYXJnaW4tdG9wOiAyMHB4O1xcbiAgZm9udC1zaXplOiAxMnB4O1xcbiAgbGluZS1oZWlnaHQ6IDI4cHg7XFxufVxcblxcbi5zZXJ0aWZpY2F0ZXNfX2Rlc2NyaXB0aW9uID4gdWwge1xcbiAgbGlzdC1zdHlsZTogbm9uZTtcXG59XFxuXFxuLnNlcnRpZmljYXRlc19fZGVzY3JpcHRpb24gPiB1bCA+IGxpIHtcXG4gIHBhZGRpbmctbGVmdDogMjBweDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIG1hcmdpbjogMTBweDtcXG59XFxuXFxuLnNlcnRpZmljYXRlc19fZGVzY3JpcHRpb24gPiB1bCA+IGxpOmJlZm9yZSB7XFxuICBjb250ZW50OiAn4pyUJztcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICBjb2xvcjogbGltZWdyZWVuO1xcbn1cXG5cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMDA1cHgpIHtcXG4gIC5zZXJ0aWZpY2F0ZXNfX2l0ZW0ge1xcbiAgICAtbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTogNDUlO1xcbiAgICAgICAgZmxleC1iYXNpczogNDUlO1xcbiAgICBtYXJnaW46IDVweDtcXG4gIH1cXG59XCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Db250YWN0c1BhZ2UuY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG52YXIgZXhwb3J0ZWQgPSBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDoge307XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVkOyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuY29udGFjdHNfX2l0ZW0ge1xcbiAgbWFyZ2luLXRvcDogMzBweDtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG5cXG4uY29udGFjdHNfaWNvbiB7XFxuICB3aWR0aDogMjBweDtcXG4gIGhlaWdodDogMjBweDtcXG4gIG1hcmdpbi1yaWdodDogMTBweDtcXG59XFxuXFxuLmNvbnRhY3RzX2ljb246aG92ZXIge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEuMik7XFxuICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMS4yKTtcXG59XFxuXFxuLmNvbnRhY3RzX2ljb24tLXZrIHtcXG4gIHdpZHRoOiA1MHB4O1xcbiAgaGVpZ2h0OiA1MHB4O1xcbiAgbWFyZ2luLWxlZnQ6IDMwcHg7XFxuICB6LWluZGV4OiAxMDA7XFxufVxcblxcbi5jb250YWN0c19pY29uLS12azpob3ZlciB7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoNSk7XFxuICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoNSk7XFxufVwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUG9ydGZvbGlvUGFnZS5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cbnZhciBleHBvcnRlZCA9IGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB7fTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZWQ7IiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIkBjaGFyc2V0IFxcXCJVVEYtOFxcXCI7XFxuLnBvcnRmb2xpbyB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgLW1zLWZsZXgtd3JhcDogd3JhcDtcXG4gICAgICBmbGV4LXdyYXA6IHdyYXA7XFxuICAtbXMtZmxleC1uZWdhdGl2ZTogMDtcXG4gICAgICBmbGV4LXNocmluazogMDtcXG4gIC13ZWJraXQtYm94LXBhY2s6IGp1c3RpZnk7XFxuICAgICAgLW1zLWZsZXgtcGFjazoganVzdGlmeTtcXG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgb3ZlcmZsb3cteTogYXV0bztcXG4gIGhlaWdodDogY2FsYygxMDB2aCAtIDIwMHB4KTtcXG59XFxuXFxuLnBvcnRmb2xpb19faGVhZGVyIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAyMHB4O1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBtYXJnaW4tdG9wOiAyMHB4O1xcbn1cXG5cXG4ucG9ydGZvbGlvX19pdGVtIHtcXG4gIC1tcy1mbGV4LXByZWZlcnJlZC1zaXplOiAzMCU7XFxuICAgICAgZmxleC1iYXNpczogMzAlO1xcbiAgbWluLWhlaWdodDogLXdlYmtpdC1maXQtY29udGVudDtcXG4gIG1pbi1oZWlnaHQ6IC1tb3otZml0LWNvbnRlbnQ7XFxuICBtaW4taGVpZ2h0OiBmaXQtY29udGVudDtcXG4gIGhlaWdodDogYXV0bztcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGxpbmUtaGVpZ2h0OiAyMHB4O1xcbiAgYm9yZGVyOiAxcHggZG90dGVkIGxpZ2h0c2xhdGVncmF5O1xcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xcbiAgbWFyZ2luOiAxMHB4O1xcbiAgcGFkZGluZzogMTBweDtcXG4gIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAgICAgLW1zLWZsZXgtcG9zaXRpdmU6IDA7XFxuICAgICAgICAgIGZsZXgtZ3JvdzogMDtcXG4gIC1tcy1mbGV4LWl0ZW0tYWxpZ246IHN0cmV0Y2g7XFxuICAgICAgLW1zLWdyaWQtcm93LWFsaWduOiBzdHJldGNoO1xcbiAgICAgIGFsaWduLXNlbGY6IHN0cmV0Y2g7XFxufVxcblxcbi5wb3J0Zm9saW9fX2l0ZW0tLWRhdGUge1xcbiAgZm9udC1zaXplOiAxMHB4O1xcbiAgbGluZS1oZWlnaHQ6IDE4cHg7XFxufVxcblxcbi5wb3J0Zm9saW9fX2l0ZW0tLW5hbWUge1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbi5wb3J0Zm9saW9fX2l0ZW0tLWxpbmsgPiBhIHtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG59XFxuXFxuLnBvcnRmb2xpb19faXRlbS0tY29tbWVudCB7XFxuICBmb250LXN0eWxlOiBpdGFsaWM7XFxufVxcblxcbi5wb3J0Zm9saW9fX2ltZyB7XFxuICB3aWR0aDogMTAwcHg7XFxuICBtYXJnaW46IDEwcHggYXV0bztcXG59XFxuXFxuLnBvcnRmb2xpb19faW1nLS1zaXplIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG5cXG4ucG9ydGZvbGlvX19sYXJnZSB7XFxuICB3aWR0aDogMTAwJTtcXG4gIG1hcmdpbi10b3A6IDEwcHg7XFxufVxcblxcbi5wb3J0Zm9saW9fX2Nsb3NlIHtcXG4gIHdpZHRoOiAyMHB4O1xcbiAgaGVpZ2h0OiAyMHB4O1xcbiAgZm9udC1zaXplOiAxMHB4O1xcbiAgbGluZS1oZWlnaHQ6IDIwcHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBkYXJrZ3JheTtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICBtYXJnaW4tYm90dG9tOiA1cHg7XFxufVxcblxcbi5wb3J0Zm9saW9fX2Rlc2NyaXB0aW9uIHtcXG4gIG1hcmdpbi10b3A6IDIwcHg7XFxuICBmb250LXNpemU6IDEycHg7XFxuICBsaW5lLWhlaWdodDogMjhweDtcXG59XFxuXFxuLnBvcnRmb2xpb19fZGVzY3JpcHRpb24gPiB1bCB7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbn1cXG5cXG4ucG9ydGZvbGlvX19kZXNjcmlwdGlvbiA+IHVsID4gbGkge1xcbiAgcGFkZGluZy1sZWZ0OiAyMHB4O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgbWFyZ2luOiAxMHB4O1xcbn1cXG5cXG4ucG9ydGZvbGlvX19kZXNjcmlwdGlvbiA+IHVsID4gbGk6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6ICfinJQnO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIGNvbG9yOiBsaW1lZ3JlZW47XFxufVxcblxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDYwMHB4KSB7XFxuICAucG9ydGZvbGlvX19pdGVtIHtcXG4gICAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDkwJTtcXG4gICAgICAgIGZsZXgtYmFzaXM6IDkwJTtcXG4gIH1cXG59XCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8sIGZyb20pIHtcbiAgaWYgKGZyb20gPT09IHVuZGVmaW5lZCkgZnJvbSA9ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gKHRvICYmIHRvLnNwbGl0KCcvJykpIHx8IFtdO1xuICB2YXIgZnJvbVBhcnRzID0gKGZyb20gJiYgZnJvbS5zcGxpdCgnLycpKSB8fCBbXTtcblxuICB2YXIgaXNUb0FicyA9IHRvICYmIGlzQWJzb2x1dGUodG8pO1xuICB2YXIgaXNGcm9tQWJzID0gZnJvbSAmJiBpc0Fic29sdXRlKGZyb20pO1xuICB2YXIgbXVzdEVuZEFicyA9IGlzVG9BYnMgfHwgaXNGcm9tQWJzO1xuXG4gIGlmICh0byAmJiBpc0Fic29sdXRlKHRvKSkge1xuICAgIC8vIHRvIGlzIGFic29sdXRlXG4gICAgZnJvbVBhcnRzID0gdG9QYXJ0cztcbiAgfSBlbHNlIGlmICh0b1BhcnRzLmxlbmd0aCkge1xuICAgIC8vIHRvIGlzIHJlbGF0aXZlLCBkcm9wIHRoZSBmaWxlbmFtZVxuICAgIGZyb21QYXJ0cy5wb3AoKTtcbiAgICBmcm9tUGFydHMgPSBmcm9tUGFydHMuY29uY2F0KHRvUGFydHMpO1xuICB9XG5cbiAgaWYgKCFmcm9tUGFydHMubGVuZ3RoKSByZXR1cm4gJy8nO1xuXG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoO1xuICBpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuICAgIHZhciBsYXN0ID0gZnJvbVBhcnRzW2Zyb21QYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gbGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicgfHwgbGFzdCA9PT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IGZyb21QYXJ0cy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhcnQgPSBmcm9tUGFydHNbaV07XG5cbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtdXN0RW5kQWJzKSBmb3IgKDsgdXAtLTsgdXApIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuXG4gIGlmIChcbiAgICBtdXN0RW5kQWJzICYmXG4gICAgZnJvbVBhcnRzWzBdICE9PSAnJyAmJlxuICAgICghZnJvbVBhcnRzWzBdIHx8ICFpc0Fic29sdXRlKGZyb21QYXJ0c1swXSkpXG4gIClcbiAgICBmcm9tUGFydHMudW5zaGlmdCgnJyk7XG5cbiAgdmFyIHJlc3VsdCA9IGZyb21QYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgcmVzdWx0LnN1YnN0cigtMSkgIT09ICcvJykgcmVzdWx0ICs9ICcvJztcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXNvbHZlUGF0aG5hbWU7XG4iLCJ2YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbnZhciBwcmVmaXggPSAnSW52YXJpYW50IGZhaWxlZCc7XG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXggKyBcIjogXCIgKyAobWVzc2FnZSB8fCAnJykpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpbnZhcmlhbnQ7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcmVzb2x2ZVBhdGhuYW1lIGZyb20gJ3Jlc29sdmUtcGF0aG5hbWUnO1xuaW1wb3J0IHZhbHVlRXF1YWwgZnJvbSAndmFsdWUtZXF1YWwnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gcGF0aC50b0xvd2VyQ2FzZSgpLmluZGV4T2YocHJlZml4LnRvTG93ZXJDYXNlKCkpID09PSAwICYmICcvPyMnLmluZGV4T2YocGF0aC5jaGFyQXQocHJlZml4Lmxlbmd0aCkpICE9PSAtMTtcbn1cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG5cbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcblxuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRoO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uO1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpIDogdm9pZCAwO1xuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKSA6IHZvaWQgMDtcbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufVxuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbmZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuXG5mdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbmZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICFzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBfcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmIChpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxudmFyIEhhc2hDaGFuZ2VFdmVudCQxID0gJ2hhc2hjaGFuZ2UnO1xudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBzdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0cmlwSGFzaCh1cmwpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gdXJsIDogdXJsLnNsaWNlKDAsIGhhc2hJbmRleCk7XG59XG5cbmZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufVxuXG5mdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZikgKyAnIycgKyBwYXRoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gX3Byb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHZvaWQgMCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwkJDEoYSwgYikge1xuICAgIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsJCQxKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfSAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cblxuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gW2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgdmFyIGJhc2VUYWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJyk7XG4gICAgdmFyIGhyZWYgPSAnJztcblxuICAgIGlmIChiYXNlVGFnICYmIGJhc2VUYWcuZ2V0QXR0cmlidXRlKCdocmVmJykpIHtcbiAgICAgIGhyZWYgPSBzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmICsgJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpIDogdm9pZCAwO1xuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpIDogdm9pZCAwO1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5mdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdm9pZCAwID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gX3Byb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gY3JlYXRlUGF0aDtcblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcblxuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBwYXJzZVBhdGgsIGNyZWF0ZVBhdGggfTtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgZ3VkIGZyb20gJ2d1ZCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG52YXIgTUFYX1NJR05FRF8zMV9CSVRfSU5UID0gMTA3Mzc0MTgyMztcblxuZnVuY3Rpb24gb2JqZWN0SXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50RW1pdHRlcih2YWx1ZSkge1xuICB2YXIgaGFuZGxlcnMgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBvbjogZnVuY3Rpb24gb24oaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICB9LFxuICAgIG9mZjogZnVuY3Rpb24gb2ZmKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzID0gaGFuZGxlcnMuZmlsdGVyKGZ1bmN0aW9uIChoKSB7XG4gICAgICAgIHJldHVybiBoICE9PSBoYW5kbGVyO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXIodmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gb25seUNoaWxkKGNoaWxkcmVuKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuWzBdIDogY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0Q29udGV4dChkZWZhdWx0VmFsdWUsIGNhbGN1bGF0ZUNoYW5nZWRCaXRzKSB7XG4gIHZhciBfUHJvdmlkZXIkY2hpbGRDb250ZXgsIF9Db25zdW1lciRjb250ZXh0VHlwZTtcblxuICB2YXIgY29udGV4dFByb3AgPSAnX19jcmVhdGUtcmVhY3QtY29udGV4dC0nICsgZ3VkKCkgKyAnX18nO1xuXG4gIHZhciBQcm92aWRlciA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHNMb29zZShQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBQcm92aWRlcigpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgX3RoaXMgPSBfQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgIF90aGlzLmVtaXR0ZXIgPSBjcmVhdGVFdmVudEVtaXR0ZXIoX3RoaXMucHJvcHMudmFsdWUpO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBQcm92aWRlci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8uZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHJldHVybiBfcmVmID0ge30sIF9yZWZbY29udGV4dFByb3BdID0gdGhpcy5lbWl0dGVyLCBfcmVmO1xuICAgIH07XG5cbiAgICBfcHJvdG8uY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy52YWx1ZSAhPT0gbmV4dFByb3BzLnZhbHVlKSB7XG4gICAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMucHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IG5leHRQcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIGNoYW5nZWRCaXRzO1xuXG4gICAgICAgIGlmIChvYmplY3RJcyhvbGRWYWx1ZSwgbmV3VmFsdWUpKSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gdHlwZW9mIGNhbGN1bGF0ZUNoYW5nZWRCaXRzID09PSAnZnVuY3Rpb24nID8gY2FsY3VsYXRlQ2hhbmdlZEJpdHMob2xkVmFsdWUsIG5ld1ZhbHVlKSA6IE1BWF9TSUdORURfMzFfQklUX0lOVDtcblxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICB3YXJuaW5nKChjaGFuZ2VkQml0cyAmIE1BWF9TSUdORURfMzFfQklUX0lOVCkgPT09IGNoYW5nZWRCaXRzLCAnY2FsY3VsYXRlQ2hhbmdlZEJpdHM6IEV4cGVjdGVkIHRoZSByZXR1cm4gdmFsdWUgdG8gYmUgYSAnICsgJzMxLWJpdCBpbnRlZ2VyLiBJbnN0ZWFkIHJlY2VpdmVkOiAnICsgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoYW5nZWRCaXRzIHw9IDA7XG5cbiAgICAgICAgICBpZiAoY2hhbmdlZEJpdHMgIT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdHRlci5zZXQobmV4dFByb3BzLnZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFByb3ZpZGVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSAoX1Byb3ZpZGVyJGNoaWxkQ29udGV4ID0ge30sIF9Qcm92aWRlciRjaGlsZENvbnRleFtjb250ZXh0UHJvcF0gPSBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsIF9Qcm92aWRlciRjaGlsZENvbnRleCk7XG5cbiAgdmFyIENvbnN1bWVyID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoX0NvbXBvbmVudDIpIHtcbiAgICBfaW5oZXJpdHNMb29zZShDb25zdW1lciwgX0NvbXBvbmVudDIpO1xuXG4gICAgZnVuY3Rpb24gQ29uc3VtZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyO1xuXG4gICAgICBfdGhpczIgPSBfQ29tcG9uZW50Mi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpczIuc3RhdGUgPSB7XG4gICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgfTtcblxuICAgICAgX3RoaXMyLm9uVXBkYXRlID0gZnVuY3Rpb24gKG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gX3RoaXMyLm9ic2VydmVkQml0cyB8IDA7XG5cbiAgICAgICAgaWYgKChvYnNlcnZlZEJpdHMgJiBjaGFuZ2VkQml0cykgIT09IDApIHtcbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBfdGhpczI7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90bzIgPSBDb25zdW1lci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IG5leHRQcm9wcy5vYnNlcnZlZEJpdHM7XG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vbih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IHRoaXMucHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub2ZmKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5nZXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90bzIucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIG9ubHlDaGlsZCh0aGlzLnByb3BzLmNoaWxkcmVuKSh0aGlzLnN0YXRlLnZhbHVlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIENvbnN1bWVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgQ29uc3VtZXIuY29udGV4dFR5cGVzID0gKF9Db25zdW1lciRjb250ZXh0VHlwZSA9IHt9LCBfQ29uc3VtZXIkY29udGV4dFR5cGVbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlKTtcbiAgcmV0dXJuIHtcbiAgICBQcm92aWRlcjogUHJvdmlkZXIsXG4gICAgQ29uc3VtZXI6IENvbnN1bWVyXG4gIH07XG59XG5cbnZhciBpbmRleCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQgfHwgY3JlYXRlUmVhY3RDb250ZXh0O1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiIsImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBjcmVhdGVQYXRoIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGNyZWF0ZUNvbnRleHQgZnJvbSAnbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dCc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSAncGF0aC10by1yZWdleHAnO1xuaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnRUeXBlIH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5cbi8vIFRPRE86IFJlcGxhY2Ugd2l0aCBSZWFjdC5jcmVhdGVDb250ZXh0IG9uY2Ugd2UgY2FuIGFzc3VtZSBSZWFjdCAxNitcblxudmFyIGNyZWF0ZU5hbWVkQ29udGV4dCA9IGZ1bmN0aW9uIGNyZWF0ZU5hbWVkQ29udGV4dChuYW1lKSB7XG4gIHZhciBjb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuICBjb250ZXh0LmRpc3BsYXlOYW1lID0gbmFtZTtcbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG52YXIgY29udGV4dCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVOYW1lZENvbnRleHQoXCJSb3V0ZXJcIik7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHB1dHRpbmcgaGlzdG9yeSBvbiBjb250ZXh0LlxuICovXG5cbnZhciBSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBSb3V0ZXIuY29tcHV0ZVJvb3RNYXRjaCA9IGZ1bmN0aW9uIGNvbXB1dGVSb290TWF0Y2gocGF0aG5hbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogXCIvXCIsXG4gICAgICB1cmw6IFwiL1wiLFxuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIGlzRXhhY3Q6IHBhdGhuYW1lID09PSBcIi9cIlxuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gUm91dGVyKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBsb2NhdGlvbjogcHJvcHMuaGlzdG9yeS5sb2NhdGlvblxuICAgIH07IC8vIFRoaXMgaXMgYSBiaXQgb2YgYSBoYWNrLiBXZSBoYXZlIHRvIHN0YXJ0IGxpc3RlbmluZyBmb3IgbG9jYXRpb25cbiAgICAvLyBjaGFuZ2VzIGhlcmUgaW4gdGhlIGNvbnN0cnVjdG9yIGluIGNhc2UgdGhlcmUgYXJlIGFueSA8UmVkaXJlY3Q+c1xuICAgIC8vIG9uIHRoZSBpbml0aWFsIHJlbmRlci4gSWYgdGhlcmUgYXJlLCB0aGV5IHdpbGwgcmVwbGFjZS9wdXNoIHdoZW5cbiAgICAvLyB0aGV5IG1vdW50IGFuZCBzaW5jZSBjRE0gZmlyZXMgaW4gY2hpbGRyZW4gYmVmb3JlIHBhcmVudHMsIHdlIG1heVxuICAgIC8vIGdldCBhIG5ldyBsb2NhdGlvbiBiZWZvcmUgdGhlIDxSb3V0ZXI+IGlzIG1vdW50ZWQuXG5cbiAgICBfdGhpcy5faXNNb3VudGVkID0gZmFsc2U7XG4gICAgX3RoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IG51bGw7XG5cbiAgICBpZiAoIXByb3BzLnN0YXRpY0NvbnRleHQpIHtcbiAgICAgIF90aGlzLnVubGlzdGVuID0gcHJvcHMuaGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICAgIGlmIChfdGhpcy5faXNNb3VudGVkKSB7XG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMuX3BlbmRpbmdMb2NhdGlvbikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGxvY2F0aW9uOiB0aGlzLl9wZW5kaW5nTG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy51bmxpc3RlbikgdGhpcy51bmxpc3RlbigpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfHwgbnVsbCxcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIGhpc3Rvcnk6IHRoaXMucHJvcHMuaGlzdG9yeSxcbiAgICAgICAgbG9jYXRpb246IHRoaXMuc3RhdGUubG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBSb3V0ZXIuY29tcHV0ZVJvb3RNYXRjaCh0aGlzLnN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lKSxcbiAgICAgICAgc3RhdGljQ29udGV4dDogdGhpcy5wcm9wcy5zdGF0aWNDb250ZXh0XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJldlByb3BzLmhpc3RvcnkgPT09IHRoaXMucHJvcHMuaGlzdG9yeSwgXCJZb3UgY2Fubm90IGNoYW5nZSA8Um91dGVyIGhpc3Rvcnk+XCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGxvY2F0aW9uIGluIG1lbW9yeS5cbiAqL1xuXG52YXIgTWVtb3J5Um91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1lbW9yeVJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVtb3J5Um91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVNZW1vcnlIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTWVtb3J5Um91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTWVtb3J5Um91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE1lbW9yeVJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgaW5pdGlhbEVudHJpZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgICBpbml0aWFsSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxuICB9O1xuXG4gIE1lbW9yeVJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxNZW1vcnlSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBNZW1vcnlSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxudmFyIExpZmVjeWNsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShMaWZlY3ljbGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpZmVjeWNsZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTGlmZWN5Y2xlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbk1vdW50KSB0aGlzLnByb3BzLm9uTW91bnQuY2FsbCh0aGlzLCB0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLm9uVXBkYXRlKSB0aGlzLnByb3BzLm9uVXBkYXRlLmNhbGwodGhpcywgdGhpcywgcHJldlByb3BzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVubW91bnQpIHRoaXMucHJvcHMub25Vbm1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gTGlmZWN5Y2xlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwcm9tcHRpbmcgdGhlIHVzZXIgYmVmb3JlIG5hdmlnYXRpbmcgYXdheSBmcm9tIGEgc2NyZWVuLlxuICovXG5cbmZ1bmN0aW9uIFByb21wdChfcmVmKSB7XG4gIHZhciBtZXNzYWdlID0gX3JlZi5tZXNzYWdlLFxuICAgICAgX3JlZiR3aGVuID0gX3JlZi53aGVuLFxuICAgICAgd2hlbiA9IF9yZWYkd2hlbiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkd2hlbjtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFByb21wdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBpZiAoIXdoZW4gfHwgY29udGV4dC5zdGF0aWNDb250ZXh0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgbWV0aG9kID0gY29udGV4dC5oaXN0b3J5LmJsb2NrO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIGlmIChwcmV2UHJvcHMubWVzc2FnZSAhPT0gbWVzc2FnZSkge1xuICAgICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uVW5tb3VudDogZnVuY3Rpb24gb25Vbm1vdW50KHNlbGYpIHtcbiAgICAgICAgc2VsZi5yZWxlYXNlKCk7XG4gICAgICB9LFxuICAgICAgbWVzc2FnZTogbWVzc2FnZVxuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgbWVzc2FnZVR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pO1xuICBQcm9tcHQucHJvcFR5cGVzID0ge1xuICAgIHdoZW46IFByb3BUeXBlcy5ib29sLFxuICAgIG1lc3NhZ2U6IG1lc3NhZ2VUeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aChwYXRoKSB7XG4gIGlmIChjYWNoZVtwYXRoXSkgcmV0dXJuIGNhY2hlW3BhdGhdO1xuICB2YXIgZ2VuZXJhdG9yID0gcGF0aFRvUmVnZXhwLmNvbXBpbGUocGF0aCk7XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0aF0gPSBnZW5lcmF0b3I7XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGdlbmVyYXRvcjtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgZ2VuZXJhdGluZyBhIFVSTCBwYXRobmFtZSBmcm9tIGEgcGF0aCBhbmQgcGFyYW1ldGVycy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlUGF0aChwYXRoLCBwYXJhbXMpIHtcbiAgaWYgKHBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhdGggPSBcIi9cIjtcbiAgfVxuXG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG5cbiAgcmV0dXJuIHBhdGggPT09IFwiL1wiID8gcGF0aCA6IGNvbXBpbGVQYXRoKHBhdGgpKHBhcmFtcywge1xuICAgIHByZXR0eTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbmF2aWdhdGluZyBwcm9ncmFtbWF0aWNhbGx5IHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxuZnVuY3Rpb24gUmVkaXJlY3QoX3JlZikge1xuICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIF9yZWYkcHVzaCA9IF9yZWYucHVzaCxcbiAgICAgIHB1c2ggPSBfcmVmJHB1c2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRwdXNoO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UmVkaXJlY3Q+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhpc3RvcnkgPSBjb250ZXh0Lmhpc3RvcnksXG4gICAgICAgIHN0YXRpY0NvbnRleHQgPSBjb250ZXh0LnN0YXRpY0NvbnRleHQ7XG4gICAgdmFyIG1ldGhvZCA9IHB1c2ggPyBoaXN0b3J5LnB1c2ggOiBoaXN0b3J5LnJlcGxhY2U7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oY29tcHV0ZWRNYXRjaCA/IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGdlbmVyYXRlUGF0aCh0bywgY29tcHV0ZWRNYXRjaC5wYXJhbXMpIDogX2V4dGVuZHMoe30sIHRvLCB7XG4gICAgICBwYXRobmFtZTogZ2VuZXJhdGVQYXRoKHRvLnBhdGhuYW1lLCBjb21wdXRlZE1hdGNoLnBhcmFtcylcbiAgICB9KSA6IHRvKTsgLy8gV2hlbiByZW5kZXJpbmcgaW4gYSBzdGF0aWMgY29udGV4dCxcbiAgICAvLyBzZXQgdGhlIG5ldyBsb2NhdGlvbiBpbW1lZGlhdGVseS5cblxuICAgIGlmIChzdGF0aWNDb250ZXh0KSB7XG4gICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGlmZWN5Y2xlLCB7XG4gICAgICBvbk1vdW50OiBmdW5jdGlvbiBvbk1vdW50KCkge1xuICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgfSxcbiAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShzZWxmLCBwcmV2UHJvcHMpIHtcbiAgICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHByZXZQcm9wcy50byk7XG5cbiAgICAgICAgaWYgKCFsb2NhdGlvbnNBcmVFcXVhbChwcmV2TG9jYXRpb24sIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgICAgICAgIGtleTogcHJldkxvY2F0aW9uLmtleVxuICAgICAgICB9KSkpIHtcbiAgICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdG86IHRvXG4gICAgfSk7XG4gIH0pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJlZGlyZWN0LnByb3BUeXBlcyA9IHtcbiAgICBwdXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBmcm9tOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgY2FjaGUkMSA9IHt9O1xudmFyIGNhY2hlTGltaXQkMSA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQkMSA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoJDEocGF0aCwgb3B0aW9ucykge1xuICB2YXIgY2FjaGVLZXkgPSBcIlwiICsgb3B0aW9ucy5lbmQgKyBvcHRpb25zLnN0cmljdCArIG9wdGlvbnMuc2Vuc2l0aXZlO1xuICB2YXIgcGF0aENhY2hlID0gY2FjaGUkMVtjYWNoZUtleV0gfHwgKGNhY2hlJDFbY2FjaGVLZXldID0ge30pO1xuICBpZiAocGF0aENhY2hlW3BhdGhdKSByZXR1cm4gcGF0aENhY2hlW3BhdGhdO1xuICB2YXIga2V5cyA9IFtdO1xuICB2YXIgcmVnZXhwID0gcGF0aFRvUmVnZXhwKHBhdGgsIGtleXMsIG9wdGlvbnMpO1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIHJlZ2V4cDogcmVnZXhwLFxuICAgIGtleXM6IGtleXNcbiAgfTtcblxuICBpZiAoY2FjaGVDb3VudCQxIDwgY2FjaGVMaW1pdCQxKSB7XG4gICAgcGF0aENhY2hlW3BhdGhdID0gcmVzdWx0O1xuICAgIGNhY2hlQ291bnQkMSsrO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBVUkwgcGF0aG5hbWUgdG8gYSBwYXRoLlxuICovXG5cblxuZnVuY3Rpb24gbWF0Y2hQYXRoKHBhdGhuYW1lLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheShvcHRpb25zKSkge1xuICAgIG9wdGlvbnMgPSB7XG4gICAgICBwYXRoOiBvcHRpb25zXG4gICAgfTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBwYXRoID0gX29wdGlvbnMucGF0aCxcbiAgICAgIF9vcHRpb25zJGV4YWN0ID0gX29wdGlvbnMuZXhhY3QsXG4gICAgICBleGFjdCA9IF9vcHRpb25zJGV4YWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGV4YWN0LFxuICAgICAgX29wdGlvbnMkc3RyaWN0ID0gX29wdGlvbnMuc3RyaWN0LFxuICAgICAgc3RyaWN0ID0gX29wdGlvbnMkc3RyaWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHN0cmljdCxcbiAgICAgIF9vcHRpb25zJHNlbnNpdGl2ZSA9IF9vcHRpb25zLnNlbnNpdGl2ZSxcbiAgICAgIHNlbnNpdGl2ZSA9IF9vcHRpb25zJHNlbnNpdGl2ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRzZW5zaXRpdmU7XG4gIHZhciBwYXRocyA9IFtdLmNvbmNhdChwYXRoKTtcbiAgcmV0dXJuIHBhdGhzLnJlZHVjZShmdW5jdGlvbiAobWF0Y2hlZCwgcGF0aCkge1xuICAgIGlmICghcGF0aCAmJiBwYXRoICE9PSBcIlwiKSByZXR1cm4gbnVsbDtcbiAgICBpZiAobWF0Y2hlZCkgcmV0dXJuIG1hdGNoZWQ7XG5cbiAgICB2YXIgX2NvbXBpbGVQYXRoID0gY29tcGlsZVBhdGgkMShwYXRoLCB7XG4gICAgICBlbmQ6IGV4YWN0LFxuICAgICAgc3RyaWN0OiBzdHJpY3QsXG4gICAgICBzZW5zaXRpdmU6IHNlbnNpdGl2ZVxuICAgIH0pLFxuICAgICAgICByZWdleHAgPSBfY29tcGlsZVBhdGgucmVnZXhwLFxuICAgICAgICBrZXlzID0gX2NvbXBpbGVQYXRoLmtleXM7XG5cbiAgICB2YXIgbWF0Y2ggPSByZWdleHAuZXhlYyhwYXRobmFtZSk7XG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHVybCA9IG1hdGNoWzBdLFxuICAgICAgICB2YWx1ZXMgPSBtYXRjaC5zbGljZSgxKTtcbiAgICB2YXIgaXNFeGFjdCA9IHBhdGhuYW1lID09PSB1cmw7XG4gICAgaWYgKGV4YWN0ICYmICFpc0V4YWN0KSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogcGF0aCxcbiAgICAgIC8vIHRoZSBwYXRoIHVzZWQgdG8gbWF0Y2hcbiAgICAgIHVybDogcGF0aCA9PT0gXCIvXCIgJiYgdXJsID09PSBcIlwiID8gXCIvXCIgOiB1cmwsXG4gICAgICAvLyB0aGUgbWF0Y2hlZCBwb3J0aW9uIG9mIHRoZSBVUkxcbiAgICAgIGlzRXhhY3Q6IGlzRXhhY3QsXG4gICAgICAvLyB3aGV0aGVyIG9yIG5vdCB3ZSBtYXRjaGVkIGV4YWN0bHlcbiAgICAgIHBhcmFtczoga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGtleSwgaW5kZXgpIHtcbiAgICAgICAgbWVtb1trZXkubmFtZV0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgIH0sIHt9KVxuICAgIH07XG4gIH0sIG51bGwpO1xufVxuXG5mdW5jdGlvbiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgcGF0aCkge1xuICB2YXIgdmFsdWUgPSBjaGlsZHJlbihwcm9wcyk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcodmFsdWUgIT09IHVuZGVmaW5lZCwgXCJZb3UgcmV0dXJuZWQgYHVuZGVmaW5lZGAgZnJvbSB0aGUgYGNoaWxkcmVuYCBmdW5jdGlvbiBvZiBcIiArIChcIjxSb3V0ZVwiICsgKHBhdGggPyBcIiBwYXRoPVxcXCJcIiArIHBhdGggKyBcIlxcXCJcIiA6IFwiXCIpICsgXCI+LCBidXQgeW91IFwiKSArIFwic2hvdWxkIGhhdmUgcmV0dXJuZWQgYSBSZWFjdCBlbGVtZW50IG9yIGBudWxsYFwiKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHZhbHVlIHx8IG51bGw7XG59XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIHNpbmdsZSBwYXRoIGFuZCByZW5kZXJpbmcuXG4gKi9cblxuXG52YXIgUm91dGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm91dGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSb3V0ZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQkMSkge1xuICAgICAgIWNvbnRleHQkMSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dCQxLmxvY2F0aW9uO1xuICAgICAgdmFyIG1hdGNoID0gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCA/IF90aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggLy8gPFN3aXRjaD4gYWxyZWFkeSBjb21wdXRlZCB0aGUgbWF0Y2ggZm9yIHVzXG4gICAgICA6IF90aGlzLnByb3BzLnBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIF90aGlzLnByb3BzKSA6IGNvbnRleHQkMS5tYXRjaDtcblxuICAgICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIGNvbnRleHQkMSwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBtYXRjaFxuICAgICAgfSk7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICAgIHJlbmRlciA9IF90aGlzJHByb3BzLnJlbmRlcjsgLy8gUHJlYWN0IHVzZXMgYW4gZW1wdHkgYXJyYXkgYXMgY2hpbGRyZW4gYnlcbiAgICAgIC8vIGRlZmF1bHQsIHNvIHVzZSBudWxsIGlmIHRoYXQncyB0aGUgY2FzZS5cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIGNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjaGlsZHJlbiA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IHByb3BzXG4gICAgICB9LCBwcm9wcy5tYXRjaCA/IGNoaWxkcmVuID8gdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBfdGhpcy5wcm9wcy5wYXRoKSA6IGNoaWxkcmVuKHByb3BzKSA6IGNoaWxkcmVuIDogY29tcG9uZW50ID8gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKSA6IHJlbmRlciA/IHJlbmRlcihwcm9wcykgOiBudWxsIDogdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBfdGhpcy5wcm9wcy5wYXRoKSA6IGNoaWxkcmVuKHByb3BzKSA6IG51bGwpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZS5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KHByb3BzLCBwcm9wTmFtZSkge1xuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSAmJiAhaXNWYWxpZEVsZW1lbnRUeXBlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIkludmFsaWQgcHJvcCAnY29tcG9uZW50JyBzdXBwbGllZCB0byAnUm91dGUnOiB0aGUgcHJvcCBpcyBub3QgYSB2YWxpZCBSZWFjdCBjb21wb25lbnRcIik7XG4gICAgICB9XG4gICAgfSxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcGF0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyldKSxcbiAgICByZW5kZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbFxuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMuY29tcG9uZW50KSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjb21wb25lbnQ+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gXCIvXCIgPyBwYXRoIDogXCIvXCIgKyBwYXRoO1xufVxuXG5mdW5jdGlvbiBhZGRCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSkgKyBsb2NhdGlvbi5wYXRobmFtZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICB2YXIgYmFzZSA9IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSk7XG4gIGlmIChsb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKGJhc2UpICE9PSAwKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVVJMKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBsb2NhdGlvbiA6IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xufVxuXG5mdW5jdGlvbiBzdGF0aWNIYW5kbGVyKG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgJXMgd2l0aCA8U3RhdGljUm91dGVyPlwiLCBtZXRob2ROYW1lKSA6IGludmFyaWFudChmYWxzZSkgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuXG5cbnZhciBTdGF0aWNSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3RhdGljUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdGF0aWNSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVQdXNoID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJQVVNIXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSZXBsYWNlID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJSRVBMQUNFXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0YXRpY1JvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm5hdmlnYXRlVG8gPSBmdW5jdGlvbiBuYXZpZ2F0ZVRvKGxvY2F0aW9uLCBhY3Rpb24pIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9IF90aGlzJHByb3BzLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMkYmFzZW5hbWUsXG4gICAgICAgIF90aGlzJHByb3BzJGNvbnRleHQgPSBfdGhpcyRwcm9wcy5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wcyRjb250ZXh0O1xuICAgIGNvbnRleHQuYWN0aW9uID0gYWN0aW9uO1xuICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wczIkYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIuYmFzZW5hbWUsXG4gICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMyJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wczIkY29udGV4dCA9IF90aGlzJHByb3BzMi5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMyJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMyJGNvbnRleHQsXG4gICAgICAgIF90aGlzJHByb3BzMiRsb2NhdGlvbiA9IF90aGlzJHByb3BzMi5sb2NhdGlvbixcbiAgICAgICAgbG9jYXRpb24gPSBfdGhpcyRwcm9wczIkbG9jYXRpb24gPT09IHZvaWQgMCA/IFwiL1wiIDogX3RoaXMkcHJvcHMyJGxvY2F0aW9uLFxuICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMyLCBbXCJiYXNlbmFtZVwiLCBcImNvbnRleHRcIiwgXCJsb2NhdGlvblwiXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHtcbiAgICAgIGNyZWF0ZUhyZWY6IGZ1bmN0aW9uIGNyZWF0ZUhyZWYocGF0aCkge1xuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lICsgY3JlYXRlVVJMKHBhdGgpKTtcbiAgICAgIH0sXG4gICAgICBhY3Rpb246IFwiUE9QXCIsXG4gICAgICBsb2NhdGlvbjogc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKSxcbiAgICAgIHB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgIHJlcGxhY2U6IHRoaXMuaGFuZGxlUmVwbGFjZSxcbiAgICAgIGdvOiBzdGF0aWNIYW5kbGVyKFwiZ29cIiksXG4gICAgICBnb0JhY2s6IHN0YXRpY0hhbmRsZXIoXCJnb0JhY2tcIiksXG4gICAgICBnb0ZvcndhcmQ6IHN0YXRpY0hhbmRsZXIoXCJnb0ZvcndhcmRcIiksXG4gICAgICBsaXN0ZW46IHRoaXMuaGFuZGxlTGlzdGVuLFxuICAgICAgYmxvY2s6IHRoaXMuaGFuZGxlQmxvY2tcbiAgICB9O1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhpc3Rvcnk6IGhpc3RvcnksXG4gICAgICBzdGF0aWNDb250ZXh0OiBjb250ZXh0XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBTdGF0aWNSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU3RhdGljUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8U3RhdGljUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgU3RhdGljUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyB0aGUgZmlyc3QgPFJvdXRlPiB0aGF0IG1hdGNoZXMuXG4gKi9cblxudmFyIFN3aXRjaCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShTd2l0Y2gsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN3aXRjaCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3dpdGNoLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxTd2l0Y2g+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCBjb250ZXh0LmxvY2F0aW9uO1xuICAgICAgdmFyIGVsZW1lbnQsIG1hdGNoOyAvLyBXZSB1c2UgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaCBpbnN0ZWFkIG9mIFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoKS5maW5kKClcbiAgICAgIC8vIGhlcmUgYmVjYXVzZSB0b0FycmF5IGFkZHMga2V5cyB0byBhbGwgY2hpbGQgZWxlbWVudHMgYW5kIHdlIGRvIG5vdCB3YW50XG4gICAgICAvLyB0byB0cmlnZ2VyIGFuIHVubW91bnQvcmVtb3VudCBmb3IgdHdvIDxSb3V0ZT5zIHRoYXQgcmVuZGVyIHRoZSBzYW1lXG4gICAgICAvLyBjb21wb25lbnQgYXQgZGlmZmVyZW50IFVSTHMuXG5cbiAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goX3RoaXMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAobWF0Y2ggPT0gbnVsbCAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICBlbGVtZW50ID0gY2hpbGQ7XG4gICAgICAgICAgdmFyIHBhdGggPSBjaGlsZC5wcm9wcy5wYXRoIHx8IGNoaWxkLnByb3BzLmZyb207XG4gICAgICAgICAgbWF0Y2ggPSBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfZXh0ZW5kcyh7fSwgY2hpbGQucHJvcHMsIHtcbiAgICAgICAgICAgIHBhdGg6IHBhdGhcbiAgICAgICAgICB9KSkgOiBjb250ZXh0Lm1hdGNoO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtYXRjaCA/IFJlYWN0LmNsb25lRWxlbWVudChlbGVtZW50LCB7XG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgY29tcHV0ZWRNYXRjaDogbWF0Y2hcbiAgICAgIH0pIDogbnVsbDtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gU3dpdGNoO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIEEgcHVibGljIGhpZ2hlci1vcmRlciBjb21wb25lbnQgdG8gYWNjZXNzIHRoZSBpbXBlcmF0aXZlIEFQSVxuICovXG5cbmZ1bmN0aW9uIHdpdGhSb3V0ZXIoQ29tcG9uZW50KSB7XG4gIHZhciBkaXNwbGF5TmFtZSA9IFwid2l0aFJvdXRlcihcIiArIChDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUpICsgXCIpXCI7XG5cbiAgdmFyIEMgPSBmdW5jdGlvbiBDKHByb3BzKSB7XG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnRSZWYgPSBwcm9wcy53cmFwcGVkQ29tcG9uZW50UmVmLFxuICAgICAgICByZW1haW5pbmdQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBbXCJ3cmFwcGVkQ29tcG9uZW50UmVmXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFwiICsgZGlzcGxheU5hbWUgKyBcIiAvPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcmVtYWluaW5nUHJvcHMsIGNvbnRleHQsIHtcbiAgICAgICAgcmVmOiB3cmFwcGVkQ29tcG9uZW50UmVmXG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH07XG5cbiAgQy5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICBDLldyYXBwZWRDb21wb25lbnQgPSBDb21wb25lbnQ7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIEMucHJvcFR5cGVzID0ge1xuICAgICAgd3JhcHBlZENvbXBvbmVudFJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gaG9pc3RTdGF0aWNzKEMsIENvbXBvbmVudCk7XG59XG5cbnZhciB1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dDtcbmZ1bmN0aW9uIHVzZUhpc3RvcnkoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VIaXN0b3J5KClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHVzZUNvbnRleHQoY29udGV4dCkuaGlzdG9yeTtcbn1cbmZ1bmN0aW9uIHVzZUxvY2F0aW9uKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlTG9jYXRpb24oKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gdXNlQ29udGV4dChjb250ZXh0KS5sb2NhdGlvbjtcbn1cbmZ1bmN0aW9uIHVzZVBhcmFtcygpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZVBhcmFtcygpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHZhciBtYXRjaCA9IHVzZUNvbnRleHQoY29udGV4dCkubWF0Y2g7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoLnBhcmFtcyA6IHt9O1xufVxuZnVuY3Rpb24gdXNlUm91dGVNYXRjaChwYXRoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VSb3V0ZU1hdGNoKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHBhdGggPyBtYXRjaFBhdGgodXNlTG9jYXRpb24oKS5wYXRobmFtZSwgcGF0aCkgOiB1c2VDb250ZXh0KGNvbnRleHQpLm1hdGNoO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIGdsb2JhbCA9IHdpbmRvdztcbiAgICB2YXIga2V5ID0gXCJfX3JlYWN0X3JvdXRlcl9idWlsZF9fXCI7XG4gICAgdmFyIGJ1aWxkTmFtZXMgPSB7XG4gICAgICBjanM6IFwiQ29tbW9uSlNcIixcbiAgICAgIGVzbTogXCJFUyBtb2R1bGVzXCIsXG4gICAgICB1bWQ6IFwiVU1EXCJcbiAgICB9O1xuXG4gICAgaWYgKGdsb2JhbFtrZXldICYmIGdsb2JhbFtrZXldICE9PSBcImVzbVwiKSB7XG4gICAgICB2YXIgaW5pdGlhbEJ1aWxkTmFtZSA9IGJ1aWxkTmFtZXNbZ2xvYmFsW2tleV1dO1xuICAgICAgdmFyIHNlY29uZGFyeUJ1aWxkTmFtZSA9IGJ1aWxkTmFtZXNbXCJlc21cIl07IC8vIFRPRE86IEFkZCBsaW5rIHRvIGFydGljbGUgdGhhdCBleHBsYWlucyBpbiBkZXRhaWwgaG93IHRvIGF2b2lkXG4gICAgICAvLyBsb2FkaW5nIDIgZGlmZmVyZW50IGJ1aWxkcy5cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGFyZSBsb2FkaW5nIHRoZSBcIiArIHNlY29uZGFyeUJ1aWxkTmFtZSArIFwiIGJ1aWxkIG9mIFJlYWN0IFJvdXRlciBcIiArIChcIm9uIGEgcGFnZSB0aGF0IGlzIGFscmVhZHkgcnVubmluZyB0aGUgXCIgKyBpbml0aWFsQnVpbGROYW1lICsgXCIgXCIpICsgXCJidWlsZCwgc28gdGhpbmdzIHdvbid0IHdvcmsgcmlnaHQuXCIpO1xuICAgIH1cblxuICAgIGdsb2JhbFtrZXldID0gXCJlc21cIjtcbiAgfVxufVxuXG5leHBvcnQgeyBNZW1vcnlSb3V0ZXIsIFByb21wdCwgUmVkaXJlY3QsIFJvdXRlLCBSb3V0ZXIsIFN0YXRpY1JvdXRlciwgU3dpdGNoLCBjb250ZXh0IGFzIF9fUm91dGVyQ29udGV4dCwgZ2VuZXJhdGVQYXRoLCBtYXRjaFBhdGgsIHVzZUhpc3RvcnksIHVzZUxvY2F0aW9uLCB1c2VQYXJhbXMsIHVzZVJvdXRlTWF0Y2gsIHdpdGhSb3V0ZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXJvdXRlci5qcy5tYXBcbiIsImltcG9ydCB7IFJvdXRlciwgX19Sb3V0ZXJDb250ZXh0LCBtYXRjaFBhdGggfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuZXhwb3J0ICogZnJvbSAncmVhY3Qtcm91dGVyJztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG5cbnZhciBCcm93c2VyUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnJvd3NlclJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyb3dzZXJSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgQnJvd3NlclJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGZvcmNlUmVmcmVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyXG4gIH07XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxCcm93c2VyUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyB3aW5kb3cubG9jYXRpb24uaGFzaC5cbiAqL1xuXG52YXIgSGFzaFJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShIYXNoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBIYXNoUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIYXNoSGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEhhc2hSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBIYXNoUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEhhc2hSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBoYXNoVHlwZTogUHJvcFR5cGVzLm9uZU9mKFtcImhhc2hiYW5nXCIsIFwibm9zbGFzaFwiLCBcInNsYXNoXCJdKVxuICB9O1xuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8SGFzaFJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxudmFyIHJlc29sdmVUb0xvY2F0aW9uID0gZnVuY3Rpb24gcmVzb2x2ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIHRvID09PSBcImZ1bmN0aW9uXCIgPyB0byhjdXJyZW50TG9jYXRpb24pIDogdG87XG59O1xudmFyIG5vcm1hbGl6ZVRvTG9jYXRpb24gPSBmdW5jdGlvbiBub3JtYWxpemVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGNyZWF0ZUxvY2F0aW9uKHRvLCBudWxsLCBudWxsLCBjdXJyZW50TG9jYXRpb24pIDogdG87XG59O1xuXG52YXIgZm9yd2FyZFJlZlNoaW0gPSBmdW5jdGlvbiBmb3J3YXJkUmVmU2hpbShDKSB7XG4gIHJldHVybiBDO1xufTtcblxudmFyIGZvcndhcmRSZWYgPSBSZWFjdC5mb3J3YXJkUmVmO1xuXG5pZiAodHlwZW9mIGZvcndhcmRSZWYgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgZm9yd2FyZFJlZiA9IGZvcndhcmRSZWZTaGltO1xufVxuXG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuXG52YXIgTGlua0FuY2hvciA9IGZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYsIGZvcndhcmRlZFJlZikge1xuICB2YXIgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgbmF2aWdhdGUgPSBfcmVmLm5hdmlnYXRlLFxuICAgICAgX29uQ2xpY2sgPSBfcmVmLm9uQ2xpY2ssXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiaW5uZXJSZWZcIiwgXCJuYXZpZ2F0ZVwiLCBcIm9uQ2xpY2tcIl0pO1xuXG4gIHZhciB0YXJnZXQgPSByZXN0LnRhcmdldDtcblxuICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZXZlbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChfb25DbGljaykgX29uQ2xpY2soZXZlbnQpO1xuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhyb3cgZXg7XG4gICAgICB9XG5cbiAgICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCAmJiAvLyBvbkNsaWNrIHByZXZlbnRlZCBkZWZhdWx0XG4gICAgICBldmVudC5idXR0b24gPT09IDAgJiYgKCAvLyBpZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgICAgICF0YXJnZXQgfHwgdGFyZ2V0ID09PSBcIl9zZWxmXCIpICYmIC8vIGxldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICAgICAhaXNNb2RpZmllZEV2ZW50KGV2ZW50KSAvLyBpZ25vcmUgY2xpY2tzIHdpdGggbW9kaWZpZXIga2V5c1xuICAgICAgKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBuYXZpZ2F0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICB9KTsgLy8gUmVhY3QgMTUgY29tcGF0XG5cblxuICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcbiAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gIH0gZWxzZSB7XG4gICAgcHJvcHMucmVmID0gaW5uZXJSZWY7XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgcHJvcHMpO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTGlua0FuY2hvci5kaXNwbGF5TmFtZSA9IFwiTGlua0FuY2hvclwiO1xufVxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIGEgaGlzdG9yeS1hd2FyZSA8YT4uXG4gKi9cblxuXG52YXIgTGluayA9IGZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYyLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIF9yZWYyJGNvbXBvbmVudCA9IF9yZWYyLmNvbXBvbmVudCxcbiAgICAgIGNvbXBvbmVudCA9IF9yZWYyJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gTGlua0FuY2hvciA6IF9yZWYyJGNvbXBvbmVudCxcbiAgICAgIHJlcGxhY2UgPSBfcmVmMi5yZXBsYWNlLFxuICAgICAgdG8gPSBfcmVmMi50byxcbiAgICAgIGlubmVyUmVmID0gX3JlZjIuaW5uZXJSZWYsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImNvbXBvbmVudFwiLCBcInJlcGxhY2VcIiwgXCJ0b1wiLCBcImlubmVyUmVmXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfX1JvdXRlckNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBoaXN0b3J5ID0gY29udGV4dC5oaXN0b3J5O1xuICAgIHZhciBsb2NhdGlvbiA9IG5vcm1hbGl6ZVRvTG9jYXRpb24ocmVzb2x2ZVRvTG9jYXRpb24odG8sIGNvbnRleHQubG9jYXRpb24pLCBjb250ZXh0LmxvY2F0aW9uKTtcbiAgICB2YXIgaHJlZiA9IGxvY2F0aW9uID8gaGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uKSA6IFwiXCI7XG5cbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgaHJlZjogaHJlZixcbiAgICAgIG5hdmlnYXRlOiBmdW5jdGlvbiBuYXZpZ2F0ZSgpIHtcbiAgICAgICAgdmFyIGxvY2F0aW9uID0gcmVzb2x2ZVRvTG9jYXRpb24odG8sIGNvbnRleHQubG9jYXRpb24pO1xuICAgICAgICB2YXIgbWV0aG9kID0gcmVwbGFjZSA/IGhpc3RvcnkucmVwbGFjZSA6IGhpc3RvcnkucHVzaDtcbiAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIH1cbiAgICB9KTsgLy8gUmVhY3QgMTUgY29tcGF0XG5cblxuICAgIGlmIChmb3J3YXJkUmVmU2hpbSAhPT0gZm9yd2FyZFJlZikge1xuICAgICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcy5pbm5lclJlZiA9IGlubmVyUmVmO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpO1xuICB9KTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHZhciB0b1R5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pO1xuICB2YXIgcmVmVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IFByb3BUeXBlcy5hbnlcbiAgfSldKTtcbiAgTGluay5kaXNwbGF5TmFtZSA9IFwiTGlua1wiO1xuICBMaW5rLnByb3BUeXBlcyA9IHtcbiAgICBpbm5lclJlZjogcmVmVHlwZSxcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICByZXBsYWNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB0YXJnZXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IHRvVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBmb3J3YXJkUmVmU2hpbSQxID0gZnVuY3Rpb24gZm9yd2FyZFJlZlNoaW0oQykge1xuICByZXR1cm4gQztcbn07XG5cbnZhciBmb3J3YXJkUmVmJDEgPSBSZWFjdC5mb3J3YXJkUmVmO1xuXG5pZiAodHlwZW9mIGZvcndhcmRSZWYkMSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3J3YXJkUmVmJDEgPSBmb3J3YXJkUmVmU2hpbSQxO1xufVxuXG5mdW5jdGlvbiBqb2luQ2xhc3NuYW1lcygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzbmFtZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgY2xhc3NuYW1lc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBjbGFzc25hbWVzLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgIHJldHVybiBpO1xuICB9KS5qb2luKFwiIFwiKTtcbn1cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cblxuXG52YXIgTmF2TGluayA9IGZvcndhcmRSZWYkMShmdW5jdGlvbiAoX3JlZiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBfcmVmJGFyaWFDdXJyZW50ID0gX3JlZltcImFyaWEtY3VycmVudFwiXSxcbiAgICAgIGFyaWFDdXJyZW50ID0gX3JlZiRhcmlhQ3VycmVudCA9PT0gdm9pZCAwID8gXCJwYWdlXCIgOiBfcmVmJGFyaWFDdXJyZW50LFxuICAgICAgX3JlZiRhY3RpdmVDbGFzc05hbWUgPSBfcmVmLmFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYkYWN0aXZlQ2xhc3NOYW1lID09PSB2b2lkIDAgPyBcImFjdGl2ZVwiIDogX3JlZiRhY3RpdmVDbGFzc05hbWUsXG4gICAgICBhY3RpdmVTdHlsZSA9IF9yZWYuYWN0aXZlU3R5bGUsXG4gICAgICBjbGFzc05hbWVQcm9wID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICBpc0FjdGl2ZVByb3AgPSBfcmVmLmlzQWN0aXZlLFxuICAgICAgbG9jYXRpb25Qcm9wID0gX3JlZi5sb2NhdGlvbixcbiAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgc3R5bGVQcm9wID0gX3JlZi5zdHlsZSxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIGlubmVyUmVmID0gX3JlZi5pbm5lclJlZixcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJhcmlhLWN1cnJlbnRcIiwgXCJhY3RpdmVDbGFzc05hbWVcIiwgXCJhY3RpdmVTdHlsZVwiLCBcImNsYXNzTmFtZVwiLCBcImV4YWN0XCIsIFwiaXNBY3RpdmVcIiwgXCJsb2NhdGlvblwiLCBcInN0cmljdFwiLCBcInN0eWxlXCIsIFwidG9cIiwgXCJpbm5lclJlZlwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TmF2TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgY3VycmVudExvY2F0aW9uID0gbG9jYXRpb25Qcm9wIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgdmFyIHRvTG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pLCBjdXJyZW50TG9jYXRpb24pO1xuICAgIHZhciBwYXRoID0gdG9Mb2NhdGlvbi5wYXRobmFtZTsgLy8gUmVnZXggdGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhwL2Jsb2IvbWFzdGVyL2luZGV4LmpzI0wyMDJcblxuICAgIHZhciBlc2NhcGVkUGF0aCA9IHBhdGggJiYgcGF0aC5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfC9cXFxcXSkvZywgXCJcXFxcJDFcIik7XG4gICAgdmFyIG1hdGNoID0gZXNjYXBlZFBhdGggPyBtYXRjaFBhdGgoY3VycmVudExvY2F0aW9uLnBhdGhuYW1lLCB7XG4gICAgICBwYXRoOiBlc2NhcGVkUGF0aCxcbiAgICAgIGV4YWN0OiBleGFjdCxcbiAgICAgIHN0cmljdDogc3RyaWN0XG4gICAgfSkgOiBudWxsO1xuICAgIHZhciBpc0FjdGl2ZSA9ICEhKGlzQWN0aXZlUHJvcCA/IGlzQWN0aXZlUHJvcChtYXRjaCwgY3VycmVudExvY2F0aW9uKSA6IG1hdGNoKTtcbiAgICB2YXIgY2xhc3NOYW1lID0gaXNBY3RpdmUgPyBqb2luQ2xhc3NuYW1lcyhjbGFzc05hbWVQcm9wLCBhY3RpdmVDbGFzc05hbWUpIDogY2xhc3NOYW1lUHJvcDtcbiAgICB2YXIgc3R5bGUgPSBpc0FjdGl2ZSA/IF9leHRlbmRzKHt9LCBzdHlsZVByb3AsIHt9LCBhY3RpdmVTdHlsZSkgOiBzdHlsZVByb3A7XG5cbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICBcImFyaWEtY3VycmVudFwiOiBpc0FjdGl2ZSAmJiBhcmlhQ3VycmVudCB8fCBudWxsLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICB0bzogdG9Mb2NhdGlvblxuICAgIH0sIHJlc3QpOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gICAgaWYgKGZvcndhcmRSZWZTaGltJDEgIT09IGZvcndhcmRSZWYkMSkge1xuICAgICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcy5pbm5lclJlZiA9IGlubmVyUmVmO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIHByb3BzKTtcbiAgfSk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBOYXZMaW5rLmRpc3BsYXlOYW1lID0gXCJOYXZMaW5rXCI7XG4gIHZhciBhcmlhQ3VycmVudFR5cGUgPSBQcm9wVHlwZXMub25lT2YoW1wicGFnZVwiLCBcInN0ZXBcIiwgXCJsb2NhdGlvblwiLCBcImRhdGVcIiwgXCJ0aW1lXCIsIFwidHJ1ZVwiXSk7XG4gIE5hdkxpbmsucHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIExpbmsucHJvcFR5cGVzLCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRUeXBlLFxuICAgIGFjdGl2ZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhY3RpdmVTdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzQWN0aXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pO1xufVxuXG5leHBvcnQgeyBCcm93c2VyUm91dGVyLCBIYXNoUm91dGVyLCBMaW5rLCBOYXZMaW5rIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yb3V0ZXItZG9tLmpzLm1hcFxuIiwiZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uICh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JyB8fCB2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICB2YXIgcHJvdG8gPSB2YWx1ZTtcblxuICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSAhPT0gbnVsbCkge1xuICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpID09PSBwcm90bztcbn0pOyIsImV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbn0pOyIsImV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufSk7IiwiZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG59KTsiLCJleHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xufSk7IiwiZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZDtcbn0pOyIsImV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAoYXJyYXkpIHtcbiAgcmV0dXJuIGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdO1xufSk7IiwiaW1wb3J0IGNhbWVsQ2FzZSBmcm9tICd0by1jYW1lbC1jYXNlJztcbnZhciBuYW1lc3BhY2VyID0gJy8nO1xuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uICh0eXBlKSB7XG4gIHJldHVybiB0eXBlLmluZGV4T2YobmFtZXNwYWNlcikgPT09IC0xID8gY2FtZWxDYXNlKHR5cGUpIDogdHlwZS5zcGxpdChuYW1lc3BhY2VyKS5tYXAoY2FtZWxDYXNlKS5qb2luKG5hbWVzcGFjZXIpO1xufSk7IiwiZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIChhcnJheSwgY2FsbGJhY2spIHtcbiAgcmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbiAocGFydGlhbE9iamVjdCwgZWxlbWVudCkge1xuICAgIHJldHVybiBjYWxsYmFjayhwYXJ0aWFsT2JqZWN0LCBlbGVtZW50KTtcbiAgfSwge30pO1xufSk7IiwiZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIE1hcCAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBNYXA7XG59KTsiLCJpbXBvcnQgaXNNYXAgZnJvbSAnLi9pc01hcCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvd25LZXlzKG9iamVjdCkge1xuICBpZiAoaXNNYXAob2JqZWN0KSkge1xuICAgIC8vIFdlIGFyZSB1c2luZyBsb29zZSB0cmFuc2Zvcm1zIGluIGJhYmVsLiBIZXJlIHdlIGFyZSB0cnlpbmcgdG8gY29udmVydCBhblxuICAgIC8vIGludGVyYWJsZSB0byBhbiBhcnJheS4gTG9vc2UgbW9kZSBleHBlY3RzIGV2ZXJ5dGhpbmcgdG8gYWxyZWFkeSBiZSBhblxuICAgIC8vIGFycmF5LiBUaGUgcHJvYmxlbSBpcyB0aGF0IG91ciBlc2xpbnQgcnVsZXMgZW5jb3VyYWdlIHVzIHRvIHByZWZlclxuICAgIC8vIHNwcmVhZCBvdmVyIEFycmF5LmZyb20uXG4gICAgLy9cbiAgICAvLyBJbnN0ZWFkIG9mIGRpc2FibGluZyBsb29zZSBtb2RlIHdlIHNpbXBseSBkaXNhYmxlIHRoZSB3YXJuaW5nLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB1bmljb3JuL3ByZWZlci1zcHJlYWRcbiAgICByZXR1cm4gQXJyYXkuZnJvbShvYmplY3Qua2V5cygpKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgUmVmbGVjdCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIFJlZmxlY3Qub3duS2V5cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBSZWZsZWN0Lm93bktleXMob2JqZWN0KTtcbiAgfVxuXG4gIHZhciBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqZWN0KTtcblxuICBpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBrZXlzID0ga2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpKTtcbiAgfVxuXG4gIHJldHVybiBrZXlzO1xufSIsImltcG9ydCBpc01hcCBmcm9tICcuL2lzTWFwJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldChrZXksIHgpIHtcbiAgcmV0dXJuIGlzTWFwKHgpID8geC5nZXQoa2V5KSA6IHhba2V5XTtcbn0iLCJpbXBvcnQgeyBERUZBVUxUX05BTUVTUEFDRSwgQUNUSU9OX1RZUEVfREVMSU1JVEVSIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCBvd25LZXlzIGZyb20gJy4vb3duS2V5cyc7XG5pbXBvcnQgZ2V0IGZyb20gJy4vZ2V0JztcbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAocHJlZGljYXRlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmbGF0dGVuKG1hcCwgX3RlbXAsIHBhcnRpYWxGbGF0TWFwLCBwYXJ0aWFsRmxhdEFjdGlvblR5cGUpIHtcbiAgICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgICBfcmVmJG5hbWVzcGFjZSA9IF9yZWYubmFtZXNwYWNlLFxuICAgICAgICBuYW1lc3BhY2UgPSBfcmVmJG5hbWVzcGFjZSA9PT0gdm9pZCAwID8gREVGQVVMVF9OQU1FU1BBQ0UgOiBfcmVmJG5hbWVzcGFjZSxcbiAgICAgICAgcHJlZml4ID0gX3JlZi5wcmVmaXg7XG5cbiAgICBpZiAocGFydGlhbEZsYXRNYXAgPT09IHZvaWQgMCkge1xuICAgICAgcGFydGlhbEZsYXRNYXAgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAocGFydGlhbEZsYXRBY3Rpb25UeXBlID09PSB2b2lkIDApIHtcbiAgICAgIHBhcnRpYWxGbGF0QWN0aW9uVHlwZSA9ICcnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbm5lY3ROYW1lc3BhY2UodHlwZSkge1xuICAgICAgdmFyIF9yZWYyO1xuXG4gICAgICBpZiAoIXBhcnRpYWxGbGF0QWN0aW9uVHlwZSkgcmV0dXJuIHR5cGU7XG4gICAgICB2YXIgdHlwZXMgPSB0eXBlLnRvU3RyaW5nKCkuc3BsaXQoQUNUSU9OX1RZUEVfREVMSU1JVEVSKTtcbiAgICAgIHZhciBwYXJ0aWFscyA9IHBhcnRpYWxGbGF0QWN0aW9uVHlwZS5zcGxpdChBQ1RJT05fVFlQRV9ERUxJTUlURVIpO1xuICAgICAgcmV0dXJuIChfcmVmMiA9IFtdKS5jb25jYXQuYXBwbHkoX3JlZjIsIHBhcnRpYWxzLm1hcChmdW5jdGlvbiAocCkge1xuICAgICAgICByZXR1cm4gdHlwZXMubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIFwiXCIgKyBwICsgbmFtZXNwYWNlICsgdDtcbiAgICAgICAgfSk7XG4gICAgICB9KSkuam9pbihBQ1RJT05fVFlQRV9ERUxJTUlURVIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbm5lY3RQcmVmaXgodHlwZSkge1xuICAgICAgaWYgKHBhcnRpYWxGbGF0QWN0aW9uVHlwZSB8fCAhcHJlZml4IHx8IHByZWZpeCAmJiBuZXcgUmVnRXhwKFwiXlwiICsgcHJlZml4ICsgbmFtZXNwYWNlKS50ZXN0KHR5cGUpKSB7XG4gICAgICAgIHJldHVybiB0eXBlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gXCJcIiArIHByZWZpeCArIG5hbWVzcGFjZSArIHR5cGU7XG4gICAgfVxuXG4gICAgb3duS2V5cyhtYXApLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIHZhciBuZXh0TmFtZXNwYWNlID0gY29ubmVjdFByZWZpeChjb25uZWN0TmFtZXNwYWNlKHR5cGUpKTtcbiAgICAgIHZhciBtYXBWYWx1ZSA9IGdldCh0eXBlLCBtYXApO1xuXG4gICAgICBpZiAocHJlZGljYXRlKG1hcFZhbHVlKSkge1xuICAgICAgICBmbGF0dGVuKG1hcFZhbHVlLCB7XG4gICAgICAgICAgbmFtZXNwYWNlOiBuYW1lc3BhY2UsXG4gICAgICAgICAgcHJlZml4OiBwcmVmaXhcbiAgICAgICAgfSwgcGFydGlhbEZsYXRNYXAsIG5leHROYW1lc3BhY2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFydGlhbEZsYXRNYXBbbmV4dE5hbWVzcGFjZV0gPSBtYXBWYWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcGFydGlhbEZsYXRNYXA7XG4gIH07XG59KTsiLCJleHBvcnQgdmFyIERFRkFVTFRfTkFNRVNQQUNFID0gJy8nO1xuZXhwb3J0IHZhciBBQ1RJT05fVFlQRV9ERUxJTUlURVIgPSAnfHwnOyIsImltcG9ydCBpc1BsYWluT2JqZWN0IGZyb20gJy4vaXNQbGFpbk9iamVjdCc7XG5pbXBvcnQgZmxhdHRlbldoZW5Ob2RlIGZyb20gJy4vZmxhdHRlbldoZW5Ob2RlJztcbmV4cG9ydCBkZWZhdWx0IGZsYXR0ZW5XaGVuTm9kZShpc1BsYWluT2JqZWN0KTsiLCJpbXBvcnQgeyBERUZBVUxUX05BTUVTUEFDRSB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgaXNFbXB0eSBmcm9tICcuL2lzRW1wdHknO1xuaW1wb3J0IGNhbWVsQ2FzZSBmcm9tICcuL2NhbWVsQ2FzZSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1bmZsYXR0ZW5BY3Rpb25DcmVhdG9ycyhmbGF0QWN0aW9uQ3JlYXRvcnMsIF90ZW1wKSB7XG4gIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICBfcmVmJG5hbWVzcGFjZSA9IF9yZWYubmFtZXNwYWNlLFxuICAgICAgbmFtZXNwYWNlID0gX3JlZiRuYW1lc3BhY2UgPT09IHZvaWQgMCA/IERFRkFVTFRfTkFNRVNQQUNFIDogX3JlZiRuYW1lc3BhY2UsXG4gICAgICBwcmVmaXggPSBfcmVmLnByZWZpeDtcblxuICBmdW5jdGlvbiB1bmZsYXR0ZW4oZmxhdEFjdGlvblR5cGUsIHBhcnRpYWxOZXN0ZWRBY3Rpb25DcmVhdG9ycywgcGFydGlhbEZsYXRBY3Rpb25UeXBlUGF0aCkge1xuICAgIHZhciBuZXh0TmFtZXNwYWNlID0gY2FtZWxDYXNlKHBhcnRpYWxGbGF0QWN0aW9uVHlwZVBhdGguc2hpZnQoKSk7XG5cbiAgICBpZiAoaXNFbXB0eShwYXJ0aWFsRmxhdEFjdGlvblR5cGVQYXRoKSkge1xuICAgICAgcGFydGlhbE5lc3RlZEFjdGlvbkNyZWF0b3JzW25leHROYW1lc3BhY2VdID0gZmxhdEFjdGlvbkNyZWF0b3JzW2ZsYXRBY3Rpb25UeXBlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFwYXJ0aWFsTmVzdGVkQWN0aW9uQ3JlYXRvcnNbbmV4dE5hbWVzcGFjZV0pIHtcbiAgICAgICAgcGFydGlhbE5lc3RlZEFjdGlvbkNyZWF0b3JzW25leHROYW1lc3BhY2VdID0ge307XG4gICAgICB9XG5cbiAgICAgIHVuZmxhdHRlbihmbGF0QWN0aW9uVHlwZSwgcGFydGlhbE5lc3RlZEFjdGlvbkNyZWF0b3JzW25leHROYW1lc3BhY2VdLCBwYXJ0aWFsRmxhdEFjdGlvblR5cGVQYXRoKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbmVzdGVkQWN0aW9uQ3JlYXRvcnMgPSB7fTtcbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZmxhdEFjdGlvbkNyZWF0b3JzKS5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgdmFyIHVucHJlZml4ZWRUeXBlID0gcHJlZml4ID8gdHlwZS5yZXBsYWNlKFwiXCIgKyBwcmVmaXggKyBuYW1lc3BhY2UsICcnKSA6IHR5cGU7XG4gICAgcmV0dXJuIHVuZmxhdHRlbih0eXBlLCBuZXN0ZWRBY3Rpb25DcmVhdG9ycywgdW5wcmVmaXhlZFR5cGUuc3BsaXQobmFtZXNwYWNlKSk7XG4gIH0pO1xuICByZXR1cm4gbmVzdGVkQWN0aW9uQ3JlYXRvcnM7XG59IiwiZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUubGVuZ3RoID09PSAwO1xufSk7IiwiZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IG51bGw7XG59KTsiLCJpbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuL3V0aWxzL2lzRnVuY3Rpb24nO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gJy4vdXRpbHMvaWRlbnRpdHknO1xuaW1wb3J0IGlzTnVsbCBmcm9tICcuL3V0aWxzL2lzTnVsbCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVBY3Rpb24odHlwZSwgcGF5bG9hZENyZWF0b3IsIG1ldGFDcmVhdG9yKSB7XG4gIGlmIChwYXlsb2FkQ3JlYXRvciA9PT0gdm9pZCAwKSB7XG4gICAgcGF5bG9hZENyZWF0b3IgPSBpZGVudGl0eTtcbiAgfVxuXG4gIGludmFyaWFudChpc0Z1bmN0aW9uKHBheWxvYWRDcmVhdG9yKSB8fCBpc051bGwocGF5bG9hZENyZWF0b3IpLCAnRXhwZWN0ZWQgcGF5bG9hZENyZWF0b3IgdG8gYmUgYSBmdW5jdGlvbiwgdW5kZWZpbmVkIG9yIG51bGwnKTtcbiAgdmFyIGZpbmFsUGF5bG9hZENyZWF0b3IgPSBpc051bGwocGF5bG9hZENyZWF0b3IpIHx8IHBheWxvYWRDcmVhdG9yID09PSBpZGVudGl0eSA/IGlkZW50aXR5IDogZnVuY3Rpb24gKGhlYWQpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGVhZCBpbnN0YW5jZW9mIEVycm9yID8gaGVhZCA6IHBheWxvYWRDcmVhdG9yLmFwcGx5KHZvaWQgMCwgW2hlYWRdLmNvbmNhdChhcmdzKSk7XG4gIH07XG4gIHZhciBoYXNNZXRhID0gaXNGdW5jdGlvbihtZXRhQ3JlYXRvcik7XG4gIHZhciB0eXBlU3RyaW5nID0gdHlwZS50b1N0cmluZygpO1xuXG4gIHZhciBhY3Rpb25DcmVhdG9yID0gZnVuY3Rpb24gYWN0aW9uQ3JlYXRvcigpIHtcbiAgICB2YXIgcGF5bG9hZCA9IGZpbmFsUGF5bG9hZENyZWF0b3IuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgIHZhciBhY3Rpb24gPSB7XG4gICAgICB0eXBlOiB0eXBlXG4gICAgfTtcblxuICAgIGlmIChwYXlsb2FkIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIGFjdGlvbi5lcnJvciA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHBheWxvYWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgYWN0aW9uLnBheWxvYWQgPSBwYXlsb2FkO1xuICAgIH1cblxuICAgIGlmIChoYXNNZXRhKSB7XG4gICAgICBhY3Rpb24ubWV0YSA9IG1ldGFDcmVhdG9yLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWN0aW9uO1xuICB9O1xuXG4gIGFjdGlvbkNyZWF0b3IudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHR5cGVTdHJpbmc7XG4gIH07XG5cbiAgcmV0dXJuIGFjdGlvbkNyZWF0b3I7XG59IiwiZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgaXNQbGFpbk9iamVjdCBmcm9tICcuL3V0aWxzL2lzUGxhaW5PYmplY3QnO1xuaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi91dGlscy9pc0Z1bmN0aW9uJztcbmltcG9ydCBpZGVudGl0eSBmcm9tICcuL3V0aWxzL2lkZW50aXR5JztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vdXRpbHMvaXNBcnJheSc7XG5pbXBvcnQgaXNTdHJpbmcgZnJvbSAnLi91dGlscy9pc1N0cmluZyc7XG5pbXBvcnQgaXNOaWwgZnJvbSAnLi91dGlscy9pc05pbCc7XG5pbXBvcnQgZ2V0TGFzdEVsZW1lbnQgZnJvbSAnLi91dGlscy9nZXRMYXN0RWxlbWVudCc7XG5pbXBvcnQgY2FtZWxDYXNlIGZyb20gJy4vdXRpbHMvY2FtZWxDYXNlJztcbmltcG9ydCBhcnJheVRvT2JqZWN0IGZyb20gJy4vdXRpbHMvYXJyYXlUb09iamVjdCc7XG5pbXBvcnQgZmxhdHRlbkFjdGlvbk1hcCBmcm9tICcuL3V0aWxzL2ZsYXR0ZW5BY3Rpb25NYXAnO1xuaW1wb3J0IHVuZmxhdHRlbkFjdGlvbkNyZWF0b3JzIGZyb20gJy4vdXRpbHMvdW5mbGF0dGVuQWN0aW9uQ3JlYXRvcnMnO1xuaW1wb3J0IGNyZWF0ZUFjdGlvbiBmcm9tICcuL2NyZWF0ZUFjdGlvbic7XG5pbXBvcnQgeyBERUZBVUxUX05BTUVTUEFDRSB9IGZyb20gJy4vY29uc3RhbnRzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUFjdGlvbnMoYWN0aW9uTWFwKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBpZGVudGl0eUFjdGlvbnMgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGlkZW50aXR5QWN0aW9uc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgb3B0aW9ucyA9IGlzUGxhaW5PYmplY3QoZ2V0TGFzdEVsZW1lbnQoaWRlbnRpdHlBY3Rpb25zKSkgPyBpZGVudGl0eUFjdGlvbnMucG9wKCkgOiB7fTtcbiAgaW52YXJpYW50KGlkZW50aXR5QWN0aW9ucy5ldmVyeShpc1N0cmluZykgJiYgKGlzU3RyaW5nKGFjdGlvbk1hcCkgfHwgaXNQbGFpbk9iamVjdChhY3Rpb25NYXApKSwgJ0V4cGVjdGVkIG9wdGlvbmFsIG9iamVjdCBmb2xsb3dlZCBieSBzdHJpbmcgYWN0aW9uIHR5cGVzJyk7XG5cbiAgaWYgKGlzU3RyaW5nKGFjdGlvbk1hcCkpIHtcbiAgICByZXR1cm4gYWN0aW9uQ3JlYXRvcnNGcm9tSWRlbnRpdHlBY3Rpb25zKFthY3Rpb25NYXBdLmNvbmNhdChpZGVudGl0eUFjdGlvbnMpLCBvcHRpb25zKTtcbiAgfVxuXG4gIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBhY3Rpb25DcmVhdG9yc0Zyb21BY3Rpb25NYXAoYWN0aW9uTWFwLCBvcHRpb25zKSwgYWN0aW9uQ3JlYXRvcnNGcm9tSWRlbnRpdHlBY3Rpb25zKGlkZW50aXR5QWN0aW9ucywgb3B0aW9ucykpO1xufVxuXG5mdW5jdGlvbiBhY3Rpb25DcmVhdG9yc0Zyb21BY3Rpb25NYXAoYWN0aW9uTWFwLCBvcHRpb25zKSB7XG4gIHZhciBmbGF0QWN0aW9uTWFwID0gZmxhdHRlbkFjdGlvbk1hcChhY3Rpb25NYXAsIG9wdGlvbnMpO1xuICB2YXIgZmxhdEFjdGlvbkNyZWF0b3JzID0gYWN0aW9uTWFwVG9BY3Rpb25DcmVhdG9ycyhmbGF0QWN0aW9uTWFwKTtcbiAgcmV0dXJuIHVuZmxhdHRlbkFjdGlvbkNyZWF0b3JzKGZsYXRBY3Rpb25DcmVhdG9ycywgb3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGFjdGlvbk1hcFRvQWN0aW9uQ3JlYXRvcnMoYWN0aW9uTWFwLCBfdGVtcCkge1xuICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgcHJlZml4ID0gX3JlZi5wcmVmaXgsXG4gICAgICBfcmVmJG5hbWVzcGFjZSA9IF9yZWYubmFtZXNwYWNlLFxuICAgICAgbmFtZXNwYWNlID0gX3JlZiRuYW1lc3BhY2UgPT09IHZvaWQgMCA/IERFRkFVTFRfTkFNRVNQQUNFIDogX3JlZiRuYW1lc3BhY2U7XG5cbiAgZnVuY3Rpb24gaXNWYWxpZEFjdGlvbk1hcFZhbHVlKGFjdGlvbk1hcFZhbHVlKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oYWN0aW9uTWFwVmFsdWUpIHx8IGlzTmlsKGFjdGlvbk1hcFZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGlzQXJyYXkoYWN0aW9uTWFwVmFsdWUpKSB7XG4gICAgICB2YXIgX2FjdGlvbk1hcFZhbHVlJCA9IGFjdGlvbk1hcFZhbHVlWzBdLFxuICAgICAgICAgIHBheWxvYWQgPSBfYWN0aW9uTWFwVmFsdWUkID09PSB2b2lkIDAgPyBpZGVudGl0eSA6IF9hY3Rpb25NYXBWYWx1ZSQsXG4gICAgICAgICAgbWV0YSA9IGFjdGlvbk1hcFZhbHVlWzFdO1xuICAgICAgcmV0dXJuIGlzRnVuY3Rpb24ocGF5bG9hZCkgJiYgaXNGdW5jdGlvbihtZXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gYXJyYXlUb09iamVjdChPYmplY3Qua2V5cyhhY3Rpb25NYXApLCBmdW5jdGlvbiAocGFydGlhbEFjdGlvbkNyZWF0b3JzLCB0eXBlKSB7XG4gICAgdmFyIF9vYmplY3RTcHJlYWQyO1xuXG4gICAgdmFyIGFjdGlvbk1hcFZhbHVlID0gYWN0aW9uTWFwW3R5cGVdO1xuICAgIGludmFyaWFudChpc1ZhbGlkQWN0aW9uTWFwVmFsdWUoYWN0aW9uTWFwVmFsdWUpLCAnRXhwZWN0ZWQgZnVuY3Rpb24sIHVuZGVmaW5lZCwgbnVsbCwgb3IgYXJyYXkgd2l0aCBwYXlsb2FkIGFuZCBtZXRhICcgKyAoXCJmdW5jdGlvbnMgZm9yIFwiICsgdHlwZSkpO1xuICAgIHZhciBwcmVmaXhlZFR5cGUgPSBwcmVmaXggPyBcIlwiICsgcHJlZml4ICsgbmFtZXNwYWNlICsgdHlwZSA6IHR5cGU7XG4gICAgdmFyIGFjdGlvbkNyZWF0b3IgPSBpc0FycmF5KGFjdGlvbk1hcFZhbHVlKSA/IGNyZWF0ZUFjdGlvbi5hcHBseSh2b2lkIDAsIFtwcmVmaXhlZFR5cGVdLmNvbmNhdChhY3Rpb25NYXBWYWx1ZSkpIDogY3JlYXRlQWN0aW9uKHByZWZpeGVkVHlwZSwgYWN0aW9uTWFwVmFsdWUpO1xuICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBwYXJ0aWFsQWN0aW9uQ3JlYXRvcnMsIChfb2JqZWN0U3ByZWFkMiA9IHt9LCBfb2JqZWN0U3ByZWFkMlt0eXBlXSA9IGFjdGlvbkNyZWF0b3IsIF9vYmplY3RTcHJlYWQyKSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhY3Rpb25DcmVhdG9yc0Zyb21JZGVudGl0eUFjdGlvbnMoaWRlbnRpdHlBY3Rpb25zLCBvcHRpb25zKSB7XG4gIHZhciBhY3Rpb25NYXAgPSBhcnJheVRvT2JqZWN0KGlkZW50aXR5QWN0aW9ucywgZnVuY3Rpb24gKHBhcnRpYWxBY3Rpb25NYXAsIHR5cGUpIHtcbiAgICB2YXIgX29iamVjdFNwcmVhZDM7XG5cbiAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgcGFydGlhbEFjdGlvbk1hcCwgKF9vYmplY3RTcHJlYWQzID0ge30sIF9vYmplY3RTcHJlYWQzW3R5cGVdID0gaWRlbnRpdHksIF9vYmplY3RTcHJlYWQzKSk7XG4gIH0pO1xuICB2YXIgYWN0aW9uQ3JlYXRvcnMgPSBhY3Rpb25NYXBUb0FjdGlvbkNyZWF0b3JzKGFjdGlvbk1hcCwgb3B0aW9ucyk7XG4gIHJldHVybiBhcnJheVRvT2JqZWN0KE9iamVjdC5rZXlzKGFjdGlvbkNyZWF0b3JzKSwgZnVuY3Rpb24gKHBhcnRpYWxBY3Rpb25DcmVhdG9ycywgdHlwZSkge1xuICAgIHZhciBfb2JqZWN0U3ByZWFkNDtcblxuICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBwYXJ0aWFsQWN0aW9uQ3JlYXRvcnMsIChfb2JqZWN0U3ByZWFkNCA9IHt9LCBfb2JqZWN0U3ByZWFkNFtjYW1lbENhc2UodHlwZSldID0gYWN0aW9uQ3JlYXRvcnNbdHlwZV0sIF9vYmplY3RTcHJlYWQ0KSk7XG4gIH0pO1xufSIsImltcG9ydCB7Y3JlYXRlQWN0aW9uc30gZnJvbSAncmVkdXgtYWN0aW9ucyc7XHJcblxyXG5leHBvcnQgY29uc3Qge2xvYWREYXRhfSA9IGNyZWF0ZUFjdGlvbnMoe1xyXG4gICAgTE9BRF9EQVRBOiAoKSA9PiAoe30pXHJcbn0pOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgdmFyIFJlYWN0UmVkdXhDb250ZXh0ID1cbi8qI19fUFVSRV9fKi9cblJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFJlYWN0UmVkdXhDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1JlYWN0UmVkdXgnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBSZWFjdFJlZHV4Q29udGV4dDsiLCIvLyBEZWZhdWx0IHRvIGEgZHVtbXkgXCJiYXRjaFwiIGltcGxlbWVudGF0aW9uIHRoYXQganVzdCBydW5zIHRoZSBjYWxsYmFja1xuZnVuY3Rpb24gZGVmYXVsdE5vb3BCYXRjaChjYWxsYmFjaykge1xuICBjYWxsYmFjaygpO1xufVxuXG52YXIgYmF0Y2ggPSBkZWZhdWx0Tm9vcEJhdGNoOyAvLyBBbGxvdyBpbmplY3RpbmcgYW5vdGhlciBiYXRjaGluZyBmdW5jdGlvbiBsYXRlclxuXG5leHBvcnQgdmFyIHNldEJhdGNoID0gZnVuY3Rpb24gc2V0QmF0Y2gobmV3QmF0Y2gpIHtcbiAgcmV0dXJuIGJhdGNoID0gbmV3QmF0Y2g7XG59OyAvLyBTdXBwbHkgYSBnZXR0ZXIganVzdCB0byBza2lwIGRlYWxpbmcgd2l0aCBFU00gYmluZGluZ3NcblxuZXhwb3J0IHZhciBnZXRCYXRjaCA9IGZ1bmN0aW9uIGdldEJhdGNoKCkge1xuICByZXR1cm4gYmF0Y2g7XG59OyIsImltcG9ydCB7IGdldEJhdGNoIH0gZnJvbSAnLi9iYXRjaCc7IC8vIGVuY2Fwc3VsYXRlcyB0aGUgc3Vic2NyaXB0aW9uIGxvZ2ljIGZvciBjb25uZWN0aW5nIGEgY29tcG9uZW50IHRvIHRoZSByZWR1eCBzdG9yZSwgYXNcbi8vIHdlbGwgYXMgbmVzdGluZyBzdWJzY3JpcHRpb25zIG9mIGRlc2NlbmRhbnQgY29tcG9uZW50cywgc28gdGhhdCB3ZSBjYW4gZW5zdXJlIHRoZVxuLy8gYW5jZXN0b3IgY29tcG9uZW50cyByZS1yZW5kZXIgYmVmb3JlIGRlc2NlbmRhbnRzXG5cbnZhciBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHt9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKSB7XG4gIHZhciBiYXRjaCA9IGdldEJhdGNoKCk7XG4gIHZhciBmaXJzdCA9IG51bGw7XG4gIHZhciBsYXN0ID0gbnVsbDtcbiAgcmV0dXJuIHtcbiAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICBmaXJzdCA9IG51bGw7XG4gICAgICBsYXN0ID0gbnVsbDtcbiAgICB9LFxuICAgIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge1xuICAgICAgYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbGlzdGVuZXIgPSBmaXJzdDtcblxuICAgICAgICB3aGlsZSAobGlzdGVuZXIpIHtcbiAgICAgICAgICBsaXN0ZW5lci5jYWxsYmFjaygpO1xuICAgICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBbXTtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGZpcnN0O1xuXG4gICAgICB3aGlsZSAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBsaXN0ZW5lcnM7XG4gICAgfSxcbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsYXN0ID0ge1xuICAgICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICAgIG5leHQ6IG51bGwsXG4gICAgICAgIHByZXY6IGxhc3RcbiAgICAgIH07XG5cbiAgICAgIGlmIChsaXN0ZW5lci5wcmV2KSB7XG4gICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmlyc3QgPSBsaXN0ZW5lcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCB8fCBmaXJzdCA9PT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAobGlzdGVuZXIubmV4dCkge1xuICAgICAgICAgIGxpc3RlbmVyLm5leHQucHJldiA9IGxpc3RlbmVyLnByZXY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGFzdCA9IGxpc3RlbmVyLnByZXY7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdGVuZXIucHJldikge1xuICAgICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmlyc3QgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cblxudmFyIFN1YnNjcmlwdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbihzdG9yZSwgcGFyZW50U3ViKSB7XG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgIHRoaXMucGFyZW50U3ViID0gcGFyZW50U3ViO1xuICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIgPSB0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdWJzY3JpcHRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGROZXN0ZWRTdWIgPSBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0aGlzLnRyeVN1YnNjcmliZSgpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9O1xuXG4gIF9wcm90by5ub3RpZnlOZXN0ZWRTdWJzID0gZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3VicygpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5ub3RpZnkoKTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlQ2hhbmdlV3JhcHBlciA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZVdyYXBwZXIoKSB7XG4gICAgaWYgKHRoaXMub25TdGF0ZUNoYW5nZSkge1xuICAgICAgdGhpcy5vblN0YXRlQ2hhbmdlKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5pc1N1YnNjcmliZWQgPSBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy51bnN1YnNjcmliZSk7XG4gIH07XG5cbiAgX3Byb3RvLnRyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSB0aGlzLnBhcmVudFN1YiA/IHRoaXMucGFyZW50U3ViLmFkZE5lc3RlZFN1Yih0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIpIDogdGhpcy5zdG9yZS5zdWJzY3JpYmUodGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyKTtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by50cnlVbnN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVVuc3Vic2NyaWJlKCkge1xuICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICAgIHRoaXMubGlzdGVuZXJzLmNsZWFyKCk7XG4gICAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBTdWJzY3JpcHRpb247XG59KCk7XG5cbmV4cG9ydCB7IFN1YnNjcmlwdGlvbiBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8sIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5cbmZ1bmN0aW9uIFByb3ZpZGVyKF9yZWYpIHtcbiAgdmFyIHN0b3JlID0gX3JlZi5zdG9yZSxcbiAgICAgIGNvbnRleHQgPSBfcmVmLmNvbnRleHQsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW47XG4gIHZhciBjb250ZXh0VmFsdWUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbihzdG9yZSk7XG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicztcbiAgICByZXR1cm4ge1xuICAgICAgc3RvcmU6IHN0b3JlLFxuICAgICAgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb25cbiAgICB9O1xuICB9LCBbc3RvcmVdKTtcbiAgdmFyIHByZXZpb3VzU3RhdGUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgfSwgW3N0b3JlXSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IGNvbnRleHRWYWx1ZS5zdWJzY3JpcHRpb247XG4gICAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuXG4gICAgaWYgKHByZXZpb3VzU3RhdGUgIT09IHN0b3JlLmdldFN0YXRlKCkpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBudWxsO1xuICAgIH07XG4gIH0sIFtjb250ZXh0VmFsdWUsIHByZXZpb3VzU3RhdGVdKTtcbiAgdmFyIENvbnRleHQgPSBjb250ZXh0IHx8IFJlYWN0UmVkdXhDb250ZXh0O1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICB9LCBjaGlsZHJlbik7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgICBzdG9yZTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgZ2V0U3RhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KSxcbiAgICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb3ZpZGVyOyIsImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSAncmVhY3QnOyAvLyBSZWFjdCBjdXJyZW50bHkgdGhyb3dzIGEgd2FybmluZyB3aGVuIHVzaW5nIHVzZUxheW91dEVmZmVjdCBvbiB0aGUgc2VydmVyLlxuLy8gVG8gZ2V0IGFyb3VuZCBpdCwgd2UgY2FuIGNvbmRpdGlvbmFsbHkgdXNlRWZmZWN0IG9uIHRoZSBzZXJ2ZXIgKG5vLW9wKSBhbmRcbi8vIHVzZUxheW91dEVmZmVjdCBpbiB0aGUgYnJvd3Nlci4gV2UgbmVlZCB1c2VMYXlvdXRFZmZlY3QgdG8gZW5zdXJlIHRoZSBzdG9yZVxuLy8gc3Vic2NyaXB0aW9uIGNhbGxiYWNrIGFsd2F5cyBoYXMgdGhlIHNlbGVjdG9yIGZyb20gdGhlIGxhdGVzdCByZW5kZXIgY29tbWl0XG4vLyBhdmFpbGFibGUsIG90aGVyd2lzZSBhIHN0b3JlIHVwZGF0ZSBtYXkgaGFwcGVuIGJldHdlZW4gcmVuZGVyIGFuZCB0aGUgZWZmZWN0LFxuLy8gd2hpY2ggbWF5IGNhdXNlIG1pc3NlZCB1cGRhdGVzOyB3ZSBhbHNvIG11c3QgZW5zdXJlIHRoZSBzdG9yZSBzdWJzY3JpcHRpb25cbi8vIGlzIGNyZWF0ZWQgc3luY2hyb25vdXNseSwgb3RoZXJ3aXNlIGEgc3RvcmUgdXBkYXRlIG1heSBvY2N1ciBiZWZvcmUgdGhlXG4vLyBzdWJzY3JpcHRpb24gaXMgY3JlYXRlZCBhbmQgYW4gaW5jb25zaXN0ZW50IHN0YXRlIG1heSBiZSBvYnNlcnZlZFxuXG5leHBvcnQgdmFyIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09ICd1bmRlZmluZWQnID8gdXNlTGF5b3V0RWZmZWN0IDogdXNlRWZmZWN0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VNZW1vLCB1c2VSZWYsIHVzZVJlZHVjZXIgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc1ZhbGlkRWxlbWVudFR5cGUsIGlzQ29udGV4dENvbnN1bWVyIH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL0NvbnRleHQnOyAvLyBEZWZpbmUgc29tZSBjb25zdGFudCBhcnJheXMganVzdCB0byBhdm9pZCByZS1jcmVhdGluZyB0aGVzZVxuXG52YXIgRU1QVFlfQVJSQVkgPSBbXTtcbnZhciBOT19TVUJTQ1JJUFRJT05fQVJSQVkgPSBbbnVsbCwgbnVsbF07XG5cbnZhciBzdHJpbmdpZnlDb21wb25lbnQgPSBmdW5jdGlvbiBzdHJpbmdpZnlDb21wb25lbnQoQ29tcCkge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShDb21wKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIFN0cmluZyhDb21wKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gc3RvcmVTdGF0ZVVwZGF0ZXNSZWR1Y2VyKHN0YXRlLCBhY3Rpb24pIHtcbiAgdmFyIHVwZGF0ZUNvdW50ID0gc3RhdGVbMV07XG4gIHJldHVybiBbYWN0aW9uLnBheWxvYWQsIHVwZGF0ZUNvdW50ICsgMV07XG59XG5cbmZ1bmN0aW9uIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyhlZmZlY3RGdW5jLCBlZmZlY3RBcmdzLCBkZXBlbmRlbmNpZXMpIHtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGVmZmVjdEZ1bmMuYXBwbHkodm9pZCAwLCBlZmZlY3RBcmdzKTtcbiAgfSwgZGVwZW5kZW5jaWVzKTtcbn1cblxuZnVuY3Rpb24gY2FwdHVyZVdyYXBwZXJQcm9wcyhsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIHdyYXBwZXJQcm9wcywgYWN0dWFsQ2hpbGRQcm9wcywgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3Vicykge1xuICAvLyBXZSB3YW50IHRvIGNhcHR1cmUgdGhlIHdyYXBwZXIgcHJvcHMgYW5kIGNoaWxkIHByb3BzIHdlIHVzZWQgZm9yIGxhdGVyIGNvbXBhcmlzb25zXG4gIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCA9IHdyYXBwZXJQcm9wcztcbiAgbGFzdENoaWxkUHJvcHMuY3VycmVudCA9IGFjdHVhbENoaWxkUHJvcHM7XG4gIHJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQgPSBmYWxzZTsgLy8gSWYgdGhlIHJlbmRlciB3YXMgZnJvbSBhIHN0b3JlIHVwZGF0ZSwgY2xlYXIgb3V0IHRoYXQgcmVmZXJlbmNlIGFuZCBjYXNjYWRlIHRoZSBzdWJzY3JpYmVyIHVwZGF0ZVxuXG4gIGlmIChjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQpIHtcbiAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSBudWxsO1xuICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdWJzY3JpYmVVcGRhdGVzKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcywgc3RvcmUsIHN1YnNjcmlwdGlvbiwgY2hpbGRQcm9wc1NlbGVjdG9yLCBsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMsIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2gpIHtcbiAgLy8gSWYgd2UncmUgbm90IHN1YnNjcmliZWQgdG8gdGhlIHN0b3JlLCBub3RoaW5nIHRvIGRvIGhlcmVcbiAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybjsgLy8gQ2FwdHVyZSB2YWx1ZXMgZm9yIGNoZWNraW5nIGlmIGFuZCB3aGVuIHRoaXMgY29tcG9uZW50IHVubW91bnRzXG5cbiAgdmFyIGRpZFVuc3Vic2NyaWJlID0gZmFsc2U7XG4gIHZhciBsYXN0VGhyb3duRXJyb3IgPSBudWxsOyAvLyBXZSdsbCBydW4gdGhpcyBjYWxsYmFjayBldmVyeSB0aW1lIGEgc3RvcmUgc3Vic2NyaXB0aW9uIHVwZGF0ZSBwcm9wYWdhdGVzIHRvIHRoaXMgY29tcG9uZW50XG5cbiAgdmFyIGNoZWNrRm9yVXBkYXRlcyA9IGZ1bmN0aW9uIGNoZWNrRm9yVXBkYXRlcygpIHtcbiAgICBpZiAoZGlkVW5zdWJzY3JpYmUpIHtcbiAgICAgIC8vIERvbid0IHJ1biBzdGFsZSBsaXN0ZW5lcnMuXG4gICAgICAvLyBSZWR1eCBkb2Vzbid0IGd1YXJhbnRlZSB1bnN1YnNjcmlwdGlvbnMgaGFwcGVuIHVudGlsIG5leHQgZGlzcGF0Y2guXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGxhdGVzdFN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgIHZhciBuZXdDaGlsZFByb3BzLCBlcnJvcjtcblxuICAgIHRyeSB7XG4gICAgICAvLyBBY3R1YWxseSBydW4gdGhlIHNlbGVjdG9yIHdpdGggdGhlIG1vc3QgcmVjZW50IHN0b3JlIHN0YXRlIGFuZCB3cmFwcGVyIHByb3BzXG4gICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlXG4gICAgICBuZXdDaGlsZFByb3BzID0gY2hpbGRQcm9wc1NlbGVjdG9yKGxhdGVzdFN0b3JlU3RhdGUsIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZXJyb3IgPSBlO1xuICAgICAgbGFzdFRocm93bkVycm9yID0gZTtcbiAgICB9XG5cbiAgICBpZiAoIWVycm9yKSB7XG4gICAgICBsYXN0VGhyb3duRXJyb3IgPSBudWxsO1xuICAgIH0gLy8gSWYgdGhlIGNoaWxkIHByb3BzIGhhdmVuJ3QgY2hhbmdlZCwgbm90aGluZyB0byBkbyBoZXJlIC0gY2FzY2FkZSB0aGUgc3Vic2NyaXB0aW9uIHVwZGF0ZVxuXG5cbiAgICBpZiAobmV3Q2hpbGRQcm9wcyA9PT0gbGFzdENoaWxkUHJvcHMuY3VycmVudCkge1xuICAgICAgaWYgKCFyZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50KSB7XG4gICAgICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2F2ZSByZWZlcmVuY2VzIHRvIHRoZSBuZXcgY2hpbGQgcHJvcHMuICBOb3RlIHRoYXQgd2UgdHJhY2sgdGhlIFwiY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGVcIlxuICAgICAgLy8gYXMgYSByZWYgaW5zdGVhZCBvZiBhIHVzZVN0YXRlL3VzZVJlZHVjZXIgYmVjYXVzZSB3ZSBuZWVkIGEgd2F5IHRvIGRldGVybWluZSBpZiB0aGF0IHZhbHVlIGhhc1xuICAgICAgLy8gYmVlbiBwcm9jZXNzZWQuICBJZiB0aGlzIHdlbnQgaW50byB1c2VTdGF0ZS91c2VSZWR1Y2VyLCB3ZSBjb3VsZG4ndCBjbGVhciBvdXQgdGhlIHZhbHVlIHdpdGhvdXRcbiAgICAgIC8vIGZvcmNpbmcgYW5vdGhlciByZS1yZW5kZXIsIHdoaWNoIHdlIGRvbid0IHdhbnQuXG4gICAgICBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50ID0gbmV3Q2hpbGRQcm9wcztcbiAgICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCA9IG5ld0NoaWxkUHJvcHM7XG4gICAgICByZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50ID0gdHJ1ZTsgLy8gSWYgdGhlIGNoaWxkIHByb3BzIF9kaWRfIGNoYW5nZSAob3Igd2UgY2F1Z2h0IGFuIGVycm9yKSwgdGhpcyB3cmFwcGVyIGNvbXBvbmVudCBuZWVkcyB0byByZS1yZW5kZXJcblxuICAgICAgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdTVE9SRV9VUERBVEVEJyxcbiAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgIGVycm9yOiBlcnJvclxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07IC8vIEFjdHVhbGx5IHN1YnNjcmliZSB0byB0aGUgbmVhcmVzdCBjb25uZWN0ZWQgYW5jZXN0b3IgKG9yIHN0b3JlKVxuXG5cbiAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBjaGVja0ZvclVwZGF0ZXM7XG4gIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTsgLy8gUHVsbCBkYXRhIGZyb20gdGhlIHN0b3JlIGFmdGVyIGZpcnN0IHJlbmRlciBpbiBjYXNlIHRoZSBzdG9yZSBoYXNcbiAgLy8gY2hhbmdlZCBzaW5jZSB3ZSBiZWdhbi5cblxuICBjaGVja0ZvclVwZGF0ZXMoKTtcblxuICB2YXIgdW5zdWJzY3JpYmVXcmFwcGVyID0gZnVuY3Rpb24gdW5zdWJzY3JpYmVXcmFwcGVyKCkge1xuICAgIGRpZFVuc3Vic2NyaWJlID0gdHJ1ZTtcbiAgICBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IG51bGw7XG5cbiAgICBpZiAobGFzdFRocm93bkVycm9yKSB7XG4gICAgICAvLyBJdCdzIHBvc3NpYmxlIHRoYXQgd2UgY2F1Z2h0IGFuIGVycm9yIGR1ZSB0byBhIGJhZCBtYXBTdGF0ZSBmdW5jdGlvbiwgYnV0IHRoZVxuICAgICAgLy8gcGFyZW50IHJlLXJlbmRlcmVkIHdpdGhvdXQgdGhpcyBjb21wb25lbnQgYW5kIHdlJ3JlIGFib3V0IHRvIHVubW91bnQuXG4gICAgICAvLyBUaGlzIHNob3VsZG4ndCBoYXBwZW4gYXMgbG9uZyBhcyB3ZSBkbyB0b3AtZG93biBzdWJzY3JpcHRpb25zIGNvcnJlY3RseSwgYnV0XG4gICAgICAvLyBpZiB3ZSBldmVyIGRvIHRob3NlIHdyb25nLCB0aGlzIHRocm93IHdpbGwgc3VyZmFjZSB0aGUgZXJyb3IgaW4gb3VyIHRlc3RzLlxuICAgICAgLy8gSW4gdGhhdCBjYXNlLCB0aHJvdyB0aGUgZXJyb3IgZnJvbSBoZXJlIHNvIGl0IGRvZXNuJ3QgZ2V0IGxvc3QuXG4gICAgICB0aHJvdyBsYXN0VGhyb3duRXJyb3I7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1bnN1YnNjcmliZVdyYXBwZXI7XG59XG5cbnZhciBpbml0U3RhdGVVcGRhdGVzID0gZnVuY3Rpb24gaW5pdFN0YXRlVXBkYXRlcygpIHtcbiAgcmV0dXJuIFtudWxsLCAwXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbm5lY3RBZHZhbmNlZChcbi8qXHJcbiAgc2VsZWN0b3JGYWN0b3J5IGlzIGEgZnVuYyB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciByZXR1cm5pbmcgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uIHVzZWQgdG9cclxuICBjb21wdXRlIG5ldyBwcm9wcyBmcm9tIHN0YXRlLCBwcm9wcywgYW5kIGRpc3BhdGNoLiBGb3IgZXhhbXBsZTpcclxuICAgICAgZXhwb3J0IGRlZmF1bHQgY29ubmVjdEFkdmFuY2VkKChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKHN0YXRlLCBwcm9wcykgPT4gKHtcclxuICAgICAgdGhpbmc6IHN0YXRlLnRoaW5nc1twcm9wcy50aGluZ0lkXSxcclxuICAgICAgc2F2ZVRoaW5nOiBmaWVsZHMgPT4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvcnMuc2F2ZVRoaW5nKHByb3BzLnRoaW5nSWQsIGZpZWxkcykpLFxyXG4gICAgfSkpKFlvdXJDb21wb25lbnQpXHJcbiAgICBBY2Nlc3MgdG8gZGlzcGF0Y2ggaXMgcHJvdmlkZWQgdG8gdGhlIGZhY3Rvcnkgc28gc2VsZWN0b3JGYWN0b3JpZXMgY2FuIGJpbmQgYWN0aW9uQ3JlYXRvcnNcclxuICBvdXRzaWRlIG9mIHRoZWlyIHNlbGVjdG9yIGFzIGFuIG9wdGltaXphdGlvbi4gT3B0aW9ucyBwYXNzZWQgdG8gY29ubmVjdEFkdmFuY2VkIGFyZSBwYXNzZWQgdG9cclxuICB0aGUgc2VsZWN0b3JGYWN0b3J5LCBhbG9uZyB3aXRoIGRpc3BsYXlOYW1lIGFuZCBXcmFwcGVkQ29tcG9uZW50LCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LlxyXG4gICAgTm90ZSB0aGF0IHNlbGVjdG9yRmFjdG9yeSBpcyByZXNwb25zaWJsZSBmb3IgYWxsIGNhY2hpbmcvbWVtb2l6YXRpb24gb2YgaW5ib3VuZCBhbmQgb3V0Ym91bmRcclxuICBwcm9wcy4gRG8gbm90IHVzZSBjb25uZWN0QWR2YW5jZWQgZGlyZWN0bHkgd2l0aG91dCBtZW1vaXppbmcgcmVzdWx0cyBiZXR3ZWVuIGNhbGxzIHRvIHlvdXJcclxuICBzZWxlY3Rvciwgb3RoZXJ3aXNlIHRoZSBDb25uZWN0IGNvbXBvbmVudCB3aWxsIHJlLXJlbmRlciBvbiBldmVyeSBzdGF0ZSBvciBwcm9wcyBjaGFuZ2UuXHJcbiovXG5zZWxlY3RvckZhY3RvcnksIC8vIG9wdGlvbnMgb2JqZWN0OlxuX3JlZikge1xuICBpZiAoX3JlZiA9PT0gdm9pZCAwKSB7XG4gICAgX3JlZiA9IHt9O1xuICB9XG5cbiAgdmFyIF9yZWYyID0gX3JlZixcbiAgICAgIF9yZWYyJGdldERpc3BsYXlOYW1lID0gX3JlZjIuZ2V0RGlzcGxheU5hbWUsXG4gICAgICBnZXREaXNwbGF5TmFtZSA9IF9yZWYyJGdldERpc3BsYXlOYW1lID09PSB2b2lkIDAgPyBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiBcIkNvbm5lY3RBZHZhbmNlZChcIiArIG5hbWUgKyBcIilcIjtcbiAgfSA6IF9yZWYyJGdldERpc3BsYXlOYW1lLFxuICAgICAgX3JlZjIkbWV0aG9kTmFtZSA9IF9yZWYyLm1ldGhvZE5hbWUsXG4gICAgICBtZXRob2ROYW1lID0gX3JlZjIkbWV0aG9kTmFtZSA9PT0gdm9pZCAwID8gJ2Nvbm5lY3RBZHZhbmNlZCcgOiBfcmVmMiRtZXRob2ROYW1lLFxuICAgICAgX3JlZjIkcmVuZGVyQ291bnRQcm9wID0gX3JlZjIucmVuZGVyQ291bnRQcm9wLFxuICAgICAgcmVuZGVyQ291bnRQcm9wID0gX3JlZjIkcmVuZGVyQ291bnRQcm9wID09PSB2b2lkIDAgPyB1bmRlZmluZWQgOiBfcmVmMiRyZW5kZXJDb3VudFByb3AsXG4gICAgICBfcmVmMiRzaG91bGRIYW5kbGVTdGEgPSBfcmVmMi5zaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMgPSBfcmVmMiRzaG91bGRIYW5kbGVTdGEgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmMiRzaG91bGRIYW5kbGVTdGEsXG4gICAgICBfcmVmMiRzdG9yZUtleSA9IF9yZWYyLnN0b3JlS2V5LFxuICAgICAgc3RvcmVLZXkgPSBfcmVmMiRzdG9yZUtleSA9PT0gdm9pZCAwID8gJ3N0b3JlJyA6IF9yZWYyJHN0b3JlS2V5LFxuICAgICAgX3JlZjIkd2l0aFJlZiA9IF9yZWYyLndpdGhSZWYsXG4gICAgICB3aXRoUmVmID0gX3JlZjIkd2l0aFJlZiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiR3aXRoUmVmLFxuICAgICAgX3JlZjIkZm9yd2FyZFJlZiA9IF9yZWYyLmZvcndhcmRSZWYsXG4gICAgICBmb3J3YXJkUmVmID0gX3JlZjIkZm9yd2FyZFJlZiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiRmb3J3YXJkUmVmLFxuICAgICAgX3JlZjIkY29udGV4dCA9IF9yZWYyLmNvbnRleHQsXG4gICAgICBjb250ZXh0ID0gX3JlZjIkY29udGV4dCA9PT0gdm9pZCAwID8gUmVhY3RSZWR1eENvbnRleHQgOiBfcmVmMiRjb250ZXh0LFxuICAgICAgY29ubmVjdE9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgW1wiZ2V0RGlzcGxheU5hbWVcIiwgXCJtZXRob2ROYW1lXCIsIFwicmVuZGVyQ291bnRQcm9wXCIsIFwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzXCIsIFwic3RvcmVLZXlcIiwgXCJ3aXRoUmVmXCIsIFwiZm9yd2FyZFJlZlwiLCBcImNvbnRleHRcIl0pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHJlbmRlckNvdW50UHJvcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyZW5kZXJDb3VudFByb3AgaXMgcmVtb3ZlZC4gcmVuZGVyIGNvdW50aW5nIGlzIGJ1aWx0IGludG8gdGhlIGxhdGVzdCBSZWFjdCBEZXYgVG9vbHMgcHJvZmlsaW5nIGV4dGVuc2lvblwiKTtcbiAgICB9XG5cbiAgICBpZiAod2l0aFJlZikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd3aXRoUmVmIGlzIHJlbW92ZWQuIFRvIGFjY2VzcyB0aGUgd3JhcHBlZCBpbnN0YW5jZSwgdXNlIGEgcmVmIG9uIHRoZSBjb25uZWN0ZWQgY29tcG9uZW50Jyk7XG4gICAgfVxuXG4gICAgdmFyIGN1c3RvbVN0b3JlV2FybmluZ01lc3NhZ2UgPSAnVG8gdXNlIGEgY3VzdG9tIFJlZHV4IHN0b3JlIGZvciBzcGVjaWZpYyBjb21wb25lbnRzLCBjcmVhdGUgYSBjdXN0b20gUmVhY3QgY29udGV4dCB3aXRoICcgKyBcIlJlYWN0LmNyZWF0ZUNvbnRleHQoKSwgYW5kIHBhc3MgdGhlIGNvbnRleHQgb2JqZWN0IHRvIFJlYWN0IFJlZHV4J3MgUHJvdmlkZXIgYW5kIHNwZWNpZmljIGNvbXBvbmVudHNcIiArICcgbGlrZTogPFByb3ZpZGVyIGNvbnRleHQ9e015Q29udGV4dH0+PENvbm5lY3RlZENvbXBvbmVudCBjb250ZXh0PXtNeUNvbnRleHR9IC8+PC9Qcm92aWRlcj4uICcgKyAnWW91IG1heSBhbHNvIHBhc3MgYSB7Y29udGV4dCA6IE15Q29udGV4dH0gb3B0aW9uIHRvIGNvbm5lY3QnO1xuXG4gICAgaWYgKHN0b3JlS2V5ICE9PSAnc3RvcmUnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3N0b3JlS2V5IGhhcyBiZWVuIHJlbW92ZWQgYW5kIGRvZXMgbm90IGRvIGFueXRoaW5nLiAnICsgY3VzdG9tU3RvcmVXYXJuaW5nTWVzc2FnZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIENvbnRleHQgPSBjb250ZXh0O1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcFdpdGhDb25uZWN0KFdyYXBwZWRDb21wb25lbnQpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhaXNWYWxpZEVsZW1lbnRUeXBlKFdyYXBwZWRDb21wb25lbnQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbXVzdCBwYXNzIGEgY29tcG9uZW50IHRvIHRoZSBmdW5jdGlvbiByZXR1cm5lZCBieSBcIiArIChtZXRob2ROYW1lICsgXCIuIEluc3RlYWQgcmVjZWl2ZWQgXCIgKyBzdHJpbmdpZnlDb21wb25lbnQoV3JhcHBlZENvbXBvbmVudCkpKTtcbiAgICB9XG5cbiAgICB2YXIgd3JhcHBlZENvbXBvbmVudE5hbWUgPSBXcmFwcGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IFdyYXBwZWRDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JztcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBnZXREaXNwbGF5TmFtZSh3cmFwcGVkQ29tcG9uZW50TmFtZSk7XG5cbiAgICB2YXIgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyA9IF9leHRlbmRzKHt9LCBjb25uZWN0T3B0aW9ucywge1xuICAgICAgZ2V0RGlzcGxheU5hbWU6IGdldERpc3BsYXlOYW1lLFxuICAgICAgbWV0aG9kTmFtZTogbWV0aG9kTmFtZSxcbiAgICAgIHJlbmRlckNvdW50UHJvcDogcmVuZGVyQ291bnRQcm9wLFxuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzdG9yZUtleTogc3RvcmVLZXksXG4gICAgICBkaXNwbGF5TmFtZTogZGlzcGxheU5hbWUsXG4gICAgICB3cmFwcGVkQ29tcG9uZW50TmFtZTogd3JhcHBlZENvbXBvbmVudE5hbWUsXG4gICAgICBXcmFwcGVkQ29tcG9uZW50OiBXcmFwcGVkQ29tcG9uZW50XG4gICAgfSk7XG5cbiAgICB2YXIgcHVyZSA9IGNvbm5lY3RPcHRpb25zLnB1cmU7XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVDaGlsZFNlbGVjdG9yKHN0b3JlKSB7XG4gICAgICByZXR1cm4gc2VsZWN0b3JGYWN0b3J5KHN0b3JlLmRpc3BhdGNoLCBzZWxlY3RvckZhY3RvcnlPcHRpb25zKTtcbiAgICB9IC8vIElmIHdlIGFyZW4ndCBydW5uaW5nIGluIFwicHVyZVwiIG1vZGUsIHdlIGRvbid0IHdhbnQgdG8gbWVtb2l6ZSB2YWx1ZXMuXG4gICAgLy8gVG8gYXZvaWQgY29uZGl0aW9uYWxseSBjYWxsaW5nIGhvb2tzLCB3ZSBmYWxsIGJhY2sgdG8gYSB0aW55IHdyYXBwZXJcbiAgICAvLyB0aGF0IGp1c3QgZXhlY3V0ZXMgdGhlIGdpdmVuIGNhbGxiYWNrIGltbWVkaWF0ZWx5LlxuXG5cbiAgICB2YXIgdXNlUHVyZU9ubHlNZW1vID0gcHVyZSA/IHVzZU1lbW8gOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBDb25uZWN0RnVuY3Rpb24ocHJvcHMpIHtcbiAgICAgIHZhciBfdXNlTWVtbyA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBEaXN0aW5ndWlzaCBiZXR3ZWVuIGFjdHVhbCBcImRhdGFcIiBwcm9wcyB0aGF0IHdlcmUgcGFzc2VkIHRvIHRoZSB3cmFwcGVyIGNvbXBvbmVudCxcbiAgICAgICAgLy8gYW5kIHZhbHVlcyBuZWVkZWQgdG8gY29udHJvbCBiZWhhdmlvciAoZm9yd2FyZGVkIHJlZnMsIGFsdGVybmF0ZSBjb250ZXh0IGluc3RhbmNlcykuXG4gICAgICAgIC8vIFRvIG1haW50YWluIHRoZSB3cmFwcGVyUHJvcHMgb2JqZWN0IHJlZmVyZW5jZSwgbWVtb2l6ZSB0aGlzIGRlc3RydWN0dXJpbmcuXG4gICAgICAgIHZhciBmb3J3YXJkZWRSZWYgPSBwcm9wcy5mb3J3YXJkZWRSZWYsXG4gICAgICAgICAgICB3cmFwcGVyUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgW1wiZm9yd2FyZGVkUmVmXCJdKTtcblxuICAgICAgICByZXR1cm4gW3Byb3BzLmNvbnRleHQsIGZvcndhcmRlZFJlZiwgd3JhcHBlclByb3BzXTtcbiAgICAgIH0sIFtwcm9wc10pLFxuICAgICAgICAgIHByb3BzQ29udGV4dCA9IF91c2VNZW1vWzBdLFxuICAgICAgICAgIGZvcndhcmRlZFJlZiA9IF91c2VNZW1vWzFdLFxuICAgICAgICAgIHdyYXBwZXJQcm9wcyA9IF91c2VNZW1vWzJdO1xuXG4gICAgICB2YXIgQ29udGV4dFRvVXNlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFVzZXJzIG1heSBvcHRpb25hbGx5IHBhc3MgaW4gYSBjdXN0b20gY29udGV4dCBpbnN0YW5jZSB0byB1c2UgaW5zdGVhZCBvZiBvdXIgUmVhY3RSZWR1eENvbnRleHQuXG4gICAgICAgIC8vIE1lbW9pemUgdGhlIGNoZWNrIHRoYXQgZGV0ZXJtaW5lcyB3aGljaCBjb250ZXh0IGluc3RhbmNlIHdlIHNob3VsZCB1c2UuXG4gICAgICAgIHJldHVybiBwcm9wc0NvbnRleHQgJiYgcHJvcHNDb250ZXh0LkNvbnN1bWVyICYmIGlzQ29udGV4dENvbnN1bWVyKFJlYWN0LmNyZWF0ZUVsZW1lbnQocHJvcHNDb250ZXh0LkNvbnN1bWVyLCBudWxsKSkgPyBwcm9wc0NvbnRleHQgOiBDb250ZXh0O1xuICAgICAgfSwgW3Byb3BzQ29udGV4dCwgQ29udGV4dF0pOyAvLyBSZXRyaWV2ZSB0aGUgc3RvcmUgYW5kIGFuY2VzdG9yIHN1YnNjcmlwdGlvbiB2aWEgY29udGV4dCwgaWYgYXZhaWxhYmxlXG5cbiAgICAgIHZhciBjb250ZXh0VmFsdWUgPSB1c2VDb250ZXh0KENvbnRleHRUb1VzZSk7IC8vIFRoZSBzdG9yZSBfbXVzdF8gZXhpc3QgYXMgZWl0aGVyIGEgcHJvcCBvciBpbiBjb250ZXh0LlxuICAgICAgLy8gV2UnbGwgY2hlY2sgdG8gc2VlIGlmIGl0IF9sb29rc18gbGlrZSBhIFJlZHV4IHN0b3JlIGZpcnN0LlxuICAgICAgLy8gVGhpcyBhbGxvd3MgdXMgdG8gcGFzcyB0aHJvdWdoIGEgYHN0b3JlYCBwcm9wIHRoYXQgaXMganVzdCBhIHBsYWluIHZhbHVlLlxuXG4gICAgICB2YXIgZGlkU3RvcmVDb21lRnJvbVByb3BzID0gQm9vbGVhbihwcm9wcy5zdG9yZSkgJiYgQm9vbGVhbihwcm9wcy5zdG9yZS5nZXRTdGF0ZSkgJiYgQm9vbGVhbihwcm9wcy5zdG9yZS5kaXNwYXRjaCk7XG4gICAgICB2YXIgZGlkU3RvcmVDb21lRnJvbUNvbnRleHQgPSBCb29sZWFuKGNvbnRleHRWYWx1ZSkgJiYgQm9vbGVhbihjb250ZXh0VmFsdWUuc3RvcmUpO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhZGlkU3RvcmVDb21lRnJvbVByb3BzICYmICFkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZmluZCBcXFwic3RvcmVcXFwiIGluIHRoZSBjb250ZXh0IG9mIFwiICsgKFwiXFxcIlwiICsgZGlzcGxheU5hbWUgKyBcIlxcXCIuIEVpdGhlciB3cmFwIHRoZSByb290IGNvbXBvbmVudCBpbiBhIDxQcm92aWRlcj4sIFwiKSArIFwib3IgcGFzcyBhIGN1c3RvbSBSZWFjdCBjb250ZXh0IHByb3ZpZGVyIHRvIDxQcm92aWRlcj4gYW5kIHRoZSBjb3JyZXNwb25kaW5nIFwiICsgKFwiUmVhY3QgY29udGV4dCBjb25zdW1lciB0byBcIiArIGRpc3BsYXlOYW1lICsgXCIgaW4gY29ubmVjdCBvcHRpb25zLlwiKSk7XG4gICAgICB9IC8vIEJhc2VkIG9uIHRoZSBwcmV2aW91cyBjaGVjaywgb25lIG9mIHRoZXNlIG11c3QgYmUgdHJ1ZVxuXG5cbiAgICAgIHZhciBzdG9yZSA9IGRpZFN0b3JlQ29tZUZyb21Qcm9wcyA/IHByb3BzLnN0b3JlIDogY29udGV4dFZhbHVlLnN0b3JlO1xuICAgICAgdmFyIGNoaWxkUHJvcHNTZWxlY3RvciA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBUaGUgY2hpbGQgcHJvcHMgc2VsZWN0b3IgbmVlZHMgdGhlIHN0b3JlIHJlZmVyZW5jZSBhcyBhbiBpbnB1dC5cbiAgICAgICAgLy8gUmUtY3JlYXRlIHRoaXMgc2VsZWN0b3Igd2hlbmV2ZXIgdGhlIHN0b3JlIGNoYW5nZXMuXG4gICAgICAgIHJldHVybiBjcmVhdGVDaGlsZFNlbGVjdG9yKHN0b3JlKTtcbiAgICAgIH0sIFtzdG9yZV0pO1xuXG4gICAgICB2YXIgX3VzZU1lbW8yID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm4gTk9fU1VCU0NSSVBUSU9OX0FSUkFZOyAvLyBUaGlzIFN1YnNjcmlwdGlvbidzIHNvdXJjZSBzaG91bGQgbWF0Y2ggd2hlcmUgc3RvcmUgY2FtZSBmcm9tOiBwcm9wcyB2cy4gY29udGV4dC4gQSBjb21wb25lbnRcbiAgICAgICAgLy8gY29ubmVjdGVkIHRvIHRoZSBzdG9yZSB2aWEgcHJvcHMgc2hvdWxkbid0IHVzZSBzdWJzY3JpcHRpb24gZnJvbSBjb250ZXh0LCBvciB2aWNlIHZlcnNhLlxuXG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKHN0b3JlLCBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPyBudWxsIDogY29udGV4dFZhbHVlLnN1YnNjcmlwdGlvbik7IC8vIGBub3RpZnlOZXN0ZWRTdWJzYCBpcyBkdXBsaWNhdGVkIHRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZCBpblxuICAgICAgICAvLyB0aGUgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcCwgd2hlcmUgYHN1YnNjcmlwdGlvbmAgd2lsbCB0aGVuIGJlIG51bGwuIFRoaXMgY2FuXG4gICAgICAgIC8vIHByb2JhYmx5IGJlIGF2b2lkZWQgaWYgU3Vic2NyaXB0aW9uJ3MgbGlzdGVuZXJzIGxvZ2ljIGlzIGNoYW5nZWQgdG8gbm90IGNhbGwgbGlzdGVuZXJzXG4gICAgICAgIC8vIHRoYXQgaGF2ZSBiZWVuIHVuc3Vic2NyaWJlZCBpbiB0aGUgIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AuXG5cbiAgICAgICAgdmFyIG5vdGlmeU5lc3RlZFN1YnMgPSBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3Vicy5iaW5kKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIHJldHVybiBbc3Vic2NyaXB0aW9uLCBub3RpZnlOZXN0ZWRTdWJzXTtcbiAgICAgIH0sIFtzdG9yZSwgZGlkU3RvcmVDb21lRnJvbVByb3BzLCBjb250ZXh0VmFsdWVdKSxcbiAgICAgICAgICBzdWJzY3JpcHRpb24gPSBfdXNlTWVtbzJbMF0sXG4gICAgICAgICAgbm90aWZ5TmVzdGVkU3VicyA9IF91c2VNZW1vMlsxXTsgLy8gRGV0ZXJtaW5lIHdoYXQge3N0b3JlLCBzdWJzY3JpcHRpb259IHZhbHVlIHNob3VsZCBiZSBwdXQgaW50byBuZXN0ZWQgY29udGV4dCwgaWYgbmVjZXNzYXJ5LFxuICAgICAgLy8gYW5kIG1lbW9pemUgdGhhdCB2YWx1ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSBjb250ZXh0IHVwZGF0ZXMuXG5cblxuICAgICAgdmFyIG92ZXJyaWRkZW5Db250ZXh0VmFsdWUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGRpZFN0b3JlQ29tZUZyb21Qcm9wcykge1xuICAgICAgICAgIC8vIFRoaXMgY29tcG9uZW50IGlzIGRpcmVjdGx5IHN1YnNjcmliZWQgdG8gYSBzdG9yZSBmcm9tIHByb3BzLlxuICAgICAgICAgIC8vIFdlIGRvbid0IHdhbnQgZGVzY2VuZGFudHMgcmVhZGluZyBmcm9tIHRoaXMgc3RvcmUgLSBwYXNzIGRvd24gd2hhdGV2ZXJcbiAgICAgICAgICAvLyB0aGUgZXhpc3RpbmcgY29udGV4dCB2YWx1ZSBpcyBmcm9tIHRoZSBuZWFyZXN0IGNvbm5lY3RlZCBhbmNlc3Rvci5cbiAgICAgICAgICByZXR1cm4gY29udGV4dFZhbHVlO1xuICAgICAgICB9IC8vIE90aGVyd2lzZSwgcHV0IHRoaXMgY29tcG9uZW50J3Mgc3Vic2NyaXB0aW9uIGluc3RhbmNlIGludG8gY29udGV4dCwgc28gdGhhdFxuICAgICAgICAvLyBjb25uZWN0ZWQgZGVzY2VuZGFudHMgd29uJ3QgdXBkYXRlIHVudGlsIGFmdGVyIHRoaXMgY29tcG9uZW50IGlzIGRvbmVcblxuXG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgY29udGV4dFZhbHVlLCB7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb25cbiAgICAgICAgfSk7XG4gICAgICB9LCBbZGlkU3RvcmVDb21lRnJvbVByb3BzLCBjb250ZXh0VmFsdWUsIHN1YnNjcmlwdGlvbl0pOyAvLyBXZSBuZWVkIHRvIGZvcmNlIHRoaXMgd3JhcHBlciBjb21wb25lbnQgdG8gcmUtcmVuZGVyIHdoZW5ldmVyIGEgUmVkdXggc3RvcmUgdXBkYXRlXG4gICAgICAvLyBjYXVzZXMgYSBjaGFuZ2UgdG8gdGhlIGNhbGN1bGF0ZWQgY2hpbGQgY29tcG9uZW50IHByb3BzIChvciB3ZSBjYXVnaHQgYW4gZXJyb3IgaW4gbWFwU3RhdGUpXG5cbiAgICAgIHZhciBfdXNlUmVkdWNlciA9IHVzZVJlZHVjZXIoc3RvcmVTdGF0ZVVwZGF0ZXNSZWR1Y2VyLCBFTVBUWV9BUlJBWSwgaW5pdFN0YXRlVXBkYXRlcyksXG4gICAgICAgICAgX3VzZVJlZHVjZXIkID0gX3VzZVJlZHVjZXJbMF0sXG4gICAgICAgICAgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdCA9IF91c2VSZWR1Y2VyJFswXSxcbiAgICAgICAgICBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoID0gX3VzZVJlZHVjZXJbMV07IC8vIFByb3BhZ2F0ZSBhbnkgbWFwU3RhdGUvbWFwRGlzcGF0Y2ggZXJyb3JzIHVwd2FyZHNcblxuXG4gICAgICBpZiAocHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdCAmJiBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LmVycm9yKSB7XG4gICAgICAgIHRocm93IHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQuZXJyb3I7XG4gICAgICB9IC8vIFNldCB1cCByZWZzIHRvIGNvb3JkaW5hdGUgdmFsdWVzIGJldHdlZW4gdGhlIHN1YnNjcmlwdGlvbiBlZmZlY3QgYW5kIHRoZSByZW5kZXIgbG9naWNcblxuXG4gICAgICB2YXIgbGFzdENoaWxkUHJvcHMgPSB1c2VSZWYoKTtcbiAgICAgIHZhciBsYXN0V3JhcHBlclByb3BzID0gdXNlUmVmKHdyYXBwZXJQcm9wcyk7XG4gICAgICB2YXIgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSA9IHVzZVJlZigpO1xuICAgICAgdmFyIHJlbmRlcklzU2NoZWR1bGVkID0gdXNlUmVmKGZhbHNlKTtcbiAgICAgIHZhciBhY3R1YWxDaGlsZFByb3BzID0gdXNlUHVyZU9ubHlNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVHJpY2t5IGxvZ2ljIGhlcmU6XG4gICAgICAgIC8vIC0gVGhpcyByZW5kZXIgbWF5IGhhdmUgYmVlbiB0cmlnZ2VyZWQgYnkgYSBSZWR1eCBzdG9yZSB1cGRhdGUgdGhhdCBwcm9kdWNlZCBuZXcgY2hpbGQgcHJvcHNcbiAgICAgICAgLy8gLSBIb3dldmVyLCB3ZSBtYXkgaGF2ZSBnb3R0ZW4gbmV3IHdyYXBwZXIgcHJvcHMgYWZ0ZXIgdGhhdFxuICAgICAgICAvLyBJZiB3ZSBoYXZlIG5ldyBjaGlsZCBwcm9wcywgYW5kIHRoZSBzYW1lIHdyYXBwZXIgcHJvcHMsIHdlIGtub3cgd2Ugc2hvdWxkIHVzZSB0aGUgbmV3IGNoaWxkIHByb3BzIGFzLWlzLlxuICAgICAgICAvLyBCdXQsIGlmIHdlIGhhdmUgbmV3IHdyYXBwZXIgcHJvcHMsIHRob3NlIG1pZ2h0IGNoYW5nZSB0aGUgY2hpbGQgcHJvcHMsIHNvIHdlIGhhdmUgdG8gcmVjYWxjdWxhdGUgdGhpbmdzLlxuICAgICAgICAvLyBTbywgd2UnbGwgdXNlIHRoZSBjaGlsZCBwcm9wcyBmcm9tIHN0b3JlIHVwZGF0ZSBvbmx5IGlmIHRoZSB3cmFwcGVyIHByb3BzIGFyZSB0aGUgc2FtZSBhcyBsYXN0IHRpbWUuXG4gICAgICAgIGlmIChjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgJiYgd3JhcHBlclByb3BzID09PSBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQpIHtcbiAgICAgICAgICByZXR1cm4gY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50O1xuICAgICAgICB9IC8vIFRPRE8gV2UncmUgcmVhZGluZyB0aGUgc3RvcmUgZGlyZWN0bHkgaW4gcmVuZGVyKCkgaGVyZS4gQmFkIGlkZWE/XG4gICAgICAgIC8vIFRoaXMgd2lsbCBsaWtlbHkgY2F1c2UgQmFkIFRoaW5ncyAoVE0pIHRvIGhhcHBlbiBpbiBDb25jdXJyZW50IE1vZGUuXG4gICAgICAgIC8vIE5vdGUgdGhhdCB3ZSBkbyB0aGlzIGJlY2F1c2Ugb24gcmVuZGVycyBfbm90XyBjYXVzZWQgYnkgc3RvcmUgdXBkYXRlcywgd2UgbmVlZCB0aGUgbGF0ZXN0IHN0b3JlIHN0YXRlXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB3aGF0IHRoZSBjaGlsZCBwcm9wcyBzaG91bGQgYmUuXG5cblxuICAgICAgICByZXR1cm4gY2hpbGRQcm9wc1NlbGVjdG9yKHN0b3JlLmdldFN0YXRlKCksIHdyYXBwZXJQcm9wcyk7XG4gICAgICB9LCBbc3RvcmUsIHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQsIHdyYXBwZXJQcm9wc10pOyAvLyBXZSBuZWVkIHRoaXMgdG8gZXhlY3V0ZSBzeW5jaHJvbm91c2x5IGV2ZXJ5IHRpbWUgd2UgcmUtcmVuZGVyLiBIb3dldmVyLCBSZWFjdCB3YXJuc1xuICAgICAgLy8gYWJvdXQgdXNlTGF5b3V0RWZmZWN0IGluIFNTUiwgc28gd2UgdHJ5IHRvIGRldGVjdCBlbnZpcm9ubWVudCBhbmQgZmFsbCBiYWNrIHRvXG4gICAgICAvLyBqdXN0IHVzZUVmZmVjdCBpbnN0ZWFkIHRvIGF2b2lkIHRoZSB3YXJuaW5nLCBzaW5jZSBuZWl0aGVyIHdpbGwgcnVuIGFueXdheS5cblxuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFdpdGhBcmdzKGNhcHR1cmVXcmFwcGVyUHJvcHMsIFtsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIHdyYXBwZXJQcm9wcywgYWN0dWFsQ2hpbGRQcm9wcywgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3Vic10pOyAvLyBPdXIgcmUtc3Vic2NyaWJlIGxvZ2ljIG9ubHkgcnVucyB3aGVuIHRoZSBzdG9yZS9zdWJzY3JpcHRpb24gc2V0dXAgY2hhbmdlc1xuXG4gICAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0V2l0aEFyZ3Moc3Vic2NyaWJlVXBkYXRlcywgW3Nob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcywgc3RvcmUsIHN1YnNjcmlwdGlvbiwgY2hpbGRQcm9wc1NlbGVjdG9yLCBsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMsIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2hdLCBbc3RvcmUsIHN1YnNjcmlwdGlvbiwgY2hpbGRQcm9wc1NlbGVjdG9yXSk7IC8vIE5vdyB0aGF0IGFsbCB0aGF0J3MgZG9uZSwgd2UgY2FuIGZpbmFsbHkgdHJ5IHRvIGFjdHVhbGx5IHJlbmRlciB0aGUgY2hpbGQgY29tcG9uZW50LlxuICAgICAgLy8gV2UgbWVtb2l6ZSB0aGUgZWxlbWVudHMgZm9yIHRoZSByZW5kZXJlZCBjaGlsZCBjb21wb25lbnQgYXMgYW4gb3B0aW1pemF0aW9uLlxuXG4gICAgICB2YXIgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50ID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIF9leHRlbmRzKHt9LCBhY3R1YWxDaGlsZFByb3BzLCB7XG4gICAgICAgICAgcmVmOiBmb3J3YXJkZWRSZWZcbiAgICAgICAgfSkpO1xuICAgICAgfSwgW2ZvcndhcmRlZFJlZiwgV3JhcHBlZENvbXBvbmVudCwgYWN0dWFsQ2hpbGRQcm9wc10pOyAvLyBJZiBSZWFjdCBzZWVzIHRoZSBleGFjdCBzYW1lIGVsZW1lbnQgcmVmZXJlbmNlIGFzIGxhc3QgdGltZSwgaXQgYmFpbHMgb3V0IG9mIHJlLXJlbmRlcmluZ1xuICAgICAgLy8gdGhhdCBjaGlsZCwgc2FtZSBhcyBpZiBpdCB3YXMgd3JhcHBlZCBpbiBSZWFjdC5tZW1vKCkgb3IgcmV0dXJuZWQgZmFsc2UgZnJvbSBzaG91bGRDb21wb25lbnRVcGRhdGUuXG5cbiAgICAgIHZhciByZW5kZXJlZENoaWxkID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHtcbiAgICAgICAgICAvLyBJZiB0aGlzIGNvbXBvbmVudCBpcyBzdWJzY3JpYmVkIHRvIHN0b3JlIHVwZGF0ZXMsIHdlIG5lZWQgdG8gcGFzcyBpdHMgb3duXG4gICAgICAgICAgLy8gc3Vic2NyaXB0aW9uIGluc3RhbmNlIGRvd24gdG8gb3VyIGRlc2NlbmRhbnRzLiBUaGF0IG1lYW5zIHJlbmRlcmluZyB0aGUgc2FtZVxuICAgICAgICAgIC8vIENvbnRleHQgaW5zdGFuY2UsIGFuZCBwdXR0aW5nIGEgZGlmZmVyZW50IHZhbHVlIGludG8gdGhlIGNvbnRleHQuXG4gICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGV4dFRvVXNlLlByb3ZpZGVyLCB7XG4gICAgICAgICAgICB2YWx1ZTogb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZVxuICAgICAgICAgIH0sIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50O1xuICAgICAgfSwgW0NvbnRleHRUb1VzZSwgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50LCBvdmVycmlkZGVuQ29udGV4dFZhbHVlXSk7XG4gICAgICByZXR1cm4gcmVuZGVyZWRDaGlsZDtcbiAgICB9IC8vIElmIHdlJ3JlIGluIFwicHVyZVwiIG1vZGUsIGVuc3VyZSBvdXIgd3JhcHBlciBjb21wb25lbnQgb25seSByZS1yZW5kZXJzIHdoZW4gaW5jb21pbmcgcHJvcHMgaGF2ZSBjaGFuZ2VkLlxuXG5cbiAgICB2YXIgQ29ubmVjdCA9IHB1cmUgPyBSZWFjdC5tZW1vKENvbm5lY3RGdW5jdGlvbikgOiBDb25uZWN0RnVuY3Rpb247XG4gICAgQ29ubmVjdC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICBDb25uZWN0LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG5cbiAgICBpZiAoZm9yd2FyZFJlZikge1xuICAgICAgdmFyIGZvcndhcmRlZCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gZm9yd2FyZENvbm5lY3RSZWYocHJvcHMsIHJlZikge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb25uZWN0LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICBmb3J3YXJkZWRSZWY6IHJlZlxuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICAgIGZvcndhcmRlZC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICAgICAgZm9yd2FyZGVkLldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgICAgcmV0dXJuIGhvaXN0U3RhdGljcyhmb3J3YXJkZWQsIFdyYXBwZWRDb21wb25lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBob2lzdFN0YXRpY3MoQ29ubmVjdCwgV3JhcHBlZENvbXBvbmVudCk7XG4gIH07XG59IiwiZnVuY3Rpb24gaXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAodHlwZW9mIG9iakEgIT09ICdvYmplY3QnIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn0iLCJpbXBvcnQgJCRvYnNlcnZhYmxlIGZyb20gJ3N5bWJvbC1vYnNlcnZhYmxlJztcblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbnZhciByYW5kb21TdHJpbmcgPSBmdW5jdGlvbiByYW5kb21TdHJpbmcoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKTtcbn07XG5cbnZhciBBY3Rpb25UeXBlcyA9IHtcbiAgSU5JVDogXCJAQHJlZHV4L0lOSVRcIiArIHJhbmRvbVN0cmluZygpLFxuICBSRVBMQUNFOiBcIkBAcmVkdXgvUkVQTEFDRVwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFBST0JFX1VOS05PV05fQUNUSU9OOiBmdW5jdGlvbiBQUk9CRV9VTktOT1dOX0FDVElPTigpIHtcbiAgICByZXR1cm4gXCJAQHJlZHV4L1BST0JFX1VOS05PV05fQUNUSU9OXCIgKyByYW5kb21TdHJpbmcoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gb2JqIFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIHZhciBwcm90byA9IG9iajtcblxuICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSAhPT0gbnVsbCkge1xuICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gcHJvdG87XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIFJlZHV4IHN0b3JlIHRoYXQgaG9sZHMgdGhlIHN0YXRlIHRyZWUuXG4gKiBUaGUgb25seSB3YXkgdG8gY2hhbmdlIHRoZSBkYXRhIGluIHRoZSBzdG9yZSBpcyB0byBjYWxsIGBkaXNwYXRjaCgpYCBvbiBpdC5cbiAqXG4gKiBUaGVyZSBzaG91bGQgb25seSBiZSBhIHNpbmdsZSBzdG9yZSBpbiB5b3VyIGFwcC4gVG8gc3BlY2lmeSBob3cgZGlmZmVyZW50XG4gKiBwYXJ0cyBvZiB0aGUgc3RhdGUgdHJlZSByZXNwb25kIHRvIGFjdGlvbnMsIHlvdSBtYXkgY29tYmluZSBzZXZlcmFsIHJlZHVjZXJzXG4gKiBpbnRvIGEgc2luZ2xlIHJlZHVjZXIgZnVuY3Rpb24gYnkgdXNpbmcgYGNvbWJpbmVSZWR1Y2Vyc2AuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVkdWNlciBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgbmV4dCBzdGF0ZSB0cmVlLCBnaXZlblxuICogdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGFjdGlvbiB0byBoYW5kbGUuXG4gKlxuICogQHBhcmFtIHthbnl9IFtwcmVsb2FkZWRTdGF0ZV0gVGhlIGluaXRpYWwgc3RhdGUuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBoeWRyYXRlIHRoZSBzdGF0ZSBmcm9tIHRoZSBzZXJ2ZXIgaW4gdW5pdmVyc2FsIGFwcHMsIG9yIHRvIHJlc3RvcmUgYVxuICogcHJldmlvdXNseSBzZXJpYWxpemVkIHVzZXIgc2Vzc2lvbi5cbiAqIElmIHlvdSB1c2UgYGNvbWJpbmVSZWR1Y2Vyc2AgdG8gcHJvZHVjZSB0aGUgcm9vdCByZWR1Y2VyIGZ1bmN0aW9uLCB0aGlzIG11c3QgYmVcbiAqIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlIGFzIGBjb21iaW5lUmVkdWNlcnNgIGtleXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2VuaGFuY2VyXSBUaGUgc3RvcmUgZW5oYW5jZXIuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBlbmhhbmNlIHRoZSBzdG9yZSB3aXRoIHRoaXJkLXBhcnR5IGNhcGFiaWxpdGllcyBzdWNoIGFzIG1pZGRsZXdhcmUsXG4gKiB0aW1lIHRyYXZlbCwgcGVyc2lzdGVuY2UsIGV0Yy4gVGhlIG9ubHkgc3RvcmUgZW5oYW5jZXIgdGhhdCBzaGlwcyB3aXRoIFJlZHV4XG4gKiBpcyBgYXBwbHlNaWRkbGV3YXJlKClgLlxuICpcbiAqIEByZXR1cm5zIHtTdG9yZX0gQSBSZWR1eCBzdG9yZSB0aGF0IGxldHMgeW91IHJlYWQgdGhlIHN0YXRlLCBkaXNwYXRjaCBhY3Rpb25zXG4gKiBhbmQgc3Vic2NyaWJlIHRvIGNoYW5nZXMuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlU3RvcmUocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGVuaGFuY2VyKSB7XG4gIHZhciBfcmVmMjtcblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGFyZ3VtZW50c1szXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignSXQgbG9va3MgbGlrZSB5b3UgYXJlIHBhc3Npbmcgc2V2ZXJhbCBzdG9yZSBlbmhhbmNlcnMgdG8gJyArICdjcmVhdGVTdG9yZSgpLiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQuIEluc3RlYWQsIGNvbXBvc2UgdGhlbSAnICsgJ3RvZ2V0aGVyIHRvIGEgc2luZ2xlIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZW5oYW5jZXIgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgICBwcmVsb2FkZWRTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgZW5oYW5jZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW5oYW5jZXIoY3JlYXRlU3RvcmUpKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIHJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciBjdXJyZW50UmVkdWNlciA9IHJlZHVjZXI7XG4gIHZhciBjdXJyZW50U3RhdGUgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgdmFyIGN1cnJlbnRMaXN0ZW5lcnMgPSBbXTtcbiAgdmFyIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzO1xuICB2YXIgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAvKipcbiAgICogVGhpcyBtYWtlcyBhIHNoYWxsb3cgY29weSBvZiBjdXJyZW50TGlzdGVuZXJzIHNvIHdlIGNhbiB1c2VcbiAgICogbmV4dExpc3RlbmVycyBhcyBhIHRlbXBvcmFyeSBsaXN0IHdoaWxlIGRpc3BhdGNoaW5nLlxuICAgKlxuICAgKiBUaGlzIHByZXZlbnRzIGFueSBidWdzIGFyb3VuZCBjb25zdW1lcnMgY2FsbGluZ1xuICAgKiBzdWJzY3JpYmUvdW5zdWJzY3JpYmUgaW4gdGhlIG1pZGRsZSBvZiBhIGRpc3BhdGNoLlxuICAgKi9cblxuICBmdW5jdGlvbiBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCkge1xuICAgIGlmIChuZXh0TGlzdGVuZXJzID09PSBjdXJyZW50TGlzdGVuZXJzKSB7XG4gICAgICBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycy5zbGljZSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVhZHMgdGhlIHN0YXRlIHRyZWUgbWFuYWdlZCBieSB0aGUgc3RvcmUuXG4gICAqXG4gICAqIEByZXR1cm5zIHthbnl9IFRoZSBjdXJyZW50IHN0YXRlIHRyZWUgb2YgeW91ciBhcHBsaWNhdGlvbi5cbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRTdGF0ZSgpIHtcbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLmdldFN0YXRlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1RoZSByZWR1Y2VyIGhhcyBhbHJlYWR5IHJlY2VpdmVkIHRoZSBzdGF0ZSBhcyBhbiBhcmd1bWVudC4gJyArICdQYXNzIGl0IGRvd24gZnJvbSB0aGUgdG9wIHJlZHVjZXIgaW5zdGVhZCBvZiByZWFkaW5nIGl0IGZyb20gdGhlIHN0b3JlLicpO1xuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50U3RhdGU7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgYSBjaGFuZ2UgbGlzdGVuZXIuIEl0IHdpbGwgYmUgY2FsbGVkIGFueSB0aW1lIGFuIGFjdGlvbiBpcyBkaXNwYXRjaGVkLFxuICAgKiBhbmQgc29tZSBwYXJ0IG9mIHRoZSBzdGF0ZSB0cmVlIG1heSBwb3RlbnRpYWxseSBoYXZlIGNoYW5nZWQuIFlvdSBtYXkgdGhlblxuICAgKiBjYWxsIGBnZXRTdGF0ZSgpYCB0byByZWFkIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgaW5zaWRlIHRoZSBjYWxsYmFjay5cbiAgICpcbiAgICogWW91IG1heSBjYWxsIGBkaXNwYXRjaCgpYCBmcm9tIGEgY2hhbmdlIGxpc3RlbmVyLCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogY2F2ZWF0czpcbiAgICpcbiAgICogMS4gVGhlIHN1YnNjcmlwdGlvbnMgYXJlIHNuYXBzaG90dGVkIGp1c3QgYmVmb3JlIGV2ZXJ5IGBkaXNwYXRjaCgpYCBjYWxsLlxuICAgKiBJZiB5b3Ugc3Vic2NyaWJlIG9yIHVuc3Vic2NyaWJlIHdoaWxlIHRoZSBsaXN0ZW5lcnMgYXJlIGJlaW5nIGludm9rZWQsIHRoaXNcbiAgICogd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0IG9uIHRoZSBgZGlzcGF0Y2goKWAgdGhhdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuXG4gICAqIEhvd2V2ZXIsIHRoZSBuZXh0IGBkaXNwYXRjaCgpYCBjYWxsLCB3aGV0aGVyIG5lc3RlZCBvciBub3QsIHdpbGwgdXNlIGEgbW9yZVxuICAgKiByZWNlbnQgc25hcHNob3Qgb2YgdGhlIHN1YnNjcmlwdGlvbiBsaXN0LlxuICAgKlxuICAgKiAyLiBUaGUgbGlzdGVuZXIgc2hvdWxkIG5vdCBleHBlY3QgdG8gc2VlIGFsbCBzdGF0ZSBjaGFuZ2VzLCBhcyB0aGUgc3RhdGVcbiAgICogbWlnaHQgaGF2ZSBiZWVuIHVwZGF0ZWQgbXVsdGlwbGUgdGltZXMgZHVyaW5nIGEgbmVzdGVkIGBkaXNwYXRjaCgpYCBiZWZvcmVcbiAgICogdGhlIGxpc3RlbmVyIGlzIGNhbGxlZC4gSXQgaXMsIGhvd2V2ZXIsIGd1YXJhbnRlZWQgdGhhdCBhbGwgc3Vic2NyaWJlcnNcbiAgICogcmVnaXN0ZXJlZCBiZWZvcmUgdGhlIGBkaXNwYXRjaCgpYCBzdGFydGVkIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGxhdGVzdFxuICAgKiBzdGF0ZSBieSB0aGUgdGltZSBpdCBleGl0cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgQSBjYWxsYmFjayB0byBiZSBpbnZva2VkIG9uIGV2ZXJ5IGRpc3BhdGNoLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoaXMgY2hhbmdlIGxpc3RlbmVyLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5zdWJzY3JpYmUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgJyArICdjb21wb25lbnQgYW5kIGludm9rZSBzdG9yZS5nZXRTdGF0ZSgpIGluIHRoZSBjYWxsYmFjayB0byBhY2Nlc3MgdGhlIGxhdGVzdCBzdGF0ZS4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmVsaXN0ZW5lciBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgIH1cblxuICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgICB9XG5cbiAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIGN1cnJlbnRMaXN0ZW5lcnMgPSBudWxsO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG5cblxuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG11c3QgYmUgcGxhaW4gb2JqZWN0cy4gJyArICdVc2UgY3VzdG9tIG1pZGRsZXdhcmUgZm9yIGFzeW5jIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtYXkgbm90IGhhdmUgYW4gdW5kZWZpbmVkIFwidHlwZVwiIHByb3BlcnR5LiAnICsgJ0hhdmUgeW91IG1pc3NwZWxsZWQgYSBjb25zdGFudD8nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBjdXJyZW50UmVkdWNlciA9IG5leHRSZWR1Y2VyOyAvLyBUaGlzIGFjdGlvbiBoYXMgYSBzaW1pbGlhciBlZmZlY3QgdG8gQWN0aW9uVHlwZXMuSU5JVC5cbiAgICAvLyBBbnkgcmVkdWNlcnMgdGhhdCBleGlzdGVkIGluIGJvdGggdGhlIG5ldyBhbmQgb2xkIHJvb3RSZWR1Y2VyXG4gICAgLy8gd2lsbCByZWNlaXZlIHRoZSBwcmV2aW91cyBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgICAvLyB0aGUgbmV3IHN0YXRlIHRyZWUgd2l0aCBhbnkgcmVsZXZhbnQgZGF0YSBmcm9tIHRoZSBvbGQgb25lLlxuXG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUkVQTEFDRVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnRlcm9wZXJhYmlsaXR5IHBvaW50IGZvciBvYnNlcnZhYmxlL3JlYWN0aXZlIGxpYnJhcmllcy5cbiAgICogQHJldHVybnMge29ic2VydmFibGV9IEEgbWluaW1hbCBvYnNlcnZhYmxlIG9mIHN0YXRlIGNoYW5nZXMuXG4gICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIG9ic2VydmFibGUgcHJvcG9zYWw6XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9ic2VydmFibGVcbiAgICovXG5cblxuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JzZXJ2ZXIgIT09ICdvYmplY3QnIHx8IG9ic2VydmVyID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgdGhlIG9ic2VydmVyIHRvIGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9ic2VydmVTdGF0ZSgpIHtcbiAgICAgICAgICBpZiAob2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChnZXRTdGF0ZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvYnNlcnZlU3RhdGUoKTtcbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlID0gb3V0ZXJTdWJzY3JpYmUob2JzZXJ2ZVN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCBfcmVmWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfcmVmO1xuICB9IC8vIFdoZW4gYSBzdG9yZSBpcyBjcmVhdGVkLCBhbiBcIklOSVRcIiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCBzbyB0aGF0IGV2ZXJ5XG4gIC8vIHJlZHVjZXIgcmV0dXJucyB0aGVpciBpbml0aWFsIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAvLyB0aGUgaW5pdGlhbCBzdGF0ZSB0cmVlLlxuXG5cbiAgZGlzcGF0Y2goe1xuICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgfSk7XG4gIHJldHVybiBfcmVmMiA9IHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyOiByZXBsYWNlUmVkdWNlclxuICB9LCBfcmVmMlskJG9ic2VydmFibGVdID0gb2JzZXJ2YWJsZSwgX3JlZjI7XG59XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcblxufVxuXG5mdW5jdGlvbiBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShrZXksIGFjdGlvbikge1xuICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgdmFyIGFjdGlvbkRlc2NyaXB0aW9uID0gYWN0aW9uVHlwZSAmJiBcImFjdGlvbiBcXFwiXCIgKyBTdHJpbmcoYWN0aW9uVHlwZSkgKyBcIlxcXCJcIiB8fCAnYW4gYWN0aW9uJztcbiAgcmV0dXJuIFwiR2l2ZW4gXCIgKyBhY3Rpb25EZXNjcmlwdGlvbiArIFwiLCByZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQuIFwiICsgXCJUbyBpZ25vcmUgYW4gYWN0aW9uLCB5b3UgbXVzdCBleHBsaWNpdGx5IHJldHVybiB0aGUgcHJldmlvdXMgc3RhdGUuIFwiICsgXCJJZiB5b3Ugd2FudCB0aGlzIHJlZHVjZXIgdG8gaG9sZCBubyB2YWx1ZSwgeW91IGNhbiByZXR1cm4gbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIjtcbn1cblxuZnVuY3Rpb24gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShpbnB1dFN0YXRlLCByZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgYXJndW1lbnROYW1lID0gYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5JTklUID8gJ3ByZWxvYWRlZFN0YXRlIGFyZ3VtZW50IHBhc3NlZCB0byBjcmVhdGVTdG9yZScgOiAncHJldmlvdXMgc3RhdGUgcmVjZWl2ZWQgYnkgdGhlIHJlZHVjZXInO1xuXG4gIGlmIChyZWR1Y2VyS2V5cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJ1N0b3JlIGRvZXMgbm90IGhhdmUgYSB2YWxpZCByZWR1Y2VyLiBNYWtlIHN1cmUgdGhlIGFyZ3VtZW50IHBhc3NlZCAnICsgJ3RvIGNvbWJpbmVSZWR1Y2VycyBpcyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSByZWR1Y2Vycy4nO1xuICB9XG5cbiAgaWYgKCFpc1BsYWluT2JqZWN0KGlucHV0U3RhdGUpKSB7XG4gICAgcmV0dXJuIFwiVGhlIFwiICsgYXJndW1lbnROYW1lICsgXCIgaGFzIHVuZXhwZWN0ZWQgdHlwZSBvZiBcXFwiXCIgKyB7fS50b1N0cmluZy5jYWxsKGlucHV0U3RhdGUpLm1hdGNoKC9cXHMoW2EtenxBLVpdKykvKVsxXSArIFwiXFxcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBcIiArIChcImtleXM6IFxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiXCIpO1xuICB9XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldO1xuICB9KTtcbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFwiVW5leHBlY3RlZCBcIiArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgXCIgXCIgKyAoXCJcXFwiXCIgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIiBmb3VuZCBpbiBcIiArIGFyZ3VtZW50TmFtZSArIFwiLiBcIikgKyBcIkV4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogXCIgKyAoXCJcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCBkdXJpbmcgaW5pdGlhbGl6YXRpb24uIFwiICsgXCJJZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZSByZWR1Y2VyIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgXCIgKyBcImV4cGxpY2l0bHkgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgXCIgKyBcIm5vdCBiZSB1bmRlZmluZWQuIElmIHlvdSBkb24ndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsIFwiICsgXCJ5b3UgY2FuIHVzZSBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5QUk9CRV9VTktOT1dOX0FDVElPTigpXG4gICAgfSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgd2hlbiBwcm9iZWQgd2l0aCBhIHJhbmRvbSB0eXBlLiBcIiArIChcIkRvbid0IHRyeSB0byBoYW5kbGUgXCIgKyBBY3Rpb25UeXBlcy5JTklUICsgXCIgb3Igb3RoZXIgYWN0aW9ucyBpbiBcXFwicmVkdXgvKlxcXCIgXCIpICsgXCJuYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSBcIiArIFwiY3VycmVudCBzdGF0ZSBmb3IgYW55IHVua25vd24gYWN0aW9ucywgdW5sZXNzIGl0IGlzIHVuZGVmaW5lZCwgXCIgKyBcImluIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSBcIiArIFwiYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuXCIpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGRpZmZlcmVudCByZWR1Y2VyIGZ1bmN0aW9ucywgaW50byBhIHNpbmdsZVxuICogcmVkdWNlciBmdW5jdGlvbi4gSXQgd2lsbCBjYWxsIGV2ZXJ5IGNoaWxkIHJlZHVjZXIsIGFuZCBnYXRoZXIgdGhlaXIgcmVzdWx0c1xuICogaW50byBhIHNpbmdsZSBzdGF0ZSBvYmplY3QsIHdob3NlIGtleXMgY29ycmVzcG9uZCB0byB0aGUga2V5cyBvZiB0aGUgcGFzc2VkXG4gKiByZWR1Y2VyIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVkdWNlcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBjb3JyZXNwb25kIHRvIGRpZmZlcmVudFxuICogcmVkdWNlciBmdW5jdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNvbWJpbmVkIGludG8gb25lLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpblxuICogaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXMgcmVkdWNlcnNgIHN5bnRheC4gVGhlIHJlZHVjZXJzIG1heSBuZXZlciByZXR1cm5cbiAqIHVuZGVmaW5lZCBmb3IgYW55IGFjdGlvbi4gSW5zdGVhZCwgdGhleSBzaG91bGQgcmV0dXJuIHRoZWlyIGluaXRpYWwgc3RhdGVcbiAqIGlmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlbSB3YXMgdW5kZWZpbmVkLCBhbmQgdGhlIGN1cnJlbnQgc3RhdGUgZm9yIGFueVxuICogdW5yZWNvZ25pemVkIGFjdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgcmVkdWNlciBmdW5jdGlvbiB0aGF0IGludm9rZXMgZXZlcnkgcmVkdWNlciBpbnNpZGUgdGhlXG4gKiBwYXNzZWQgb2JqZWN0LCBhbmQgYnVpbGRzIGEgc3RhdGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUuXG4gKi9cblxuXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gcmVkdWNlcktleXNbaV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3YXJuaW5nKFwiTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTsgLy8gVGhpcyBpcyB1c2VkIHRvIG1ha2Ugc3VyZSB3ZSBkb24ndCB3YXJuIGFib3V0IHRoZSBzYW1lXG4gIC8vIGtleXMgbXVsdGlwbGUgdGltZXMuXG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG5cbiAgdHJ5IHtcbiAgICBhc3NlcnRSZWR1Y2VyU2hhcGUoZmluYWxSZWR1Y2Vycyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzaGFwZUFzc2VydGlvbkVycm9yID0gZTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfVxuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcblxuICAgICAgaWYgKHdhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgIHdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG5leHRTdGF0ZSA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UoX2tleSwgYWN0aW9uKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICB9XG5cbiAgICAgIG5leHRTdGF0ZVtfa2V5XSA9IG5leHRTdGF0ZUZvcktleTtcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IG5leHRTdGF0ZUZvcktleSAhPT0gcHJldmlvdXNTdGF0ZUZvcktleTtcbiAgICB9XG5cbiAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMoc3RhdGUpLmxlbmd0aDtcbiAgICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5leHRTdGF0ZSA6IHN0YXRlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb24gY3JlYXRvcnMsIGludG8gYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBzYW1lIGtleXMsIGJ1dCB3aXRoIGV2ZXJ5IGZ1bmN0aW9uIHdyYXBwZWQgaW50byBhIGBkaXNwYXRjaGAgY2FsbCBzbyB0aGV5XG4gKiBtYXkgYmUgaW52b2tlZCBkaXJlY3RseS4gVGhpcyBpcyBqdXN0IGEgY29udmVuaWVuY2UgbWV0aG9kLCBhcyB5b3UgY2FuIGNhbGxcbiAqIGBzdG9yZS5kaXNwYXRjaChNeUFjdGlvbkNyZWF0b3JzLmRvU29tZXRoaW5nKCkpYCB5b3Vyc2VsZiBqdXN0IGZpbmUuXG4gKlxuICogRm9yIGNvbnZlbmllbmNlLCB5b3UgY2FuIGFsc28gcGFzcyBhbiBhY3Rpb24gY3JlYXRvciBhcyB0aGUgZmlyc3QgYXJndW1lbnQsXG4gKiBhbmQgZ2V0IGEgZGlzcGF0Y2ggd3JhcHBlZCBmdW5jdGlvbiBpbiByZXR1cm4uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IGFjdGlvbkNyZWF0b3JzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvblxuICogY3JlYXRvciBmdW5jdGlvbnMuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzYFxuICogc3ludGF4LiBZb3UgbWF5IGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXNwYXRjaCBUaGUgYGRpc3BhdGNoYCBmdW5jdGlvbiBhdmFpbGFibGUgb24geW91ciBSZWR1eFxuICogc3RvcmUuXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gVGhlIG9iamVjdCBtaW1pY2tpbmcgdGhlIG9yaWdpbmFsIG9iamVjdCwgYnV0IHdpdGhcbiAqIGV2ZXJ5IGFjdGlvbiBjcmVhdG9yIHdyYXBwZWQgaW50byB0aGUgYGRpc3BhdGNoYCBjYWxsLiBJZiB5b3UgcGFzc2VkIGFcbiAqIGZ1bmN0aW9uIGFzIGBhY3Rpb25DcmVhdG9yc2AsIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBhbHNvIGJlIGEgc2luZ2xlXG4gKiBmdW5jdGlvbi5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9ycyhhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyAhPT0gJ29iamVjdCcgfHwgYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJiaW5kQWN0aW9uQ3JlYXRvcnMgZXhwZWN0ZWQgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24sIGluc3RlYWQgcmVjZWl2ZWQgXCIgKyAoYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgYWN0aW9uQ3JlYXRvcnMpICsgXCIuIFwiICsgXCJEaWQgeW91IHdyaXRlIFxcXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCIgaW5zdGVhZCBvZiBcXFwiaW1wb3J0ICogYXMgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCI/XCIpO1xuICB9XG5cbiAgdmFyIGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcblxuICBmb3IgKHZhciBrZXkgaW4gYWN0aW9uQ3JlYXRvcnMpIHtcbiAgICB2YXIgYWN0aW9uQ3JlYXRvciA9IGFjdGlvbkNyZWF0b3JzW2tleV07XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGJvdW5kQWN0aW9uQ3JlYXRvcnNba2V5XSA9IGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpKTtcbiAgfVxuXG4gIGlmIChlbnVtZXJhYmxlT25seSkga2V5cyA9IGtleXMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgfSk7XG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgIGlmIChpICUgMikge1xuICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG4vKipcbiAqIENvbXBvc2VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmlnaHRtb3N0XG4gKiBmdW5jdGlvbiBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMgYXMgaXQgcHJvdmlkZXMgdGhlIHNpZ25hdHVyZSBmb3JcbiAqIHRoZSByZXN1bHRpbmcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZ1bmNzIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiBvYnRhaW5lZCBieSBjb21wb3NpbmcgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uc1xuICogZnJvbSByaWdodCB0byBsZWZ0LiBGb3IgZXhhbXBsZSwgY29tcG9zZShmLCBnLCBoKSBpcyBpZGVudGljYWwgdG8gZG9pbmdcbiAqICguLi5hcmdzKSA9PiBmKGcoaCguLi5hcmdzKSkpLlxuICovXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cblxuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Rpc3BhdGNoaW5nIHdoaWxlIGNvbnN0cnVjdGluZyB5b3VyIG1pZGRsZXdhcmUgaXMgbm90IGFsbG93ZWQuICcgKyAnT3RoZXIgbWlkZGxld2FyZSB3b3VsZCBub3QgYmUgYXBwbGllZCB0byB0aGlzIGRpc3BhdGNoLicpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICAgIGdldFN0YXRlOiBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICAgIHJldHVybiBfZGlzcGF0Y2guYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGNoYWluID0gbWlkZGxld2FyZXMubWFwKGZ1bmN0aW9uIChtaWRkbGV3YXJlKSB7XG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKG1pZGRsZXdhcmVBUEkpO1xuICAgICAgfSk7XG4gICAgICBfZGlzcGF0Y2ggPSBjb21wb3NlLmFwcGx5KHZvaWQgMCwgY2hhaW4pKHN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkMih7fSwgc3RvcmUsIHtcbiAgICAgICAgZGlzcGF0Y2g6IF9kaXNwYXRjaFxuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuLypcbiAqIFRoaXMgaXMgYSBkdW1teSBmdW5jdGlvbiB0byBjaGVjayBpZiB0aGUgZnVuY3Rpb24gbmFtZSBoYXMgYmVlbiBhbHRlcmVkIGJ5IG1pbmlmaWNhdGlvbi5cbiAqIElmIHRoZSBmdW5jdGlvbiBoYXMgYmVlbiBtaW5pZmllZCBhbmQgTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJywgd2FybiB0aGUgdXNlci5cbiAqL1xuXG5mdW5jdGlvbiBpc0NydXNoZWQoKSB7fVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgaXNDcnVzaGVkLm5hbWUgPT09ICdzdHJpbmcnICYmIGlzQ3J1c2hlZC5uYW1lICE9PSAnaXNDcnVzaGVkJykge1xuICB3YXJuaW5nKCdZb3UgYXJlIGN1cnJlbnRseSB1c2luZyBtaW5pZmllZCBjb2RlIG91dHNpZGUgb2YgTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiLiAnICsgJ1RoaXMgbWVhbnMgdGhhdCB5b3UgYXJlIHJ1bm5pbmcgYSBzbG93ZXIgZGV2ZWxvcG1lbnQgYnVpbGQgb2YgUmVkdXguICcgKyAnWW91IGNhbiB1c2UgbG9vc2UtZW52aWZ5IChodHRwczovL2dpdGh1Yi5jb20vemVydG9zaC9sb29zZS1lbnZpZnkpIGZvciBicm93c2VyaWZ5ICcgKyAnb3Igc2V0dGluZyBtb2RlIHRvIHByb2R1Y3Rpb24gaW4gd2VicGFjayAoaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25jZXB0cy9tb2RlLykgJyArICd0byBlbnN1cmUgeW91IGhhdmUgdGhlIGNvcnJlY3QgY29kZSBmb3IgeW91ciBwcm9kdWN0aW9uIGJ1aWxkLicpO1xufVxuXG5leHBvcnQgeyBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzLCBhcHBseU1pZGRsZXdhcmUsIGJpbmRBY3Rpb25DcmVhdG9ycywgY29tYmluZVJlZHVjZXJzLCBjb21wb3NlLCBjcmVhdGVTdG9yZSB9O1xuIiwiaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGdldENvbnN0YW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0Q29uc3RhbnRTZWxlY3RvcihkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHZhciBjb25zdGFudCA9IGdldENvbnN0YW50KGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICAgIGZ1bmN0aW9uIGNvbnN0YW50U2VsZWN0b3IoKSB7XG4gICAgICByZXR1cm4gY29uc3RhbnQ7XG4gICAgfVxuXG4gICAgY29uc3RhbnRTZWxlY3Rvci5kZXBlbmRzT25Pd25Qcm9wcyA9IGZhbHNlO1xuICAgIHJldHVybiBjb25zdGFudFNlbGVjdG9yO1xuICB9O1xufSAvLyBkZXBlbmRzT25Pd25Qcm9wcyBpcyB1c2VkIGJ5IGNyZWF0ZU1hcFRvUHJvcHNQcm94eSB0byBkZXRlcm1pbmUgd2hldGhlciB0byBwYXNzIHByb3BzIGFzIGFyZ3Ncbi8vIHRvIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIHdyYXBwZWQuIEl0IGlzIGFsc28gdXNlZCBieSBtYWtlUHVyZVByb3BzU2VsZWN0b3IgdG8gZGV0ZXJtaW5lXG4vLyB3aGV0aGVyIG1hcFRvUHJvcHMgbmVlZHMgdG8gYmUgaW52b2tlZCB3aGVuIHByb3BzIGhhdmUgY2hhbmdlZC5cbi8vXG4vLyBBIGxlbmd0aCBvZiBvbmUgc2lnbmFscyB0aGF0IG1hcFRvUHJvcHMgZG9lcyBub3QgZGVwZW5kIG9uIHByb3BzIGZyb20gdGhlIHBhcmVudCBjb21wb25lbnQuXG4vLyBBIGxlbmd0aCBvZiB6ZXJvIGlzIGFzc3VtZWQgdG8gbWVhbiBtYXBUb1Byb3BzIGlzIGdldHRpbmcgYXJncyB2aWEgYXJndW1lbnRzIG9yIC4uLmFyZ3MgYW5kXG4vLyB0aGVyZWZvcmUgbm90IHJlcG9ydGluZyBpdHMgbGVuZ3RoIGFjY3VyYXRlbHkuLlxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcykge1xuICByZXR1cm4gbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gbnVsbCAmJiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSB1bmRlZmluZWQgPyBCb29sZWFuKG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIDogbWFwVG9Qcm9wcy5sZW5ndGggIT09IDE7XG59IC8vIFVzZWQgYnkgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24gYW5kIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLFxuLy8gdGhpcyBmdW5jdGlvbiB3cmFwcyBtYXBUb1Byb3BzIGluIGEgcHJveHkgZnVuY3Rpb24gd2hpY2ggZG9lcyBzZXZlcmFsIHRoaW5nczpcbi8vXG4vLyAgKiBEZXRlY3RzIHdoZXRoZXIgdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgY2FsbGVkIGRlcGVuZHMgb24gcHJvcHMsIHdoaWNoXG4vLyAgICBpcyB1c2VkIGJ5IHNlbGVjdG9yRmFjdG9yeSB0byBkZWNpZGUgaWYgaXQgc2hvdWxkIHJlaW52b2tlIG9uIHByb3BzIGNoYW5nZXMuXG4vL1xuLy8gICogT24gZmlyc3QgY2FsbCwgaGFuZGxlcyBtYXBUb1Byb3BzIGlmIHJldHVybnMgYW5vdGhlciBmdW5jdGlvbiwgYW5kIHRyZWF0cyB0aGF0XG4vLyAgICBuZXcgZnVuY3Rpb24gYXMgdGhlIHRydWUgbWFwVG9Qcm9wcyBmb3Igc3Vic2VxdWVudCBjYWxscy5cbi8vXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCB2ZXJpZmllcyB0aGUgZmlyc3QgcmVzdWx0IGlzIGEgcGxhaW4gb2JqZWN0LCBpbiBvcmRlciB0byB3YXJuXG4vLyAgICB0aGUgZGV2ZWxvcGVyIHRoYXQgdGhlaXIgbWFwVG9Qcm9wcyBmdW5jdGlvbiBpcyBub3QgcmV0dXJuaW5nIGEgdmFsaWQgcmVzdWx0LlxuLy9cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBUb1Byb3BzLCBtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0UHJveHlTZWxlY3RvcihkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWU7XG5cbiAgICB2YXIgcHJveHkgPSBmdW5jdGlvbiBtYXBUb1Byb3BzUHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcmV0dXJuIHByb3h5LmRlcGVuZHNPbk93blByb3BzID8gcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSA6IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoKTtcbiAgICB9OyAvLyBhbGxvdyBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5IHRvIGdldCBvd25Qcm9wc1xuXG5cbiAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IHRydWU7XG5cbiAgICBwcm94eS5tYXBUb1Byb3BzID0gZnVuY3Rpb24gZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICBwcm94eS5tYXBUb1Byb3BzID0gbWFwVG9Qcm9wcztcbiAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcyk7XG4gICAgICB2YXIgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgICAgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwcm94eS5tYXBUb1Byb3BzID0gcHJvcHM7XG4gICAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMocHJvcHMpO1xuICAgICAgICBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QocHJvcHMsIGRpc3BsYXlOYW1lLCBtZXRob2ROYW1lKTtcbiAgICAgIHJldHVybiBwcm9wcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb3h5O1xuICB9O1xufSIsImltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycyB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBEaXNwYXRjaFRvUHJvcHMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcERpc3BhdGNoVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3BhdGNoOiBkaXNwYXRjaFxuICAgIH07XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdChtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcERpc3BhdGNoVG9Qcm9wcyAmJiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnb2JqZWN0JyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyhtYXBEaXNwYXRjaFRvUHJvcHMsIGRpc3BhdGNoKTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcsIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdF07IiwiaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24obWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwU3RhdGVUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFN0YXRlVG9Qcm9wcywgJ21hcFN0YXRlVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmcobWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwU3RhdGVUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZ107IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRNZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3duUHJvcHMsIHt9LCBzdGF0ZVByb3BzLCB7fSwgZGlzcGF0Y2hQcm9wcyk7XG59XG5leHBvcnQgZnVuY3Rpb24gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRNZXJnZVByb3BzUHJveHkoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lLFxuICAgICAgICBwdXJlID0gX3JlZi5wdXJlLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZi5hcmVNZXJnZWRQcm9wc0VxdWFsO1xuICAgIHZhciBoYXNSdW5PbmNlID0gZmFsc2U7XG4gICAgdmFyIG1lcmdlZFByb3BzO1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZVByb3BzUHJveHkoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgICAgIHZhciBuZXh0TWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcblxuICAgICAgaWYgKGhhc1J1bk9uY2UpIHtcbiAgICAgICAgaWYgKCFwdXJlIHx8ICFhcmVNZXJnZWRQcm9wc0VxdWFsKG5leHRNZXJnZWRQcm9wcywgbWVyZ2VkUHJvcHMpKSBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhc1J1bk9uY2UgPSB0cnVlO1xuICAgICAgICBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KG1lcmdlZFByb3BzLCBkaXNwbGF5TmFtZSwgJ21lcmdlUHJvcHMnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICAgIH07XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtZXJnZVByb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuICFtZXJnZVByb3BzID8gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkZWZhdWx0TWVyZ2VQcm9wcztcbiAgfSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24sIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkXTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCB2ZXJpZnlTdWJzZWxlY3RvcnMgZnJvbSAnLi92ZXJpZnlTdWJzZWxlY3RvcnMnO1xuZXhwb3J0IGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3Ioc3RhdGUsIG93blByb3BzKSB7XG4gICAgcmV0dXJuIG1lcmdlUHJvcHMobWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyksIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpLCBvd25Qcm9wcyk7XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBfcmVmKSB7XG4gIHZhciBhcmVTdGF0ZXNFcXVhbCA9IF9yZWYuYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsID0gX3JlZi5hcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsID0gX3JlZi5hcmVTdGF0ZVByb3BzRXF1YWw7XG4gIHZhciBoYXNSdW5BdExlYXN0T25jZSA9IGZhbHNlO1xuICB2YXIgc3RhdGU7XG4gIHZhciBvd25Qcm9wcztcbiAgdmFyIHN0YXRlUHJvcHM7XG4gIHZhciBkaXNwYXRjaFByb3BzO1xuICB2YXIgbWVyZ2VkUHJvcHM7XG5cbiAgZnVuY3Rpb24gaGFuZGxlRmlyc3RDYWxsKGZpcnN0U3RhdGUsIGZpcnN0T3duUHJvcHMpIHtcbiAgICBzdGF0ZSA9IGZpcnN0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBmaXJzdE93blByb3BzO1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICBoYXNSdW5BdExlYXN0T25jZSA9IHRydWU7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpIHtcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHMoKSB7XG4gICAgaWYgKG1hcFN0YXRlVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1N0YXRlKCkge1xuICAgIHZhciBuZXh0U3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZVByb3BzQ2hhbmdlZCA9ICFhcmVTdGF0ZVByb3BzRXF1YWwobmV4dFN0YXRlUHJvcHMsIHN0YXRlUHJvcHMpO1xuICAgIHN0YXRlUHJvcHMgPSBuZXh0U3RhdGVQcm9wcztcbiAgICBpZiAoc3RhdGVQcm9wc0NoYW5nZWQpIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgdmFyIHByb3BzQ2hhbmdlZCA9ICFhcmVPd25Qcm9wc0VxdWFsKG5leHRPd25Qcm9wcywgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZUNoYW5nZWQgPSAhYXJlU3RhdGVzRXF1YWwobmV4dFN0YXRlLCBzdGF0ZSk7XG4gICAgc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBuZXh0T3duUHJvcHM7XG4gICAgaWYgKHByb3BzQ2hhbmdlZCAmJiBzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCk7XG4gICAgaWYgKHByb3BzQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzKCk7XG4gICAgaWYgKHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1N0YXRlKCk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3IobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICByZXR1cm4gaGFzUnVuQXRMZWFzdE9uY2UgPyBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIDogaGFuZGxlRmlyc3RDYWxsKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKTtcbiAgfTtcbn0gLy8gVE9ETzogQWRkIG1vcmUgY29tbWVudHNcbi8vIElmIHB1cmUgaXMgdHJ1ZSwgdGhlIHNlbGVjdG9yIHJldHVybmVkIGJ5IHNlbGVjdG9yRmFjdG9yeSB3aWxsIG1lbW9pemUgaXRzIHJlc3VsdHMsXG4vLyBhbGxvd2luZyBjb25uZWN0QWR2YW5jZWQncyBzaG91bGRDb21wb25lbnRVcGRhdGUgdG8gcmV0dXJuIGZhbHNlIGlmIGZpbmFsXG4vLyBwcm9wcyBoYXZlIG5vdCBjaGFuZ2VkLiBJZiBmYWxzZSwgdGhlIHNlbGVjdG9yIHdpbGwgYWx3YXlzIHJldHVybiBhIG5ld1xuLy8gb2JqZWN0IGFuZCBzaG91bGRDb21wb25lbnRVcGRhdGUgd2lsbCBhbHdheXMgcmV0dXJuIHRydWUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkoZGlzcGF0Y2gsIF9yZWYyKSB7XG4gIHZhciBpbml0TWFwU3RhdGVUb1Byb3BzID0gX3JlZjIuaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBfcmVmMi5pbml0TWFwRGlzcGF0Y2hUb1Byb3BzLFxuICAgICAgaW5pdE1lcmdlUHJvcHMgPSBfcmVmMi5pbml0TWVyZ2VQcm9wcyxcbiAgICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgW1wiaW5pdE1hcFN0YXRlVG9Qcm9wc1wiLCBcImluaXRNYXBEaXNwYXRjaFRvUHJvcHNcIiwgXCJpbml0TWVyZ2VQcm9wc1wiXSk7XG5cbiAgdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGluaXRNYXBTdGF0ZVRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtZXJnZVByb3BzID0gaW5pdE1lcmdlUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmVyaWZ5U3Vic2VsZWN0b3JzKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBvcHRpb25zLmRpc3BsYXlOYW1lKTtcbiAgfVxuXG4gIHZhciBzZWxlY3RvckZhY3RvcnkgPSBvcHRpb25zLnB1cmUgPyBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSA6IGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3Rvcnk7XG4gIHJldHVybiBzZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBvcHRpb25zKTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4uL3V0aWxzL3NoYWxsb3dFcXVhbCc7XG5pbXBvcnQgZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcERpc3BhdGNoVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcFN0YXRlVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tZXJnZVByb3BzJztcbmltcG9ydCBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IGZyb20gJy4vc2VsZWN0b3JGYWN0b3J5Jztcbi8qXHJcbiAgY29ubmVjdCBpcyBhIGZhY2FkZSBvdmVyIGNvbm5lY3RBZHZhbmNlZC4gSXQgdHVybnMgaXRzIGFyZ3MgaW50byBhIGNvbXBhdGlibGVcclxuICBzZWxlY3RvckZhY3RvcnksIHdoaWNoIGhhcyB0aGUgc2lnbmF0dXJlOlxyXG5cclxuICAgIChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA9PiBuZXh0RmluYWxQcm9wc1xyXG4gIFxyXG4gIGNvbm5lY3QgcGFzc2VzIGl0cyBhcmdzIHRvIGNvbm5lY3RBZHZhbmNlZCBhcyBvcHRpb25zLCB3aGljaCB3aWxsIGluIHR1cm4gcGFzcyB0aGVtIHRvXHJcbiAgc2VsZWN0b3JGYWN0b3J5IGVhY2ggdGltZSBhIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIGlzIGluc3RhbnRpYXRlZCBvciBob3QgcmVsb2FkZWQuXHJcblxyXG4gIHNlbGVjdG9yRmFjdG9yeSByZXR1cm5zIGEgZmluYWwgcHJvcHMgc2VsZWN0b3IgZnJvbSBpdHMgbWFwU3RhdGVUb1Byb3BzLFxyXG4gIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsIG1lcmdlUHJvcHMsXHJcbiAgbWVyZ2VQcm9wc0ZhY3RvcmllcywgYW5kIHB1cmUgYXJncy5cclxuXHJcbiAgVGhlIHJlc3VsdGluZyBmaW5hbCBwcm9wcyBzZWxlY3RvciBpcyBjYWxsZWQgYnkgdGhlIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIHdoZW5ldmVyXHJcbiAgaXQgcmVjZWl2ZXMgbmV3IHByb3BzIG9yIHN0b3JlIHN0YXRlLlxyXG4gKi9cblxuZnVuY3Rpb24gbWF0Y2goYXJnLCBmYWN0b3JpZXMsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IGZhY3Rvcmllcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciByZXN1bHQgPSBmYWN0b3JpZXNbaV0oYXJnKTtcbiAgICBpZiAocmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdmFsdWUgb2YgdHlwZSBcIiArIHR5cGVvZiBhcmcgKyBcIiBmb3IgXCIgKyBuYW1lICsgXCIgYXJndW1lbnQgd2hlbiBjb25uZWN0aW5nIGNvbXBvbmVudCBcIiArIG9wdGlvbnMud3JhcHBlZENvbXBvbmVudE5hbWUgKyBcIi5cIik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmljdEVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59IC8vIGNyZWF0ZUNvbm5lY3Qgd2l0aCBkZWZhdWx0IGFyZ3MgYnVpbGRzIHRoZSAnb2ZmaWNpYWwnIGNvbm5lY3QgYmVoYXZpb3IuIENhbGxpbmcgaXQgd2l0aFxuLy8gZGlmZmVyZW50IG9wdGlvbnMgb3BlbnMgdXAgc29tZSB0ZXN0aW5nIGFuZCBleHRlbnNpYmlsaXR5IHNjZW5hcmlvc1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb25uZWN0KF90ZW1wKSB7XG4gIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICBfcmVmJGNvbm5lY3RIT0MgPSBfcmVmLmNvbm5lY3RIT0MsXG4gICAgICBjb25uZWN0SE9DID0gX3JlZiRjb25uZWN0SE9DID09PSB2b2lkIDAgPyBjb25uZWN0QWR2YW5jZWQgOiBfcmVmJGNvbm5lY3RIT0MsXG4gICAgICBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPSBfcmVmLm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9PT0gdm9pZCAwID8gZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwU3RhdGVUb1Byb3BzRixcbiAgICAgIF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9IF9yZWYubWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBEaXNwYXRjaFRvUHJvID09PSB2b2lkIDAgPyBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBEaXNwYXRjaFRvUHJvLFxuICAgICAgX3JlZiRtZXJnZVByb3BzRmFjdG9yID0gX3JlZi5tZXJnZVByb3BzRmFjdG9yaWVzLFxuICAgICAgbWVyZ2VQcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9PT0gdm9pZCAwID8gZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1lcmdlUHJvcHNGYWN0b3IsXG4gICAgICBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYuc2VsZWN0b3JGYWN0b3J5LFxuICAgICAgc2VsZWN0b3JGYWN0b3J5ID0gX3JlZiRzZWxlY3RvckZhY3RvcnkgPT09IHZvaWQgMCA/IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgOiBfcmVmJHNlbGVjdG9yRmFjdG9yeTtcblxuICByZXR1cm4gZnVuY3Rpb24gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgX3JlZjIpIHtcbiAgICBpZiAoX3JlZjIgPT09IHZvaWQgMCkge1xuICAgICAgX3JlZjIgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgX3JlZjMgPSBfcmVmMixcbiAgICAgICAgX3JlZjMkcHVyZSA9IF9yZWYzLnB1cmUsXG4gICAgICAgIHB1cmUgPSBfcmVmMyRwdXJlID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjMkcHVyZSxcbiAgICAgICAgX3JlZjMkYXJlU3RhdGVzRXF1YWwgPSBfcmVmMy5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVzRXF1YWwgPSBfcmVmMyRhcmVTdGF0ZXNFcXVhbCA9PT0gdm9pZCAwID8gc3RyaWN0RXF1YWwgOiBfcmVmMyRhcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgX3JlZjMkYXJlT3duUHJvcHNFcXVhID0gX3JlZjMuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYzJGFyZU93blByb3BzRXF1YSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlT3duUHJvcHNFcXVhLFxuICAgICAgICBfcmVmMyRhcmVTdGF0ZVByb3BzRXEgPSBfcmVmMy5hcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYzJGFyZVN0YXRlUHJvcHNFcSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlU3RhdGVQcm9wc0VxLFxuICAgICAgICBfcmVmMyRhcmVNZXJnZWRQcm9wc0UgPSBfcmVmMy5hcmVNZXJnZWRQcm9wc0VxdWFsLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZjMkYXJlTWVyZ2VkUHJvcHNFID09PSB2b2lkIDAgPyBzaGFsbG93RXF1YWwgOiBfcmVmMyRhcmVNZXJnZWRQcm9wc0UsXG4gICAgICAgIGV4dHJhT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYzLCBbXCJwdXJlXCIsIFwiYXJlU3RhdGVzRXF1YWxcIiwgXCJhcmVPd25Qcm9wc0VxdWFsXCIsIFwiYXJlU3RhdGVQcm9wc0VxdWFsXCIsIFwiYXJlTWVyZ2VkUHJvcHNFcXVhbFwiXSk7XG5cbiAgICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IG1hdGNoKG1hcFN0YXRlVG9Qcm9wcywgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCAnbWFwU3RhdGVUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBtYXRjaChtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWVyZ2VQcm9wcyA9IG1hdGNoKG1lcmdlUHJvcHMsIG1lcmdlUHJvcHNGYWN0b3JpZXMsICdtZXJnZVByb3BzJyk7XG4gICAgcmV0dXJuIGNvbm5lY3RIT0Moc2VsZWN0b3JGYWN0b3J5LCBfZXh0ZW5kcyh7XG4gICAgICAvLyB1c2VkIGluIGVycm9yIG1lc3NhZ2VzXG4gICAgICBtZXRob2ROYW1lOiAnY29ubmVjdCcsXG4gICAgICAvLyB1c2VkIHRvIGNvbXB1dGUgQ29ubmVjdCdzIGRpc3BsYXlOYW1lIGZyb20gdGhlIHdyYXBwZWQgY29tcG9uZW50J3MgZGlzcGxheU5hbWUuXG4gICAgICBnZXREaXNwbGF5TmFtZTogZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gXCJDb25uZWN0KFwiICsgbmFtZSArIFwiKVwiO1xuICAgICAgfSxcbiAgICAgIC8vIGlmIG1hcFN0YXRlVG9Qcm9wcyBpcyBmYWxzeSwgdGhlIENvbm5lY3QgY29tcG9uZW50IGRvZXNuJ3Qgc3Vic2NyaWJlIHRvIHN0b3JlIHN0YXRlIGNoYW5nZXNcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogQm9vbGVhbihtYXBTdGF0ZVRvUHJvcHMpLFxuICAgICAgLy8gcGFzc2VkIHRocm91Z2ggdG8gc2VsZWN0b3JGYWN0b3J5XG4gICAgICBpbml0TWFwU3RhdGVUb1Byb3BzOiBpbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wczogaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzOiBpbml0TWVyZ2VQcm9wcyxcbiAgICAgIHB1cmU6IHB1cmUsXG4gICAgICBhcmVTdGF0ZXNFcXVhbDogYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsOiBhcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsOiBhcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsOiBhcmVNZXJnZWRQcm9wc0VxdWFsXG4gICAgfSwgZXh0cmFPcHRpb25zKSk7XG4gIH07XG59XG5leHBvcnQgZGVmYXVsdFxuLyojX19QVVJFX18qL1xuY3JlYXRlQ29ubmVjdCgpOyIsImltcG9ydCB7IHVzZVJlZHVjZXIsIHVzZVJlZiwgdXNlTWVtbywgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVJlZHV4Q29udGV4dCBhcyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi91c2VSZWR1eENvbnRleHQnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuXG52YXIgcmVmRXF1YWxpdHkgPSBmdW5jdGlvbiByZWZFcXVhbGl0eShhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufTtcblxuZnVuY3Rpb24gdXNlU2VsZWN0b3JXaXRoU3RvcmVBbmRTdWJzY3JpcHRpb24oc2VsZWN0b3IsIGVxdWFsaXR5Rm4sIHN0b3JlLCBjb250ZXh0U3ViKSB7XG4gIHZhciBfdXNlUmVkdWNlciA9IHVzZVJlZHVjZXIoZnVuY3Rpb24gKHMpIHtcbiAgICByZXR1cm4gcyArIDE7XG4gIH0sIDApLFxuICAgICAgZm9yY2VSZW5kZXIgPSBfdXNlUmVkdWNlclsxXTtcblxuICB2YXIgc3Vic2NyaXB0aW9uID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb24oc3RvcmUsIGNvbnRleHRTdWIpO1xuICB9LCBbc3RvcmUsIGNvbnRleHRTdWJdKTtcbiAgdmFyIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IgPSB1c2VSZWYoKTtcbiAgdmFyIGxhdGVzdFNlbGVjdG9yID0gdXNlUmVmKCk7XG4gIHZhciBsYXRlc3RTZWxlY3RlZFN0YXRlID0gdXNlUmVmKCk7XG4gIHZhciBzZWxlY3RlZFN0YXRlO1xuXG4gIHRyeSB7XG4gICAgaWYgKHNlbGVjdG9yICE9PSBsYXRlc3RTZWxlY3Rvci5jdXJyZW50IHx8IGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCkge1xuICAgICAgc2VsZWN0ZWRTdGF0ZSA9IHNlbGVjdG9yKHN0b3JlLmdldFN0YXRlKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxlY3RlZFN0YXRlID0gbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50O1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCkge1xuICAgICAgZXJyLm1lc3NhZ2UgKz0gXCJcXG5UaGUgZXJyb3IgbWF5IGJlIGNvcnJlbGF0ZWQgd2l0aCB0aGlzIHByZXZpb3VzIGVycm9yOlxcblwiICsgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50LnN0YWNrICsgXCJcXG5cXG5cIjtcbiAgICB9XG5cbiAgICB0aHJvdyBlcnI7XG4gIH1cblxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBsYXRlc3RTZWxlY3Rvci5jdXJyZW50ID0gc2VsZWN0b3I7XG4gICAgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50ID0gc2VsZWN0ZWRTdGF0ZTtcbiAgICBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gIH0pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBjaGVja0ZvclVwZGF0ZXMoKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbmV3U2VsZWN0ZWRTdGF0ZSA9IGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQoc3RvcmUuZ2V0U3RhdGUoKSk7XG5cbiAgICAgICAgaWYgKGVxdWFsaXR5Rm4obmV3U2VsZWN0ZWRTdGF0ZSwgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50KSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCA9IG5ld1NlbGVjdGVkU3RhdGU7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gd2UgaWdub3JlIGFsbCBlcnJvcnMgaGVyZSwgc2luY2Ugd2hlbiB0aGUgY29tcG9uZW50XG4gICAgICAgIC8vIGlzIHJlLXJlbmRlcmVkLCB0aGUgc2VsZWN0b3JzIGFyZSBjYWxsZWQgYWdhaW4sIGFuZFxuICAgICAgICAvLyB3aWxsIHRocm93IGFnYWluLCBpZiBuZWl0aGVyIHByb3BzIG5vciBzdG9yZSBzdGF0ZVxuICAgICAgICAvLyBjaGFuZ2VkXG4gICAgICAgIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCA9IGVycjtcbiAgICAgIH1cblxuICAgICAgZm9yY2VSZW5kZXIoe30pO1xuICAgIH1cblxuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gY2hlY2tGb3JVcGRhdGVzO1xuICAgIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcbiAgICBjaGVja0ZvclVwZGF0ZXMoKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgIH07XG4gIH0sIFtzdG9yZSwgc3Vic2NyaXB0aW9uXSk7XG4gIHJldHVybiBzZWxlY3RlZFN0YXRlO1xufVxuLyoqXHJcbiAqIEhvb2sgZmFjdG9yeSwgd2hpY2ggY3JlYXRlcyBhIGB1c2VTZWxlY3RvcmAgaG9vayBib3VuZCB0byBhIGdpdmVuIGNvbnRleHQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhY3QuQ29udGV4dH0gW2NvbnRleHQ9UmVhY3RSZWR1eENvbnRleHRdIENvbnRleHQgcGFzc2VkIHRvIHlvdXIgYDxQcm92aWRlcj5gLlxyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgYHVzZVNlbGVjdG9yYCBob29rIGJvdW5kIHRvIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cclxuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9ySG9vayhjb250ZXh0KSB7XG4gIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICBjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQ7XG4gIH1cblxuICB2YXIgdXNlUmVkdXhDb250ZXh0ID0gY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpO1xuICB9O1xuICByZXR1cm4gZnVuY3Rpb24gdXNlU2VsZWN0b3Ioc2VsZWN0b3IsIGVxdWFsaXR5Rm4pIHtcbiAgICBpZiAoZXF1YWxpdHlGbiA9PT0gdm9pZCAwKSB7XG4gICAgICBlcXVhbGl0eUZuID0gcmVmRXF1YWxpdHk7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXNlbGVjdG9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbXVzdCBwYXNzIGEgc2VsZWN0b3IgdG8gdXNlU2VsZWN0b3JzXCIpO1xuICAgIH1cblxuICAgIHZhciBfdXNlUmVkdXhDb250ZXh0ID0gdXNlUmVkdXhDb250ZXh0KCksXG4gICAgICAgIHN0b3JlID0gX3VzZVJlZHV4Q29udGV4dC5zdG9yZSxcbiAgICAgICAgY29udGV4dFN1YiA9IF91c2VSZWR1eENvbnRleHQuc3Vic2NyaXB0aW9uO1xuXG4gICAgcmV0dXJuIHVzZVNlbGVjdG9yV2l0aFN0b3JlQW5kU3Vic2NyaXB0aW9uKHNlbGVjdG9yLCBlcXVhbGl0eUZuLCBzdG9yZSwgY29udGV4dFN1Yik7XG4gIH07XG59XG4vKipcclxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggc3RvcmUncyBzdGF0ZS4gVGhpcyBob29rIHRha2VzIGEgc2VsZWN0b3IgZnVuY3Rpb25cclxuICogYXMgYW4gYXJndW1lbnQuIFRoZSBzZWxlY3RvciBpcyBjYWxsZWQgd2l0aCB0aGUgc3RvcmUgc3RhdGUuXHJcbiAqXHJcbiAqIFRoaXMgaG9vayB0YWtlcyBhbiBvcHRpb25hbCBlcXVhbGl0eSBjb21wYXJpc29uIGZ1bmN0aW9uIGFzIHRoZSBzZWNvbmQgcGFyYW1ldGVyXHJcbiAqIHRoYXQgYWxsb3dzIHlvdSB0byBjdXN0b21pemUgdGhlIHdheSB0aGUgc2VsZWN0ZWQgc3RhdGUgaXMgY29tcGFyZWQgdG8gZGV0ZXJtaW5lXHJcbiAqIHdoZXRoZXIgdGhlIGNvbXBvbmVudCBuZWVkcyB0byBiZSByZS1yZW5kZXJlZC5cclxuICpcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gc2VsZWN0b3IgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb249fSBlcXVhbGl0eUZuIHRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgdXNlZCB0byBkZXRlcm1pbmUgZXF1YWxpdHlcclxuICpcclxuICogQHJldHVybnMge2FueX0gdGhlIHNlbGVjdGVkIHN0YXRlXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuICogaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCdcclxuICpcclxuICogZXhwb3J0IGNvbnN0IENvdW50ZXJDb21wb25lbnQgPSAoKSA9PiB7XHJcbiAqICAgY29uc3QgY291bnRlciA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHN0YXRlLmNvdW50ZXIpXHJcbiAqICAgcmV0dXJuIDxkaXY+e2NvdW50ZXJ9PC9kaXY+XHJcbiAqIH1cclxuICovXG5cbmV4cG9ydCB2YXIgdXNlU2VsZWN0b3IgPVxuLyojX19QVVJFX18qL1xuY3JlYXRlU2VsZWN0b3JIb29rKCk7IiwiaW1wb3J0IFByb3ZpZGVyIGZyb20gJy4vY29tcG9uZW50cy9Qcm92aWRlcic7XG5pbXBvcnQgY29ubmVjdEFkdmFuY2VkIGZyb20gJy4vY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL2NvbXBvbmVudHMvQ29udGV4dCc7XG5pbXBvcnQgY29ubmVjdCBmcm9tICcuL2Nvbm5lY3QvY29ubmVjdCc7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgY3JlYXRlRGlzcGF0Y2hIb29rIH0gZnJvbSAnLi9ob29rcy91c2VEaXNwYXRjaCc7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciwgY3JlYXRlU2VsZWN0b3JIb29rIH0gZnJvbSAnLi9ob29rcy91c2VTZWxlY3Rvcic7XG5pbXBvcnQgeyB1c2VTdG9yZSwgY3JlYXRlU3RvcmVIb29rIH0gZnJvbSAnLi9ob29rcy91c2VTdG9yZSc7XG5pbXBvcnQgeyBzZXRCYXRjaCB9IGZyb20gJy4vdXRpbHMvYmF0Y2gnO1xuaW1wb3J0IHsgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgYXMgYmF0Y2ggfSBmcm9tICcuL3V0aWxzL3JlYWN0QmF0Y2hlZFVwZGF0ZXMnO1xuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICcuL3V0aWxzL3NoYWxsb3dFcXVhbCc7XG5zZXRCYXRjaChiYXRjaCk7XG5leHBvcnQgeyBQcm92aWRlciwgY29ubmVjdEFkdmFuY2VkLCBSZWFjdFJlZHV4Q29udGV4dCwgY29ubmVjdCwgYmF0Y2gsIHVzZURpc3BhdGNoLCBjcmVhdGVEaXNwYXRjaEhvb2ssIHVzZVNlbGVjdG9yLCBjcmVhdGVTZWxlY3Rvckhvb2ssIHVzZVN0b3JlLCBjcmVhdGVTdG9yZUhvb2ssIHNoYWxsb3dFcXVhbCB9OyIsImV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBpbml0aWFsU3RhdGUgPSB0eXBlb2YgYXJnc1thcmdzLmxlbmd0aCAtIDFdICE9PSAnZnVuY3Rpb24nICYmIGFyZ3MucG9wKCk7XG4gIHZhciByZWR1Y2VycyA9IGFyZ3M7XG5cbiAgaWYgKHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIGluaXRpYWwgc3RhdGUgbWF5IG5vdCBiZSB1bmRlZmluZWQuIElmIHlvdSBkbyBub3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCB5b3UgY2FuIHVzZSBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLicpO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChwcmV2U3RhdGUsIHZhbHVlKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIgPiAyID8gX2xlbjIgLSAyIDogMCksIF9rZXkyID0gMjsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5MiAtIDJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICB2YXIgcHJldlN0YXRlSXNVbmRlZmluZWQgPSB0eXBlb2YgcHJldlN0YXRlID09PSAndW5kZWZpbmVkJztcbiAgICB2YXIgdmFsdWVJc1VuZGVmaW5lZCA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCc7XG5cbiAgICBpZiAocHJldlN0YXRlSXNVbmRlZmluZWQgJiYgdmFsdWVJc1VuZGVmaW5lZCAmJiBpbml0aWFsU3RhdGUpIHtcbiAgICAgIHJldHVybiBpbml0aWFsU3RhdGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlZHVjZXJzLnJlZHVjZShmdW5jdGlvbiAobmV3U3RhdGUsIHJlZHVjZXIpIHtcbiAgICAgIHJldHVybiByZWR1Y2VyLmFwcGx5KHVuZGVmaW5lZCwgW25ld1N0YXRlLCB2YWx1ZV0uY29uY2F0KGFyZ3MpKTtcbiAgICB9LCBwcmV2U3RhdGVJc1VuZGVmaW5lZCAmJiAhdmFsdWVJc1VuZGVmaW5lZCAmJiBpbml0aWFsU3RhdGUgPyBpbml0aWFsU3RhdGUgOiBwcmV2U3RhdGUpO1xuICB9O1xufSk7IiwiaW1wb3J0IGlzUGxhaW5PYmplY3QgZnJvbSAnLi9pc1BsYWluT2JqZWN0JztcbmltcG9ydCBpc01hcCBmcm9tICcuL2lzTWFwJztcbmltcG9ydCBoYXNHZW5lcmF0b3JJbnRlcmZhY2UgZnJvbSAnLi9oYXNHZW5lcmF0b3JJbnRlcmZhY2UnO1xuaW1wb3J0IGZsYXR0ZW5XaGVuTm9kZSBmcm9tICcuL2ZsYXR0ZW5XaGVuTm9kZSc7XG5leHBvcnQgZGVmYXVsdCBmbGF0dGVuV2hlbk5vZGUoZnVuY3Rpb24gKG5vZGUpIHtcbiAgcmV0dXJuIChpc1BsYWluT2JqZWN0KG5vZGUpIHx8IGlzTWFwKG5vZGUpKSAmJiAhaGFzR2VuZXJhdG9ySW50ZXJmYWNlKG5vZGUpO1xufSk7IiwiaW1wb3J0IG93bktleXMgZnJvbSAnLi9vd25LZXlzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhc0dlbmVyYXRvckludGVyZmFjZShoYW5kbGVyKSB7XG4gIHZhciBrZXlzID0gb3duS2V5cyhoYW5kbGVyKTtcbiAgdmFyIGhhc09ubHlJbnRlcmZhY2VOYW1lcyA9IGtleXMuZXZlcnkoZnVuY3Rpb24gKG93bktleSkge1xuICAgIHJldHVybiBvd25LZXkgPT09ICduZXh0JyB8fCBvd25LZXkgPT09ICd0aHJvdyc7XG4gIH0pO1xuICByZXR1cm4ga2V5cy5sZW5ndGggJiYga2V5cy5sZW5ndGggPD0gMiAmJiBoYXNPbmx5SW50ZXJmYWNlTmFtZXM7XG59IiwiZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbn0pOyIsImV4cG9ydCBjb25zdCBteURhdGE9e1xyXG4gICAgbmFtZTogXCLQl9Cw0LPQu9Cw0LLQvdC+0LLQsCDQntC70YzQs9CwINCf0LXRgtGA0L7QstC90LBcIixcclxuICAgIGJpcnRoZGF0ZTogXCIxNSDRj9C90LLQsNGA0Y8gMTk3OdCzLlwiLFxyXG4gICAgd2lzaEpvYjoge1xyXG4gICAgICAgIG5hbWU6IFwiRnJvbnRlbmQt0YDQsNC30YDQsNCx0L7RgtGH0LjQulwiLFxyXG4gICAgICAgIGV4cGlyaWVuY2U6IFwi0LTQviAxINCz0L7QtNCwXCIsXHJcbiAgICAgICAgd29ya2RheTogXCLQp9Cw0YHRgtC40YfQvdCw0Y8g0LfQsNC90Y/RgtC+0YHRgtGMLCDQv9C+0LvQvdCw0Y8g0LfQsNC90Y/RgtC+0YHRgtGMLCDQv9GA0L7QtdC60YLQvdCw0Y8g0YDQsNCx0L7RgtCwXCIsXHJcbiAgICAgICAgc2NoZWR1bGU6IFwi0KPQtNCw0LvQtdC90L3QsNGPINGA0LDQsdC+0YLQsCwg0LPQuNCx0LrQuNC5INCz0YDQsNGE0LjQuiwg0L/QvtC70L3Ri9C5INC00LXQvdGMXCJcclxuICAgICAgICB9LFxyXG4gICAgYWJvdXRNZToge1xyXG4gICAgICAgIGNpdHk6IFwi0LMu0KfQtdCx0L7QutGB0LDRgNGLXCIsXHJcbiAgICAgICAgY2l0aXplbjogXCLQoNCkXCIsXHJcbiAgICAgICAgZ2VuZGVyOiBcItC20LXQvdGB0LrQuNC5XCIsXHJcbiAgICAgICAgc2VsZkluZm9ybWF0aW9uOiBcItCe0YLQstC10YLRgdGC0LLQtdC90L3QsNGPLCDQuNGB0L/QvtC70L3QuNGC0LXQu9GM0L3QsNGPLCDRhtC10LvQtdGD0YHRgtGA0LXQvNC70LXQvdC90LDRjy4g0JHQtdC3INCy0L8sINGBINC20L9cIlxyXG4gICAgfSxcclxuICAgIG1haW5FZHVjYXRpb246IHtcclxuICAgICAgICB5ZWFyOiBcIjE5OTYtMjAwMVwiLFxyXG4gICAgICAgIGluc3RpdHV0ZTogXCLQp9GD0LLQsNGI0YHQutC40Lkg0LPQvtGB0YPQtNCw0YDRgdGC0LLQtdC90L3Ri9C5INGD0L3QuNCy0LXRgNGB0LjRgtC10YIg0LjQvC4g0Jgu0J0uINCj0LvRjNGP0L3QvtCy0LAs0KfQtdCx0L7QutGB0LDRgNGLXCIsXHJcbiAgICAgICAgZmFjdWx0eTogXCLQpNCw0LrRg9C70YzRgtC10YIg0JjQvdGE0L7RgNC80LDRgtC40LrQuCDQuCDQstGL0YfQuNGB0LvQuNGC0LXQu9GM0L3QvtC5INGC0LXRhdC90LjQutC4LCDQn9GA0L7Qs9GA0LDQvNC80L3QvtC1INC+0LHQtdGB0L/QtdGH0LXQvdC40LUg0LLRi9GH0LjRgdC70LjRgtC10LvRjNC90L7QuSDRgtC10YXQvdC40LrQuCDQuCDQuNC90YTQvtGA0LzQsNGG0LjQvtC90L3Ri9GFINGB0LjRgdGC0LXQvFwiXHJcbiAgICB9LFxyXG4gICAgYWRkaXRpb25hbEVkdWNhdGlvbjoge1xyXG4gICAgICAgIDE6IHtcclxuICAgICAgICAgICAgeWVhcjogXCIyMDEzXCIsXHJcbiAgICAgICAgICAgIGluc3RpdHV0ZTogXCLQqNC60L7Qu9CwINGC0LXRhdC90L7Qu9C+0LPQuNC5INCx0LjQt9C90LXRgdCwXCIsXHJcbiAgICAgICAgICAgIGNvdXJzZU5hbWU6IFwi0KLRgNC10L3QuNC90LMuINCo0LrQvtC70LAg0YLQtdGF0L3QvtC70L7Qs9C40Lkg0LHQuNC30L3QtdGB0LAsINCg0LDQt9Cy0LjRgtC40LUg0YPQv9GA0LDQstC70LXQvdGH0LXRgdC60LjRhSDQutC+0LzQv9C10YLQtdC90YbQuNC5LiDQmNC90YHRgtGA0YPQvNC10L3RgtGLINGN0YTRhNC10LrRgtC40LLQvdC+0LPQviDRgNGD0LrQvtCy0L7QtNC40YLQtdC70Y8uXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIDI6IHtcclxuICAgICAgICAgICAgeWVhcjogXCIyMDE5LTIwMjBcIixcclxuICAgICAgICAgICAgaW5zdGl0dXRlOiBcIkdlZWtCcmFpbnNcIixcclxuICAgICAgICAgICAgY291cnNlTmFtZTogXCJGcm9udGVuZC3RgNCw0LfRgNCw0LHQvtGC0YfQuNC6XCJcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgcXVhbGlmaWNhdGlvbjogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgeWVhcjogXCLQkNCy0LPRg9GB0YIgMjAwMiDigJQg0JTQtdC60LDQsdGA0YwgMjAwMiwgNSDQvNC10YHRj9GG0LXQslwiLFxyXG4gICAgICAgICAgICBjb21wYW55OiBcItCe0J7QniDCq9CQ0JHQkS3QkNCy0YLQvtC80LDRgtC40LfQsNGG0LjRj8K7XCIsXHJcbiAgICAgICAgICAgIGNvbXBhbnlMaW5rOiBcImh0dHA6Ly9uZXcuYWJiLmNvbS9ydVwiLFxyXG4gICAgICAgICAgICBjaXR5OiBcItCn0LXQsdC+0LrRgdCw0YDRi1wiLFxyXG4gICAgICAgICAgICBqb2I6IFwi0JjQvdC20LXQvdC10YAg0L/QviDQkNCh0KMg0KbQtdC90YLRgNCwINC40L3QttC40L3QuNGA0LjQvdCz0LAg0Lgg0J3QmNCe0JrQoFwiLFxyXG4gICAgICAgICAgICBkdXR5OiBcItCg0LDQt9GA0LDQsdC+0YLQutCwINGN0LrRgNCw0L3QvtCyINC/0YDQvtGG0LXRgdGB0LAsINGN0LrRgNCw0L3QvdGL0YUg0YTQvtGA0Lwg0LTQu9GPIFNDQURBLdGB0LjRgdGC0LXQvNGLIE1pY3JvU0NBREEsINGA0LDQt9GA0LDQsdC+0YLQutCwINC/0YDQuNC70L7QttC10L3QuNC5INC00LvRjyBTQ0FEQS3RgdC40YHRgtC10LzRiyBNaWNyb1NDQURBLCBNUyBPZmZpY2Ug0L3QsCDQstGB0YLRgNC+0LXQvdC90L7QvCDRj9C30YvQutC1INC/0YDQvtCz0YDQsNC80LzQuNGA0L7QstCw0L3QuNGPIFNDSUwsINGP0LfRi9C60LDRhSDQv9GA0L7Qs9GA0LDQvNC80LjRgNC+0LLQsNC90LjRjyBWQiwgVkJBLlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHllYXI6IFwi0K/QvdCy0LDRgNGMIDIwMDMg4oCUINCU0LXQutCw0LHRgNGMIDIwMDQsIDIg0LPQvtC00LBcIixcclxuICAgICAgICAgICAgY29tcGFueTogXCLQntCe0J4gwqvQmtC+0LzQv9Cw0L3QuNGPINCc0JrQncK7XCIsXHJcbiAgICAgICAgICAgIGNvbXBhbnlMaW5rOiBcIlwiLFxyXG4gICAgICAgICAgICBjaXR5OiBcItCn0LXQsdC+0LrRgdCw0YDRi1wiLFxyXG4gICAgICAgICAgICBqb2I6IFwi0JjQvdC20LXQvdC10YBcIixcclxuICAgICAgICAgICAgZHV0eTogXCLRgNCw0LfRgNCw0LHQvtGC0LrQsCDRjdC60YDQsNC90L7QsiDQv9GA0L7RhtC10YHRgdCwLCDRjdC60YDQsNC90L3Ri9GFINGE0L7RgNC8INC00LvRjyBTQ0FEQS3RgdC40YHRgtC10LzRiyBTUFJFQ09OLCDRgNCw0LfRgNCw0LHQvtGC0LrQsCDQv9GA0LjQu9C+0LbQtdC90LjQuSDQtNC70Y8gU0NBREEt0YHQuNGB0YLQtdC80YsgTWljcm9TQ0FEQSwgTVMgT2ZmaWNlINC90LAg0LLRgdGC0YDQvtC10L3QvdC+0Lwg0Y/Qt9GL0LrQtSDQv9GA0L7Qs9GA0LDQvNC80LjRgNC+0LLQsNC90LjRjyBTQ0lMLCDRj9C30YvQutCw0YUg0L/RgNC+0LPRgNCw0LzQvNC40YDQvtCy0LDQvdC40Y8gVkIsIFZCQS5cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB5ZWFyOiBcItCv0L3QstCw0YDRjCAyMDA1IOKAlCDQodC10L3RgtGP0LHRgNGMIDIwMDUsIDkg0LzQtdGB0Y/RhtC10LJcIixcclxuICAgICAgICAgICAgY29tcGFueTogXCLQntCe0J4gwqvQkNCR0JEt0JDQstGC0L7QvNCw0YLQuNC30LDRhtC40Y/Cu1wiLFxyXG4gICAgICAgICAgICBjb21wYW55TGluazogXCJodHRwOi8vbmV3LmFiYi5jb20vcnVcIixcclxuICAgICAgICAgICAgY2l0eTogXCLQp9C10LHQvtC60YHQsNGA0YtcIixcclxuICAgICAgICAgICAgam9iOiBcItCY0L3QttC10L3QtdGAINC/0L4g0JDQodCjINCm0LXQvdGC0YDQsCDQuNC90LbQuNC90LjRgNC40L3Qs9CwINC4INCd0JjQntCa0KBcIixcclxuICAgICAgICAgICAgZHV0eTogXCLQoNCw0LfRgNCw0LHQvtGC0LrQsCDRjdC60YDQsNC90L7QsiDQv9GA0L7RhtC10YHRgdCwLCDRjdC60YDQsNC90L3Ri9GFINGE0L7RgNC8INC00LvRjyBTQ0FEQS3RgdC40YHRgtC10LzRiyBNaWNyb1NDQURBOyDRgNCw0LfRgNCw0LHQvtGC0LrQsCDQv9GA0LjQu9C+0LbQtdC90LjQuSDQtNC70Y8gU0NBREEt0YHQuNGB0YLQtdC80YsgTWljcm9TQ0FEQSwgTVMgT2ZmaWNlINC90LAg0LLRgdGC0YDQvtC10L3QvdC+0Lwg0Y/Qt9GL0LrQtSDQv9GA0L7Qs9GA0LDQvNC80LjRgNC+0LLQsNC90LjRjyBTQ0lMLCDRj9C30YvQutCw0YUg0L/RgNC+0LPRgNCw0LzQvNC40YDQvtCy0LDQvdC40Y8gVkIsIFZCQS5cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB5ZWFyOiBcItCh0LXQvdGC0Y/QsdGA0YwgMjAwNSDigJQg0JjRjtC70YwgMjAwOCwgMiDQs9C+0LTQsCAxMSDQvNC10YHRj9GG0LXQslwiLFxyXG4gICAgICAgICAgICBjb21wYW55OiBcItCg0KLQodC+0YTRgiwg0JfQkNCeXCIsXHJcbiAgICAgICAgICAgIGNpdHk6IFwi0KfQtdCx0L7QutGB0LDRgNGLXCIsXHJcbiAgICAgICAgICAgIGNvbXBhbnlMaW5rOiBcImh0dHA6Ly9ydHNvZnQucnVcIixcclxuICAgICAgICAgICAgam9iOiBcItCY0L3QttC10L3QtdGAXCIsXHJcbiAgICAgICAgICAgIGR1dHk6IFwi0J/QvtC00LPQvtGC0L7QstC60LAg0YLQtdGF0L3QuNC60L4t0LrQvtC80LzQtdGA0YfQtdGB0LrQuNGFINC/0YDQtdC00LvQvtC20LXQvdC40LkgKNCi0JrQnykg0L3QsCDQkNCh0KMg0KLQnyDQtNC70Y8g0Y3QvdC10YDQs9C+0L7QsdGK0LXQutGC0L7Qsiwg0L/QvtC00LPQvtGC0L7QstC60LAg0YLQtdGF0L3QuNGH0LXRgdC60L7QuSwg0LrQvtC90LrRg9GA0YHQvdC+0Lkg0LTQvtC60YPQvNC10L3RgtCw0YbQuNC4INC00LvRjyDQotCa0J9cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB5ZWFyOiBcItCY0Y7Qu9GMIDIwMDgg4oCUINCd0L7Rj9Cx0YDRjCAyMDEzLCA1INC70LXRgiA1INC80LXRgdGP0YbQtdCyXCIsXHJcbiAgICAgICAgICAgIGNvbXBhbnk6IFwi0KDQotCh0L7RhNGCLCDQl9CQ0J5cIixcclxuICAgICAgICAgICAgY2l0eTogXCLQp9C10LHQvtC60YHQsNGA0YtcIixcclxuICAgICAgICAgICAgY29tcGFueUxpbms6IFwiaHR0cDovL3J0c29mdC5ydVwiLFxyXG4gICAgICAgICAgICBqb2I6IFwi0KHRgtCw0YDRiNC40Lkg0LjQvdC20LXQvdC10YAg0L7RgtC00LXQu9CwINGB0LjRgdGC0LXQvNC90L7QuSDQuNC90YLQtdCz0YDQsNGG0LjQuFwiLFxyXG4gICAgICAgICAgICBkdXR5OiBcItCg0LDQt9GA0LDQsdC+0YLQutCwINGN0LrRgNCw0L3QvtCyINC/0YDQvtGG0LXRgdGB0LAsINGE0L7RgNC8INC+0YLRh9C10YLQvtCyINC00LvRjyBTQ0FEQS3RgdC40YHRgtC10LzRiyBTUFJFQ09OLCDRgNCw0LfRgNCw0LHQvtGC0LrQsCDRjdC60YHQv9C70YPQsNGC0LDRhtC40L7QvdC90L7QuSDQtNC+0LrRg9C80LXQvdGC0LDRhtC40Lgg0L3QsCDRiNC60LDRhNGLINC4INGB0LjRgdGC0LXQvNGDINCQ0KHQoyDQotCfLCDRgNCw0LfRgNCw0LHQvtGC0LrQsCDRgNCw0LfQtNC10LvQvtCyINGA0LDQsdC+0YfQtdC5INC00L7QutGD0LzQtdC90YLQsNGG0LjQuCwg0YDQsNC30YDQsNCx0L7RgtC60LAg0L/RgNC40LvQvtC20LXQvdC40Lkg0LTQu9GPIFNDQURBLdGB0LjRgdGC0LXQvNGLIFNQUkVDT04sIE1TIE9mZmljZSDQvdCwINGP0LfRi9C60LDRhSDQv9GA0L7Qs9GA0LDQvNC80LjRgNC+0LLQsNC90LjRjyBWQiwgVkJBLCBDIy5cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB5ZWFyOiBcItCd0L7Rj9Cx0YDRjCAyMDEzIOKAlCDQkNC/0YDQtdC70YwgMjAxNSwgMSDQs9C+0LQgNiDQvNC10YHRj9GG0LXQslwiLFxyXG4gICAgICAgICAgICBjb21wYW55OiBcItCg0KLQodC+0YTRgiwg0JfQkNCeXCIsXHJcbiAgICAgICAgICAgIGNpdHk6IFwi0KfQtdCx0L7QutGB0LDRgNGLXCIsXHJcbiAgICAgICAgICAgIGNvbXBhbnlMaW5rOiBcImh0dHA6Ly9ydHNvZnQucnVcIixcclxuICAgICAgICAgICAgam9iOiBcItCg0YPQutC+0LLQvtC00LjRgtC10LvRjCDQs9GA0YPQv9C/0Ysg0L/RgNC10LTQv9GA0L7QtdC60YLQvdC+0Lkg0L/QvtC00LPQvtGC0L7QstC60LhcIixcclxuICAgICAgICAgICAgZHV0eTogXCLQntGA0LPQsNC90LjQt9Cw0YbQuNGPINGA0LDQsdC+0YLRiyDQs9GA0YPQv9C/0Ysg0L/RgNC10LTQv9GA0L7QtdC60YLQvdC+0Lkg0L/QvtC00LPQvtGC0L7QstC60LgsINC/0L7RgdGC0LDQvdC+0LLQutCwINC30LDQtNCw0YcsINC60L7QvdGC0YDQvtC70Ywg0LLRi9C/0L7Qu9C90LXQvdC40Y8g0L/QvtGB0YLQsNCy0LvQtdC90L3Ri9GFINC30LDQtNCw0YcsINC/0L7QtNCz0L7RgtC+0LLQutCwINC4INC/0YDQvtCy0LXRgNC60LAg0YLQtdGF0L3QuNC60L4t0LrQvtC80LzQtdGA0YfQtdGB0LrQuNGFINC/0YDQtdC00LvQvtC20LXQvdC40LksINC/0L7QtNCz0L7RgtC+0LLQutCwINC4INC/0YDQvtCy0LXRgNC60LAg0YLQtdGF0L3QuNGH0LXRgdC60L7QuSwg0LrQvtC90LrRg9GA0YHQvdC+0Lkg0LTQvtC60YPQvNC10L3RgtCw0YbQuNC4INC00LvRjyDQotCa0J8uXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgeWVhcjogXCLQkNC/0YDQtdC70YwgMjAxNSDigJQg0KHQtdC90YLRj9Cx0YDRjCAyMDE2LCAxINCz0L7QtCA2INC80LXRgdGP0YbQtdCyXCIsXHJcbiAgICAgICAgICAgIGNvbXBhbnk6IFwi0KDQotCh0L7RhNGCLCDQl9CQ0J5cIixcclxuICAgICAgICAgICAgY2l0eTogXCLQp9C10LHQvtC60YHQsNGA0YtcIixcclxuICAgICAgICAgICAgY29tcGFueUxpbms6IFwiaHR0cDovL3J0c29mdC5ydVwiLFxyXG4gICAgICAgICAgICBqb2I6IFwi0JPQu9Cw0LLQvdGL0Lkg0YHQv9C10YbQuNCw0LvQuNGB0YIg0L7RgtC00LXQu9CwINGB0LjRgdGC0LXQvNC90L7QuSDQuNC90YLQtdCz0YDQsNGG0LjQuFwiLFxyXG4gICAgICAgICAgICBkdXR5OiBcItCf0L7QtNCz0L7RgtC+0LLQutCwINGC0LXRhdC90LjQutC+LdC60L7QvNC80LXRgNGH0LXRgdC60LjRhSDQv9GA0LXQtNC70L7QttC10L3QuNC5LCDQv9C+0LTQs9C+0YLQvtCy0LrQsCDRgtC10YXQvdC40YfQtdGB0LrQvtC5LCDQutC+0L3QutGD0YDRgdC90L7QuSDQtNC+0LrRg9C80LXQvdGC0LDRhtC40Lgg0LTQu9GPINCi0JrQnywg0LrQvtC90YTQuNCz0YPRgNC40YDQvtCy0LDQvdC40LUgU0NBREEt0YHQuNGB0YLQtdC80YsgU1BSRUNPTiwg0YDQsNC30YDQsNCx0L7RgtC60LAg0Y3QutGB0L/Qu9GD0LDRgtCw0YbQuNC+0L3QvdC+0Lkg0LTQvtC60YPQvNC10L3RgtCw0YbQuNC4INC90LAg0YjQutCw0YTRiyDQuCDRgdC40YHRgtC10LzRgyDQkNCh0KMg0KLQnywg0YDQsNC30YDQsNCx0L7RgtC60LAg0YDQsNC30LTQtdC70L7QsiDRgNCw0LHQvtGH0LXQuSDQtNC+0LrRg9C80LXQvdGC0LDRhtC40LguXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgeWVhcjogXCLQodC10L3RgtGP0LHRgNGMIDIwMTYg4oCUINC90L7Rj9Cx0YDRjCAyMDE5LCAzINCz0L7QtNCwIDIg0LzQtdGB0Y/RhtCwXCIsXHJcbiAgICAgICAgICAgIGNvbXBhbnk6IFwi0KDQotCh0L7RhNGCLCDQl9CQ0J5cIixcclxuICAgICAgICAgICAgY2l0eTogXCLQp9C10LHQvtC60YHQsNGA0YtcIixcclxuICAgICAgICAgICAgY29tcGFueUxpbms6IFwiaHR0cDovL3J0c29mdC5ydVwiLFxyXG4gICAgICAgICAgICBqb2I6IFwi0JTQtdC60YDQtdGC0L3Ri9C5INC+0YLQv9GD0YHQuiDQuCDQvtGC0L/Rg9GB0Log0L/QviDRg9GF0L7QtNGDINC30LAg0YDQtdCx0LXQvdC60L7QvFwiLFxyXG4gICAgICAgICAgICBkdXR5OiBcItCj0YXQvtC0LCDQutC+0YDQvNC70LXQvdC40LUsINC/0LXQu9C10L3QsNC90LjQtSwg0YHRgtC40YDQutCwLCDQs9C70LDQttC60LAsINCz0L7RgtC+0LLQutCwLCDRg9Cx0L7RgNC60LAsINGB0L3QvtCy0LAg0YPRhdC+0LQsINC60L7RgNC80LvQtdC90LjQtS4uLiDQmCDQvNC90L7Qs9C+LdC80L3QvtCz0L4g0YHRh9Cw0YHRgtGM0Y9cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB5ZWFyOiBcItC90L7Rj9Cx0YDRjCAyMDE5IC0g0L3QsNGB0YLQvtGP0YnQtdC1INCy0YDQtdC80Y9cIixcclxuICAgICAgICAgICAgY29tcGFueTogXCLQoNCi0KHQvtGE0YIsINCX0JDQnlwiLFxyXG4gICAgICAgICAgICBjaXR5OiBcItCn0LXQsdC+0LrRgdCw0YDRi1wiLFxyXG4gICAgICAgICAgICBjb21wYW55TGluazogXCJodHRwOi8vcnRzb2Z0LnJ1XCIsXHJcbiAgICAgICAgICAgIGpvYjogXCLQk9C70LDQstC90YvQuSDRgdC/0LXRhtC40LDQu9C40YHRgiDQvtGC0LTQtdC70LAg0YHQuNGB0YLQtdC80L3QvtC5INC40L3RgtC10LPRgNCw0YbQuNC4XCIsXHJcbiAgICAgICAgICAgIGR1dHk6IFwi0J/QvtC00LPQvtGC0L7QstC60LAg0YLQtdGF0L3QuNC60L4t0LrQvtC80LzQtdGA0YfQtdGB0LrQuNGFINC/0YDQtdC00LvQvtC20LXQvdC40LkuXCJcclxuICAgICAgICB9LFxyXG4gICAgXSxcclxuICAgIG1haW5TY2lsbHM6IFtcItCe0L/Ri9GCINC/0YDQvtCz0YDQsNC80LzQuNGA0L7QstCw0L3QuNGPINC90LAgQyMsIFZCLCBWQkFcIiwgXCJIVE1MNVwiLCBcIkNTUzNcIiwgXCJKYXZhU2NyaXB0XCIsIFwiVnVlSlNcIiwgXCJSZWFjdEpTXCIsIFwiUkVEVVhcIiwgXCJCb290c3RyYXBcIiwgXCJMRVNTLCBTQVNTLCBTQ1NTXCIsIFwiR2l0XCIsIFwiU1FMXCIsIFwiR3VscCwgV2VicGFjayDQv9C+INC00L7QutGD0LzQtdC90YLQsNGG0LjQuCDQuCDQv9GA0LjQvNC10YDQsNC8XCJdLFxyXG4gICAgbGFuZ3VhZ2VzOiB7XHJcbiAgICAgICAgcnVzc2lhbjogXCLQoNGD0YHRgdC60LjQuSAo0YDQvtC00L3QvtC5KVwiLFxyXG4gICAgICAgIGVuZ2xpc2g6IFwi0JDQvdCz0LvQuNC50YHQutC40LkgKHByZS1pbnRlcm1pZGlhdGUpXCJcclxuICAgIH0sXHJcbiAgICBjYXI6IFwi0J/RgNCw0LLQsCDQutCw0YLQtdCz0L7RgNC40LggQiwg0L7Qv9GL0YIg0LLQvtC20LTQtdC90LjRjyDRgSAyMDA4INCz0L7QtNCwLiDQldGB0YLRjCDQu9C40YfQvdGL0Lkg0LDQstGC0L7QvNC+0LHQuNC70YwuXCIsXHJcbiAgICBjb250YWN0czoge1xyXG4gICAgICAgIHBob25lOiAnKzcoOTA1KTM0Ni01Mi03NScsXHJcbiAgICAgICAgaWNxOiAnMTk1MDM2MzYwJyxcclxuICAgICAgICBza3lwZTogJ3NtaXJub3ZhLm9sZ2EuMTk3OScsXHJcbiAgICAgICAgZW1haWw6ICdvbGdhLnphZ2xhdm5vdmFAbWFpbC5ydScsXHJcbiAgICAgICAgdms6ICdAT2xnYVphZ2xhdm5vdmEnXHJcbiAgICB9LFxyXG4gICAgdGVzdHM6W1xyXG4gICAgICAgIFxyXG4gICAgXSxcclxuICAgIHNlcnRpZmljYXRlczpbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzY2hvb2w6ICfQqNC60L7Qu9CwINGC0LXRhdC90L7Qu9C+0LPQuNC5INCx0LjQt9C90LXRgdCwJyxcclxuICAgICAgICAgICAgZnVsbE5hbWU6IGDQoNCw0LfQstC40YLQuNC1INGD0L/RgNCw0LLQu9C10L3Rh9C10YHQutC40YUg0LrQvtC80L/QtdGC0LXQvdGG0LjQuS4g0JjQvdGB0YLRgNGD0LzQtdC90YLRiyDRjdGE0YTQtdC60YLQuNCy0L3QvtCz0L4g0YDRg9C60L7QstC+0LTQuNGC0LXQu9GPYCxcclxuICAgICAgICAgICAgZGF0ZTogJzEzLTE0INC00LXQutCw0LHRgNGPIDIwMTPQsy4nLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogW10sXHJcbiAgICAgICAgICAgIHNyYzogJy4vc3JjL2ltZy9zZXJ0aWZpY2F0ZXMvRWZmZWN0aXZlTGVhZGVyLnBuZydcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2Nob29sOiAnR2Vla0JyYWlucycsXHJcbiAgICAgICAgICAgIGZ1bGxOYW1lOiBgUEhQLiDQm9C40YfQvdGL0Lkg0LHQu9C+0LNgLFxyXG4gICAgICAgICAgICBkYXRlOiAnMTcg0L3QvtGP0LHRgNGPIDIwMTXQsy4nLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogW10sXHJcbiAgICAgICAgICAgIHNyYzogJy4vc3JjL2ltZy9zZXJ0aWZpY2F0ZXMvUGhwX2Jsb2cucG5nJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzY2hvb2w6ICdHZWVrQnJhaW5zJyxcclxuICAgICAgICAgICAgZnVsbE5hbWU6IGBHaXQuINCR0YvRgdGC0YDRi9C5INGB0YLQsNGA0YJgLFxyXG4gICAgICAgICAgICBkYXRlOiAnMjMg0L3QvtGP0LHRgNGPIDIwMTXQsy4nLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogW10sXHJcbiAgICAgICAgICAgIHNyYzogJy4vc3JjL2ltZy9zZXJ0aWZpY2F0ZXMvR2l0X3F1aWNrU3RhcnQucG5nJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzY2hvb2w6ICdHZWVrQnJhaW5zJyxcclxuICAgICAgICAgICAgZnVsbE5hbWU6IGDQntGB0L3QvtCy0Ysg0J7QntCfYCxcclxuICAgICAgICAgICAgZGF0ZTogJzI3INC90L7Rj9Cx0YDRjyAyMDE10LMuJyxcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFtdLFxyXG4gICAgICAgICAgICBzcmM6ICcuL3NyYy9pbWcvc2VydGlmaWNhdGVzL09vcF9iYXNlLnBuZydcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2Nob29sOiAnR2Vla0JyYWlucycsXHJcbiAgICAgICAgICAgIGZ1bGxOYW1lOiBg0KEjLiDQnNC40L3QuC3Qv9GA0L7Qs9GA0LDQvNC80YtgLFxyXG4gICAgICAgICAgICBkYXRlOiAnMSDQtNC10LrQsNCx0YDRjyAyMDE10LMuJyxcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFtdLFxyXG4gICAgICAgICAgICBzcmM6ICcuL3NyYy9pbWcvc2VydGlmaWNhdGVzL0NzaGFycF9taW5pLnBuZydcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2Nob29sOiAnR2Vla0JyYWlucycsXHJcbiAgICAgICAgICAgIGZ1bGxOYW1lOiBg0J7RgdC90L7QstGLINC/0YDQvtCz0YDQsNC80LzQuNGA0L7QstCw0L3QuNGPYCxcclxuICAgICAgICAgICAgZGF0ZTogJzgg0LTQtdC60LDQsdGA0Y8gMjAxNdCzLicsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBbXSxcclxuICAgICAgICAgICAgc3JjOiAnLi9zcmMvaW1nL3NlcnRpZmljYXRlcy9Qcm9ncmFtbWluZ0Jhc2UucG5nJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzY2hvb2w6ICdHZWVrQnJhaW5zJyxcclxuICAgICAgICAgICAgZnVsbE5hbWU6IGBDI2AsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBbJ9Ca0L7Qu9C70LXQutGG0LjQuCcsXHJcbiAgICAgICAgICAgICAgICAn0J/Qu9Cw0YLRhNC+0YDQvNCwIG1pY3Jvc29mdCAubmV0IGZyYW1ld29yayDQuCDRgdGA0LXQtNCwIHZpc3VhbCBzdHVkaW8gLm5ldCcsXHJcbiAgICAgICAgICAgICAgICAn0KDQsNCx0L7RgtCwINGBINGE0LDQudC70L7QstC+0Lkg0YHQuNGB0YLQtdC80L7QuSDQuCDQvtGA0LPQsNC90LjQt9Cw0YbQuNGPINGE0LDQudC70L7QstC+0LPQviDQstCy0L7QtNCwLdCy0YvQstC+0LTQsCDQtNCw0L3QvdGL0YUnLFxyXG4gICAgICAgICAgICAgICAgJ9Ce0YHQvdC+0LLQvdGL0LUg0L/QvtC90Y/RgtC40Y8g0Lgg0L7Qv9C10YDQsNGC0L7RgNGLINGP0LfRi9C60LAg0YEjJyxcclxuICAgICAgICAgICAgICAgICfQmtC70LDRgdGB0Ysg0Lgg0L7QsdGK0LXQutGC0YsnLFxyXG4gICAgICAgICAgICAgICAgJ9Cc0LDRgdGB0LjQstGLINGB0LjQvNCy0L7Qu9GLINC4INGB0YLRgNC+0LrQuCddLFxyXG4gICAgICAgICAgICBkYXRlOiAnMjUg0Y/QvdCy0LDRgNGPIDIwMTbQsy4nLFxyXG4gICAgICAgICAgICBzcmM6ICcuL3NyYy9pbWcvdGVzdHMvdGVzdF9Dc2hhcnAucG5nJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzY2hvb2w6ICdHZWVrQnJhaW5zJyxcclxuICAgICAgICAgICAgZnVsbE5hbWU6IGDQntGB0L3QvtCy0Ysg0L/RgNC+0LPRgNCw0LzQvNC40YDQvtCy0LDQvdC40Y9gLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogWyfQntGB0L3QvtCy0Ysg0L/RgNC+0LPRgNCw0LzQvNC40YDQvtCy0LDQvdC40Y8nLFxyXG4gICAgICAgICAgICAgICAgJ9Ce0L/QtdGA0LDRgtC+0YDRiyDQuCDRhNGD0L3QutGG0LjQuCcsXHJcbiAgICAgICAgICAgICAgICAn0J/QvtGB0YLQsNC90L7QstC60LAg0LfQsNC00LDRh9C4INC4INCw0LvQs9C+0YDQuNGC0LzQuNGA0L7QstCw0L3QuNC1JyxcclxuICAgICAgICAgICAgICAgICfQkdCw0LfQvtCy0YvQtSDQv9C+0L3Rj9GC0LjRjyddLFxyXG4gICAgICAgICAgICBkYXRlOiAnMjUg0Y/QvdCy0LDRgNGPIDIwMTbQsy4nLFxyXG4gICAgICAgICAgICBzcmM6ICcuL3NyYy9pbWcvdGVzdHMvdGVzdF9Qcm9ncmFtbWluZ0Jhc2UucG5nJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzY2hvb2w6ICdHZWVrQnJhaW5zJyxcclxuICAgICAgICAgICAgZnVsbE5hbWU6IGBDIy4g0JLQuNC60YLQvtGA0LjQvdCwIFwi0KPQs9Cw0LTQsNC5INC80LXQu9C+0LTQuNGOXCJgLFxyXG4gICAgICAgICAgICBkYXRlOiAnMjYg0Y/QvdCy0LDRgNGPIDIwMTbQsy4nLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogW10sXHJcbiAgICAgICAgICAgIHNyYzogJy4vc3JjL2ltZy9zZXJ0aWZpY2F0ZXMvQ3NoYXJwX3ZpY3QucG5nJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzY2hvb2w6ICdHZWVrQnJhaW5zJyxcclxuICAgICAgICAgICAgZnVsbE5hbWU6IGBBbmRyb2lkLiDQkdGL0YHRgtGA0YvQuSDRgdGC0LDRgNGCYCxcclxuICAgICAgICAgICAgZGF0ZTogJzE3INGE0LXQstGA0LDQu9GPIDIwMTbQsy4nLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogW10sXHJcbiAgICAgICAgICAgIHNyYzogJy4vc3JjL2ltZy9zZXJ0aWZpY2F0ZXMvQW5kcm9pZC5wbmcnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNjaG9vbDogJ0dlZWtCcmFpbnMnLFxyXG4gICAgICAgICAgICBmdWxsTmFtZTogYNCa0LDQuiDRgdC+0LfQtNCw0YLRjCDQu9C40YfQvdGL0Lkg0LHQu9C+0LM6INC60YPRgNGBIFwi0KHQvtC30LTQsNC90LjQtSDQsdC70L7Qs9CwINC90LAgV29yZHByZXNzXCJgLFxyXG4gICAgICAgICAgICBkYXRlOiAnMjYg0YTQtdCy0YDQsNC70Y8gMjAxNtCzLicsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBbXSxcclxuICAgICAgICAgICAgc3JjOiAnLi9zcmMvaW1nL3NlcnRpZmljYXRlcy9Xb3JkcHJlc3MucG5nJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzY2hvb2w6ICdHZWVrQnJhaW5zJyxcclxuICAgICAgICAgICAgZnVsbE5hbWU6IGDQktC10LEt0YDQsNC30YDQsNCx0L7RgtC60LAuINCR0YvRgdGC0YDRi9C5INGB0YLQsNGA0YJgLFxyXG4gICAgICAgICAgICBkYXRlOiAnMTYg0LDQstCz0YPRgdGC0LAgMjAxONCzLicsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBbXSxcclxuICAgICAgICAgICAgc3JjOiAnLi9zcmMvaW1nL3NlcnRpZmljYXRlcy9XZWJEZXZfcXVpY2tTdGFydC5wbmcnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNjaG9vbDogJ0dlZWtCcmFpbnMnLFxyXG4gICAgICAgICAgICBmdWxsTmFtZTogYEhUTUwvQ1NTLiDQmNC90YLQtdGA0LDQutGC0LjQstC90YvQuSDQutGD0YDRgWAsXHJcbiAgICAgICAgICAgIGRhdGU6ICcyINGB0LXQvdGC0Y/QsdGA0Y8gMjAxOdCzLicsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBbXSxcclxuICAgICAgICAgICAgc3JjOiAnLi9zcmMvaW1nL3NlcnRpZmljYXRlcy9IVE1MX0NTU18xLnBuZydcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2Nob29sOiAnR2Vla0JyYWlucycsXHJcbiAgICAgICAgICAgIGZ1bGxOYW1lOiBgSFRNTCZDU1NgLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogWyfQoNCw0LHQvtGC0LAg0YEg0LHQu9C+0LrQsNC80LgnLFxyXG4gICAgICAgICAgICAgICAgJ9Ck0L7RgNC80YsgaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAn0KLQtdCz0Lgg0Lgg0LDRgtGA0LjQsdGD0YLRiyBodG1sJyxcclxuICAgICAgICAgICAgICAgICfQntGB0L3QvtCy0YsgaHRtbCDQuCBjc3MnLFxyXG4gICAgICAgICAgICAgICAgJ9Ch0LXQu9C10LrRgtC+0YDRiyBjc3MnLFxyXG4gICAgICAgICAgICAgICAgJ9Cg0LDQsdC+0YLQsCDRgSDRgtC10LrRgdGC0L7QvCDQuCDRgtCw0LHQu9C40YbQsNC80LgnXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIGRhdGU6ICczINGB0LXQvdGC0Y/QsdGA0Y8gMjAxOdCzLicsXHJcbiAgICAgICAgICAgIHNyYzogJy4vc3JjL2ltZy90ZXN0cy90ZXN0X0hUTUxfQ1NTLnBuZydcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2Nob29sOiAnR2Vla0JyYWlucycsXHJcbiAgICAgICAgICAgIGZ1bGxOYW1lOiBgSFRNTDUg0LggQ1NTM2AsXHJcbiAgICAgICAgICAgIGRhdGU6ICcxOSDQvtC60YLRj9Cx0YDRjyAyMDE50LMuJyxcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFtdLFxyXG4gICAgICAgICAgICBzcmM6ICcuL3NyYy9pbWcvc2VydGlmaWNhdGVzL0hUTUxfQ1NTXzIucG5nJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzY2hvb2w6ICdHZWVrQnJhaW5zJyxcclxuICAgICAgICAgICAgZnVsbE5hbWU6IGDQmtCw0Log0YHRgtCw0YLRjCDQv9GA0L7Qs9GA0LDQvNC80LjRgdGC0L7QvGAsXHJcbiAgICAgICAgICAgIGRhdGU6ICcyMiDQvtC60YLRj9Cx0YDRjyAyMDE50LMuJyxcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFtdLFxyXG4gICAgICAgICAgICBzcmM6ICcuL3NyYy9pbWcvc2VydGlmaWNhdGVzL1RvQmVQcm9ncmFtbWVyLnBuZydcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2Nob29sOiAnR2Vla0JyYWlucycsXHJcbiAgICAgICAgICAgIGZ1bGxOYW1lOiBgSmF2YVNjcmlwdC4g0KPRgNC+0LLQtdC90YwgMWAsXHJcbiAgICAgICAgICAgIGRhdGU6ICcxOCDQvdC+0Y/QsdGA0Y8gMjAxOdCzLicsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBbXSxcclxuICAgICAgICAgICAgc3JjOiAnLi9zcmMvaW1nL3NlcnRpZmljYXRlcy9KYXZhU2NyaXB0MS5wbmcnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNjaG9vbDogJ0dlZWtCcmFpbnMnLFxyXG4gICAgICAgICAgICBmdWxsTmFtZTogYNCQ0L3Qs9C70LjQudGB0LrQuNC5INC00LvRjyBJVC3RgdC/0LXRhtC40LDQu9C40YHRgtC+0LJgLFxyXG4gICAgICAgICAgICBkYXRlOiAnMiDQtNC10LrQsNCx0YDRjyAyMDE50LMuJyxcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFtdLFxyXG4gICAgICAgICAgICBzcmM6ICcuL3NyYy9pbWcvc2VydGlmaWNhdGVzL0VuZ2xpc2hGb3JJVC5wbmcnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNjaG9vbDogJ0dlZWtCcmFpbnMnLFxyXG4gICAgICAgICAgICBmdWxsTmFtZTogYNCe0YHQvdC+0LLRiyDQsdCw0Lcg0LTQsNC90L3Ri9GFYCxcclxuICAgICAgICAgICAgZGF0ZTogJzEyINC00LXQutCw0LHRgNGPIDIwMTnQsy4nLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogW10sXHJcbiAgICAgICAgICAgIHNyYzogJy4vc3JjL2ltZy9zZXJ0aWZpY2F0ZXMvREJfYmFzZS5wbmcnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNjaG9vbDogJ0dlZWtCcmFpbnMnLFxyXG4gICAgICAgICAgICBmdWxsTmFtZTogYEphdmFTY3JpcHQuINCj0YDQvtCy0LXQvdGMIDJgLFxyXG4gICAgICAgICAgICBkYXRlOiAnMTAg0Y/QvdCy0LDRgNGPIDIwMjDQsy4nLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogW10sXHJcbiAgICAgICAgICAgIHNyYzogJy4vc3JjL2ltZy9zZXJ0aWZpY2F0ZXMvSmF2YVNjcmlwdDIucG5nJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzY2hvb2w6ICdHZWVrQnJhaW5zJyxcclxuICAgICAgICAgICAgZnVsbE5hbWU6IGDQktGR0YDRgdGC0LrQsCDRgdCw0LnRgtC+0LIg0L3QsCDQv9GA0LjQvNC10YDQtSBMYW5kaW5nIFBhZ2VgLFxyXG4gICAgICAgICAgICBkYXRlOiAnMTMg0Y/QvdCy0LDRgNGPIDIwMjDQsy4nLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogW10sXHJcbiAgICAgICAgICAgIHNyYzogJy4vc3JjL2ltZy9zZXJ0aWZpY2F0ZXMvTGFuZGluZ1BhZ2UucG5nJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzY2hvb2w6ICdHZWVrQnJhaW5zJyxcclxuICAgICAgICAgICAgZnVsbE5hbWU6IGDQkNCy0YLQvtC80LDRgtC40LfQsNGG0LjRjyDRgSDQv9C+0LzQvtGJ0YzRjiBHdWxwYCxcclxuICAgICAgICAgICAgZGF0ZTogJzE0INGP0L3QstCw0YDRjyAyMDIw0LMuJyxcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFtdLFxyXG4gICAgICAgICAgICBzcmM6ICcuL3NyYy9pbWcvc2VydGlmaWNhdGVzL0d1bHAucG5nJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzY2hvb2w6ICdHZWVrQnJhaW5zJyxcclxuICAgICAgICAgICAgZnVsbE5hbWU6IGDQktC10YDRgdGC0LDQtdC8IGxhbmRpbmcgcGFnZSDQvdCwIEhUTUw1YCxcclxuICAgICAgICAgICAgZGF0ZTogJzEwINGE0LXQstGA0LDQu9GPIDIwMjDQsy4nLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogW10sXHJcbiAgICAgICAgICAgIHNyYzogJy4vc3JjL2ltZy9zZXJ0aWZpY2F0ZXMvTGFuZGluZ1BhZ2VfSFRNTDUucG5nJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzY2hvb2w6ICdHZWVrQnJhaW5zJyxcclxuICAgICAgICAgICAgZnVsbE5hbWU6IGBSZWFjdEpTYCxcclxuICAgICAgICAgICAgZGF0ZTogJzQg0LzQsNGA0YLQsCAyMDIw0LMuJyxcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFtdLFxyXG4gICAgICAgICAgICBzcmM6ICcuL3NyYy9pbWcvc2VydGlmaWNhdGVzL1JlYWN0SlMucG5nJ1xyXG4gICAgICAgIH0sXHJcbiAgICBdLFxyXG4gICAgcG9ydGZvbGlvX2dlZWticmFpbnM6IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNjaG9vbDogJ0dlZWtCcmFpbnMnLFxyXG4gICAgICAgICAgICBjb3Vyc2U6ICdIVE1ML0NTUy4g0JjQvdGC0LXRgNCw0LrRgtC40LLQvdGL0Lkg0LrRg9GA0YEnLFxyXG4gICAgICAgICAgICB3b3JrTmFtZTogJ9CS0LXRgNGB0YLQutCwINGB0YLRgNCw0L3QuNGG0YsnLFxyXG4gICAgICAgICAgICBkZW1vbGluazogJ2h0dHBzOi8vb2xnYXphZ2xhdm5vdmEuZ2l0aHViLmlvL09aYWdsYXZub3ZhX0hUTUxDU1MxX2xlc3NvbjgnLFxyXG4gICAgICAgICAgICBjb2RlbGluazonaHR0cHM6Ly9naXRodWIuY29tL09sZ2FaYWdsYXZub3ZhL09sZ2FaYWdsYXZub3ZhLmdpdGh1Yi5pby90cmVlL21hc3Rlci9PWmFnbGF2bm92YV9IVE1MQ1NTMV9sZXNzb244JyxcclxuICAgICAgICAgICAgc3JjOicuL3NyYy9pbWcvcG9ydGZvbGlvL0hUTUxDU1MxX2h0OC5wbmcnLFxyXG4gICAgICAgICAgICBjb21tZW50OifQoNCw0LHQvtGC0LDRjtGCINC/0YPQvdC60YLRiyDQvNC10L3RjiBIb21lLCBQcm9kdWN0cyDQuCBQcm9kdWN0cy9Ib21lJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzY2hvb2w6ICdHZWVrQnJhaW5zJyxcclxuICAgICAgICAgICAgY291cnNlOiAnSFRNTDUg0LggQ1NTMycsXHJcbiAgICAgICAgICAgIHdvcmtOYW1lOiAn0JLQtdGA0YHRgtC60LAg0YHRgtGA0LDQvdC40YbRiycsXHJcbiAgICAgICAgICAgIGRlbW9saW5rOiAnaHR0cHM6Ly9vbGdhemFnbGF2bm92YS5naXRodWIuaW8vT1phZ2xhdm5vdmFfSFRNTENTUzJfbGVzc29uNi8nLFxyXG4gICAgICAgICAgICBjb2RlbGluazonaHR0cHM6Ly9naXRodWIuY29tL09sZ2FaYWdsYXZub3ZhL09sZ2FaYWdsYXZub3ZhLmdpdGh1Yi5pby90cmVlL21hc3Rlci9PWmFnbGF2bm92YV9IVE1MQ1NTMl9sZXNzb242JyxcclxuICAgICAgICAgICAgc3JjOicuL3NyYy9pbWcvcG9ydGZvbGlvL0hUTUxDU1MyX2h0Ni5wbmcnLFxyXG4gICAgICAgICAgICBjb21tZW50OiAn0J/RgNC4INC90LDQstC10LTQtdC90LjQuCDQvdCwINGN0LvQtdC80LXQvdGC0Ysg0LLRi9C/0L7Qu9C90Y/RjtGC0YHRjyDRjdGE0YTQtdC60YLRiyDRgtGA0LDQvdGB0YTQvtGA0LzQsNGG0LjQuCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2Nob29sOiAnR2Vla0JyYWlucycsXHJcbiAgICAgICAgICAgIGNvdXJzZTogJ0hUTUw1INC4IENTUzMnLFxyXG4gICAgICAgICAgICB3b3JrTmFtZTogJ9CS0LXRgNGB0YLQutCwINGB0YLRgNCw0L3QuNGG0YsnLFxyXG4gICAgICAgICAgICBkZW1vbGluazogJ2h0dHBzOi8vb2xnYXphZ2xhdm5vdmEuZ2l0aHViLmlvL09aYWdsYXZub3ZhX0hUTUxDU1MyX2xlc3NvbjgvJyxcclxuICAgICAgICAgICAgY29kZWxpbms6J2h0dHBzOi8vZ2l0aHViLmNvbS9PbGdhWmFnbGF2bm92YS9PbGdhWmFnbGF2bm92YS5naXRodWIuaW8vdHJlZS9tYXN0ZXIvT1phZ2xhdm5vdmFfSFRNTENTUzJfbGVzc29uOCcsXHJcbiAgICAgICAgICAgIHNyYzonLi9zcmMvaW1nL3BvcnRmb2xpby9IVE1MQ1NTMl9odDgucG5nJyxcclxuICAgICAgICAgICAgY29tbWVudDogJydcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2Nob29sOiAnR2Vla0JyYWlucycsXHJcbiAgICAgICAgICAgIGNvdXJzZTogJ0phdmFTY3JpcHQuINCj0YDQvtCy0LXQvdGMIDEnLFxyXG4gICAgICAgICAgICB3b3JrTmFtZTogJ9CQ0L3QuNC80LjRgNC+0LLQsNC90L3QvtC1INC80L7QtNCw0LvRjNC90L7QtSDQvtC60L3QvicsXHJcbiAgICAgICAgICAgIGRlbW9saW5rOiAnaHR0cHM6Ly9vbGdhemFnbGF2bm92YS5naXRodWIuaW8vaG9tZXRhc2s1dGFzazMvJyxcclxuICAgICAgICAgICAgY29kZWxpbms6J2h0dHBzOi8vZ2l0aHViLmNvbS9PbGdhWmFnbGF2bm92YS9PbGdhWmFnbGF2bm92YS5naXRodWIuaW8vdHJlZS9tYXN0ZXIvaG9tZXRhc2s1dGFzazMnLFxyXG4gICAgICAgICAgICBzcmM6Jy4vc3JjL2ltZy9wb3J0Zm9saW8vSlMxX2h0NXQzLnBuZycsXHJcbiAgICAgICAgICAgIGNvbW1lbnQ6IGDQndCw0LbQvNC40YLQtSDQvdCwINC60L3QvtC/0LrRgyBcItCe0YLQutGA0YvRgtGMINC80L7QtNCw0LvRjNC90L7QtSDQvtC60L3QvlwiYFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzY2hvb2w6ICdHZWVrQnJhaW5zJyxcclxuICAgICAgICAgICAgY291cnNlOiAnSmF2YVNjcmlwdC4g0KPRgNC+0LLQtdC90YwgMScsXHJcbiAgICAgICAgICAgIHdvcmtOYW1lOiAn0JrQsNGA0YLQvtGH0LrQuCDRgtC+0LLQsNGA0LAnLFxyXG4gICAgICAgICAgICBkZW1vbGluazogJ2h0dHBzOi8vb2xnYXphZ2xhdm5vdmEuZ2l0aHViLmlvL2hvbWV0YXNrNXRhc2s0LycsXHJcbiAgICAgICAgICAgIGNvZGVsaW5rOidodHRwczovL2dpdGh1Yi5jb20vT2xnYVphZ2xhdm5vdmEvT2xnYVphZ2xhdm5vdmEuZ2l0aHViLmlvL3RyZWUvbWFzdGVyL2hvbWV0YXNrNXRhc2s0JyxcclxuICAgICAgICAgICAgc3JjOicuL3NyYy9pbWcvcG9ydGZvbGlvL0pTMV9odDV0NC5wbmcnLFxyXG4gICAgICAgICAgICBjb21tZW50OiBg0J/RgNC4INC90LDQttCw0YLQuNC4INC90LAg0LrQvdC+0L/QutGDIFwi0J/QvtC00YDQvtCx0L3QtdC1XCIg0LLRi9Cy0L7QtNC40YLRgdGPINGC0LXQutGB0YLQvtCy0LDRjyDQuNC90YTQvtGA0LzQsNGG0LjRjyDQviDRgtC+0LLQsNGA0LUsINC/0YDQuCDQvdCw0LbQsNGC0LjQuCDQvdCwINC60L3QvtC/0LrRgyBcItCe0YLQvNC10L3QsFwiINCy0L7Qt9Cy0YDQsNGJ0LDQtdGC0YHRjyDQuNC30L7QsdGA0LDQttC10L3QuNC1INGC0L7QstCw0YDQsCBgXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNjaG9vbDogJ0dlZWtCcmFpbnMnLFxyXG4gICAgICAgICAgICBjb3Vyc2U6ICdKYXZhU2NyaXB0LiDQo9GA0L7QstC10L3RjCAxJyxcclxuICAgICAgICAgICAgd29ya05hbWU6ICfQqNCw0YXQvNCw0YLQvdCw0Y8g0LTQvtGB0LrQsCcsXHJcbiAgICAgICAgICAgIGRlbW9saW5rOiAnaHR0cHM6Ly9vbGdhemFnbGF2bm92YS5naXRodWIuaW8vaG9tZXRhc2s1dGFzazVfNi8nLFxyXG4gICAgICAgICAgICBjb2RlbGluazonaHR0cHM6Ly9naXRodWIuY29tL09sZ2FaYWdsYXZub3ZhL09sZ2FaYWdsYXZub3ZhLmdpdGh1Yi5pby90cmVlL21hc3Rlci9ob21ldGFzazV0YXNrNV82JyxcclxuICAgICAgICAgICAgc3JjOicuL3NyYy9pbWcvcG9ydGZvbGlvL0pTMV9odDV0Ni5wbmcnLFxyXG4gICAgICAgICAgICBjb21tZW50OiBg0J/RgNC4INC90LDQttCw0YLQuNC4INC90LAg0LrQvdC+0L/QutGDIFwi0KDQsNGB0YHRgtCw0LLQuNGC0Ywg0YTQuNCz0YPRgNGLXCIg0L3QsCDQtNC+0YHQutC1INGA0LDRgdGB0YLQsNCy0LvRj9GO0YLRgdGPINGI0LDRhdC80LDRgtC90YvQtSDRhNC40LPRg9GA0YsgYFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzY2hvb2w6ICcnLFxyXG4gICAgICAgICAgICBjb3Vyc2U6ICfQotC10YHRgtC+0LLQvtC1INC30LDQtNCw0L3QuNC1INC6INC+0LTQvdC+0Lkg0LjQtyDQstCw0LrQsNC90YHQuNC5JyxcclxuICAgICAgICAgICAgd29ya05hbWU6ICfQotC10YHRgtC+0LLQvtC1INC/0YDQuNC70L7QttC10L3QuNC1INC00LvRjyBBbmRyb2lkLCDQvdCw0L/QuNGB0LDQvdC+INC90LAgUmVhY3QgTmF0aXZlJyxcclxuICAgICAgICAgICAgZGVtb2xpbms6ICdodHRwczovL3lhZGkuc2svZC90c2c3WHZPemR0bG1ydycsXHJcbiAgICAgICAgICAgIGNvZGVsaW5rOidodHRwczovL2dpdGh1Yi5jb20vT2xnYVphZ2xhdm5vdmEvQm9rdXMtVGVzdDInLFxyXG4gICAgICAgICAgICBzcmM6Jy4vc3JjL2ltZy9wb3J0Zm9saW8vYm9rdXMyLnBuZycsXHJcbiAgICAgICAgICAgIGNvbW1lbnQ6IGDQlNC70Y8g0L/RgNC+0YHQvNC+0YLRgNCwINC90LXQvtCx0YXQvtC00LjQvNC+INGB0LrQsNGH0LDRgtGMINGE0LDQudC7IFwib2xnYXphZ2xhdm5vdmEtdGVzdFR3by5hcGtcIiDQvdCwIGFuZHJvaWQt0YLQtdC70LXRhNC+0L0g0Lgg0YPRgdGC0LDQvdC+0LLQuNGC0Ywg0L/RgNC40LvQvtC20LXQvdC40LUuYFxyXG4gICAgICAgIH0sXHJcbiAgICBdLFxyXG59IiwiaW1wb3J0IHtoYW5kbGVBY3Rpb25zfSBmcm9tICdyZWR1eC1hY3Rpb25zJztcclxuaW1wb3J0IHsgbG9hZERhdGEgfSBmcm9tICcuL215QWN0aW9ucyc7XHJcbmltcG9ydCB7bXlEYXRhfSBmcm9tICcuL215RGF0YSc7XHJcblxyXG5jb25zdCBkZWZhdWx0U3RhdGU9e1xyXG4gICAgbXlEYXRhOiB7fVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgaGFuZGxlQWN0aW9ucyh7XHJcbiAgICBbbG9hZERhdGFdOihzdGF0ZSk9PntcclxuICAgICAgICByZXR1cm4gey4uLnN0YXRlLFxyXG4gICAgICAgICAgICAgbXlEYXRhXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxufSwgZGVmYXVsdFN0YXRlKTsiLCJpbXBvcnQge2NyZWF0ZVN0b3JlLCBjb21iaW5lUmVkdWNlcnN9IGZyb20gXCJyZWR1eFwiO1xyXG5pbXBvcnQgbXlSZWR1Y2VyIGZyb20gXCIuL215UmVkdWNlclwiO1xyXG5cclxuY29uc3QgcmVkdWNlciA9IGNvbWJpbmVSZWR1Y2Vycyh7XHJcbiAgICBteVJlZHVjZXIsXHJcbn0pO1xyXG5cclxuZXhwb3J0IGNvbnN0IGluaXRTdG9yZSA9KHByZWxvYWRlZFN0YXRlID0ge30pID0+IHtcclxuICAgcmV0dXJuIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlKTtcclxufSIsImltcG9ydCByZWR1Y2VSZWR1Y2VycyBmcm9tICdyZWR1Y2UtcmVkdWNlcnMnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IGlzUGxhaW5PYmplY3QgZnJvbSAnLi91dGlscy9pc1BsYWluT2JqZWN0JztcbmltcG9ydCBpc01hcCBmcm9tICcuL3V0aWxzL2lzTWFwJztcbmltcG9ydCBvd25LZXlzIGZyb20gJy4vdXRpbHMvb3duS2V5cyc7XG5pbXBvcnQgZmxhdHRlblJlZHVjZXJNYXAgZnJvbSAnLi91dGlscy9mbGF0dGVuUmVkdWNlck1hcCc7XG5pbXBvcnQgaGFuZGxlQWN0aW9uIGZyb20gJy4vaGFuZGxlQWN0aW9uJztcbmltcG9ydCBnZXQgZnJvbSAnLi91dGlscy9nZXQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFuZGxlQWN0aW9ucyhoYW5kbGVycywgZGVmYXVsdFN0YXRlLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpbnZhcmlhbnQoaXNQbGFpbk9iamVjdChoYW5kbGVycykgfHwgaXNNYXAoaGFuZGxlcnMpLCAnRXhwZWN0ZWQgaGFuZGxlcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuJyk7XG4gIHZhciBmbGF0dGVuZWRSZWR1Y2VyTWFwID0gZmxhdHRlblJlZHVjZXJNYXAoaGFuZGxlcnMsIG9wdGlvbnMpO1xuICB2YXIgcmVkdWNlcnMgPSBvd25LZXlzKGZsYXR0ZW5lZFJlZHVjZXJNYXApLm1hcChmdW5jdGlvbiAodHlwZSkge1xuICAgIHJldHVybiBoYW5kbGVBY3Rpb24odHlwZSwgZ2V0KHR5cGUsIGZsYXR0ZW5lZFJlZHVjZXJNYXApLCBkZWZhdWx0U3RhdGUpO1xuICB9KTtcbiAgdmFyIHJlZHVjZXIgPSByZWR1Y2VSZWR1Y2Vycy5hcHBseSh2b2lkIDAsIHJlZHVjZXJzLmNvbmNhdChbZGVmYXVsdFN0YXRlXSkpO1xuICByZXR1cm4gZnVuY3Rpb24gKHN0YXRlLCBhY3Rpb24pIHtcbiAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgc3RhdGUgPSBkZWZhdWx0U3RhdGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlZHVjZXIoc3RhdGUsIGFjdGlvbik7XG4gIH07XG59IiwiaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi91dGlscy9pc0Z1bmN0aW9uJztcbmltcG9ydCBpc1BsYWluT2JqZWN0IGZyb20gJy4vdXRpbHMvaXNQbGFpbk9iamVjdCc7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSAnLi91dGlscy9pZGVudGl0eSc7XG5pbXBvcnQgaXNOaWwgZnJvbSAnLi91dGlscy9pc05pbCc7XG5pbXBvcnQgaXNVbmRlZmluZWQgZnJvbSAnLi91dGlscy9pc1VuZGVmaW5lZCc7XG5pbXBvcnQgdG9TdHJpbmcgZnJvbSAnLi91dGlscy90b1N0cmluZyc7XG5pbXBvcnQgeyBBQ1RJT05fVFlQRV9ERUxJTUlURVIgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYW5kbGVBY3Rpb24odHlwZSwgcmVkdWNlciwgZGVmYXVsdFN0YXRlKSB7XG4gIGlmIChyZWR1Y2VyID09PSB2b2lkIDApIHtcbiAgICByZWR1Y2VyID0gaWRlbnRpdHk7XG4gIH1cblxuICB2YXIgdHlwZXMgPSB0b1N0cmluZyh0eXBlKS5zcGxpdChBQ1RJT05fVFlQRV9ERUxJTUlURVIpO1xuICBpbnZhcmlhbnQoIWlzVW5kZWZpbmVkKGRlZmF1bHRTdGF0ZSksIFwiZGVmYXVsdFN0YXRlIGZvciByZWR1Y2VyIGhhbmRsaW5nIFwiICsgdHlwZXMuam9pbignLCAnKSArIFwiIHNob3VsZCBiZSBkZWZpbmVkXCIpO1xuICBpbnZhcmlhbnQoaXNGdW5jdGlvbihyZWR1Y2VyKSB8fCBpc1BsYWluT2JqZWN0KHJlZHVjZXIpLCAnRXhwZWN0ZWQgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uIG9yIG9iamVjdCB3aXRoIG5leHQgYW5kIHRocm93IHJlZHVjZXJzJyk7XG5cbiAgdmFyIF9yZWYgPSBpc0Z1bmN0aW9uKHJlZHVjZXIpID8gW3JlZHVjZXIsIHJlZHVjZXJdIDogW3JlZHVjZXIubmV4dCwgcmVkdWNlci50aHJvd10ubWFwKGZ1bmN0aW9uIChhUmVkdWNlcikge1xuICAgIHJldHVybiBpc05pbChhUmVkdWNlcikgPyBpZGVudGl0eSA6IGFSZWR1Y2VyO1xuICB9KSxcbiAgICAgIG5leHRSZWR1Y2VyID0gX3JlZlswXSxcbiAgICAgIHRocm93UmVkdWNlciA9IF9yZWZbMV07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0gZGVmYXVsdFN0YXRlO1xuICAgIH1cblxuICAgIHZhciBhY3Rpb25UeXBlID0gYWN0aW9uLnR5cGU7XG5cbiAgICBpZiAoIWFjdGlvblR5cGUgfHwgdHlwZXMuaW5kZXhPZih0b1N0cmluZyhhY3Rpb25UeXBlKSkgPT09IC0xKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIChhY3Rpb24uZXJyb3IgPT09IHRydWUgPyB0aHJvd1JlZHVjZXIgOiBuZXh0UmVkdWNlcikoc3RhdGUsIGFjdGlvbik7XG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZDtcbn0pOyIsIlxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuXHJcbmltcG9ydCAnLi9SZXNpemFibGVQYW5lbC5jc3MnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVzaXphYmxlUGFuZWxzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgIGV2ZW50SGFuZGxlciA9IG51bGxcclxuICBcclxuICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgc3VwZXIoKVxyXG4gICAgICBcclxuICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICBpc0RyYWdnaW5nOiBmYWxzZSxcclxuICAgICAgICBwYW5lbHM6IFszMDAsIDcwMCwgMF1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIFxyXG4gICAgY29tcG9uZW50RGlkTW91bnQgKCkge1xyXG4gICAgICBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLnJlc2l6ZVBhbmVsKVxyXG4gICAgICBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5zdG9wUmVzaXplKVxyXG4gICAgICBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgdGhpcy5zdG9wUmVzaXplKVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBzdGFydFJlc2l6ZSA9IChldmVudCwgaW5kZXgpID0+IHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgaXNEcmFnZ2luZzogdHJ1ZSxcclxuICAgICAgICBjdXJyZW50UGFuZWw6IGluZGV4LFxyXG4gICAgICAgIGluaXRpYWxQb3M6IGV2ZW50LmNsaWVudFhcclxuICAgICAgfSlcclxuICAgIH1cclxuICAgIFxyXG4gICAgc3RvcFJlc2l6ZSA9ICgpID0+IHtcclxuICAgICAgaWYgKHRoaXMuc3RhdGUuaXNEcmFnZ2luZykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuc3RhdGUpXHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSgoe3BhbmVscywgY3VycmVudFBhbmVsLCBkZWx0YX0pID0+ICh7XHJcbiAgICAgICAgICBpc0RyYWdnaW5nOiBmYWxzZSxcclxuICAgICAgICAgIHBhbmVsczoge1xyXG4gICAgICAgICAgICAuLi5wYW5lbHMsXHJcbiAgICAgICAgICAgIFtjdXJyZW50UGFuZWxdOiAocGFuZWxzW2N1cnJlbnRQYW5lbF0gfHwgMCkgLSBkZWx0YSxcclxuICAgICAgICAgICAgW2N1cnJlbnRQYW5lbCAtIDFdOiAocGFuZWxzW2N1cnJlbnRQYW5lbCAtIDFdIHx8IDApICsgZGVsdGFcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBkZWx0YTogMCxcclxuICAgICAgICAgIGN1cnJlbnRQYW5lbDogbnVsbFxyXG4gICAgICAgIH0pKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJlc2l6ZVBhbmVsID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLnN0YXRlLmlzRHJhZ2dpbmcpIHtcclxuICAgICAgICBjb25zdCBkZWx0YSA9IGV2ZW50LmNsaWVudFggLSB0aGlzLnN0YXRlLmluaXRpYWxQb3NcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIGRlbHRhOiBkZWx0YVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICBjb25zdCByZXN0ID0gdGhpcy5wcm9wcy5jaGlsZHJlbi5zbGljZSgxKVxyXG4gICAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFuZWwtY29udGFpbmVyXCIgb25Nb3VzZVVwPXsoKSA9PiB0aGlzLnN0b3BSZXNpemUoKX0+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhbmVsXCIgc3R5bGU9e3t3aWR0aDogYGNhbGMoMTAwJSAtICR7dGhpcy5zdGF0ZS5wYW5lbHNbMV19cHggLSAke3RoaXMuc3RhdGUucGFuZWxzWzJdfXB4KWB9fT5cclxuICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW5bMF19XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIHtbXS5jb25jYXQoLi4ucmVzdC5tYXAoKGNoaWxkLCBpKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICAgPGRpdiBvbk1vdXNlRG93bj17KGUpID0+IHRoaXMuc3RhcnRSZXNpemUoZSwgaSArIDEpfVxyXG4gICAgICAgICAgICAgICAga2V5PXtcInJlc2l6ZXJfXCIgKyBpfVxyXG4gICAgICAgICAgICAgICAgc3R5bGU9e3RoaXMuc3RhdGUuY3VycmVudFBhbmVsID09PSBpKzEgPyB7bGVmdDogdGhpcy5zdGF0ZS5kZWx0YX0gOiB7fX1cclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInJlc2l6ZXJcIj48L2Rpdj4sXHJcbiAgICAgICAgICAgICAgPGRpdiBrZXk9e1wicGFuZWxfXCIgKyBpfSBjbGFzc05hbWU9XCJwYW5lbFwiIHN0eWxlPXt7d2lkdGg6IHRoaXMuc3RhdGUucGFuZWxzW2kgKyAxXX19PlxyXG4gICAgICAgICAgICAgICAge2NoaWxkfVxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgICB9KSl9XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIClcclxuICAgIH1cclxuICB9IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHtjb25uZWN0fSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcbmltcG9ydCB7YmluZEFjdGlvbkNyZWF0b3JzfSBmcm9tICdyZWR1eCc7XHJcbmltcG9ydCB7bG9hZERhdGF9IGZyb20gJy4uL3N0b3JlL215QWN0aW9ucyc7XHJcbmltcG9ydCB7TGVmdE5hdkJhcn0gZnJvbSAnLi4vY29tcG9uZW50cy9MZWZ0TmF2QmFyL0xlZnROYXZCYXInO1xyXG5cclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzPSh7bXlSZWR1Y2VyfSwgcHJvcHMpPT57XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG15RGF0YTogbXlSZWR1Y2VyLm15RGF0YSxcclxuICAgIH07XHJcbn07XHJcblxyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHM9KGRpc3BhdGNoKT0+e1xyXG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyh7bG9hZERhdGF9LCBkaXNwYXRjaCk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShMZWZ0TmF2QmFyKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge05hdkxpbmt9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xyXG5pbXBvcnQgSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMnO1xyXG4vL9Ce0LHQviDQvNC90LVcclxuaW1wb3J0IEZvbGRlclNoYXJlZEljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL0ZvbGRlclNoYXJlZCc7XHJcbmltcG9ydCBGb2xkZXJTaGFyZWRUd29Ub25lSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvRm9sZGVyU2hhcmVkVHdvVG9uZSc7XHJcbmltcG9ydCBBc3NpZ25tZW50SW5kVHdvVG9uZUljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL0Fzc2lnbm1lbnRJbmRUd29Ub25lJztcclxuLy/QntCx0YDQsNC30L7QstCw0L3QuNC1XHJcbmltcG9ydCBJbXBvcnRDb250YWN0c1R3b1RvbmVJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9JbXBvcnRDb250YWN0c1R3b1RvbmUnO1xyXG5pbXBvcnQgTWVudUJvb2tUd29Ub25lSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvTWVudUJvb2tUd29Ub25lJztcclxuLy/QndCw0LLRi9C60LhcclxuaW1wb3J0IEJ1aWxkSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvQnVpbGQnO1xyXG5pbXBvcnQgQnVpbGRUd29Ub25lSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvQnVpbGRUd29Ub25lJztcclxuLy8g0J7Qv9GL0YIg0YDQsNCx0L7RgtGLXHJcbmltcG9ydCBTY2hlZHVsZVR3b1RvbmVJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9TY2hlZHVsZVR3b1RvbmUnO1xyXG5pbXBvcnQgVGltZWxhcHNlVHdvVG9uZUljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL1RpbWVsYXBzZVR3b1RvbmUnO1xyXG4vLyDQn9C+0YDRgtGE0L7Qu9C40L5cclxuaW1wb3J0IERldmVsb3BlckJvYXJkVHdvVG9uZUljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL0RldmVsb3BlckJvYXJkVHdvVG9uZSc7XHJcbmltcG9ydCBXb3JrVHdvVG9uZUljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL1dvcmtUd29Ub25lJztcclxuLy/QodC10YDRgtC40YTQuNC60LDRgtGLXHJcbmltcG9ydCBSZWNlaXB0VHdvVG9uZUljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL1JlY2VpcHRUd29Ub25lJztcclxuLy/QotC10YHRgtGLXHJcbmltcG9ydCBEb25lQWxsSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvRG9uZUFsbCc7XHJcbi8v0JrQvtC90YLQsNC60YLRi1xyXG5pbXBvcnQgUGhvbmVsaW5rUmluZ1R3b1RvbmVJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9QaG9uZWxpbmtSaW5nVHdvVG9uZSc7XHJcbmltcG9ydCBTcGVha2VyUGhvbmVUd29Ub25lSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvU3BlYWtlclBob25lVHdvVG9uZSc7XHJcblxyXG5pbXBvcnQgJy4vTGVmdE5hdkJhci5jc3MnO1xyXG5cclxuZXhwb3J0IGNvbnN0IExlZnROYXZCYXIgPSAoe215RGF0YX0pID0+e1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhlYWRlclwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhlYWRlcl9fcGVyc29uYWxcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaGVhZGVyX19waG90b1wiPjxpbWcgY2xhc3NOYW1lPVwiaGVhZGVyX19waG90by0taW1nXCIgc3JjPVwiLi9zcmMvaW1nL215UGhvdG8zLmpwZ1wiIGFsdD1cIlwiIC8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhlYWRlcl9fbmFtZVwiPntteURhdGEubmFtZX08L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaGVhZGVyX19hZ2VcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJoZWFkZXJfX2FnZS0tdGl0bGVcIj7QtNCw0YLQsCDRgNC+0LbQtNC10L3QuNGPOiA8L3NwYW4+PGJyLz57bXlEYXRhLmJpcnRoZGF0ZX1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPG5hdiBjbGFzc05hbWU9XCJoZWFkZXJfX25hdlwiPlxyXG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cImhlYWRlcl9fbmF2LS1maXJzdGxldmVsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8TmF2TGluayB0bz0nL2Fib3V0TWUnIGNsYXNzTmFtZT1cImhlYWRlcl9fbmF2X19saW5rXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Rm9sZGVyU2hhcmVkVHdvVG9uZUljb24gY2xhc3NOYW1lPVwiaGVhZGVyX19pY29uXCIgLz48c3Bhbj4g0J7QsdC+INC80L3QtTwvc3Bhbj48YnIvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L05hdkxpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZMaW5rIHRvPScvZWR1Y2F0aW9uJyBjbGFzc05hbWU9XCJoZWFkZXJfX25hdl9fbGlua1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPE1lbnVCb29rVHdvVG9uZUljb24gY2xhc3NOYW1lPVwiaGVhZGVyX19pY29uXCIgLz4g0J7QsdGA0LDQt9C+0LLQsNC90LjQtTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9OYXZMaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwiaGVhZGVyX19uYXYtLXNlY29uZGxldmVsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TmF2TGluayB0bz0nL2VkdWNhdGlvbi9tYWluJyBjbGFzc05hbWU9XCJoZWFkZXJfX25hdl9fbGlua1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4gINCe0YHQvdC+0LLQvdC+0LU8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9OYXZMaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5hdkxpbmsgdG89Jy9lZHVjYXRpb24vYWRkaXRpb25hbCcgY2xhc3NOYW1lPVwiaGVhZGVyX19uYXZfX2xpbmtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+ICDQlNC+0L/QvtC70L3QuNGC0LXQu9GM0L3QvtC1PC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvTmF2TGluaz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZMaW5rIHRvPScvcXVhbGlmaWNhdGlvbicgY2xhc3NOYW1lPVwiaGVhZGVyX19uYXZfX2xpbmtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUaW1lbGFwc2VUd29Ub25lSWNvbiBjbGFzc05hbWU9XCJoZWFkZXJfX2ljb25cIiAvPiDQntC/0YvRgiDRgNCw0LHQvtGC0YtcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9OYXZMaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8TmF2TGluayB0bz0nL3NjaWxscycgY2xhc3NOYW1lPVwiaGVhZGVyX19uYXZfX2xpbmtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCdWlsZFR3b1RvbmVJY29uIGNsYXNzTmFtZT1cImhlYWRlcl9faWNvblwiIC8+INCd0LDQstGL0LrQuFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L05hdkxpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZMaW5rIHRvPScvcG9ydGZvbGlvJyBjbGFzc05hbWU9XCJoZWFkZXJfX25hdl9fbGlua1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFdvcmtUd29Ub25lSWNvbiBjbGFzc05hbWU9XCJoZWFkZXJfX2ljb25cIiAvPiDQn9C+0YDRgtGE0L7Qu9C40L5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9OYXZMaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8TmF2TGluayB0bz0nL3NlcnRpZmljYXRlcycgY2xhc3NOYW1lPVwiaGVhZGVyX19uYXZfX2xpbmtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxSZWNlaXB0VHdvVG9uZUljb24gY2xhc3NOYW1lPVwiaGVhZGVyX19pY29uXCIgLz4g0KHQtdGA0YLQuNGE0LjQutCw0YLRi1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L05hdkxpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZMaW5rIHRvPScvY29udGFjdHMnIGNsYXNzTmFtZT1cImhlYWRlcl9fbmF2X19saW5rXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3BlYWtlclBob25lVHdvVG9uZUljb24gY2xhc3NOYW1lPVwiaGVhZGVyX19pY29uXCIgLz4g0JrQvtC90YLQsNC60YLRi1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L05hdkxpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgIDwvbmF2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxufVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge2Nvbm5lY3R9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuaW1wb3J0IHtiaW5kQWN0aW9uQ3JlYXRvcnN9IGZyb20gJ3JlZHV4JztcclxuaW1wb3J0IHtsb2FkRGF0YX0gZnJvbSAnLi4vc3RvcmUvbXlBY3Rpb25zJztcclxuaW1wb3J0IHtSaWdodFRpdGxlfSBmcm9tICcuLi9jb21wb25lbnRzL1JpZ2h0VGl0bGUvUmlnaHRUaXRsZSc7XHJcblxyXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHM9KHtteVJlZHVjZXJ9LCBwcm9wcyk9PntcclxuICAgIC8vIGNvbnNvbGUubG9nKCdSaWdodFRpdGxlQ29udGFpbmVyJywgbXlSZWR1Y2VyKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgd2lzaEpvYjogbXlSZWR1Y2VyLm15RGF0YS53aXNoSm9iLFxyXG4gICAgfTtcclxufTtcclxuXHJcbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcz0oZGlzcGF0Y2gpPT57XHJcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3JzKHtsb2FkRGF0YX0sIGRpc3BhdGNoKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKFJpZ2h0VGl0bGUpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5pbXBvcnQgJy4vUmlnaHRUaXRsZS5jc3MnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFJpZ2h0VGl0bGUgPSAoe3dpc2hKb2J9KSA9PntcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyaWdodFRpdGxlXCI+XHJcbiAgICAgICAgICAgIDxkaXY+e3dpc2hKb2IubmFtZX08L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3JpZ2h0VGl0bGUtLXNtYWxsRm9udCc+0J7Qv9GL0YIg0YDQsNCx0L7RgtGLOiA8c3BhbiBjbGFzc05hbWU9J3JpZ2h0VGl0bGUtLW1pZGRsZUZvbnQnPnt3aXNoSm9iLmV4cGlyaWVuY2V9PC9zcGFuPjwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncmlnaHRUaXRsZS0tc21hbGxGb250Jz7Ql9Cw0L3Rj9GC0L7RgdGC0Yw6PHNwYW4gY2xhc3NOYW1lPSdyaWdodFRpdGxlLS1taWRkbGVGb250Jz57d2lzaEpvYi53b3JrZGF5fTwvc3Bhbj48L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3JpZ2h0VGl0bGUtLXNtYWxsRm9udCc+0JPRgNCw0YTQuNC6INGA0LDQsdC+0YLRizo8c3BhbiBjbGFzc05hbWU9J3JpZ2h0VGl0bGUtLW1pZGRsZUZvbnQnPnt3aXNoSm9iLnNjaGVkdWxlfTwvc3Bhbj48L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHtjb25uZWN0fSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcbmltcG9ydCB7YmluZEFjdGlvbkNyZWF0b3JzfSBmcm9tICdyZWR1eCc7XHJcbmltcG9ydCB7bG9hZERhdGF9IGZyb20gJy4uL3N0b3JlL215QWN0aW9ucyc7XHJcbmltcG9ydCB7IEFib3V0TWUgfSBmcm9tICcuLi9jb21wb25lbnRzL0Fib3V0TWUvQWJvdXRNZSc7XHJcblxyXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHM9KHtteVJlZHVjZXJ9LCBwcm9wcyk9PntcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgYWJvdXRNZTogbXlSZWR1Y2VyLm15RGF0YS5hYm91dE1lLFxyXG4gICAgICAgIGxhbmd1YWdlczogbXlSZWR1Y2VyLm15RGF0YS5sYW5ndWFnZXMsXHJcbiAgICAgICAgY2FyOiBteVJlZHVjZXIubXlEYXRhLmNhclxyXG4gICAgfTtcclxufTtcclxuXHJcbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcz0oZGlzcGF0Y2gpPT57XHJcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3JzKHtsb2FkRGF0YX0sIGRpc3BhdGNoKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKEFib3V0TWUpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCAnLi9BYm91dE1lLmNzcyc7XHJcblxyXG5leHBvcnQgY29uc3QgQWJvdXRNZSA9ICh7YWJvdXRNZSwgbGFuZ3VhZ2VzLCBjYXJ9KSA9PiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5mb1BhZ2VcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbmZvUGFnZV9faGVhZGVyXCI+0J7QsdC+INC80L3QtTwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkFib3V0TWVcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiQWJvdXRNZV9faXRlbVwiPjxzcGFuIGNsYXNzTmFtZT1cIkFib3V0TWUtLWxhYmVsXCI+0JzQtdGB0YLQviDQttC40YLQtdC70YzRgdGC0LLQsDogPC9zcGFuPnthYm91dE1lLmNpdHl9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkFib3V0TWVfX2l0ZW1cIj48c3BhbiBjbGFzc05hbWU9XCJBYm91dE1lLS1sYWJlbFwiPtCT0YDQsNC20LTQsNC90YHRgtCy0L46IDwvc3Bhbj57YWJvdXRNZS5jaXRpemVufTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJBYm91dE1lX19pdGVtXCI+PHNwYW4gY2xhc3NOYW1lPVwiQWJvdXRNZS0tbGFiZWxcIj7Qn9C+0Ls6IDwvc3Bhbj57YWJvdXRNZS5nZW5kZXJ9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkFib3V0TWVfX2l0ZW1cIj48c3BhbiBjbGFzc05hbWU9XCJBYm91dE1lLS1sYWJlbFwiPtCeINGB0LXQsdC1OiA8L3NwYW4+e2Fib3V0TWUuc2VsZkluZm9ybWF0aW9ufTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJBYm91dE1lX19pdGVtXCI+PHNwYW4gY2xhc3NOYW1lPVwiQWJvdXRNZS0tbGFiZWxcIj7Qr9C30YvQutC4OiA8L3NwYW4+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkFib3V0TWVfX2l0ZW1cIj48c3BhbiBjbGFzc05hbWU9XCJBYm91dE1lLS1sYW5ndWFnZVwiPntsYW5ndWFnZXMucnVzc2lhbn08L3NwYW4+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkFib3V0TWVfX2l0ZW1cIj48c3BhbiBjbGFzc05hbWU9XCJBYm91dE1lLS1sYW5ndWFnZVwiPntsYW5ndWFnZXMuZW5nbGlzaH08L3NwYW4+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkFib3V0TWVfX2l0ZW1cIj48c3BhbiBjbGFzc05hbWU9XCJBYm91dE1lLS1sYWJlbFwiPtCQ0LLRgtC+OiA8L3NwYW4+e2Nhcn08L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgJy4vRWR1Y2F0aW9uUGFnZS5jc3MnO1xyXG5cclxuZXhwb3J0IGNvbnN0IE1haW5FZHVjYXRpb25JdGVtID0gKHttYWluRWR1Y2F0aW9ufSkgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJFZHVjYXRpb25JdGVtXCIgPiBcclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiRWR1Y2F0aW9uSXRlbV9fdGl0bGVcIj7QktGL0YHRiNC10LU8L2Rpdj4gXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkVkdWNhdGlvbkl0ZW0tLWl0ZW1ib3JkZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkVkdWNhdGlvbkl0ZW1fX2l0ZW1cIj57bWFpbkVkdWNhdGlvbi55ZWFyfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiRWR1Y2F0aW9uSXRlbV9faXRlbVwiPnttYWluRWR1Y2F0aW9uLmluc3RpdHV0ZX08L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkVkdWNhdGlvbkl0ZW1fX2l0ZW1cIj57bWFpbkVkdWNhdGlvbi5mYWN1bHR5fTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmV4cG9ydCBjb25zdCBBZGRpdGlvbmFsRWR1Y2F0aW9uSXRlbSA9ICh7YWRkaXRpb25hbEVkdWNhdGlvbkl0ZW19KSA9PiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiRWR1Y2F0aW9uSXRlbS0taXRlbWJvcmRlclwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkVkdWNhdGlvbkl0ZW1fX2l0ZW1cIj57YWRkaXRpb25hbEVkdWNhdGlvbkl0ZW0ueWVhcn08L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJFZHVjYXRpb25JdGVtX19pdGVtXCI+e2FkZGl0aW9uYWxFZHVjYXRpb25JdGVtLmluc3RpdHV0ZX08L2Rpdj4gICBcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJFZHVjYXRpb25JdGVtX19pdGVtXCI+e2FkZGl0aW9uYWxFZHVjYXRpb25JdGVtLmNvdXJzZU5hbWV9PC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuaW1wb3J0IHtNYWluRWR1Y2F0aW9uSXRlbX0gZnJvbSAnLi9NYWluRWR1Y2F0aW9uSXRlbSc7XHJcbmltcG9ydCB7QWRkaXRpb25hbEVkdWNhdGlvbkl0ZW19IGZyb20gJy4vQWRkaXRpb25hbEVkdWNhdGlvbkl0ZW0nO1xyXG5cclxuZXhwb3J0IGNvbnN0IEVkdWNhdGlvblBhZ2UgPSAoe21haW5FZHVjYXRpb24sIGFkZGl0aW9uYWxFZHVjYXRpb259KSA9PiB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcIk1haW5FZHVjYXRpb25QYWdlIG1haW5FZHVjYXRpb249XCIsIG1haW5FZHVjYXRpb24sICdhZGRpdGlvbmFsRWR1Y2F0aW9uPScsIGFkZGl0aW9uYWxFZHVjYXRpb24pO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImluZm9QYWdlXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5mb1BhZ2VfX2hlYWRlclwiPtCe0LHRgNCw0LfQvtCy0LDQvdC40LU8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJFZHVjYXRpb25cIj5cclxuICAgICAgICAgICAgICAgIDxNYWluRWR1Y2F0aW9uSXRlbSBtYWluRWR1Y2F0aW9uPXttYWluRWR1Y2F0aW9ufS8+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkVkdWNhdGlvbkl0ZW1cIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkVkdWNhdGlvbkl0ZW1fX3RpdGxlXCI+0JTQvtC/0L7Qu9C90LjRgtC10LvRjNC90L7QtTo8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICB7T2JqZWN0LmtleXMoYWRkaXRpb25hbEVkdWNhdGlvbikubWFwKChJdGVtSWQsIGlkeCkgPT4gPEFkZGl0aW9uYWxFZHVjYXRpb25JdGVtIHsuLi57YWRkaXRpb25hbEVkdWNhdGlvbkl0ZW06IGFkZGl0aW9uYWxFZHVjYXRpb25bSXRlbUlkXX19IGlkeD17aWR4fSBrZXk9e2lkeH0gLz4pfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHtjb25uZWN0fSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcbmltcG9ydCB7YmluZEFjdGlvbkNyZWF0b3JzfSBmcm9tICdyZWR1eCc7XHJcbmltcG9ydCB7bG9hZERhdGF9IGZyb20gJy4uL3N0b3JlL215QWN0aW9ucyc7XHJcbmltcG9ydCB7IEVkdWNhdGlvblBhZ2UgfSBmcm9tICcuLi9jb21wb25lbnRzL0VkdWNhdGlvblBhZ2UvRWR1Y2F0aW9uUGFnZSc7XHJcblxyXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHM9KHtteVJlZHVjZXJ9LCBwcm9wcyk9PntcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbWFpbkVkdWNhdGlvbjogbXlSZWR1Y2VyLm15RGF0YS5tYWluRWR1Y2F0aW9uLFxyXG4gICAgICAgIGFkZGl0aW9uYWxFZHVjYXRpb246IG15UmVkdWNlci5teURhdGEuYWRkaXRpb25hbEVkdWNhdGlvbixcclxuICAgIH07XHJcbn07XHJcblxyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHM9KGRpc3BhdGNoKT0+e1xyXG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyh7bG9hZERhdGF9LCBkaXNwYXRjaCk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShFZHVjYXRpb25QYWdlKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge2Nvbm5lY3R9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuaW1wb3J0IHtiaW5kQWN0aW9uQ3JlYXRvcnN9IGZyb20gJ3JlZHV4JztcclxuaW1wb3J0IHtsb2FkRGF0YX0gZnJvbSAnLi4vc3RvcmUvbXlBY3Rpb25zJztcclxuaW1wb3J0IHsgTWFpbkVkdWNhdGlvblBhZ2UgfSBmcm9tICcuLi9jb21wb25lbnRzL0VkdWNhdGlvblBhZ2UvTWFpbkVkdWNhdGlvblBhZ2UnO1xyXG5cclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzPSh7bXlSZWR1Y2VyfSwgcHJvcHMpPT57XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG1haW5FZHVjYXRpb246IG15UmVkdWNlci5teURhdGEubWFpbkVkdWNhdGlvbixcclxuICAgIH07XHJcbn07XHJcblxyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHM9KGRpc3BhdGNoKT0+e1xyXG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyh7bG9hZERhdGF9LCBkaXNwYXRjaCk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShNYWluRWR1Y2F0aW9uUGFnZSk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHtNYWluRWR1Y2F0aW9uSXRlbX0gZnJvbSAnLi9NYWluRWR1Y2F0aW9uSXRlbSc7XHJcblxyXG5leHBvcnQgY29uc3QgTWFpbkVkdWNhdGlvblBhZ2UgPSAoe21haW5FZHVjYXRpb259KSA9PiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5mb1BhZ2VcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbmZvUGFnZV9faGVhZGVyXCI+0JHQsNC30L7QstC+0LUg0L7QsdGA0LDQt9C+0LLQsNC90LjQtTwvZGl2PlxyXG4gICAgICAgICAgICA8TWFpbkVkdWNhdGlvbkl0ZW0gbWFpbkVkdWNhdGlvbj17bWFpbkVkdWNhdGlvbn0gLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIClcclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7QWRkaXRpb25hbEVkdWNhdGlvbkl0ZW19IGZyb20gJy4vQWRkaXRpb25hbEVkdWNhdGlvbkl0ZW0nO1xyXG5cclxuZXhwb3J0IGNvbnN0IEFkZGl0aW9uYWxFZHVjYXRpb25QYWdlID0gKHthZGRpdGlvbmFsRWR1Y2F0aW9ufSkgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImluZm9QYWdlXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5mb1BhZ2VfX2hlYWRlclwiPtCU0L7Qv9C+0LvQvdC40YLQtdC70YzQvdC+0LUg0L7QsdGA0LDQt9C+0LLQsNC90LjQtTwvZGl2PlxyXG4gICAgICAgICAgICB7T2JqZWN0LmtleXMoYWRkaXRpb25hbEVkdWNhdGlvbikubWFwKChJdGVtSWQsIGlkeCkgPT4gPEFkZGl0aW9uYWxFZHVjYXRpb25JdGVtIHsuLi57YWRkaXRpb25hbEVkdWNhdGlvbkl0ZW06IGFkZGl0aW9uYWxFZHVjYXRpb25bSXRlbUlkXX19IGlkeD17aWR4fSBrZXk9e2lkeH0gLz4pfVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHtjb25uZWN0fSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcbmltcG9ydCB7YmluZEFjdGlvbkNyZWF0b3JzfSBmcm9tICdyZWR1eCc7XHJcbmltcG9ydCB7bG9hZERhdGF9IGZyb20gJy4uL3N0b3JlL215QWN0aW9ucyc7XHJcbmltcG9ydCB7IEFkZGl0aW9uYWxFZHVjYXRpb25QYWdlIH0gZnJvbSAnLi4vY29tcG9uZW50cy9FZHVjYXRpb25QYWdlL0FkZGl0aW9uYWxFZHVjYXRpb25QYWdlJztcclxuXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcz0oe215UmVkdWNlcn0sIHByb3BzKT0+e1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBhZGRpdGlvbmFsRWR1Y2F0aW9uOiBteVJlZHVjZXIubXlEYXRhLmFkZGl0aW9uYWxFZHVjYXRpb24sXHJcbiAgICB9O1xyXG59O1xyXG5cclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzPShkaXNwYXRjaCk9PntcclxuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcnMoe2xvYWREYXRhfSwgZGlzcGF0Y2gpO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcykoQWRkaXRpb25hbEVkdWNhdGlvblBhZ2UpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5leHBvcnQgY29uc3QgUXVhbGlmaWNhdGlvbkl0ZW0gPSAoe3F1YWxpZmljYXRpb25JdGVtfSkgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkVkdWNhdGlvbkl0ZW0tLWl0ZW1ib3JkZXJcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJFZHVjYXRpb25JdGVtX19pdGVtXCI+e3F1YWxpZmljYXRpb25JdGVtLnllYXJ9PC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiRWR1Y2F0aW9uSXRlbV9faXRlbVwiPntxdWFsaWZpY2F0aW9uSXRlbS5jb21wYW55fTwvZGl2PiAgIFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkVkdWNhdGlvbkl0ZW1fX2l0ZW1cIj48YSBocmVmPXtxdWFsaWZpY2F0aW9uSXRlbS5jb21wYW55TGlua30gdGFyZ2V0PVwiX2JsYW5rXCI+e3F1YWxpZmljYXRpb25JdGVtLmNvbXBhbnlMaW5rfTwvYT48L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJFZHVjYXRpb25JdGVtX19pdGVtXCI+e3F1YWxpZmljYXRpb25JdGVtLmNpdHl9PC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiRWR1Y2F0aW9uSXRlbV9faXRlbVwiPntxdWFsaWZpY2F0aW9uSXRlbS5qb2J9PC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiRWR1Y2F0aW9uSXRlbV9faXRlbVwiPntxdWFsaWZpY2F0aW9uSXRlbS5kdXR5fTwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHtRdWFsaWZpY2F0aW9uSXRlbX0gZnJvbSAnLi9RdWFsaWZpY2F0aW9uSXRlbSc7XHJcblxyXG5leHBvcnQgY29uc3QgUXVhbGlmaWNhdGlvblBhZ2UgPSAoe3F1YWxpZmljYXRpb259KSA9PiB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnUXVhbGlmaWNhdGlvblBhZ2UnLCBxdWFsaWZpY2F0aW9uKTtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbmZvUGFnZVwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImluZm9QYWdlX19oZWFkZXJcIj7QntC/0YvRgiDRgNCw0LHQvtGC0Ys6PC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2Nyb2xsLXlcIj5cclxuICAgICAgICAgICAgICAgIHtPYmplY3Qua2V5cyhxdWFsaWZpY2F0aW9uKS5tYXAoKEl0ZW1JZCwgaWR4KSA9PiA8UXVhbGlmaWNhdGlvbkl0ZW0gey4uLntxdWFsaWZpY2F0aW9uSXRlbTogcXVhbGlmaWNhdGlvbltJdGVtSWRdfX0gaWR4PXtpZHh9IGtleT17aWR4fSAvPil9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHtjb25uZWN0fSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcbmltcG9ydCB7YmluZEFjdGlvbkNyZWF0b3JzfSBmcm9tICdyZWR1eCc7XHJcbmltcG9ydCB7bG9hZERhdGF9IGZyb20gJy4uL3N0b3JlL215QWN0aW9ucyc7XHJcbmltcG9ydCB7IFF1YWxpZmljYXRpb25QYWdlIH0gZnJvbSAnLi4vY29tcG9uZW50cy9RdWFsaWZpY2F0aW9uUGFnZS9RdWFsaWZpY2F0aW9uUGFnZSc7XHJcblxyXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHM9KHtteVJlZHVjZXJ9LCBwcm9wcyk9PntcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcXVhbGlmaWNhdGlvbjogbXlSZWR1Y2VyLm15RGF0YS5xdWFsaWZpY2F0aW9uLnJldmVyc2UoKSxcclxuICAgIH07XHJcbn07XHJcblxyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHM9KGRpc3BhdGNoKT0+e1xyXG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyh7bG9hZERhdGF9LCBkaXNwYXRjaCk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShRdWFsaWZpY2F0aW9uUGFnZSk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmV4cG9ydCBjb25zdCBTY2lsbHNJdGVtID0gKHtzY2lsbHNJdGVtfSkgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkVkdWNhdGlvbkl0ZW0tLWl0ZW1ib3JkZXJcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJFZHVjYXRpb25JdGVtX19pdGVtXCI+e3NjaWxsc0l0ZW19PC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge1NjaWxsc0l0ZW19IGZyb20gJy4vU2NpbGxzSXRlbSc7XHJcblxyXG5leHBvcnQgY29uc3QgU2NpbGxzUGFnZSA9ICh7c2NpbGxzfSkgPT4ge1xyXG4gICAgLy9jb25zb2xlLmxvZygnU2NpbGxzUGFnZScsIHNjaWxscyk7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5mb1BhZ2VcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbmZvUGFnZV9faGVhZGVyXCI+0J3QsNCy0YvQutC4OjwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNjcm9sbC15XCI+XHJcbiAgICAgICAgICAgICAgICB7T2JqZWN0LmtleXMoc2NpbGxzKS5tYXAoKGl0ZW0sIGlkeCkgPT4gPFNjaWxsc0l0ZW0gey4uLntzY2lsbHNJdGVtOiBzY2lsbHNbaXRlbV19fSBpZHg9e2lkeH0ga2V5PXtpZHh9IC8+KX1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge2Nvbm5lY3R9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuaW1wb3J0IHtiaW5kQWN0aW9uQ3JlYXRvcnN9IGZyb20gJ3JlZHV4JztcclxuaW1wb3J0IHtsb2FkRGF0YX0gZnJvbSAnLi4vc3RvcmUvbXlBY3Rpb25zJztcclxuaW1wb3J0IHsgU2NpbGxzUGFnZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvU2NpbGxzUGFnZS9TY2lsbHNQYWdlJztcclxuXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcz0oe215UmVkdWNlcn0sIHByb3BzKT0+e1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBzY2lsbHM6IG15UmVkdWNlci5teURhdGEubWFpblNjaWxscyxcclxuICAgIH07XHJcbn07XHJcblxyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHM9KGRpc3BhdGNoKT0+e1xyXG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyh7bG9hZERhdGF9LCBkaXNwYXRjaCk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShTY2lsbHNQYWdlKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge05hdkxpbmt9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNlcnRpZmljYXRlSXRlbSA9ICh7c2VydGlmaWNhdGVJdGVtLCBpZHh9KSA9PiB7XHJcbiAgICBjb25zdCBzZXJ0aWZpY2F0ZVBhdGggPSAnL3NlcnRpZmljYXRlcy8nICsgaWR4O1xyXG4gICAgLy8gY29uc29sZS5sb2coJ1NlcnRpZmljYXRlSXRlbScsIGlkeCwgc2VydGlmaWNhdGVQYXRoKTtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZXJ0aWZpY2F0ZXNfX2l0ZW1cIj5cclxuICAgICAgICAgICAgIDxOYXZMaW5rIHRvPXtzZXJ0aWZpY2F0ZVBhdGh9IGNsYXNzTmFtZT1cImhlYWRlcl9fbmF2X19saW5rXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlcnRpZmljYXRlc19faW1nXCI+PGltZyBzcmM9e3NlcnRpZmljYXRlSXRlbS5zcmN9IGFsdD1cInNlcnRpZmljYXRlXCIgY2xhc3NOYW1lPVwic2VydGlmaWNhdGVzX19pbWctLXNpemVcIiAvPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiA+e3NlcnRpZmljYXRlSXRlbS5zY2hvb2x9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlcnRpZmljYXRlc19faXRlbS0tZGF0ZVwiPntzZXJ0aWZpY2F0ZUl0ZW0uZGF0ZX08L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VydGlmaWNhdGVzX19pdGVtLS1uYW1lXCI+e3NlcnRpZmljYXRlSXRlbS5mdWxsTmFtZX08L2Rpdj5cclxuICAgICAgICAgICAgPC9OYXZMaW5rPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHtTZXJ0aWZpY2F0ZUl0ZW19IGZyb20gJy4vU2VydGlmaWNhdGVJdGVtJztcclxuaW1wb3J0ICcuL1NlcnRpZmljYXRlc1BhZ2UuY3NzJztcclxuXHJcbmV4cG9ydCBjb25zdCBTZXJ0aWZpY2F0ZXNQYWdlID0gKHtzZXJ0aWZpY2F0ZXN9KSA9PiB7XHJcbiAgICAvL2NvbnNvbGUubG9nKCdTY2lsbHNQYWdlJywgc2NpbGxzKTtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbmZvUGFnZVwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImluZm9QYWdlX19oZWFkZXJcIj7QodC10YDRgtC40YTQuNC60LDRgtGLOjwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlcnRpZmljYXRlc1wiPlxyXG4gICAgICAgICAgICAge3NlcnRpZmljYXRlcy5tYXAoKGl0ZW0sIGlkeCkgPT4gPFNlcnRpZmljYXRlSXRlbSB7Li4ue3NlcnRpZmljYXRlSXRlbTogaXRlbX19IGlkeD17aWR4fSBrZXk9e2lkeH0gLz4pfVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIClcclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7Y29ubmVjdH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5pbXBvcnQge2JpbmRBY3Rpb25DcmVhdG9yc30gZnJvbSAncmVkdXgnO1xyXG5pbXBvcnQge2xvYWREYXRhfSBmcm9tICcuLi9zdG9yZS9teUFjdGlvbnMnO1xyXG5pbXBvcnQgeyBTZXJ0aWZpY2F0ZXNQYWdlIH0gZnJvbSAnLi4vY29tcG9uZW50cy9TZXJ0aWZpY2F0ZXNQYWdlL1NlcnRpZmljYXRlc1BhZ2UnO1xyXG5cclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzPSh7bXlSZWR1Y2VyfSwgcHJvcHMpPT57XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHNlcnRpZmljYXRlczogbXlSZWR1Y2VyLm15RGF0YS5zZXJ0aWZpY2F0ZXMsXHJcbiAgICB9O1xyXG59O1xyXG5cclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzPShkaXNwYXRjaCk9PntcclxuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcnMoe2xvYWREYXRhfSwgZGlzcGF0Y2gpO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcykoU2VydGlmaWNhdGVzUGFnZSk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHtjb25uZWN0fSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcbmltcG9ydCB7YmluZEFjdGlvbkNyZWF0b3JzfSBmcm9tICdyZWR1eCc7XHJcbmltcG9ydCB7bG9hZERhdGF9IGZyb20gJy4uL3N0b3JlL215QWN0aW9ucyc7XHJcbmltcG9ydCB7IFNlcnRpZmljYXRlUGFnZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvU2VydGlmaWNhdGVzUGFnZS9TZXJ0aWZpY2F0ZVBhZ2UnO1xyXG5cclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzPSh7bXlSZWR1Y2VyfSwgcHJvcHMpPT57XHJcbiAgICAvL2NvbnNvbGUubG9nKCdTZXJ0aWZpY2F0ZVBhZ2VDb250YWluZXIgcHJvcHM9JywgcHJvcHMpO1xyXG4gICAgY29uc3QgaWQ9IHByb3BzLm1hdGNoLnBhcmFtcy5pZDtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgc2VydGlmaWNhdGU6IG15UmVkdWNlci5teURhdGEuc2VydGlmaWNhdGVzW2lkXSxcclxuICAgIH07XHJcbn07XHJcblxyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHM9KGRpc3BhdGNoKT0+e1xyXG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyh7bG9hZERhdGF9LCBkaXNwYXRjaCk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShTZXJ0aWZpY2F0ZVBhZ2UpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCAnLi9TZXJ0aWZpY2F0ZXNQYWdlLmNzcyc7XHJcblxyXG5pbXBvcnQge05hdkxpbmt9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNlcnRpZmljYXRlUGFnZSA9KHtzZXJ0aWZpY2F0ZX0pID0+IHtcclxuICAgIC8vY29uc29sZS5sb2coJ1NlcnRpZmljYXRlc1BhZ2Ugc2VydGlmaWNhdGU9Jywgc2VydGlmaWNhdGUpO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImluZm9QYWdlXCI+XHJcbiAgICAgICAgICAgIDxOYXZMaW5rIHRvPScvc2VydGlmaWNhdGVzJyBjbGFzc05hbWU9XCJoZWFkZXJfX25hdl9fbGlua1wiPlxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJzZXJ0aWZpY2F0ZXNfX2Nsb3NlXCI+e1N0cmluZy5mcm9tQ2hhckNvZGUoMTAwNjApfTwvZGl2PlxyXG4gICAgICAgICAgICA8L05hdkxpbms+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5mb1BhZ2VfX2hlYWRlclwiPntzZXJ0aWZpY2F0ZS5mdWxsTmFtZX08L2Rpdj5cclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgIDxhIGhyZWY9e3NlcnRpZmljYXRlLnNyY30gdGFyZ2V0PVwiX2JsYW5rXCI+PGltZyBzcmM9e3NlcnRpZmljYXRlLnNyY30gYWx0PVwiU2VydGlmaWNhdGVcIiBjbGFzc05hbWU9XCJzZXJ0aWZpY2F0ZXNfX2xhcmdlXCIgLz48L2E+XHJcblxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZXJ0aWZpY2F0ZXNfX2Rlc2NyaXB0aW9uXCI+XHJcbiAgICAgICAgICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgICAgICAgICAge3NlcnRpZmljYXRlLmRlc2NyaXB0aW9uLm1hcCgoaXRlbSwgaWR4KSA9PiAoPGxpIGtleT17aWR4fT57aXRlbX08L2xpPikpfVxyXG4gICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge2Nvbm5lY3R9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuaW1wb3J0IHtiaW5kQWN0aW9uQ3JlYXRvcnN9IGZyb20gJ3JlZHV4JztcclxuaW1wb3J0IHtsb2FkRGF0YX0gZnJvbSAnLi4vc3RvcmUvbXlBY3Rpb25zJztcclxuaW1wb3J0IHsgQ29udGFjdHNQYWdlIH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250YWN0c1BhZ2UvQ29udGFjdHNQYWdlJztcclxuXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcz0oe215UmVkdWNlcn0sIHByb3BzKT0+e1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBjb250YWN0czogbXlSZWR1Y2VyLm15RGF0YS5jb250YWN0cyxcclxuICAgIH07XHJcbn07XHJcblxyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHM9KGRpc3BhdGNoKT0+e1xyXG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyh7bG9hZERhdGF9LCBkaXNwYXRjaCk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShDb250YWN0c1BhZ2UpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5pbXBvcnQgUGhvbmVBbmRyb2lkSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvUGhvbmVBbmRyb2lkJztcclxuaW1wb3J0IFRlbGVncmFtSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvVGVsZWdyYW0nO1xyXG5cclxuaW1wb3J0ICcuL0NvbnRhY3RzUGFnZS5jc3MnO1xyXG5cclxuZXhwb3J0IGNvbnN0IENvbnRhY3RzUGFnZSA9ICh7Y29udGFjdHN9KSA9PiB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnUXVhbGlmaWNhdGlvblBhZ2UnLCBxdWFsaWZpY2F0aW9uKTtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbmZvUGFnZVwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImluZm9QYWdlX19oZWFkZXJcIj7QmtC+0L3RgtCw0LrRgtGLOjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWN0c19faXRlbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPVwiY29udGFjdHNfaWNvblwiIHNyYz1cIi4vc3JjL2ltZy9waG9uZS5wbmdcIiBhbHQ9XCJwaG9uZVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzc05hbWU9XCJjb250YWN0c19pY29uXCIgc3JjPVwiLi9zcmMvaW1nL3ZpYmVyLnBuZ1wiIGFsdD1cInZpYmVyXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cImNvbnRhY3RzX2ljb25cIiBzcmM9XCIuL3NyYy9pbWcvV2hhdHNhcHAucG5nXCIgYWx0PVwid2F0dHNhcHBcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPVwiY29udGFjdHNfaWNvblwiIHNyYz1cIi4vc3JjL2ltZy90ZWxlZ3JhbS5wbmdcIiBhbHQ9XCJ0ZWxlZ3JhbVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAge2NvbnRhY3RzLnBob25lfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhY3RzX19pdGVtXCI+PGltZyBjbGFzc05hbWU9XCJjb250YWN0c19pY29uXCIgc3JjPVwiLi9zcmMvaW1nL2VtYWlsLnBuZ1wiIGFsdD1cImVtYWlsXCIgLz57Y29udGFjdHMuZW1haWx9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhY3RzX19pdGVtXCI+PGltZyBjbGFzc05hbWU9XCJjb250YWN0c19pY29uXCIgc3JjPVwiLi9zcmMvaW1nL3ZrLnBuZ1wiIGFsdD1cInZrXCIgLz57Y29udGFjdHMudmt9PGltZyBjbGFzc05hbWU9XCJjb250YWN0c19pY29uLS12a1wiIHNyYz1cIi4vc3JjL2ltZy9WS19xci5wbmdcIiBhbHQ9XCJ2ay1xclwiIC8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhY3RzX19pdGVtXCI+PGltZyBjbGFzc05hbWU9XCJjb250YWN0c19pY29uXCIgc3JjPVwiLi9zcmMvaW1nL3NreXBlLnBuZ1wiIGFsdD1cInNreXBlXCIgLz57Y29udGFjdHMuc2t5cGV9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhY3RzX19pdGVtXCI+PGltZyBjbGFzc05hbWU9XCJjb250YWN0c19pY29uXCIgc3JjPVwiLi9zcmMvaW1nL2ljcS5wbmdcIiBhbHQ9XCJpY3FcIiAvPntjb250YWN0cy5pY3F9PC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge05hdkxpbmt9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xyXG5cclxuZXhwb3J0IGNvbnN0IFBvcnRmb2xpb0l0ZW0gPSAoe3BvcnRmb2xpb0l0ZW0sIGlkeH0pID0+IHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3J0Zm9saW9fX2l0ZW1cIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9ydGZvbGlvX19pbWdcIj48aW1nIHNyYz17cG9ydGZvbGlvSXRlbS5zcmN9IGFsdD1cInBvcnRmb2xpby13b3JrXCIgY2xhc3NOYW1lPVwicG9ydGZvbGlvX19pbWctLXNpemVcIiAvPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiA+e3BvcnRmb2xpb0l0ZW0uc2Nob29sfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3J0Zm9saW9fX2l0ZW0tLWRhdGVcIj57cG9ydGZvbGlvSXRlbS5jb3Vyc2V9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvcnRmb2xpb19faXRlbS0tbmFtZVwiPntwb3J0Zm9saW9JdGVtLndvcmtOYW1lfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3J0Zm9saW9fX2l0ZW0tLWxpbmtcIj48YSBocmVmPXtwb3J0Zm9saW9JdGVtLmRlbW9saW5rfSB0YXJnZXQ9XCJfYmxhbmtcIj7QlNC10LzQvtC90YHRgtGA0LDRhtC40Y88L2E+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvcnRmb2xpb19faXRlbS0tbGlua1wiPjxhIGhyZWY9e3BvcnRmb2xpb0l0ZW0uY29kZWxpbmt9IHRhcmdldD1cIl9ibGFua1wiPtCY0YHRhdC+0LTQvdGL0Lkg0LrQvtC0PC9hPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3J0Zm9saW9fX2l0ZW0tLWNvbW1lbnRcIj57cG9ydGZvbGlvSXRlbS5jb21tZW50fTwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHtQb3J0Zm9saW9JdGVtfSBmcm9tICcuL1BvcnRmb2xpb0l0ZW0nO1xyXG5pbXBvcnQgJy4vUG9ydGZvbGlvUGFnZS5jc3MnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFBvcnRmb2xpb1BhZ2UgPSAoe3BvcnRmb2xpb19nZWVrYnJhaW5zfSkgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImluZm9QYWdlXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5mb1BhZ2VfX2hlYWRlclwiPtCf0L7RgNGC0YTQvtC70LjQvjo8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3J0Zm9saW9cIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9ydGZvbGlvX19oZWFkZXJcIj7Qo9GH0LXQsdC90YvQtSDRgNCw0LHQvtGC0Ys6PC9kaXY+XHJcbiAgICAgICAgICAgICB7cG9ydGZvbGlvX2dlZWticmFpbnMubWFwKChpdGVtLCBpZHgpID0+IDxQb3J0Zm9saW9JdGVtIHsuLi57cG9ydGZvbGlvSXRlbTogaXRlbX19IGlkeD17aWR4fSBrZXk9e2lkeH0gLz4pfVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIClcclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7Y29ubmVjdH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5pbXBvcnQge2JpbmRBY3Rpb25DcmVhdG9yc30gZnJvbSAncmVkdXgnO1xyXG5pbXBvcnQge2xvYWREYXRhfSBmcm9tICcuLi9zdG9yZS9teUFjdGlvbnMnO1xyXG5pbXBvcnQgeyBQb3J0Zm9saW9QYWdlIH0gZnJvbSAnLi4vY29tcG9uZW50cy9Qb3J0Zm9saW9QYWdlL1BvcnRmb2xpb1BhZ2UnO1xyXG5cclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzPSh7bXlSZWR1Y2VyfSwgcHJvcHMpPT57XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHBvcnRmb2xpb19nZWVrYnJhaW5zOiBteVJlZHVjZXIubXlEYXRhLnBvcnRmb2xpb19nZWVrYnJhaW5zLFxyXG4gICAgfTtcclxufTtcclxuXHJcbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcz0oZGlzcGF0Y2gpPT57XHJcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3JzKHtsb2FkRGF0YX0sIGRpc3BhdGNoKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKFBvcnRmb2xpb1BhZ2UpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBSZWFjdERvbSBmcm9tICdyZWFjdC1kb20nO1xyXG5pbXBvcnQge0Jyb3dzZXJSb3V0ZXIsIFN3aXRjaCwgUm91dGV9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xyXG5pbXBvcnQge2xvYWREYXRhfSBmcm9tICcuL3N0b3JlL215QWN0aW9ucyc7XHJcblxyXG5pbXBvcnQge1Byb3ZpZGVyfSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcbmltcG9ydCB7aW5pdFN0b3JlfSBmcm9tICcuL3N0b3JlL3N0b3JlJztcclxuXHJcbmltcG9ydCBSZXNpemFibGVQYW5lbHMgZnJvbSAnLi9jb21wb25lbnRzL1Jlc2l6YWJsZVBhbmVsL1Jlc2l6YWJsZVBhbmVsJztcclxuXHJcbi8vaW1wb3J0IExlZnROYXZCYXIgZnJvbSAnLi9jb21wb25lbnRzL0xlZnROYXZCYXIvTGVmdE5hdkJhcic7XHJcbmltcG9ydCBMZWZ0TmF2QmFyQ29udGFpbmVyIGZyb20gJy4vY29udGFpbmVycy9MZWZ0TmF2QmFyQ29udGFpbmVyJztcclxuaW1wb3J0IFJpZ2h0VGl0bGVDb250YWluZXIgZnJvbSAnLi9jb250YWluZXJzL1JpZ2h0VGl0bGVDb250YWluZXInO1xyXG5pbXBvcnQge1N0YXJ0UGFnZX0gZnJvbSAnLi9jb21wb25lbnRzL1N0YXJ0UGFnZS9TdGFydFBhZ2UnO1xyXG5pbXBvcnQgQWJvdXRNZUNvbnRhaW5lciBmcm9tICcuL2NvbnRhaW5lcnMvQWJvdXRNZUNvbnRhaW5lcic7XHJcbmltcG9ydCBFZHVjYXRpb25QYWdlQ29udGFpbmVyIGZyb20gJy4vY29udGFpbmVycy9FZHVjYXRpb25QYWdlQ29udGFpbmVyJztcclxuaW1wb3J0IE1haW5FZHVjYXRpb25QYWdlQ29udGFpbmVyIGZyb20gJy4vY29udGFpbmVycy9NYWluRWR1Y2F0aW9uUGFnZUNvbnRhaW5lcic7XHJcbmltcG9ydCBBZGRpdGlvbmFsRWR1Y2F0aW9uUGFnZUNvbnRhaW5lciBmcm9tICcuL2NvbnRhaW5lcnMvQWRkaXRpb25hbEVkdWNhdGlvblBhZ2VDb250YWluZXInO1xyXG5pbXBvcnQgUXVhbGlmaWNhdGlvblBhZ2VDb250YWluZXIgZnJvbSAnLi9jb250YWluZXJzL1F1YWxpZmljYXRpb25QYWdlQ29udGFpbmVyJztcclxuaW1wb3J0IFNjaWxsc1BhZ2VDb250YWluZXIgZnJvbSAnLi9jb250YWluZXJzL1NjaWxsc1BhZ2VDb250YWluZXInO1xyXG5pbXBvcnQgU2VydGlmaWNhdGVzUGFnZUNvbnRhaW5lciBmcm9tICcuL2NvbnRhaW5lcnMvU2VydGlmaWNhdGVzUGFnZUNvbnRhaW5lcic7XHJcbmltcG9ydCBTZXJ0aWZpY2F0ZVBhZ2VDb250YWluZXIgZnJvbSAnLi9jb250YWluZXJzL1NlcnRpZmljYXRlUGFnZUNvbnRhaW5lcic7XHJcbmltcG9ydCBDb250YWN0c1BhZ2VDb250YWluZXIgZnJvbSAnLi9jb250YWluZXJzL0NvbnRhY3RzUGFnZUNvbnRhaW5lcic7XHJcbmltcG9ydCBQb3J0Zm9saW9QYWdlQ29udGFpbmVyIGZyb20gJy4vY29udGFpbmVycy9Qb3J0Zm9saW9QYWdlQ29udGFpbmVyJztcclxuXHJcbmNvbnN0IHN0b3JlID0gaW5pdFN0b3JlKCk7XHJcbnN0b3JlLmRpc3BhdGNoKGxvYWREYXRhKCkpO1xyXG5cclxuUmVhY3REb20ucmVuZGVyKFxyXG4gICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XHJcbiAgICAgICAgPEJyb3dzZXJSb3V0ZXI+XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIDxMZWZ0TmF2QmFyQ29udGFpbmVyIC8+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWFpblwiPlxyXG4gICAgICAgICAgICAgICAgPFJpZ2h0VGl0bGVDb250YWluZXIgLz5cclxuICAgICAgICAgICAgICAgIDxTd2l0Y2g+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvXCIgY29tcG9uZW50PXtTdGFydFBhZ2V9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvYWJvdXRNZVwiIGNvbXBvbmVudD17QWJvdXRNZUNvbnRhaW5lcn0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD1cIi9lZHVjYXRpb25cIiBjb21wb25lbnQ9e0VkdWNhdGlvblBhZ2VDb250YWluZXJ9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvZWR1Y2F0aW9uL21haW5cIiBjb21wb25lbnQ9e01haW5FZHVjYXRpb25QYWdlQ29udGFpbmVyfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2VkdWNhdGlvbi9hZGRpdGlvbmFsXCIgY29tcG9uZW50PXtBZGRpdGlvbmFsRWR1Y2F0aW9uUGFnZUNvbnRhaW5lcn0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9xdWFsaWZpY2F0aW9uXCIgY29tcG9uZW50PXtRdWFsaWZpY2F0aW9uUGFnZUNvbnRhaW5lcn0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9zY2lsbHNcIiBjb21wb25lbnQ9e1NjaWxsc1BhZ2VDb250YWluZXJ9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvcG9ydGZvbGlvXCIgY29tcG9uZW50PXtQb3J0Zm9saW9QYWdlQ29udGFpbmVyfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL3NlcnRpZmljYXRlc1wiIGNvbXBvbmVudD17U2VydGlmaWNhdGVzUGFnZUNvbnRhaW5lcn0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9zZXJ0aWZpY2F0ZXMvOmlkXCIgY29tcG9uZW50PXtTZXJ0aWZpY2F0ZVBhZ2VDb250YWluZXJ9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvY29udGFjdHNcIiBjb21wb25lbnQ9e0NvbnRhY3RzUGFnZUNvbnRhaW5lcn0gLz5cclxuICAgICAgICAgICAgICAgIDwvU3dpdGNoPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L0Jyb3dzZXJSb3V0ZXI+XHJcbiAgICA8L1Byb3ZpZGVyPiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKSk7XHJcblxyXG4gICAgLy8gPFJlc2l6YWJsZVBhbmVscz48L1Jlc2l6YWJsZVBhbmVscz4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFN0YXJ0UGFnZSA9ICgpID0+IHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbmZvUGFnZVwiPlxyXG4gICAgICAgICAgICA8ZGl2PtCX0LTRgNCw0LLRgdGC0LLRg9C50YLQtSwg0LTQvtGA0L7Qs9C40LUg0YLQvtCy0LDRgNC40YnQuCEg0JTQvtCx0YDQviDQv9C+0LbQsNC70L7QstCw0YLRjCDQsiDQvNC+0LUg0YDQtdC30Y7QvNC1ID0pPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXY+SGVsbG8sIE1yIG9yIE1ycyEgWW91IGFyZSB3ZWxjb21lIHRvIG15IENWPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn0iLCJpbXBvcnQgb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiLi9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7XG4gIHZhciBrZXksIGk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldO1xuICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiZnVuY3Rpb24gdG9WYWwobWl4KSB7XG5cdHZhciBrLCB5LCBzdHI9Jyc7XG5cdGlmIChtaXgpIHtcblx0XHRpZiAodHlwZW9mIG1peCA9PT0gJ29iamVjdCcpIHtcblx0XHRcdGlmIChBcnJheS5pc0FycmF5KG1peCkpIHtcblx0XHRcdFx0Zm9yIChrPTA7IGsgPCBtaXgubGVuZ3RoOyBrKyspIHtcblx0XHRcdFx0XHRpZiAobWl4W2tdICYmICh5ID0gdG9WYWwobWl4W2tdKSkpIHtcblx0XHRcdFx0XHRcdHN0ciAmJiAoc3RyICs9ICcgJyk7XG5cdFx0XHRcdFx0XHRzdHIgKz0geTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoayBpbiBtaXgpIHtcblx0XHRcdFx0XHRpZiAobWl4W2tdICYmICh5ID0gdG9WYWwoaykpKSB7XG5cdFx0XHRcdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0XHRcdFx0c3RyICs9IHk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICh0eXBlb2YgbWl4ICE9PSAnYm9vbGVhbicgJiYgIW1peC5jYWxsKSB7XG5cdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0c3RyICs9IG1peDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHN0cjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xuXHR2YXIgaT0wLCB4LCBzdHI9Jyc7XG5cdHdoaWxlIChpIDwgYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdGlmICh4ID0gdG9WYWwoYXJndW1lbnRzW2krK10pKSB7XG5cdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0c3RyICs9IHhcblx0XHR9XG5cdH1cblx0cmV0dXJuIHN0cjtcbn1cbiIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZXhwb3J0IHZhciBpc0Jyb3dzZXIgPSAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHdpbmRvdykpID09PSBcIm9iamVjdFwiICYmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihkb2N1bWVudCkpID09PSAnb2JqZWN0JyAmJiBkb2N1bWVudC5ub2RlVHlwZSA9PT0gOTtcblxuZXhwb3J0IGRlZmF1bHQgaXNCcm93c2VyO1xuIiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IGlzSW5Ccm93c2VyIGZyb20gJ2lzLWluLWJyb3dzZXInO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MnO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcblxudmFyIHBsYWluT2JqZWN0Q29uc3RydXJjdG9yID0ge30uY29uc3RydWN0b3I7XG5mdW5jdGlvbiBjbG9uZVN0eWxlKHN0eWxlKSB7XG4gIGlmIChzdHlsZSA9PSBudWxsIHx8IHR5cGVvZiBzdHlsZSAhPT0gJ29iamVjdCcpIHJldHVybiBzdHlsZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoc3R5bGUpKSByZXR1cm4gc3R5bGUubWFwKGNsb25lU3R5bGUpO1xuICBpZiAoc3R5bGUuY29uc3RydWN0b3IgIT09IHBsYWluT2JqZWN0Q29uc3RydXJjdG9yKSByZXR1cm4gc3R5bGU7XG4gIHZhciBuZXdTdHlsZSA9IHt9O1xuXG4gIGZvciAodmFyIG5hbWUgaW4gc3R5bGUpIHtcbiAgICBuZXdTdHlsZVtuYW1lXSA9IGNsb25lU3R5bGUoc3R5bGVbbmFtZV0pO1xuICB9XG5cbiAgcmV0dXJuIG5ld1N0eWxlO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIHJ1bGUgaW5zdGFuY2UuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlUnVsZShuYW1lLCBkZWNsLCBvcHRpb25zKSB7XG4gIGlmIChuYW1lID09PSB2b2lkIDApIHtcbiAgICBuYW1lID0gJ3VubmFtZWQnO1xuICB9XG5cbiAgdmFyIGpzcyA9IG9wdGlvbnMuanNzO1xuICB2YXIgZGVjbENvcHkgPSBjbG9uZVN0eWxlKGRlY2wpO1xuICB2YXIgcnVsZSA9IGpzcy5wbHVnaW5zLm9uQ3JlYXRlUnVsZShuYW1lLCBkZWNsQ29weSwgb3B0aW9ucyk7XG4gIGlmIChydWxlKSByZXR1cm4gcnVsZTsgLy8gSXQgaXMgYW4gYXQtcnVsZSBhbmQgaXQgaGFzIG5vIGluc3RhbmNlLlxuXG4gIGlmIChuYW1lWzBdID09PSAnQCcpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIFVua25vd24gcnVsZSBcIiArIG5hbWUpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbnZhciBqb2luID0gZnVuY3Rpb24gam9pbih2YWx1ZSwgYnkpIHtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAvLyBSZW1vdmUgIWltcG9ydGFudCBmcm9tIHRoZSB2YWx1ZSwgaXQgd2lsbCBiZSByZWFkZGVkIGxhdGVyLlxuICAgIGlmICh2YWx1ZVtpXSA9PT0gJyFpbXBvcnRhbnQnKSBicmVhaztcbiAgICBpZiAocmVzdWx0KSByZXN1bHQgKz0gYnk7XG4gICAgcmVzdWx0ICs9IHZhbHVlW2ldO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4vKipcbiAqIENvbnZlcnRzIGFycmF5IHZhbHVlcyB0byBzdHJpbmcuXG4gKlxuICogYG1hcmdpbjogW1snNXB4JywgJzEwcHgnXV1gID4gYG1hcmdpbjogNXB4IDEwcHg7YFxuICogYGJvcmRlcjogWycxcHgnLCAnMnB4J11gID4gYGJvcmRlcjogMXB4LCAycHg7YFxuICogYG1hcmdpbjogW1snNXB4JywgJzEwcHgnXSwgJyFpbXBvcnRhbnQnXWAgPiBgbWFyZ2luOiA1cHggMTBweCAhaW1wb3J0YW50O2BcbiAqIGBjb2xvcjogWydyZWQnLCAhaW1wb3J0YW50XWAgPiBgY29sb3I6IHJlZCAhaW1wb3J0YW50O2BcbiAqL1xuXG5cbmZ1bmN0aW9uIHRvQ3NzVmFsdWUodmFsdWUsIGlnbm9yZUltcG9ydGFudCkge1xuICBpZiAoaWdub3JlSW1wb3J0YW50ID09PSB2b2lkIDApIHtcbiAgICBpZ25vcmVJbXBvcnRhbnQgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgdmFyIGNzc1ZhbHVlID0gJyc7IC8vIFN1cHBvcnQgc3BhY2Ugc2VwYXJhdGVkIHZhbHVlcyB2aWEgYFtbJzVweCcsICcxMHB4J11dYC5cblxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZVswXSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodmFsdWVbaV0gPT09ICchaW1wb3J0YW50JykgYnJlYWs7XG4gICAgICBpZiAoY3NzVmFsdWUpIGNzc1ZhbHVlICs9ICcsICc7XG4gICAgICBjc3NWYWx1ZSArPSBqb2luKHZhbHVlW2ldLCAnICcpO1xuICAgIH1cbiAgfSBlbHNlIGNzc1ZhbHVlID0gam9pbih2YWx1ZSwgJywgJyk7IC8vIEFkZCAhaW1wb3J0YW50LCBiZWNhdXNlIGl0IHdhcyBpZ25vcmVkLlxuXG5cbiAgaWYgKCFpZ25vcmVJbXBvcnRhbnQgJiYgdmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0gPT09ICchaW1wb3J0YW50Jykge1xuICAgIGNzc1ZhbHVlICs9ICcgIWltcG9ydGFudCc7XG4gIH1cblxuICByZXR1cm4gY3NzVmFsdWU7XG59XG5cbi8qKlxuICogSW5kZW50IGEgc3RyaW5nLlxuICogaHR0cDovL2pzcGVyZi5jb20vYXJyYXktam9pbi12cy1mb3JcbiAqL1xuZnVuY3Rpb24gaW5kZW50U3RyKHN0ciwgaW5kZW50KSB7XG4gIHZhciByZXN1bHQgPSAnJztcblxuICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgaW5kZW50OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ICs9ICcgICc7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0ICsgc3RyO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIFJ1bGUgdG8gQ1NTIHN0cmluZy5cbiAqL1xuXG5cbmZ1bmN0aW9uIHRvQ3NzKHNlbGVjdG9yLCBzdHlsZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAoIXN0eWxlKSByZXR1cm4gcmVzdWx0O1xuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkaW5kZW50ID0gX29wdGlvbnMuaW5kZW50LFxuICAgICAgaW5kZW50ID0gX29wdGlvbnMkaW5kZW50ID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkaW5kZW50O1xuICB2YXIgZmFsbGJhY2tzID0gc3R5bGUuZmFsbGJhY2tzO1xuICBpZiAoc2VsZWN0b3IpIGluZGVudCsrOyAvLyBBcHBseSBmYWxsYmFja3MgZmlyc3QuXG5cbiAgaWYgKGZhbGxiYWNrcykge1xuICAgIC8vIEFycmF5IHN5bnRheCB7ZmFsbGJhY2tzOiBbe3Byb3A6IHZhbHVlfV19XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZmFsbGJhY2tzKSkge1xuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGZhbGxiYWNrcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgdmFyIGZhbGxiYWNrID0gZmFsbGJhY2tzW2luZGV4XTtcblxuICAgICAgICBmb3IgKHZhciBwcm9wIGluIGZhbGxiYWNrKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gZmFsbGJhY2tbcHJvcF07XG5cbiAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9ICdcXG4nO1xuICAgICAgICAgICAgcmVzdWx0ICs9IFwiXCIgKyBpbmRlbnRTdHIocHJvcCArIFwiOiBcIiArIHRvQ3NzVmFsdWUodmFsdWUpICsgXCI7XCIsIGluZGVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9iamVjdCBzeW50YXgge2ZhbGxiYWNrczoge3Byb3A6IHZhbHVlfX1cbiAgICAgIGZvciAodmFyIF9wcm9wIGluIGZhbGxiYWNrcykge1xuICAgICAgICB2YXIgX3ZhbHVlID0gZmFsbGJhY2tzW19wcm9wXTtcblxuICAgICAgICBpZiAoX3ZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICBpZiAocmVzdWx0KSByZXN1bHQgKz0gJ1xcbic7XG4gICAgICAgICAgcmVzdWx0ICs9IFwiXCIgKyBpbmRlbnRTdHIoX3Byb3AgKyBcIjogXCIgKyB0b0Nzc1ZhbHVlKF92YWx1ZSkgKyBcIjtcIiwgaW5kZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIF9wcm9wMiBpbiBzdHlsZSkge1xuICAgIHZhciBfdmFsdWUyID0gc3R5bGVbX3Byb3AyXTtcblxuICAgIGlmIChfdmFsdWUyICE9IG51bGwgJiYgX3Byb3AyICE9PSAnZmFsbGJhY2tzJykge1xuICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9ICdcXG4nO1xuICAgICAgcmVzdWx0ICs9IFwiXCIgKyBpbmRlbnRTdHIoX3Byb3AyICsgXCI6IFwiICsgdG9Dc3NWYWx1ZShfdmFsdWUyKSArIFwiO1wiLCBpbmRlbnQpO1xuICAgIH1cbiAgfSAvLyBBbGxvdyBlbXB0eSBzdHlsZSBpbiB0aGlzIGNhc2UsIGJlY2F1c2UgcHJvcGVydGllcyB3aWxsIGJlIGFkZGVkIGR5bmFtaWNhbGx5LlxuXG5cbiAgaWYgKCFyZXN1bHQgJiYgIW9wdGlvbnMuYWxsb3dFbXB0eSkgcmV0dXJuIHJlc3VsdDsgLy8gV2hlbiBydWxlIGlzIGJlaW5nIHN0cmluZ2lmaWVkIGJlZm9yZSBzZWxlY3RvciB3YXMgZGVmaW5lZC5cblxuICBpZiAoIXNlbGVjdG9yKSByZXR1cm4gcmVzdWx0O1xuICBpbmRlbnQtLTtcbiAgaWYgKHJlc3VsdCkgcmVzdWx0ID0gXCJcXG5cIiArIHJlc3VsdCArIFwiXFxuXCI7XG4gIHJldHVybiBpbmRlbnRTdHIoc2VsZWN0b3IgKyBcIiB7XCIgKyByZXN1bHQsIGluZGVudCkgKyBpbmRlbnRTdHIoJ30nLCBpbmRlbnQpO1xufVxuXG52YXIgZXNjYXBlUmVnZXggPSAvKFtbXFxdLiMqJD48K349fF46KCksXCInYFxcc10pL2c7XG52YXIgbmF0aXZlRXNjYXBlID0gdHlwZW9mIENTUyAhPT0gJ3VuZGVmaW5lZCcgJiYgQ1NTLmVzY2FwZTtcbnZhciBlc2NhcGUgPSAoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gbmF0aXZlRXNjYXBlID8gbmF0aXZlRXNjYXBlKHN0cikgOiBzdHIucmVwbGFjZShlc2NhcGVSZWdleCwgJ1xcXFwkMScpO1xufSk7XG5cbnZhciBCYXNlU3R5bGVSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQmFzZVN0eWxlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ3N0eWxlJztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5zdHlsZSA9IHZvaWQgMDtcbiAgICB0aGlzLnJlbmRlcmVyID0gdm9pZCAwO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdmFyIHNoZWV0ID0gb3B0aW9ucy5zaGVldCxcbiAgICAgICAgUmVuZGVyZXIgPSBvcHRpb25zLlJlbmRlcmVyO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlO1xuICAgIGlmIChzaGVldCkgdGhpcy5yZW5kZXJlciA9IHNoZWV0LnJlbmRlcmVyO2Vsc2UgaWYgKFJlbmRlcmVyKSB0aGlzLnJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBvciBzZXQgYSBzdHlsZSBwcm9wZXJ0eS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gQmFzZVN0eWxlUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnByb3AgPSBmdW5jdGlvbiBwcm9wKG5hbWUsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgLy8gSXQncyBhIGdldHRlci5cbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRoaXMuc3R5bGVbbmFtZV07IC8vIERvbid0IGRvIGFueXRoaW5nIGlmIHRoZSB2YWx1ZSBoYXMgbm90IGNoYW5nZWQuXG5cbiAgICB2YXIgZm9yY2UgPSBvcHRpb25zID8gb3B0aW9ucy5mb3JjZSA6IGZhbHNlO1xuICAgIGlmICghZm9yY2UgJiYgdGhpcy5zdHlsZVtuYW1lXSA9PT0gdmFsdWUpIHJldHVybiB0aGlzO1xuICAgIHZhciBuZXdWYWx1ZSA9IHZhbHVlO1xuXG4gICAgaWYgKCFvcHRpb25zIHx8IG9wdGlvbnMucHJvY2VzcyAhPT0gZmFsc2UpIHtcbiAgICAgIG5ld1ZhbHVlID0gdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uQ2hhbmdlVmFsdWUodmFsdWUsIG5hbWUsIHRoaXMpO1xuICAgIH1cblxuICAgIHZhciBpc0VtcHR5ID0gbmV3VmFsdWUgPT0gbnVsbCB8fCBuZXdWYWx1ZSA9PT0gZmFsc2U7XG4gICAgdmFyIGlzRGVmaW5lZCA9IG5hbWUgaW4gdGhpcy5zdHlsZTsgLy8gVmFsdWUgaXMgZW1wdHkgYW5kIHdhc24ndCBkZWZpbmVkIGJlZm9yZS5cblxuICAgIGlmIChpc0VtcHR5ICYmICFpc0RlZmluZWQgJiYgIWZvcmNlKSByZXR1cm4gdGhpczsgLy8gV2UgYXJlIGdvaW5nIHRvIHJlbW92ZSB0aGlzIHZhbHVlLlxuXG4gICAgdmFyIHJlbW92ZSA9IGlzRW1wdHkgJiYgaXNEZWZpbmVkO1xuICAgIGlmIChyZW1vdmUpIGRlbGV0ZSB0aGlzLnN0eWxlW25hbWVdO2Vsc2UgdGhpcy5zdHlsZVtuYW1lXSA9IG5ld1ZhbHVlOyAvLyBSZW5kZXJhYmxlIGlzIGRlZmluZWQgaWYgU3R5bGVTaGVldCBvcHRpb24gYGxpbmtgIGlzIHRydWUuXG5cbiAgICBpZiAodGhpcy5yZW5kZXJhYmxlICYmIHRoaXMucmVuZGVyZXIpIHtcbiAgICAgIGlmIChyZW1vdmUpIHRoaXMucmVuZGVyZXIucmVtb3ZlUHJvcGVydHkodGhpcy5yZW5kZXJhYmxlLCBuYW1lKTtlbHNlIHRoaXMucmVuZGVyZXIuc2V0UHJvcGVydHkodGhpcy5yZW5kZXJhYmxlLCBuYW1lLCBuZXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG5cbiAgICBpZiAoc2hlZXQgJiYgc2hlZXQuYXR0YWNoZWQpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdbSlNTXSBSdWxlIGlzIG5vdCBsaW5rZWQuIE1pc3Npbmcgc2hlZXQgb3B0aW9uIFwibGluazogdHJ1ZVwiLicpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHJldHVybiBCYXNlU3R5bGVSdWxlO1xufSgpO1xudmFyIFN0eWxlUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0Jhc2VTdHlsZVJ1bGUpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3R5bGVSdWxlLCBfQmFzZVN0eWxlUnVsZSk7XG5cbiAgZnVuY3Rpb24gU3R5bGVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9CYXNlU3R5bGVSdWxlLmNhbGwodGhpcywga2V5LCBzdHlsZSwgb3B0aW9ucykgfHwgdGhpcztcbiAgICBfdGhpcy5zZWxlY3RvclRleHQgPSB2b2lkIDA7XG4gICAgX3RoaXMuaWQgPSB2b2lkIDA7XG4gICAgX3RoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB2YXIgc2VsZWN0b3IgPSBvcHRpb25zLnNlbGVjdG9yLFxuICAgICAgICBzY29wZWQgPSBvcHRpb25zLnNjb3BlZCxcbiAgICAgICAgc2hlZXQgPSBvcHRpb25zLnNoZWV0LFxuICAgICAgICBnZW5lcmF0ZUlkID0gb3B0aW9ucy5nZW5lcmF0ZUlkO1xuXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBfdGhpcy5zZWxlY3RvclRleHQgPSBzZWxlY3RvcjtcbiAgICB9IGVsc2UgaWYgKHNjb3BlZCAhPT0gZmFsc2UpIHtcbiAgICAgIF90aGlzLmlkID0gZ2VuZXJhdGVJZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgc2hlZXQpO1xuICAgICAgX3RoaXMuc2VsZWN0b3JUZXh0ID0gXCIuXCIgKyBlc2NhcGUoX3RoaXMuaWQpO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogU2V0IHNlbGVjdG9yIHN0cmluZy5cbiAgICogQXR0ZW50aW9uOiB1c2UgdGhpcyB3aXRoIGNhdXRpb24uIE1vc3QgYnJvd3NlcnMgZGlkbid0IGltcGxlbWVudFxuICAgKiBzZWxlY3RvclRleHQgc2V0dGVyLCBzbyB0aGlzIG1heSByZXN1bHQgaW4gcmVyZW5kZXJpbmcgb2YgZW50aXJlIFN0eWxlIFNoZWV0LlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8yID0gU3R5bGVSdWxlLnByb3RvdHlwZTtcblxuICAvKipcbiAgICogQXBwbHkgcnVsZSB0byBhbiBlbGVtZW50IGlubGluZS5cbiAgICovXG4gIF9wcm90bzIuYXBwbHlUbyA9IGZ1bmN0aW9uIGFwcGx5VG8ocmVuZGVyYWJsZSkge1xuICAgIHZhciByZW5kZXJlciA9IHRoaXMucmVuZGVyZXI7XG5cbiAgICBpZiAocmVuZGVyZXIpIHtcbiAgICAgIHZhciBqc29uID0gdGhpcy50b0pTT04oKTtcblxuICAgICAgZm9yICh2YXIgcHJvcCBpbiBqc29uKSB7XG4gICAgICAgIHJlbmRlcmVyLnNldFByb3BlcnR5KHJlbmRlcmFibGUsIHByb3AsIGpzb25bcHJvcF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlIHJ1bGUuXG4gICAqIEZhbGxiYWNrcyBhcmUgbm90IHN1cHBvcnRlZC5cbiAgICogVXNlZnVsIGZvciBpbmxpbmUgc3R5bGVzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90bzIudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHZhciBqc29uID0ge307XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIHRoaXMuc3R5bGUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuc3R5bGVbcHJvcF07XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JykganNvbltwcm9wXSA9IHZhbHVlO2Vsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSBqc29uW3Byb3BdID0gdG9Dc3NWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGpzb247XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvMi50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG4gICAgdmFyIGxpbmsgPSBzaGVldCA/IHNoZWV0Lm9wdGlvbnMubGluayA6IGZhbHNlO1xuICAgIHZhciBvcHRzID0gbGluayA/IF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBhbGxvd0VtcHR5OiB0cnVlXG4gICAgfSkgOiBvcHRpb25zO1xuICAgIHJldHVybiB0b0Nzcyh0aGlzLnNlbGVjdG9yVGV4dCwgdGhpcy5zdHlsZSwgb3B0cyk7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKFN0eWxlUnVsZSwgW3tcbiAgICBrZXk6IFwic2VsZWN0b3JcIixcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChzZWxlY3Rvcikge1xuICAgICAgaWYgKHNlbGVjdG9yID09PSB0aGlzLnNlbGVjdG9yVGV4dCkgcmV0dXJuO1xuICAgICAgdGhpcy5zZWxlY3RvclRleHQgPSBzZWxlY3RvcjtcbiAgICAgIHZhciByZW5kZXJlciA9IHRoaXMucmVuZGVyZXIsXG4gICAgICAgICAgcmVuZGVyYWJsZSA9IHRoaXMucmVuZGVyYWJsZTtcbiAgICAgIGlmICghcmVuZGVyYWJsZSB8fCAhcmVuZGVyZXIpIHJldHVybjtcbiAgICAgIHZhciBoYXNDaGFuZ2VkID0gcmVuZGVyZXIuc2V0U2VsZWN0b3IocmVuZGVyYWJsZSwgc2VsZWN0b3IpOyAvLyBJZiBzZWxlY3RvciBzZXR0ZXIgaXMgbm90IGltcGxlbWVudGVkLCByZXJlbmRlciB0aGUgcnVsZS5cblxuICAgICAgaWYgKCFoYXNDaGFuZ2VkKSB7XG4gICAgICAgIHJlbmRlcmVyLnJlcGxhY2VSdWxlKHJlbmRlcmFibGUsIHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgc2VsZWN0b3Igc3RyaW5nLlxuICAgICAqL1xuICAgICxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnNlbGVjdG9yVGV4dDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3R5bGVSdWxlO1xufShCYXNlU3R5bGVSdWxlKTtcbnZhciBwbHVnaW5TdHlsZVJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKG5hbWVbMF0gPT09ICdAJyB8fCBvcHRpb25zLnBhcmVudCAmJiBvcHRpb25zLnBhcmVudC50eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBTdHlsZVJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpO1xuICB9XG59O1xuXG52YXIgZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyA9IHtcbiAgaW5kZW50OiAxLFxuICBjaGlsZHJlbjogdHJ1ZVxufTtcbnZhciBhdFJlZ0V4cCA9IC9AKFtcXHctXSspLztcbi8qKlxuICogQ29uZGl0aW9uYWwgcnVsZSBmb3IgQG1lZGlhLCBAc3VwcG9ydHNcbiAqL1xuXG52YXIgQ29uZGl0aW9uYWxSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29uZGl0aW9uYWxSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2NvbmRpdGlvbmFsJztcbiAgICB0aGlzLmF0ID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMucXVlcnkgPSB2b2lkIDA7XG4gICAgdGhpcy5ydWxlcyA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IGtleTsgLy8gS2V5IG1pZ2h0IGNvbnRhaW4gYSB1bmlxdWUgc3VmZml4IGluIGNhc2UgdGhlIGBuYW1lYCBwYXNzZWQgYnkgdXNlciB3YXMgZHVwbGljYXRlLlxuXG4gICAgdGhpcy5xdWVyeSA9IG9wdGlvbnMubmFtZTtcbiAgICB2YXIgYXRNYXRjaCA9IGtleS5tYXRjaChhdFJlZ0V4cCk7XG4gICAgdGhpcy5hdCA9IGF0TWF0Y2ggPyBhdE1hdGNoWzFdIDogJ3Vua25vd24nO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5ydWxlcyA9IG5ldyBSdWxlTGlzdChfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzXG4gICAgfSkpO1xuXG4gICAgZm9yICh2YXIgbmFtZSBpbiBzdHlsZXMpIHtcbiAgICAgIHRoaXMucnVsZXMuYWRkKG5hbWUsIHN0eWxlc1tuYW1lXSk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcy5wcm9jZXNzKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIHJ1bGUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IENvbmRpdGlvbmFsUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldFJ1bGUgPSBmdW5jdGlvbiBnZXRSdWxlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5nZXQobmFtZSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5pbmRleE9mKHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYW5kIHJlZ2lzdGVyIHJ1bGUsIHJ1biBwbHVnaW5zLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hZGRSdWxlID0gZnVuY3Rpb24gYWRkUnVsZShuYW1lLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHZhciBydWxlID0gdGhpcy5ydWxlcy5hZGQobmFtZSwgc3R5bGUsIG9wdGlvbnMpO1xuICAgIGlmICghcnVsZSkgcmV0dXJuIG51bGw7XG4gICAgdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmluZGVudCA9PSBudWxsKSBvcHRpb25zLmluZGVudCA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMuaW5kZW50O1xuICAgIGlmIChvcHRpb25zLmNoaWxkcmVuID09IG51bGwpIG9wdGlvbnMuY2hpbGRyZW4gPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zLmNoaWxkcmVuO1xuXG4gICAgaWYgKG9wdGlvbnMuY2hpbGRyZW4gPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5xdWVyeSArIFwiIHt9XCI7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5ydWxlcy50b1N0cmluZyhvcHRpb25zKTtcbiAgICByZXR1cm4gY2hpbGRyZW4gPyB0aGlzLnF1ZXJ5ICsgXCIge1xcblwiICsgY2hpbGRyZW4gKyBcIlxcbn1cIiA6ICcnO1xuICB9O1xuXG4gIHJldHVybiBDb25kaXRpb25hbFJ1bGU7XG59KCk7XG52YXIga2V5UmVnRXhwID0gL0BtZWRpYXxAc3VwcG9ydHNcXHMrLztcbnZhciBwbHVnaW5Db25kaXRpb25hbFJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleVJlZ0V4cC50ZXN0KGtleSkgPyBuZXcgQ29uZGl0aW9uYWxSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSA6IG51bGw7XG4gIH1cbn07XG5cbnZhciBkZWZhdWx0VG9TdHJpbmdPcHRpb25zJDEgPSB7XG4gIGluZGVudDogMSxcbiAgY2hpbGRyZW46IHRydWVcbn07XG52YXIgbmFtZVJlZ0V4cCA9IC9Aa2V5ZnJhbWVzXFxzKyhbXFx3LV0rKS87XG4vKipcbiAqIFJ1bGUgZm9yIEBrZXlmcmFtZXNcbiAqL1xuXG52YXIgS2V5ZnJhbWVzUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEtleWZyYW1lc1J1bGUoa2V5LCBmcmFtZXMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAna2V5ZnJhbWVzJztcbiAgICB0aGlzLmF0ID0gJ0BrZXlmcmFtZXMnO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMubmFtZSA9IHZvaWQgMDtcbiAgICB0aGlzLmlkID0gdm9pZCAwO1xuICAgIHRoaXMucnVsZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcmFibGUgPSB2b2lkIDA7XG4gICAgdmFyIG5hbWVNYXRjaCA9IGtleS5tYXRjaChuYW1lUmVnRXhwKTtcblxuICAgIGlmIChuYW1lTWF0Y2ggJiYgbmFtZU1hdGNoWzFdKSB7XG4gICAgICB0aGlzLm5hbWUgPSBuYW1lTWF0Y2hbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubmFtZSA9ICdub25hbWUnO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBCYWQga2V5ZnJhbWVzIG5hbWUgXCIgKyBrZXkpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHRoaXMua2V5ID0gdGhpcy50eXBlICsgXCItXCIgKyB0aGlzLm5hbWU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB2YXIgc2NvcGVkID0gb3B0aW9ucy5zY29wZWQsXG4gICAgICAgIHNoZWV0ID0gb3B0aW9ucy5zaGVldCxcbiAgICAgICAgZ2VuZXJhdGVJZCA9IG9wdGlvbnMuZ2VuZXJhdGVJZDtcbiAgICB0aGlzLmlkID0gc2NvcGVkID09PSBmYWxzZSA/IHRoaXMubmFtZSA6IGVzY2FwZShnZW5lcmF0ZUlkKHRoaXMsIHNoZWV0KSk7XG4gICAgdGhpcy5ydWxlcyA9IG5ldyBSdWxlTGlzdChfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzXG4gICAgfSkpO1xuXG4gICAgZm9yICh2YXIgbmFtZSBpbiBmcmFtZXMpIHtcbiAgICAgIHRoaXMucnVsZXMuYWRkKG5hbWUsIGZyYW1lc1tuYW1lXSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgICAgcGFyZW50OiB0aGlzXG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcy5wcm9jZXNzKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEtleWZyYW1lc1J1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyQxO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmluZGVudCA9PSBudWxsKSBvcHRpb25zLmluZGVudCA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMkMS5pbmRlbnQ7XG4gICAgaWYgKG9wdGlvbnMuY2hpbGRyZW4gPT0gbnVsbCkgb3B0aW9ucy5jaGlsZHJlbiA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMkMS5jaGlsZHJlbjtcblxuICAgIGlmIChvcHRpb25zLmNoaWxkcmVuID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIHRoaXMuYXQgKyBcIiBcIiArIHRoaXMuaWQgKyBcIiB7fVwiO1xuICAgIH1cblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucnVsZXMudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgaWYgKGNoaWxkcmVuKSBjaGlsZHJlbiA9IFwiXFxuXCIgKyBjaGlsZHJlbiArIFwiXFxuXCI7XG4gICAgcmV0dXJuIHRoaXMuYXQgKyBcIiBcIiArIHRoaXMuaWQgKyBcIiB7XCIgKyBjaGlsZHJlbiArIFwifVwiO1xuICB9O1xuXG4gIHJldHVybiBLZXlmcmFtZXNSdWxlO1xufSgpO1xudmFyIGtleVJlZ0V4cCQxID0gL0BrZXlmcmFtZXNcXHMrLztcbnZhciByZWZSZWdFeHAgPSAvXFwkKFtcXHctXSspL2c7XG5cbnZhciBmaW5kUmVmZXJlbmNlZEtleWZyYW1lID0gZnVuY3Rpb24gZmluZFJlZmVyZW5jZWRLZXlmcmFtZSh2YWwsIGtleWZyYW1lcykge1xuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsLnJlcGxhY2UocmVmUmVnRXhwLCBmdW5jdGlvbiAobWF0Y2gsIG5hbWUpIHtcbiAgICAgIGlmIChuYW1lIGluIGtleWZyYW1lcykge1xuICAgICAgICByZXR1cm4ga2V5ZnJhbWVzW25hbWVdO1xuICAgICAgfVxuXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIFJlZmVyZW5jZWQga2V5ZnJhbWVzIHJ1bGUgXFxcIlwiICsgbmFtZSArIFwiXFxcIiBpcyBub3QgZGVmaW5lZC5cIikgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufTtcbi8qKlxuICogUmVwbGFjZSB0aGUgcmVmZXJlbmNlIGZvciBhIGFuaW1hdGlvbiBuYW1lLlxuICovXG5cblxudmFyIHJlcGxhY2VSZWYgPSBmdW5jdGlvbiByZXBsYWNlUmVmKHN0eWxlLCBwcm9wLCBrZXlmcmFtZXMpIHtcbiAgdmFyIHZhbHVlID0gc3R5bGVbcHJvcF07XG4gIHZhciByZWZLZXlmcmFtZSA9IGZpbmRSZWZlcmVuY2VkS2V5ZnJhbWUodmFsdWUsIGtleWZyYW1lcyk7XG5cbiAgaWYgKHJlZktleWZyYW1lICE9PSB2YWx1ZSkge1xuICAgIHN0eWxlW3Byb3BdID0gcmVmS2V5ZnJhbWU7XG4gIH1cbn07XG5cbnZhciBwbHVnaW4gPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgZnJhbWVzLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleVJlZ0V4cCQxLnRlc3Qoa2V5KSA/IG5ldyBLZXlmcmFtZXNSdWxlKGtleSwgZnJhbWVzLCBvcHRpb25zKSA6IG51bGw7XG4gIH0sXG4gIC8vIEFuaW1hdGlvbiBuYW1lIHJlZiByZXBsYWNlci5cbiAgb25Qcm9jZXNzU3R5bGU6IGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlLCBzaGVldCkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScgfHwgIXNoZWV0KSByZXR1cm4gc3R5bGU7XG4gICAgaWYgKCdhbmltYXRpb24tbmFtZScgaW4gc3R5bGUpIHJlcGxhY2VSZWYoc3R5bGUsICdhbmltYXRpb24tbmFtZScsIHNoZWV0LmtleWZyYW1lcyk7XG4gICAgaWYgKCdhbmltYXRpb24nIGluIHN0eWxlKSByZXBsYWNlUmVmKHN0eWxlLCAnYW5pbWF0aW9uJywgc2hlZXQua2V5ZnJhbWVzKTtcbiAgICByZXR1cm4gc3R5bGU7XG4gIH0sXG4gIG9uQ2hhbmdlVmFsdWU6IGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsLCBwcm9wLCBydWxlKSB7XG4gICAgdmFyIHNoZWV0ID0gcnVsZS5vcHRpb25zLnNoZWV0O1xuXG4gICAgaWYgKCFzaGVldCkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHByb3ApIHtcbiAgICAgIGNhc2UgJ2FuaW1hdGlvbic6XG4gICAgICAgIHJldHVybiBmaW5kUmVmZXJlbmNlZEtleWZyYW1lKHZhbCwgc2hlZXQua2V5ZnJhbWVzKTtcblxuICAgICAgY2FzZSAnYW5pbWF0aW9uLW5hbWUnOlxuICAgICAgICByZXR1cm4gZmluZFJlZmVyZW5jZWRLZXlmcmFtZSh2YWwsIHNoZWV0LmtleWZyYW1lcyk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICB9XG59O1xuXG52YXIgS2V5ZnJhbWVSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQmFzZVN0eWxlUnVsZSkge1xuICBfaW5oZXJpdHNMb29zZShLZXlmcmFtZVJ1bGUsIF9CYXNlU3R5bGVSdWxlKTtcblxuICBmdW5jdGlvbiBLZXlmcmFtZVJ1bGUoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX0Jhc2VTdHlsZVJ1bGUuY2FsbC5hcHBseShfQmFzZVN0eWxlUnVsZSwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBLZXlmcmFtZVJ1bGUucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIHZhciBzaGVldCA9IHRoaXMub3B0aW9ucy5zaGVldDtcbiAgICB2YXIgbGluayA9IHNoZWV0ID8gc2hlZXQub3B0aW9ucy5saW5rIDogZmFsc2U7XG4gICAgdmFyIG9wdHMgPSBsaW5rID8gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIGFsbG93RW1wdHk6IHRydWVcbiAgICB9KSA6IG9wdGlvbnM7XG4gICAgcmV0dXJuIHRvQ3NzKHRoaXMua2V5LCB0aGlzLnN0eWxlLCBvcHRzKTtcbiAgfTtcblxuICByZXR1cm4gS2V5ZnJhbWVSdWxlO1xufShCYXNlU3R5bGVSdWxlKTtcbnZhciBwbHVnaW5LZXlmcmFtZVJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5wYXJlbnQgJiYgb3B0aW9ucy5wYXJlbnQudHlwZSA9PT0gJ2tleWZyYW1lcycpIHtcbiAgICAgIHJldHVybiBuZXcgS2V5ZnJhbWVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG52YXIgRm9udEZhY2VSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRm9udEZhY2VSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnZm9udC1mYWNlJztcbiAgICB0aGlzLmF0ID0gJ0Bmb250LWZhY2UnO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMuc3R5bGUgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcmFibGUgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEZvbnRGYWNlUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuc3R5bGUpKSB7XG4gICAgICB2YXIgc3RyID0gJyc7XG5cbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnN0eWxlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBzdHIgKz0gdG9Dc3ModGhpcy5rZXksIHRoaXMuc3R5bGVbaW5kZXhdKTtcbiAgICAgICAgaWYgKHRoaXMuc3R5bGVbaW5kZXggKyAxXSkgc3RyICs9ICdcXG4nO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cblxuICAgIHJldHVybiB0b0Nzcyh0aGlzLmtleSwgdGhpcy5zdHlsZSwgb3B0aW9ucyk7XG4gIH07XG5cbiAgcmV0dXJuIEZvbnRGYWNlUnVsZTtcbn0oKTtcbnZhciBwbHVnaW5Gb250RmFjZVJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4ga2V5ID09PSAnQGZvbnQtZmFjZScgPyBuZXcgRm9udEZhY2VSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIDogbnVsbDtcbiAgfVxufTtcblxudmFyIFZpZXdwb3J0UnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFZpZXdwb3J0UnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ3ZpZXdwb3J0JztcbiAgICB0aGlzLmF0ID0gJ0B2aWV3cG9ydCc7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy5zdHlsZSA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLnN0eWxlID0gc3R5bGU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gVmlld3BvcnRSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRvQ3NzKHRoaXMua2V5LCB0aGlzLnN0eWxlLCBvcHRpb25zKTtcbiAgfTtcblxuICByZXR1cm4gVmlld3BvcnRSdWxlO1xufSgpO1xudmFyIHBsdWdpblZpZXdwb3J0UnVsZSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBrZXkgPT09ICdAdmlld3BvcnQnIHx8IGtleSA9PT0gJ0AtbXMtdmlld3BvcnQnID8gbmV3IFZpZXdwb3J0UnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSA6IG51bGw7XG4gIH1cbn07XG5cbnZhciBTaW1wbGVSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2ltcGxlUnVsZShrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ3NpbXBsZSc7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy52YWx1ZSA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuXG5cbiAgdmFyIF9wcm90byA9IFNpbXBsZVJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnZhbHVlKSkge1xuICAgICAgdmFyIHN0ciA9ICcnO1xuXG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy52YWx1ZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgc3RyICs9IHRoaXMua2V5ICsgXCIgXCIgKyB0aGlzLnZhbHVlW2luZGV4XSArIFwiO1wiO1xuICAgICAgICBpZiAodGhpcy52YWx1ZVtpbmRleCArIDFdKSBzdHIgKz0gJ1xcbic7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMua2V5ICsgXCIgXCIgKyB0aGlzLnZhbHVlICsgXCI7XCI7XG4gIH07XG5cbiAgcmV0dXJuIFNpbXBsZVJ1bGU7XG59KCk7XG52YXIga2V5c01hcCA9IHtcbiAgJ0BjaGFyc2V0JzogdHJ1ZSxcbiAgJ0BpbXBvcnQnOiB0cnVlLFxuICAnQG5hbWVzcGFjZSc6IHRydWVcbn07XG52YXIgcGx1Z2luU2ltcGxlUnVsZSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUoa2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBrZXkgaW4ga2V5c01hcCA/IG5ldyBTaW1wbGVSdWxlKGtleSwgdmFsdWUsIG9wdGlvbnMpIDogbnVsbDtcbiAgfVxufTtcblxudmFyIHBsdWdpbnMgPSBbcGx1Z2luU3R5bGVSdWxlLCBwbHVnaW5Db25kaXRpb25hbFJ1bGUsIHBsdWdpbiwgcGx1Z2luS2V5ZnJhbWVSdWxlLCBwbHVnaW5Gb250RmFjZVJ1bGUsIHBsdWdpblZpZXdwb3J0UnVsZSwgcGx1Z2luU2ltcGxlUnVsZV07XG5cbnZhciBkZWZhdWx0VXBkYXRlT3B0aW9ucyA9IHtcbiAgcHJvY2VzczogdHJ1ZVxufTtcbnZhciBmb3JjZVVwZGF0ZU9wdGlvbnMgPSB7XG4gIGZvcmNlOiB0cnVlLFxuICBwcm9jZXNzOiB0cnVlXG4gIC8qKlxuICAgKiBDb250YWlucyBydWxlcyBvYmplY3RzIGFuZCBhbGxvd3MgYWRkaW5nL3JlbW92aW5nIGV0Yy5cbiAgICogSXMgdXNlZCBmb3IgZS5nLiBieSBgU3R5bGVTaGVldGAgb3IgYENvbmRpdGlvbmFsUnVsZWAuXG4gICAqL1xuXG59O1xuXG52YXIgUnVsZUxpc3QgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICAvLyBSdWxlcyByZWdpc3RyeSBmb3IgYWNjZXNzIGJ5IC5nZXQoKSBtZXRob2QuXG4gIC8vIEl0IGNvbnRhaW5zIHRoZSBzYW1lIHJ1bGUgcmVnaXN0ZXJlZCBieSBuYW1lIGFuZCBieSBzZWxlY3Rvci5cbiAgLy8gT3JpZ2luYWwgc3R5bGVzIG9iamVjdC5cbiAgLy8gVXNlZCB0byBlbnN1cmUgY29ycmVjdCBydWxlcyBvcmRlci5cbiAgZnVuY3Rpb24gUnVsZUxpc3Qob3B0aW9ucykge1xuICAgIHRoaXMubWFwID0ge307XG4gICAgdGhpcy5yYXcgPSB7fTtcbiAgICB0aGlzLmluZGV4ID0gW107XG4gICAgdGhpcy5jb3VudGVyID0gMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5jbGFzc2VzID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ZnJhbWVzID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5jbGFzc2VzID0gb3B0aW9ucy5jbGFzc2VzO1xuICAgIHRoaXMua2V5ZnJhbWVzID0gb3B0aW9ucy5rZXlmcmFtZXM7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgcmVnaXN0ZXIgcnVsZS5cbiAgICpcbiAgICogV2lsbCBub3QgcmVuZGVyIGFmdGVyIFN0eWxlIFNoZWV0IHdhcyByZW5kZXJlZCB0aGUgZmlyc3QgdGltZS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gUnVsZUxpc3QucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQobmFtZSwgZGVjbCwgcnVsZU9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMkb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgcGFyZW50ID0gX3RoaXMkb3B0aW9ucy5wYXJlbnQsXG4gICAgICAgIHNoZWV0ID0gX3RoaXMkb3B0aW9ucy5zaGVldCxcbiAgICAgICAganNzID0gX3RoaXMkb3B0aW9ucy5qc3MsXG4gICAgICAgIFJlbmRlcmVyID0gX3RoaXMkb3B0aW9ucy5SZW5kZXJlcixcbiAgICAgICAgZ2VuZXJhdGVJZCA9IF90aGlzJG9wdGlvbnMuZ2VuZXJhdGVJZCxcbiAgICAgICAgc2NvcGVkID0gX3RoaXMkb3B0aW9ucy5zY29wZWQ7XG5cbiAgICB2YXIgb3B0aW9ucyA9IF9leHRlbmRzKHtcbiAgICAgIGNsYXNzZXM6IHRoaXMuY2xhc3NlcyxcbiAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgc2hlZXQ6IHNoZWV0LFxuICAgICAganNzOiBqc3MsXG4gICAgICBSZW5kZXJlcjogUmVuZGVyZXIsXG4gICAgICBnZW5lcmF0ZUlkOiBnZW5lcmF0ZUlkLFxuICAgICAgc2NvcGVkOiBzY29wZWQsXG4gICAgICBuYW1lOiBuYW1lXG4gICAgfSwgcnVsZU9wdGlvbnMpOyAvLyBXaGVuIHVzZXIgdXNlcyAuY3JlYXRlU3R5bGVTaGVldCgpLCBkdXBsaWNhdGUgbmFtZXMgYXJlIG5vdCBwb3NzaWJsZSwgYnV0XG4gICAgLy8gYHNoZWV0LmFkZFJ1bGUoKWAgb3BlbnMgdGhlIGRvb3IgZm9yIGFueSBkdXBsaWNhdGUgcnVsZSBuYW1lLiBXaGVuIHRoaXMgaGFwcGVuc1xuICAgIC8vIHdlIG5lZWQgdG8gbWFrZSB0aGUga2V5IHVuaXF1ZSB3aXRoaW4gdGhpcyBSdWxlTGlzdCBpbnN0YW5jZSBzY29wZS5cblxuXG4gICAgdmFyIGtleSA9IG5hbWU7XG5cbiAgICBpZiAobmFtZSBpbiB0aGlzLnJhdykge1xuICAgICAga2V5ID0gbmFtZSArIFwiLWRcIiArIHRoaXMuY291bnRlcisrO1xuICAgIH0gLy8gV2UgbmVlZCB0byBzYXZlIHRoZSBvcmlnaW5hbCBkZWNsIGJlZm9yZSBjcmVhdGluZyB0aGUgcnVsZVxuICAgIC8vIGJlY2F1c2UgY2FjaGUgcGx1Z2luIG5lZWRzIHRvIHVzZSBpdCBhcyBhIGtleSB0byByZXR1cm4gYSBjYWNoZWQgcnVsZS5cblxuXG4gICAgdGhpcy5yYXdba2V5XSA9IGRlY2w7XG5cbiAgICBpZiAoa2V5IGluIHRoaXMuY2xhc3Nlcykge1xuICAgICAgLy8gRS5nLiBydWxlcyBpbnNpZGUgb2YgQG1lZGlhIGNvbnRhaW5lclxuICAgICAgb3B0aW9ucy5zZWxlY3RvciA9IFwiLlwiICsgZXNjYXBlKHRoaXMuY2xhc3Nlc1trZXldKTtcbiAgICB9XG5cbiAgICB2YXIgcnVsZSA9IGNyZWF0ZVJ1bGUoa2V5LCBkZWNsLCBvcHRpb25zKTtcbiAgICBpZiAoIXJ1bGUpIHJldHVybiBudWxsO1xuICAgIHRoaXMucmVnaXN0ZXIocnVsZSk7XG4gICAgdmFyIGluZGV4ID0gb3B0aW9ucy5pbmRleCA9PT0gdW5kZWZpbmVkID8gdGhpcy5pbmRleC5sZW5ndGggOiBvcHRpb25zLmluZGV4O1xuICAgIHRoaXMuaW5kZXguc3BsaWNlKGluZGV4LCAwLCBydWxlKTtcbiAgICByZXR1cm4gcnVsZTtcbiAgfVxuICAvKipcbiAgICogR2V0IGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZ2V0ID0gZnVuY3Rpb24gZ2V0KG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5tYXBbbmFtZV07XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShydWxlKSB7XG4gICAgdGhpcy51bnJlZ2lzdGVyKHJ1bGUpO1xuICAgIGRlbGV0ZSB0aGlzLnJhd1tydWxlLmtleV07XG4gICAgdGhpcy5pbmRleC5zcGxpY2UodGhpcy5pbmRleC5pbmRleE9mKHJ1bGUpLCAxKTtcbiAgfVxuICAvKipcbiAgICogR2V0IGluZGV4IG9mIGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YocnVsZSkge1xuICAgIHJldHVybiB0aGlzLmluZGV4LmluZGV4T2YocnVsZSk7XG4gIH1cbiAgLyoqXG4gICAqIFJ1biBgb25Qcm9jZXNzUnVsZSgpYCBwbHVnaW5zIG9uIGV2ZXJ5IHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnByb2Nlc3MgPSBmdW5jdGlvbiBwcm9jZXNzKCkge1xuICAgIHZhciBwbHVnaW5zJCQxID0gdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zOyAvLyBXZSBuZWVkIHRvIGNsb25lIGFycmF5IGJlY2F1c2UgaWYgd2UgbW9kaWZ5IHRoZSBpbmRleCBzb21ld2hlcmUgZWxzZSBkdXJpbmcgYSBsb29wXG4gICAgLy8gd2UgZW5kIHVwIHdpdGggdmVyeSBoYXJkLXRvLXRyYWNrLWRvd24gc2lkZSBlZmZlY3RzLlxuXG4gICAgdGhpcy5pbmRleC5zbGljZSgwKS5mb3JFYWNoKHBsdWdpbnMkJDEub25Qcm9jZXNzUnVsZSwgcGx1Z2lucyQkMSk7XG4gIH1cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgcnVsZSBpbiBgLm1hcGAsIGAuY2xhc3Nlc2AgYW5kIGAua2V5ZnJhbWVzYCBtYXBzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZWdpc3RlciA9IGZ1bmN0aW9uIHJlZ2lzdGVyKHJ1bGUpIHtcbiAgICB0aGlzLm1hcFtydWxlLmtleV0gPSBydWxlO1xuXG4gICAgaWYgKHJ1bGUgaW5zdGFuY2VvZiBTdHlsZVJ1bGUpIHtcbiAgICAgIHRoaXMubWFwW3J1bGUuc2VsZWN0b3JdID0gcnVsZTtcbiAgICAgIGlmIChydWxlLmlkKSB0aGlzLmNsYXNzZXNbcnVsZS5rZXldID0gcnVsZS5pZDtcbiAgICB9IGVsc2UgaWYgKHJ1bGUgaW5zdGFuY2VvZiBLZXlmcmFtZXNSdWxlICYmIHRoaXMua2V5ZnJhbWVzKSB7XG4gICAgICB0aGlzLmtleWZyYW1lc1tydWxlLm5hbWVdID0gcnVsZS5pZDtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFVucmVnaXN0ZXIgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51bnJlZ2lzdGVyID0gZnVuY3Rpb24gdW5yZWdpc3RlcihydWxlKSB7XG4gICAgZGVsZXRlIHRoaXMubWFwW3J1bGUua2V5XTtcblxuICAgIGlmIChydWxlIGluc3RhbmNlb2YgU3R5bGVSdWxlKSB7XG4gICAgICBkZWxldGUgdGhpcy5tYXBbcnVsZS5zZWxlY3Rvcl07XG4gICAgICBkZWxldGUgdGhpcy5jbGFzc2VzW3J1bGUua2V5XTtcbiAgICB9IGVsc2UgaWYgKHJ1bGUgaW5zdGFuY2VvZiBLZXlmcmFtZXNSdWxlKSB7XG4gICAgICBkZWxldGUgdGhpcy5rZXlmcmFtZXNbcnVsZS5uYW1lXTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgZnVuY3Rpb24gdmFsdWVzIHdpdGggYSBuZXcgZGF0YS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIHZhciBuYW1lO1xuICAgIHZhciBkYXRhO1xuICAgIHZhciBvcHRpb25zO1xuXG4gICAgaWYgKHR5cGVvZiAoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG5hbWUgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF07IC8vICRGbG93Rml4TWVcblxuICAgICAgZGF0YSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXTsgLy8gJEZsb3dGaXhNZVxuXG4gICAgICBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAyID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzJdO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdOyAvLyAkRmxvd0ZpeE1lXG5cbiAgICAgIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV07XG4gICAgICBuYW1lID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAobmFtZSkge1xuICAgICAgdGhpcy51cGRhdGVPbmUodGhpcy5tYXBbbmFtZV0sIGRhdGEsIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5pbmRleC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgdGhpcy51cGRhdGVPbmUodGhpcy5pbmRleFtpbmRleF0sIGRhdGEsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogRXhlY3V0ZSBwbHVnaW5zLCB1cGRhdGUgcnVsZSBwcm9wcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlT25lID0gZnVuY3Rpb24gdXBkYXRlT25lKHJ1bGUsIGRhdGEsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gZGVmYXVsdFVwZGF0ZU9wdGlvbnM7XG4gICAgfVxuXG4gICAgdmFyIF90aGlzJG9wdGlvbnMyID0gdGhpcy5vcHRpb25zLFxuICAgICAgICBwbHVnaW5zJCQxID0gX3RoaXMkb3B0aW9uczIuanNzLnBsdWdpbnMsXG4gICAgICAgIHNoZWV0ID0gX3RoaXMkb3B0aW9uczIuc2hlZXQ7IC8vIEl0IGlzIGEgcnVsZXMgY29udGFpbmVyIGxpa2UgZm9yIGUuZy4gQ29uZGl0aW9uYWxSdWxlLlxuXG4gICAgaWYgKHJ1bGUucnVsZXMgaW5zdGFuY2VvZiBSdWxlTGlzdCkge1xuICAgICAgcnVsZS5ydWxlcy51cGRhdGUoZGF0YSwgb3B0aW9ucyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHN0eWxlUnVsZSA9IHJ1bGU7XG4gICAgdmFyIHN0eWxlID0gc3R5bGVSdWxlLnN0eWxlO1xuICAgIHBsdWdpbnMkJDEub25VcGRhdGUoZGF0YSwgcnVsZSwgc2hlZXQsIG9wdGlvbnMpOyAvLyBXZSByZWx5IG9uIGEgbmV3IGBzdHlsZWAgcmVmIGluIGNhc2UgaXQgd2FzIG11dGF0ZWQgZHVyaW5nIG9uVXBkYXRlIGhvb2suXG5cbiAgICBpZiAob3B0aW9ucy5wcm9jZXNzICYmIHN0eWxlICYmIHN0eWxlICE9PSBzdHlsZVJ1bGUuc3R5bGUpIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gcnVuIHRoZSBwbHVnaW5zIGluIGNhc2UgbmV3IGBzdHlsZWAgcmVsaWVzIG9uIHN5bnRheCBwbHVnaW5zLlxuICAgICAgcGx1Z2lucyQkMS5vblByb2Nlc3NTdHlsZShzdHlsZVJ1bGUuc3R5bGUsIHN0eWxlUnVsZSwgc2hlZXQpOyAvLyBVcGRhdGUgYW5kIGFkZCBwcm9wcy5cblxuICAgICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZVJ1bGUuc3R5bGUpIHtcbiAgICAgICAgdmFyIG5leHRWYWx1ZSA9IHN0eWxlUnVsZS5zdHlsZVtwcm9wXTtcbiAgICAgICAgdmFyIHByZXZWYWx1ZSA9IHN0eWxlW3Byb3BdOyAvLyBXZSBuZWVkIHRvIHVzZSBgZm9yY2U6IHRydWVgIGJlY2F1c2UgYHJ1bGUuc3R5bGVgIGhhcyBiZWVuIHVwZGF0ZWQgZHVyaW5nIG9uVXBkYXRlIGhvb2ssIHNvIGBydWxlLnByb3AoKWAgd2lsbCBub3QgdXBkYXRlIHRoZSBDU1NPTSBydWxlLlxuICAgICAgICAvLyBXZSBkbyB0aGlzIGNvbXBhcmlzb24gdG8gYXZvaWQgdW5uZWVkZWQgYHJ1bGUucHJvcCgpYCBjYWxscywgc2luY2Ugd2UgaGF2ZSB0aGUgb2xkIGBzdHlsZWAgb2JqZWN0IGhlcmUuXG5cbiAgICAgICAgaWYgKG5leHRWYWx1ZSAhPT0gcHJldlZhbHVlKSB7XG4gICAgICAgICAgc3R5bGVSdWxlLnByb3AocHJvcCwgbmV4dFZhbHVlLCBmb3JjZVVwZGF0ZU9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9IC8vIFJlbW92ZSBwcm9wcy5cblxuXG4gICAgICBmb3IgKHZhciBfcHJvcCBpbiBzdHlsZSkge1xuICAgICAgICB2YXIgX25leHRWYWx1ZSA9IHN0eWxlUnVsZS5zdHlsZVtfcHJvcF07XG4gICAgICAgIHZhciBfcHJldlZhbHVlID0gc3R5bGVbX3Byb3BdOyAvLyBXZSBuZWVkIHRvIHVzZSBgZm9yY2U6IHRydWVgIGJlY2F1c2UgYHJ1bGUuc3R5bGVgIGhhcyBiZWVuIHVwZGF0ZWQgZHVyaW5nIG9uVXBkYXRlIGhvb2ssIHNvIGBydWxlLnByb3AoKWAgd2lsbCBub3QgdXBkYXRlIHRoZSBDU1NPTSBydWxlLlxuICAgICAgICAvLyBXZSBkbyB0aGlzIGNvbXBhcmlzb24gdG8gYXZvaWQgdW5uZWVkZWQgYHJ1bGUucHJvcCgpYCBjYWxscywgc2luY2Ugd2UgaGF2ZSB0aGUgb2xkIGBzdHlsZWAgb2JqZWN0IGhlcmUuXG5cbiAgICAgICAgaWYgKF9uZXh0VmFsdWUgPT0gbnVsbCAmJiBfbmV4dFZhbHVlICE9PSBfcHJldlZhbHVlKSB7XG4gICAgICAgICAgc3R5bGVSdWxlLnByb3AoX3Byb3AsIG51bGwsIGZvcmNlVXBkYXRlT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENvbnZlcnQgcnVsZXMgdG8gYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICB2YXIgc3RyID0gJyc7XG4gICAgdmFyIHNoZWV0ID0gdGhpcy5vcHRpb25zLnNoZWV0O1xuICAgIHZhciBsaW5rID0gc2hlZXQgPyBzaGVldC5vcHRpb25zLmxpbmsgOiBmYWxzZTtcblxuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLmluZGV4Lmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgdmFyIHJ1bGUgPSB0aGlzLmluZGV4W2luZGV4XTtcbiAgICAgIHZhciBjc3MgPSBydWxlLnRvU3RyaW5nKG9wdGlvbnMpOyAvLyBObyBuZWVkIHRvIHJlbmRlciBhbiBlbXB0eSBydWxlLlxuXG4gICAgICBpZiAoIWNzcyAmJiAhbGluaykgY29udGludWU7XG4gICAgICBpZiAoc3RyKSBzdHIgKz0gJ1xcbic7XG4gICAgICBzdHIgKz0gY3NzO1xuICAgIH1cblxuICAgIHJldHVybiBzdHI7XG4gIH07XG5cbiAgcmV0dXJuIFJ1bGVMaXN0O1xufSgpO1xuXG52YXIgU3R5bGVTaGVldCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN0eWxlU2hlZXQoc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMuZGVwbG95ZWQgPSB2b2lkIDA7XG4gICAgdGhpcy5hdHRhY2hlZCA9IHZvaWQgMDtcbiAgICB0aGlzLnJ1bGVzID0gdm9pZCAwO1xuICAgIHRoaXMucmVuZGVyZXIgPSB2b2lkIDA7XG4gICAgdGhpcy5jbGFzc2VzID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ZnJhbWVzID0gdm9pZCAwO1xuICAgIHRoaXMucXVldWUgPSB2b2lkIDA7XG4gICAgdGhpcy5hdHRhY2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuZGVwbG95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmNsYXNzZXMgPSB7fTtcbiAgICB0aGlzLmtleWZyYW1lcyA9IHt9O1xuICAgIHRoaXMub3B0aW9ucyA9IF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBzaGVldDogdGhpcyxcbiAgICAgIHBhcmVudDogdGhpcyxcbiAgICAgIGNsYXNzZXM6IHRoaXMuY2xhc3NlcyxcbiAgICAgIGtleWZyYW1lczogdGhpcy5rZXlmcmFtZXNcbiAgICB9KTtcblxuICAgIGlmIChvcHRpb25zLlJlbmRlcmVyKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyID0gbmV3IG9wdGlvbnMuUmVuZGVyZXIodGhpcyk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcyA9IG5ldyBSdWxlTGlzdCh0aGlzLm9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgbmFtZSBpbiBzdHlsZXMpIHtcbiAgICAgIHRoaXMucnVsZXMuYWRkKG5hbWUsIHN0eWxlc1tuYW1lXSk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcy5wcm9jZXNzKCk7XG4gIH1cbiAgLyoqXG4gICAqIEF0dGFjaCByZW5kZXJhYmxlIHRvIHRoZSByZW5kZXIgdHJlZS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gU3R5bGVTaGVldC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmF0dGFjaCA9IGZ1bmN0aW9uIGF0dGFjaCgpIHtcbiAgICBpZiAodGhpcy5hdHRhY2hlZCkgcmV0dXJuIHRoaXM7XG4gICAgaWYgKHRoaXMucmVuZGVyZXIpIHRoaXMucmVuZGVyZXIuYXR0YWNoKCk7XG4gICAgdGhpcy5hdHRhY2hlZCA9IHRydWU7IC8vIE9yZGVyIGlzIGltcG9ydGFudCwgYmVjYXVzZSB3ZSBjYW4ndCB1c2UgaW5zZXJ0UnVsZSBBUEkgaWYgc3R5bGUgZWxlbWVudCBpcyBub3QgYXR0YWNoZWQuXG5cbiAgICBpZiAoIXRoaXMuZGVwbG95ZWQpIHRoaXMuZGVwbG95KCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSByZW5kZXJhYmxlIGZyb20gcmVuZGVyIHRyZWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRldGFjaCA9IGZ1bmN0aW9uIGRldGFjaCgpIHtcbiAgICBpZiAoIXRoaXMuYXR0YWNoZWQpIHJldHVybiB0aGlzO1xuICAgIGlmICh0aGlzLnJlbmRlcmVyKSB0aGlzLnJlbmRlcmVyLmRldGFjaCgpO1xuICAgIHRoaXMuYXR0YWNoZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQWRkIGEgcnVsZSB0byB0aGUgY3VycmVudCBzdHlsZXNoZWV0LlxuICAgKiBXaWxsIGluc2VydCBhIHJ1bGUgYWxzbyBhZnRlciB0aGUgc3R5bGVzaGVldCBoYXMgYmVlbiByZW5kZXJlZCBmaXJzdCB0aW1lLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hZGRSdWxlID0gZnVuY3Rpb24gYWRkUnVsZShuYW1lLCBkZWNsLCBvcHRpb25zKSB7XG4gICAgdmFyIHF1ZXVlID0gdGhpcy5xdWV1ZTsgLy8gUGx1Z2lucyBjYW4gY3JlYXRlIHJ1bGVzLlxuICAgIC8vIEluIG9yZGVyIHRvIHByZXNlcnZlIHRoZSByaWdodCBvcmRlciwgd2UgbmVlZCB0byBxdWV1ZSBhbGwgYC5hZGRSdWxlYCBjYWxscyxcbiAgICAvLyB3aGljaCBoYXBwZW4gYWZ0ZXIgdGhlIGZpcnN0IGBydWxlcy5hZGQoKWAgY2FsbC5cblxuICAgIGlmICh0aGlzLmF0dGFjaGVkICYmICFxdWV1ZSkgdGhpcy5xdWV1ZSA9IFtdO1xuICAgIHZhciBydWxlID0gdGhpcy5ydWxlcy5hZGQobmFtZSwgZGVjbCwgb3B0aW9ucyk7XG4gICAgaWYgKCFydWxlKSByZXR1cm4gbnVsbDtcbiAgICB0aGlzLm9wdGlvbnMuanNzLnBsdWdpbnMub25Qcm9jZXNzUnVsZShydWxlKTtcblxuICAgIGlmICh0aGlzLmF0dGFjaGVkKSB7XG4gICAgICBpZiAoIXRoaXMuZGVwbG95ZWQpIHJldHVybiBydWxlOyAvLyBEb24ndCBpbnNlcnQgcnVsZSBkaXJlY3RseSBpZiB0aGVyZSBpcyBubyBzdHJpbmdpZmllZCB2ZXJzaW9uIHlldC5cbiAgICAgIC8vIEl0IHdpbGwgYmUgaW5zZXJ0ZWQgYWxsIHRvZ2V0aGVyIHdoZW4gLmF0dGFjaCBpcyBjYWxsZWQuXG5cbiAgICAgIGlmIChxdWV1ZSkgcXVldWUucHVzaChydWxlKTtlbHNlIHtcbiAgICAgICAgdGhpcy5pbnNlcnRSdWxlKHJ1bGUpO1xuXG4gICAgICAgIGlmICh0aGlzLnF1ZXVlKSB7XG4gICAgICAgICAgdGhpcy5xdWV1ZS5mb3JFYWNoKHRoaXMuaW5zZXJ0UnVsZSwgdGhpcyk7XG4gICAgICAgICAgdGhpcy5xdWV1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJ1bGU7XG4gICAgfSAvLyBXZSBjYW4ndCBhZGQgcnVsZXMgdG8gYSBkZXRhY2hlZCBzdHlsZSBub2RlLlxuICAgIC8vIFdlIHdpbGwgcmVkZXBsb3kgdGhlIHNoZWV0IG9uY2UgdXNlciB3aWxsIGF0dGFjaCBpdC5cblxuXG4gICAgdGhpcy5kZXBsb3llZCA9IGZhbHNlO1xuICAgIHJldHVybiBydWxlO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgcnVsZSBpbnRvIHRoZSBTdHlsZVNoZWV0XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluc2VydFJ1bGUgPSBmdW5jdGlvbiBpbnNlcnRSdWxlKHJ1bGUpIHtcbiAgICBpZiAodGhpcy5yZW5kZXJlcikge1xuICAgICAgdGhpcy5yZW5kZXJlci5pbnNlcnRSdWxlKHJ1bGUpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuZCBhZGQgcnVsZXMuXG4gICAqIFdpbGwgcmVuZGVyIGFsc28gYWZ0ZXIgU3R5bGUgU2hlZXQgd2FzIHJlbmRlcmVkIHRoZSBmaXJzdCB0aW1lLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hZGRSdWxlcyA9IGZ1bmN0aW9uIGFkZFJ1bGVzKHN0eWxlcywgb3B0aW9ucykge1xuICAgIHZhciBhZGRlZCA9IFtdO1xuXG4gICAgZm9yICh2YXIgbmFtZSBpbiBzdHlsZXMpIHtcbiAgICAgIHZhciBydWxlID0gdGhpcy5hZGRSdWxlKG5hbWUsIHN0eWxlc1tuYW1lXSwgb3B0aW9ucyk7XG4gICAgICBpZiAocnVsZSkgYWRkZWQucHVzaChydWxlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkZWQ7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIHJ1bGUgYnkgbmFtZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZ2V0UnVsZSA9IGZ1bmN0aW9uIGdldFJ1bGUobmFtZSkge1xuICAgIHJldHVybiB0aGlzLnJ1bGVzLmdldChuYW1lKTtcbiAgfVxuICAvKipcbiAgICogRGVsZXRlIGEgcnVsZSBieSBuYW1lLlxuICAgKiBSZXR1cm5zIGB0cnVlYDogaWYgcnVsZSBoYXMgYmVlbiBkZWxldGVkIGZyb20gdGhlIERPTS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGVsZXRlUnVsZSA9IGZ1bmN0aW9uIGRlbGV0ZVJ1bGUobmFtZSkge1xuICAgIHZhciBydWxlID0gdHlwZW9mIG5hbWUgPT09ICdvYmplY3QnID8gbmFtZSA6IHRoaXMucnVsZXMuZ2V0KG5hbWUpO1xuICAgIGlmICghcnVsZSkgcmV0dXJuIGZhbHNlO1xuICAgIHRoaXMucnVsZXMucmVtb3ZlKHJ1bGUpO1xuXG4gICAgaWYgKHRoaXMuYXR0YWNoZWQgJiYgcnVsZS5yZW5kZXJhYmxlICYmIHRoaXMucmVuZGVyZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmRlbGV0ZVJ1bGUocnVsZS5yZW5kZXJhYmxlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogR2V0IGluZGV4IG9mIGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YocnVsZSkge1xuICAgIHJldHVybiB0aGlzLnJ1bGVzLmluZGV4T2YocnVsZSk7XG4gIH1cbiAgLyoqXG4gICAqIERlcGxveSBwdXJlIENTUyBzdHJpbmcgdG8gYSByZW5kZXJhYmxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZXBsb3kgPSBmdW5jdGlvbiBkZXBsb3koKSB7XG4gICAgaWYgKHRoaXMucmVuZGVyZXIpIHRoaXMucmVuZGVyZXIuZGVwbG95KCk7XG4gICAgdGhpcy5kZXBsb3llZCA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgZnVuY3Rpb24gdmFsdWVzIHdpdGggYSBuZXcgZGF0YS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIHZhciBfdGhpcyRydWxlcztcblxuICAgIChfdGhpcyRydWxlcyA9IHRoaXMucnVsZXMpLnVwZGF0ZS5hcHBseShfdGhpcyRydWxlcywgYXJndW1lbnRzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGVzIGEgc2luZ2xlIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZU9uZSA9IGZ1bmN0aW9uIHVwZGF0ZU9uZShydWxlLCBkYXRhLCBvcHRpb25zKSB7XG4gICAgdGhpcy5ydWxlcy51cGRhdGVPbmUocnVsZSwgZGF0YSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENvbnZlcnQgcnVsZXMgdG8gYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy50b1N0cmluZyhvcHRpb25zKTtcbiAgfTtcblxuICByZXR1cm4gU3R5bGVTaGVldDtcbn0oKTtcblxudmFyIFBsdWdpbnNSZWdpc3RyeSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFBsdWdpbnNSZWdpc3RyeSgpIHtcbiAgICB0aGlzLnBsdWdpbnMgPSB7XG4gICAgICBpbnRlcm5hbDogW10sXG4gICAgICBleHRlcm5hbDogW11cbiAgICB9O1xuICAgIHRoaXMucmVnaXN0cnkgPSB2b2lkIDA7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUGx1Z2luc1JlZ2lzdHJ5LnByb3RvdHlwZTtcblxuICAvKipcbiAgICogQ2FsbCBgb25DcmVhdGVSdWxlYCBob29rcyBhbmQgcmV0dXJuIGFuIG9iamVjdCBpZiByZXR1cm5lZCBieSBhIGhvb2suXG4gICAqL1xuICBfcHJvdG8ub25DcmVhdGVSdWxlID0gZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIGRlY2wsIG9wdGlvbnMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25DcmVhdGVSdWxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcnVsZSA9IHRoaXMucmVnaXN0cnkub25DcmVhdGVSdWxlW2ldKG5hbWUsIGRlY2wsIG9wdGlvbnMpO1xuICAgICAgaWYgKHJ1bGUpIHJldHVybiBydWxlO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBDYWxsIGBvblByb2Nlc3NSdWxlYCBob29rcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25Qcm9jZXNzUnVsZSA9IGZ1bmN0aW9uIG9uUHJvY2Vzc1J1bGUocnVsZSkge1xuICAgIGlmIChydWxlLmlzUHJvY2Vzc2VkKSByZXR1cm47XG4gICAgdmFyIHNoZWV0ID0gcnVsZS5vcHRpb25zLnNoZWV0O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1J1bGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucmVnaXN0cnkub25Qcm9jZXNzUnVsZVtpXShydWxlLCBzaGVldCk7XG4gICAgfVxuXG4gICAgaWYgKHJ1bGUuc3R5bGUpIHRoaXMub25Qcm9jZXNzU3R5bGUocnVsZS5zdHlsZSwgcnVsZSwgc2hlZXQpO1xuICAgIHJ1bGUuaXNQcm9jZXNzZWQgPSB0cnVlO1xuICB9XG4gIC8qKlxuICAgKiBDYWxsIGBvblByb2Nlc3NTdHlsZWAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uUHJvY2Vzc1N0eWxlID0gZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUsIHNoZWV0KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1N0eWxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICBydWxlLnN0eWxlID0gdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NTdHlsZVtpXShydWxlLnN0eWxlLCBydWxlLCBzaGVldCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDYWxsIGBvblByb2Nlc3NTaGVldGAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uUHJvY2Vzc1NoZWV0ID0gZnVuY3Rpb24gb25Qcm9jZXNzU2hlZXQoc2hlZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25Qcm9jZXNzU2hlZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucmVnaXN0cnkub25Qcm9jZXNzU2hlZXRbaV0oc2hlZXQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25VcGRhdGVgIGhvb2tzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vblVwZGF0ZSA9IGZ1bmN0aW9uIG9uVXBkYXRlKGRhdGEsIHJ1bGUsIHNoZWV0LCBvcHRpb25zKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uVXBkYXRlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnJlZ2lzdHJ5Lm9uVXBkYXRlW2ldKGRhdGEsIHJ1bGUsIHNoZWV0LCBvcHRpb25zKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENhbGwgYG9uQ2hhbmdlVmFsdWVgIGhvb2tzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vbkNoYW5nZVZhbHVlID0gZnVuY3Rpb24gb25DaGFuZ2VWYWx1ZSh2YWx1ZSwgcHJvcCwgcnVsZSkge1xuICAgIHZhciBwcm9jZXNzZWRWYWx1ZSA9IHZhbHVlO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uQ2hhbmdlVmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHByb2Nlc3NlZFZhbHVlID0gdGhpcy5yZWdpc3RyeS5vbkNoYW5nZVZhbHVlW2ldKHByb2Nlc3NlZFZhbHVlLCBwcm9wLCBydWxlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvY2Vzc2VkVmFsdWU7XG4gIH1cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgcGx1Z2luLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51c2UgPSBmdW5jdGlvbiB1c2UobmV3UGx1Z2luLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgcXVldWU6ICdleHRlcm5hbCdcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIHBsdWdpbnMgPSB0aGlzLnBsdWdpbnNbb3B0aW9ucy5xdWV1ZV07IC8vIEF2b2lkcyBhcHBseWluZyBzYW1lIHBsdWdpbiB0d2ljZSwgYXQgbGVhc3QgYmFzZWQgb24gcmVmLlxuXG4gICAgaWYgKHBsdWdpbnMuaW5kZXhPZihuZXdQbHVnaW4pICE9PSAtMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHBsdWdpbnMucHVzaChuZXdQbHVnaW4pO1xuICAgIHRoaXMucmVnaXN0cnkgPSBbXS5jb25jYXQodGhpcy5wbHVnaW5zLmV4dGVybmFsLCB0aGlzLnBsdWdpbnMuaW50ZXJuYWwpLnJlZHVjZShmdW5jdGlvbiAocmVnaXN0cnksIHBsdWdpbikge1xuICAgICAgZm9yICh2YXIgbmFtZSBpbiBwbHVnaW4pIHtcbiAgICAgICAgaWYgKG5hbWUgaW4gcmVnaXN0cnkpIHtcbiAgICAgICAgICByZWdpc3RyeVtuYW1lXS5wdXNoKHBsdWdpbltuYW1lXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBVbmtub3duIGhvb2sgXFxcIlwiICsgbmFtZSArIFwiXFxcIi5cIikgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlZ2lzdHJ5O1xuICAgIH0sIHtcbiAgICAgIG9uQ3JlYXRlUnVsZTogW10sXG4gICAgICBvblByb2Nlc3NSdWxlOiBbXSxcbiAgICAgIG9uUHJvY2Vzc1N0eWxlOiBbXSxcbiAgICAgIG9uUHJvY2Vzc1NoZWV0OiBbXSxcbiAgICAgIG9uQ2hhbmdlVmFsdWU6IFtdLFxuICAgICAgb25VcGRhdGU6IFtdXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFBsdWdpbnNSZWdpc3RyeTtcbn0oKTtcblxuLyoqXG4gKiBTaGVldHMgcmVnaXN0cnkgdG8gYWNjZXNzIHRoZW0gYWxsIGF0IG9uZSBwbGFjZS5cbiAqL1xudmFyIFNoZWV0c1JlZ2lzdHJ5ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2hlZXRzUmVnaXN0cnkoKSB7XG4gICAgdGhpcy5yZWdpc3RyeSA9IFtdO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFNoZWV0c1JlZ2lzdHJ5LnByb3RvdHlwZTtcblxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBTdHlsZSBTaGVldC5cbiAgICovXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQoc2hlZXQpIHtcbiAgICB2YXIgcmVnaXN0cnkgPSB0aGlzLnJlZ2lzdHJ5O1xuICAgIHZhciBpbmRleCA9IHNoZWV0Lm9wdGlvbnMuaW5kZXg7XG4gICAgaWYgKHJlZ2lzdHJ5LmluZGV4T2Yoc2hlZXQpICE9PSAtMSkgcmV0dXJuO1xuXG4gICAgaWYgKHJlZ2lzdHJ5Lmxlbmd0aCA9PT0gMCB8fCBpbmRleCA+PSB0aGlzLmluZGV4KSB7XG4gICAgICByZWdpc3RyeS5wdXNoKHNoZWV0KTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEZpbmQgYSBwb3NpdGlvbi5cblxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWdpc3RyeS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlZ2lzdHJ5W2ldLm9wdGlvbnMuaW5kZXggPiBpbmRleCkge1xuICAgICAgICByZWdpc3RyeS5zcGxpY2UoaSwgMCwgc2hlZXQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZXNldCB0aGUgcmVnaXN0cnkuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlc2V0ID0gZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgdGhpcy5yZWdpc3RyeSA9IFtdO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgYSBTdHlsZSBTaGVldC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKHNoZWV0KSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5yZWdpc3RyeS5pbmRleE9mKHNoZWV0KTtcbiAgICB0aGlzLnJlZ2lzdHJ5LnNwbGljZShpbmRleCwgMSk7XG4gIH1cbiAgLyoqXG4gICAqIENvbnZlcnQgYWxsIGF0dGFjaGVkIHNoZWV0cyB0byBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoX3RlbXApIHtcbiAgICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgICBhdHRhY2hlZCA9IF9yZWYuYXR0YWNoZWQsXG4gICAgICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJhdHRhY2hlZFwiXSk7XG5cbiAgICB2YXIgY3NzID0gJyc7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzaGVldCA9IHRoaXMucmVnaXN0cnlbaV07XG5cbiAgICAgIGlmIChhdHRhY2hlZCAhPSBudWxsICYmIHNoZWV0LmF0dGFjaGVkICE9PSBhdHRhY2hlZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNzcykgY3NzICs9ICdcXG4nO1xuICAgICAgY3NzICs9IHNoZWV0LnRvU3RyaW5nKG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBjc3M7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKFNoZWV0c1JlZ2lzdHJ5LCBbe1xuICAgIGtleTogXCJpbmRleFwiLFxuXG4gICAgLyoqXG4gICAgICogQ3VycmVudCBoaWdoZXN0IGluZGV4IG51bWJlci5cbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlZ2lzdHJ5Lmxlbmd0aCA9PT0gMCA/IDAgOiB0aGlzLnJlZ2lzdHJ5W3RoaXMucmVnaXN0cnkubGVuZ3RoIC0gMV0ub3B0aW9ucy5pbmRleDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2hlZXRzUmVnaXN0cnk7XG59KCk7XG5cbi8qKlxuICogVGhpcyBpcyBhIGdsb2JhbCBzaGVldHMgcmVnaXN0cnkuIE9ubHkgRG9tUmVuZGVyZXIgd2lsbCBhZGQgc2hlZXRzIHRvIGl0LlxuICogT24gdGhlIHNlcnZlciBvbmUgc2hvdWxkIHVzZSBhbiBvd24gU2hlZXRzUmVnaXN0cnkgaW5zdGFuY2UgYW5kIGFkZCB0aGVcbiAqIHNoZWV0cyB0byBpdCwgYmVjYXVzZSB5b3UgbmVlZCB0byBtYWtlIHN1cmUgdG8gY3JlYXRlIGEgbmV3IHJlZ2lzdHJ5IGZvclxuICogZWFjaCByZXF1ZXN0IGluIG9yZGVyIHRvIG5vdCBsZWFrIHNoZWV0cyBhY3Jvc3MgcmVxdWVzdHMuXG4gKi9cblxudmFyIHNoZWV0cyA9IG5ldyBTaGVldHNSZWdpc3RyeSgpO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWxUaGlzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxudmFyIG5zID0gJzJmMWFjYzZjM2E2MDZiMDgyZTVlZWY1ZTU0NDE0ZmZiJztcbmlmIChnbG9iYWxUaGlzW25zXSA9PSBudWxsKSBnbG9iYWxUaGlzW25zXSA9IDA7IC8vIEJ1bmRsZSBtYXkgY29udGFpbiBtdWx0aXBsZSBKU1MgdmVyc2lvbnMgYXQgdGhlIHNhbWUgdGltZS4gSW4gb3JkZXIgdG8gaWRlbnRpZnlcbi8vIHRoZSBjdXJyZW50IHZlcnNpb24gd2l0aCBqdXN0IG9uZSBzaG9ydCBudW1iZXIgYW5kIHVzZSBpdCBmb3IgY2xhc3NlcyBnZW5lcmF0aW9uXG4vLyB3ZSB1c2UgYSBjb3VudGVyLiBBbHNvIGl0IGlzIG1vcmUgYWNjdXJhdGUsIGJlY2F1c2UgdXNlciBjYW4gbWFudWFsbHkgcmVldmFsdWF0ZVxuLy8gdGhlIG1vZHVsZS5cblxudmFyIG1vZHVsZUlkID0gZ2xvYmFsVGhpc1tuc10rKztcblxudmFyIG1heFJ1bGVzID0gMWUxMDtcblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2ggZ2VuZXJhdGVzIHVuaXF1ZSBjbGFzcyBuYW1lcyBiYXNlZCBvbiBjb3VudGVycy5cbiAqIFdoZW4gbmV3IGdlbmVyYXRvciBmdW5jdGlvbiBpcyBjcmVhdGVkLCBydWxlIGNvdW50ZXIgaXMgcmVzZXRlZC5cbiAqIFdlIG5lZWQgdG8gcmVzZXQgdGhlIHJ1bGUgY291bnRlciBmb3IgU1NSIGZvciBlYWNoIHJlcXVlc3QuXG4gKi9cbnZhciBjcmVhdGVHZW5lcmF0ZUlkID0gZnVuY3Rpb24gY3JlYXRlR2VuZXJhdGVJZChvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgcnVsZUNvdW50ZXIgPSAwO1xuICByZXR1cm4gZnVuY3Rpb24gKHJ1bGUsIHNoZWV0KSB7XG4gICAgcnVsZUNvdW50ZXIgKz0gMTtcblxuICAgIGlmIChydWxlQ291bnRlciA+IG1heFJ1bGVzKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIFlvdSBtaWdodCBoYXZlIGEgbWVtb3J5IGxlYWsuIFJ1bGUgY291bnRlciBpcyBhdCBcIiArIHJ1bGVDb3VudGVyICsgXCIuXCIpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHZhciBqc3NJZCA9ICcnO1xuICAgIHZhciBwcmVmaXggPSAnJztcblxuICAgIGlmIChzaGVldCkge1xuICAgICAgaWYgKHNoZWV0Lm9wdGlvbnMuY2xhc3NOYW1lUHJlZml4KSB7XG4gICAgICAgIHByZWZpeCA9IHNoZWV0Lm9wdGlvbnMuY2xhc3NOYW1lUHJlZml4O1xuICAgICAgfVxuXG4gICAgICBpZiAoc2hlZXQub3B0aW9ucy5qc3MuaWQgIT0gbnVsbCkge1xuICAgICAgICBqc3NJZCA9IFN0cmluZyhzaGVldC5vcHRpb25zLmpzcy5pZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMubWluaWZ5KSB7XG4gICAgICAvLyBVc2luZyBcImNcIiBiZWNhdXNlIGEgbnVtYmVyIGNhbid0IGJlIHRoZSBmaXJzdCBjaGFyIGluIGEgY2xhc3MgbmFtZS5cbiAgICAgIHJldHVybiBcIlwiICsgKHByZWZpeCB8fCAnYycpICsgbW9kdWxlSWQgKyBqc3NJZCArIHJ1bGVDb3VudGVyO1xuICAgIH1cblxuICAgIHJldHVybiBwcmVmaXggKyBydWxlLmtleSArIFwiLVwiICsgbW9kdWxlSWQgKyAoanNzSWQgPyBcIi1cIiArIGpzc0lkIDogJycpICsgXCItXCIgKyBydWxlQ291bnRlcjtcbiAgfTtcbn07XG5cbi8qKlxuICogQ2FjaGUgdGhlIHZhbHVlIGZyb20gdGhlIGZpcnN0IHRpbWUgYSBmdW5jdGlvbiBpcyBjYWxsZWQuXG4gKi9cbnZhciBtZW1vaXplID0gZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICB2YXIgdmFsdWU7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF2YWx1ZSkgdmFsdWUgPSBmbigpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcbn07XG4vKipcbiAqIEdldCBhIHN0eWxlIHByb3BlcnR5IHZhbHVlLlxuICovXG5cblxuZnVuY3Rpb24gZ2V0UHJvcGVydHlWYWx1ZShjc3NSdWxlLCBwcm9wKSB7XG4gIHRyeSB7XG4gICAgLy8gU3VwcG9ydCBDU1NUT00uXG4gICAgaWYgKGNzc1J1bGUuYXR0cmlidXRlU3R5bGVNYXApIHtcbiAgICAgIHJldHVybiBjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwLmdldChwcm9wKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3NzUnVsZS5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKHByb3ApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBJRSBtYXkgdGhyb3cgaWYgcHJvcGVydHkgaXMgdW5rbm93bi5cbiAgICByZXR1cm4gJyc7XG4gIH1cbn1cbi8qKlxuICogU2V0IGEgc3R5bGUgcHJvcGVydHkuXG4gKi9cblxuXG5mdW5jdGlvbiBzZXRQcm9wZXJ0eShjc3NSdWxlLCBwcm9wLCB2YWx1ZSkge1xuICB0cnkge1xuICAgIHZhciBjc3NWYWx1ZSA9IHZhbHVlO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBjc3NWYWx1ZSA9IHRvQ3NzVmFsdWUodmFsdWUsIHRydWUpO1xuXG4gICAgICBpZiAodmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0gPT09ICchaW1wb3J0YW50Jykge1xuICAgICAgICBjc3NSdWxlLnN0eWxlLnNldFByb3BlcnR5KHByb3AsIGNzc1ZhbHVlLCAnaW1wb3J0YW50Jyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gLy8gU3VwcG9ydCBDU1NUT00uXG5cblxuICAgIGlmIChjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwKSB7XG4gICAgICBjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwLnNldChwcm9wLCBjc3NWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNzc1J1bGUuc3R5bGUuc2V0UHJvcGVydHkocHJvcCwgY3NzVmFsdWUpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gSUUgbWF5IHRocm93IGlmIHByb3BlcnR5IGlzIHVua25vd24uXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG4vKipcbiAqIFJlbW92ZSBhIHN0eWxlIHByb3BlcnR5LlxuICovXG5cblxuZnVuY3Rpb24gcmVtb3ZlUHJvcGVydHkoY3NzUnVsZSwgcHJvcCkge1xuICB0cnkge1xuICAgIC8vIFN1cHBvcnQgQ1NTVE9NLlxuICAgIGlmIChjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwKSB7XG4gICAgICBjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwLmRlbGV0ZShwcm9wKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3NzUnVsZS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShwcm9wKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gRE9NRXhjZXB0aW9uIFxcXCJcIiArIGVyci5tZXNzYWdlICsgXCJcXFwiIHdhcyB0aHJvd24uIFRyaWVkIHRvIHJlbW92ZSBwcm9wZXJ0eSBcXFwiXCIgKyBwcm9wICsgXCJcXFwiLlwiKSA6IHZvaWQgMDtcbiAgfVxufVxuLyoqXG4gKiBTZXQgdGhlIHNlbGVjdG9yLlxuICovXG5cblxuZnVuY3Rpb24gc2V0U2VsZWN0b3IoY3NzUnVsZSwgc2VsZWN0b3JUZXh0KSB7XG4gIGNzc1J1bGUuc2VsZWN0b3JUZXh0ID0gc2VsZWN0b3JUZXh0OyAvLyBSZXR1cm4gZmFsc2UgaWYgc2V0dGVyIHdhcyBub3Qgc3VjY2Vzc2Z1bC5cbiAgLy8gQ3VycmVudGx5IHdvcmtzIGluIGNocm9tZSBvbmx5LlxuXG4gIHJldHVybiBjc3NSdWxlLnNlbGVjdG9yVGV4dCA9PT0gc2VsZWN0b3JUZXh0O1xufVxuLyoqXG4gKiBHZXRzIHRoZSBgaGVhZGAgZWxlbWVudCB1cG9uIHRoZSBmaXJzdCBjYWxsIGFuZCBjYWNoZXMgaXQuXG4gKiBXZSBhc3N1bWUgaXQgY2FuJ3QgYmUgbnVsbC5cbiAqL1xuXG5cbnZhciBnZXRIZWFkID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkJyk7XG59KTtcbi8qKlxuICogRmluZCBhdHRhY2hlZCBzaGVldCB3aXRoIGFuIGluZGV4IGhpZ2hlciB0aGFuIHRoZSBwYXNzZWQgb25lLlxuICovXG5cbmZ1bmN0aW9uIGZpbmRIaWdoZXJTaGVldChyZWdpc3RyeSwgb3B0aW9ucykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZ2lzdHJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNoZWV0ID0gcmVnaXN0cnlbaV07XG5cbiAgICBpZiAoc2hlZXQuYXR0YWNoZWQgJiYgc2hlZXQub3B0aW9ucy5pbmRleCA+IG9wdGlvbnMuaW5kZXggJiYgc2hlZXQub3B0aW9ucy5pbnNlcnRpb25Qb2ludCA9PT0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludCkge1xuICAgICAgcmV0dXJuIHNoZWV0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBGaW5kIGF0dGFjaGVkIHNoZWV0IHdpdGggdGhlIGhpZ2hlc3QgaW5kZXguXG4gKi9cblxuXG5mdW5jdGlvbiBmaW5kSGlnaGVzdFNoZWV0KHJlZ2lzdHJ5LCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGkgPSByZWdpc3RyeS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciBzaGVldCA9IHJlZ2lzdHJ5W2ldO1xuXG4gICAgaWYgKHNoZWV0LmF0dGFjaGVkICYmIHNoZWV0Lm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgPT09IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQpIHtcbiAgICAgIHJldHVybiBzaGVldDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogRmluZCBhIGNvbW1lbnQgd2l0aCBcImpzc1wiIGluc2lkZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGZpbmRDb21tZW50Tm9kZSh0ZXh0KSB7XG4gIHZhciBoZWFkID0gZ2V0SGVhZCgpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaGVhZC5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG5vZGUgPSBoZWFkLmNoaWxkTm9kZXNbaV07XG5cbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCAmJiBub2RlLm5vZGVWYWx1ZS50cmltKCkgPT09IHRleHQpIHtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIEZpbmQgYSBub2RlIGJlZm9yZSB3aGljaCB3ZSBjYW4gaW5zZXJ0IHRoZSBzaGVldC5cbiAqL1xuZnVuY3Rpb24gZmluZFByZXZOb2RlKG9wdGlvbnMpIHtcbiAgdmFyIHJlZ2lzdHJ5ID0gc2hlZXRzLnJlZ2lzdHJ5O1xuXG4gIGlmIChyZWdpc3RyeS5sZW5ndGggPiAwKSB7XG4gICAgLy8gVHJ5IHRvIGluc2VydCBiZWZvcmUgdGhlIG5leHQgaGlnaGVyIHNoZWV0LlxuICAgIHZhciBzaGVldCA9IGZpbmRIaWdoZXJTaGVldChyZWdpc3RyeSwgb3B0aW9ucyk7XG5cbiAgICBpZiAoc2hlZXQgJiYgc2hlZXQucmVuZGVyZXIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhcmVudDogc2hlZXQucmVuZGVyZXIuZWxlbWVudC5wYXJlbnROb2RlLFxuICAgICAgICBub2RlOiBzaGVldC5yZW5kZXJlci5lbGVtZW50XG4gICAgICB9O1xuICAgIH0gLy8gT3RoZXJ3aXNlIGluc2VydCBhZnRlciB0aGUgbGFzdCBhdHRhY2hlZC5cblxuXG4gICAgc2hlZXQgPSBmaW5kSGlnaGVzdFNoZWV0KHJlZ2lzdHJ5LCBvcHRpb25zKTtcblxuICAgIGlmIChzaGVldCAmJiBzaGVldC5yZW5kZXJlcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFyZW50OiBzaGVldC5yZW5kZXJlci5lbGVtZW50LnBhcmVudE5vZGUsXG4gICAgICAgIG5vZGU6IHNoZWV0LnJlbmRlcmVyLmVsZW1lbnQubmV4dFNpYmxpbmdcbiAgICAgIH07XG4gICAgfVxuICB9IC8vIFRyeSB0byBmaW5kIGEgY29tbWVudCBwbGFjZWhvbGRlciBpZiByZWdpc3RyeSBpcyBlbXB0eS5cblxuXG4gIHZhciBpbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG5cbiAgaWYgKGluc2VydGlvblBvaW50ICYmIHR5cGVvZiBpbnNlcnRpb25Qb2ludCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgY29tbWVudCA9IGZpbmRDb21tZW50Tm9kZShpbnNlcnRpb25Qb2ludCk7XG5cbiAgICBpZiAoY29tbWVudCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFyZW50OiBjb21tZW50LnBhcmVudE5vZGUsXG4gICAgICAgIG5vZGU6IGNvbW1lbnQubmV4dFNpYmxpbmdcbiAgICAgIH07XG4gICAgfSAvLyBJZiB1c2VyIHNwZWNpZmllcyBhbiBpbnNlcnRpb24gcG9pbnQgYW5kIGl0IGNhbid0IGJlIGZvdW5kIGluIHRoZSBkb2N1bWVudCAtXG4gICAgLy8gYmFkIHNwZWNpZmljaXR5IGlzc3VlcyBtYXkgYXBwZWFyLlxuXG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIEluc2VydGlvbiBwb2ludCBcXFwiXCIgKyBpbnNlcnRpb25Qb2ludCArIFwiXFxcIiBub3QgZm91bmQuXCIpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBJbnNlcnQgc3R5bGUgZWxlbWVudCBpbnRvIHRoZSBET00uXG4gKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZShzdHlsZSwgb3B0aW9ucykge1xuICB2YXIgaW5zZXJ0aW9uUG9pbnQgPSBvcHRpb25zLmluc2VydGlvblBvaW50O1xuICB2YXIgbmV4dE5vZGUgPSBmaW5kUHJldk5vZGUob3B0aW9ucyk7XG5cbiAgaWYgKG5leHROb2RlICE9PSBmYWxzZSAmJiBuZXh0Tm9kZS5wYXJlbnQpIHtcbiAgICBuZXh0Tm9kZS5wYXJlbnQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0Tm9kZS5ub2RlKTtcbiAgICByZXR1cm47XG4gIH0gLy8gV29ya3Mgd2l0aCBpZnJhbWVzIGFuZCBhbnkgbm9kZSB0eXBlcy5cblxuXG4gIGlmIChpbnNlcnRpb25Qb2ludCAmJiB0eXBlb2YgaW5zZXJ0aW9uUG9pbnQubm9kZVR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDEzMjg3MjgvZm9yY2UtY2FzdGluZy1pbi1mbG93XG4gICAgdmFyIGluc2VydGlvblBvaW50RWxlbWVudCA9IGluc2VydGlvblBvaW50O1xuICAgIHZhciBwYXJlbnROb2RlID0gaW5zZXJ0aW9uUG9pbnRFbGVtZW50LnBhcmVudE5vZGU7XG4gICAgaWYgKHBhcmVudE5vZGUpIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHN0eWxlLCBpbnNlcnRpb25Qb2ludEVsZW1lbnQubmV4dFNpYmxpbmcpO2Vsc2UgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1tKU1NdIEluc2VydGlvbiBwb2ludCBpcyBub3QgaW4gdGhlIERPTS4nKSA6IHZvaWQgMDtcbiAgICByZXR1cm47XG4gIH1cblxuICBnZXRIZWFkKCkuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuLyoqXG4gKiBSZWFkIGpzcyBub25jZSBzZXR0aW5nIGZyb20gdGhlIHBhZ2UgaWYgdGhlIHVzZXIgaGFzIHNldCBpdC5cbiAqL1xuXG5cbnZhciBnZXROb25jZSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuICB2YXIgbm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21ldGFbcHJvcGVydHk9XCJjc3Atbm9uY2VcIl0nKTtcbiAgcmV0dXJuIG5vZGUgPyBub2RlLmdldEF0dHJpYnV0ZSgnY29udGVudCcpIDogbnVsbDtcbn0pO1xuXG52YXIgX2luc2VydFJ1bGUgPSBmdW5jdGlvbiBpbnNlcnRSdWxlKGNvbnRhaW5lciwgcnVsZSwgaW5kZXgpIHtcbiAgdmFyIG1heEluZGV4ID0gY29udGFpbmVyLmNzc1J1bGVzLmxlbmd0aDsgLy8gSW4gY2FzZSBwcmV2aW91cyBpbnNlcnRpb24gZmFpbHMsIHBhc3NlZCBpbmRleCBtaWdodCBiZSB3cm9uZ1xuXG4gIGlmIChpbmRleCA9PT0gdW5kZWZpbmVkIHx8IGluZGV4ID4gbWF4SW5kZXgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICBpbmRleCA9IG1heEluZGV4O1xuICB9XG5cbiAgdHJ5IHtcbiAgICBpZiAoJ2luc2VydFJ1bGUnIGluIGNvbnRhaW5lcikge1xuICAgICAgdmFyIGMgPSBjb250YWluZXI7XG4gICAgICBjLmluc2VydFJ1bGUocnVsZSwgaW5kZXgpO1xuICAgIH0gLy8gS2V5ZnJhbWVzIHJ1bGUuXG4gICAgZWxzZSBpZiAoJ2FwcGVuZFJ1bGUnIGluIGNvbnRhaW5lcikge1xuICAgICAgICB2YXIgX2MgPSBjb250YWluZXI7XG5cbiAgICAgICAgX2MuYXBwZW5kUnVsZShydWxlKTtcbiAgICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBcIiArIGVyci5tZXNzYWdlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gY29udGFpbmVyLmNzc1J1bGVzW2luZGV4XTtcbn07XG5cbnZhciBjcmVhdGVTdHlsZSA9IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlKCkge1xuICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpOyAvLyBXaXRob3V0IGl0LCBJRSB3aWxsIGhhdmUgYSBicm9rZW4gc291cmNlIG9yZGVyIHNwZWNpZmljaXR5IGlmIHdlXG4gIC8vIGluc2VydCBydWxlcyBhZnRlciB3ZSBpbnNlcnQgdGhlIHN0eWxlIHRhZy5cbiAgLy8gSXQgc2VlbXMgdG8ga2ljay1vZmYgdGhlIHNvdXJjZSBvcmRlciBzcGVjaWZpY2l0eSBhbGdvcml0aG0uXG5cbiAgZWwudGV4dENvbnRlbnQgPSAnXFxuJztcbiAgcmV0dXJuIGVsO1xufTtcblxudmFyIERvbVJlbmRlcmVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgLy8gSFRNTFN0eWxlRWxlbWVudCBuZWVkcyBmaXhpbmcgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzI2OTZcbiAgZnVuY3Rpb24gRG9tUmVuZGVyZXIoc2hlZXQpIHtcbiAgICB0aGlzLmdldFByb3BlcnR5VmFsdWUgPSBnZXRQcm9wZXJ0eVZhbHVlO1xuICAgIHRoaXMuc2V0UHJvcGVydHkgPSBzZXRQcm9wZXJ0eTtcbiAgICB0aGlzLnJlbW92ZVByb3BlcnR5ID0gcmVtb3ZlUHJvcGVydHk7XG4gICAgdGhpcy5zZXRTZWxlY3RvciA9IHNldFNlbGVjdG9yO1xuICAgIHRoaXMuZWxlbWVudCA9IHZvaWQgMDtcbiAgICB0aGlzLnNoZWV0ID0gdm9pZCAwO1xuICAgIHRoaXMuaGFzSW5zZXJ0ZWRSdWxlcyA9IGZhbHNlO1xuICAgIC8vIFRoZXJlIGlzIG5vIHNoZWV0IHdoZW4gdGhlIHJlbmRlcmVyIGlzIHVzZWQgZnJvbSBhIHN0YW5kYWxvbmUgU3R5bGVSdWxlLlxuICAgIGlmIChzaGVldCkgc2hlZXRzLmFkZChzaGVldCk7XG4gICAgdGhpcy5zaGVldCA9IHNoZWV0O1xuXG4gICAgdmFyIF9yZWYgPSB0aGlzLnNoZWV0ID8gdGhpcy5zaGVldC5vcHRpb25zIDoge30sXG4gICAgICAgIG1lZGlhID0gX3JlZi5tZWRpYSxcbiAgICAgICAgbWV0YSA9IF9yZWYubWV0YSxcbiAgICAgICAgZWxlbWVudCA9IF9yZWYuZWxlbWVudDtcblxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQgfHwgY3JlYXRlU3R5bGUoKTtcbiAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWpzcycsICcnKTtcbiAgICBpZiAobWVkaWEpIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICAgIGlmIChtZXRhKSB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLW1ldGEnLCBtZXRhKTtcbiAgICB2YXIgbm9uY2UgPSBnZXROb25jZSgpO1xuICAgIGlmIChub25jZSkgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBub25jZSk7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBzdHlsZSBlbGVtZW50IGludG8gcmVuZGVyIHRyZWUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IERvbVJlbmRlcmVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYXR0YWNoID0gZnVuY3Rpb24gYXR0YWNoKCkge1xuICAgIC8vIEluIHRoZSBjYXNlIHRoZSBlbGVtZW50IG5vZGUgaXMgZXh0ZXJuYWwgYW5kIGl0IGlzIGFscmVhZHkgaW4gdGhlIERPTS5cbiAgICBpZiAodGhpcy5lbGVtZW50LnBhcmVudE5vZGUgfHwgIXRoaXMuc2hlZXQpIHJldHVybjtcbiAgICBpbnNlcnRTdHlsZSh0aGlzLmVsZW1lbnQsIHRoaXMuc2hlZXQub3B0aW9ucyk7IC8vIFdoZW4gcnVsZXMgYXJlIGluc2VydGVkIHVzaW5nIGBpbnNlcnRSdWxlYCBBUEksIGFmdGVyIGBzaGVldC5kZXRhY2goKS5hdHRhY2goKWBcbiAgICAvLyBtb3N0IGJyb3dzZXJzIGNyZWF0ZSBhIG5ldyBDU1NTdHlsZVNoZWV0LCBleGNlcHQgb2YgYWxsIElFcy5cblxuICAgIHZhciBkZXBsb3llZCA9IEJvb2xlYW4odGhpcy5zaGVldCAmJiB0aGlzLnNoZWV0LmRlcGxveWVkKTtcblxuICAgIGlmICh0aGlzLmhhc0luc2VydGVkUnVsZXMgJiYgZGVwbG95ZWQpIHtcbiAgICAgIHRoaXMuaGFzSW5zZXJ0ZWRSdWxlcyA9IGZhbHNlO1xuICAgICAgdGhpcy5kZXBsb3koKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBzdHlsZSBlbGVtZW50IGZyb20gcmVuZGVyIHRyZWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRldGFjaCA9IGZ1bmN0aW9uIGRldGFjaCgpIHtcbiAgICB2YXIgcGFyZW50Tm9kZSA9IHRoaXMuZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIGlmIChwYXJlbnROb2RlKSBwYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCk7XG4gIH1cbiAgLyoqXG4gICAqIEluamVjdCBDU1Mgc3RyaW5nIGludG8gZWxlbWVudC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGVwbG95ID0gZnVuY3Rpb24gZGVwbG95KCkge1xuICAgIHZhciBzaGVldCA9IHRoaXMuc2hlZXQ7XG4gICAgaWYgKCFzaGVldCkgcmV0dXJuO1xuXG4gICAgaWYgKHNoZWV0Lm9wdGlvbnMubGluaykge1xuICAgICAgdGhpcy5pbnNlcnRSdWxlcyhzaGVldC5ydWxlcyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5lbGVtZW50LnRleHRDb250ZW50ID0gXCJcXG5cIiArIHNoZWV0LnRvU3RyaW5nKCkgKyBcIlxcblwiO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgUnVsZUxpc3QgaW50byBhbiBlbGVtZW50LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbnNlcnRSdWxlcyA9IGZ1bmN0aW9uIGluc2VydFJ1bGVzKHJ1bGVzLCBuYXRpdmVQYXJlbnQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmluZGV4Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmluc2VydFJ1bGUocnVsZXMuaW5kZXhbaV0sIGksIG5hdGl2ZVBhcmVudCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgYSBydWxlIGludG8gZWxlbWVudC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5zZXJ0UnVsZSA9IGZ1bmN0aW9uIGluc2VydFJ1bGUocnVsZSwgaW5kZXgsIG5hdGl2ZVBhcmVudCkge1xuICAgIGlmIChuYXRpdmVQYXJlbnQgPT09IHZvaWQgMCkge1xuICAgICAgbmF0aXZlUGFyZW50ID0gdGhpcy5lbGVtZW50LnNoZWV0O1xuICAgIH1cblxuICAgIGlmIChydWxlLnJ1bGVzKSB7XG4gICAgICB2YXIgcGFyZW50ID0gcnVsZTtcbiAgICAgIHZhciBsYXRlc3ROYXRpdmVQYXJlbnQgPSBuYXRpdmVQYXJlbnQ7XG5cbiAgICAgIGlmIChydWxlLnR5cGUgPT09ICdjb25kaXRpb25hbCcgfHwgcnVsZS50eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgICAvLyBXZSBuZWVkIHRvIHJlbmRlciB0aGUgY29udGFpbmVyIHdpdGhvdXQgY2hpbGRyZW4gZmlyc3QuXG4gICAgICAgIGxhdGVzdE5hdGl2ZVBhcmVudCA9IF9pbnNlcnRSdWxlKG5hdGl2ZVBhcmVudCwgcGFyZW50LnRvU3RyaW5nKHtcbiAgICAgICAgICBjaGlsZHJlbjogZmFsc2VcbiAgICAgICAgfSksIGluZGV4KTtcblxuICAgICAgICBpZiAobGF0ZXN0TmF0aXZlUGFyZW50ID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmluc2VydFJ1bGVzKHBhcmVudC5ydWxlcywgbGF0ZXN0TmF0aXZlUGFyZW50KTtcbiAgICAgIHJldHVybiBsYXRlc3ROYXRpdmVQYXJlbnQ7XG4gICAgfSAvLyBJRSBrZWVwcyB0aGUgQ1NTU3R5bGVTaGVldCBhZnRlciBzdHlsZSBub2RlIGhhcyBiZWVuIHJlYXR0YWNoZWQsXG4gICAgLy8gc28gd2UgbmVlZCB0byBjaGVjayBpZiB0aGUgYHJlbmRlcmFibGVgIHJlZmVyZW5jZSB0aGUgcmlnaHQgc3R5bGUgc2hlZXQgYW5kIG5vdFxuICAgIC8vIHJlcmVuZGVyIHRob3NlIHJ1bGVzLlxuXG5cbiAgICBpZiAocnVsZS5yZW5kZXJhYmxlICYmIHJ1bGUucmVuZGVyYWJsZS5wYXJlbnRTdHlsZVNoZWV0ID09PSB0aGlzLmVsZW1lbnQuc2hlZXQpIHtcbiAgICAgIHJldHVybiBydWxlLnJlbmRlcmFibGU7XG4gICAgfVxuXG4gICAgdmFyIHJ1bGVTdHIgPSBydWxlLnRvU3RyaW5nKCk7XG4gICAgaWYgKCFydWxlU3RyKSByZXR1cm4gZmFsc2U7XG5cbiAgICB2YXIgbmF0aXZlUnVsZSA9IF9pbnNlcnRSdWxlKG5hdGl2ZVBhcmVudCwgcnVsZVN0ciwgaW5kZXgpO1xuXG4gICAgaWYgKG5hdGl2ZVJ1bGUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5oYXNJbnNlcnRlZFJ1bGVzID0gdHJ1ZTtcbiAgICBydWxlLnJlbmRlcmFibGUgPSBuYXRpdmVSdWxlO1xuICAgIHJldHVybiBuYXRpdmVSdWxlO1xuICB9XG4gIC8qKlxuICAgKiBEZWxldGUgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZWxldGVSdWxlID0gZnVuY3Rpb24gZGVsZXRlUnVsZShjc3NSdWxlKSB7XG4gICAgdmFyIHNoZWV0ID0gdGhpcy5lbGVtZW50LnNoZWV0O1xuICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXhPZihjc3NSdWxlKTtcbiAgICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gICAgc2hlZXQuZGVsZXRlUnVsZShpbmRleCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIENTUyBSdWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihjc3NSdWxlKSB7XG4gICAgdmFyIGNzc1J1bGVzID0gdGhpcy5lbGVtZW50LnNoZWV0LmNzc1J1bGVzO1xuXG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGNzc1J1bGVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgaWYgKGNzc1J1bGUgPT09IGNzc1J1bGVzW2luZGV4XSkgcmV0dXJuIGluZGV4O1xuICAgIH1cblxuICAgIHJldHVybiAtMTtcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGUgYSBuZXcgQ1NTIHJ1bGUgYW5kIHJlcGxhY2UgdGhlIGV4aXN0aW5nIG9uZS5cbiAgICpcbiAgICogT25seSB1c2VkIGZvciBzb21lIG9sZCBicm93c2VycyBiZWNhdXNlIHRoZXkgY2FuJ3Qgc2V0IGEgc2VsZWN0b3IuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlcGxhY2VSdWxlID0gZnVuY3Rpb24gcmVwbGFjZVJ1bGUoY3NzUnVsZSwgcnVsZSkge1xuICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXhPZihjc3NSdWxlKTtcbiAgICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gICAgdGhpcy5lbGVtZW50LnNoZWV0LmRlbGV0ZVJ1bGUoaW5kZXgpO1xuICAgIHJldHVybiB0aGlzLmluc2VydFJ1bGUocnVsZSwgaW5kZXgpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYWxsIHJ1bGVzIGVsZW1lbnRzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXRSdWxlcyA9IGZ1bmN0aW9uIGdldFJ1bGVzKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQuc2hlZXQuY3NzUnVsZXM7XG4gIH07XG5cbiAgcmV0dXJuIERvbVJlbmRlcmVyO1xufSgpO1xuXG52YXIgaW5zdGFuY2VDb3VudGVyID0gMDtcblxudmFyIEpzcyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEpzcyhvcHRpb25zKSB7XG4gICAgdGhpcy5pZCA9IGluc3RhbmNlQ291bnRlcisrO1xuICAgIHRoaXMudmVyc2lvbiA9IFwiMTAuMC40XCI7XG4gICAgdGhpcy5wbHVnaW5zID0gbmV3IFBsdWdpbnNSZWdpc3RyeSgpO1xuICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgIGlkOiB7XG4gICAgICAgIG1pbmlmeTogZmFsc2VcbiAgICAgIH0sXG4gICAgICBjcmVhdGVHZW5lcmF0ZUlkOiBjcmVhdGVHZW5lcmF0ZUlkLFxuICAgICAgUmVuZGVyZXI6IGlzSW5Ccm93c2VyID8gRG9tUmVuZGVyZXIgOiBudWxsLFxuICAgICAgcGx1Z2luczogW11cbiAgICB9O1xuICAgIHRoaXMuZ2VuZXJhdGVJZCA9IGNyZWF0ZUdlbmVyYXRlSWQoe1xuICAgICAgbWluaWZ5OiBmYWxzZVxuICAgIH0pO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbHVnaW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnBsdWdpbnMudXNlKHBsdWdpbnNbaV0sIHtcbiAgICAgICAgcXVldWU6ICdpbnRlcm5hbCdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuc2V0dXAob3B0aW9ucyk7XG4gIH1cbiAgLyoqXG4gICAqIFByZXBhcmVzIHZhcmlvdXMgb3B0aW9ucywgYXBwbGllcyBwbHVnaW5zLlxuICAgKiBTaG91bGQgbm90IGJlIHVzZWQgdHdpY2Ugb24gdGhlIHNhbWUgaW5zdGFuY2UsIGJlY2F1c2UgdGhlcmUgaXMgbm8gcGx1Z2luc1xuICAgKiBkZWR1cGxpY2F0aW9uIGxvZ2ljLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBKc3MucHJvdG90eXBlO1xuXG4gIF9wcm90by5zZXR1cCA9IGZ1bmN0aW9uIHNldHVwKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuY3JlYXRlR2VuZXJhdGVJZCkge1xuICAgICAgdGhpcy5vcHRpb25zLmNyZWF0ZUdlbmVyYXRlSWQgPSBvcHRpb25zLmNyZWF0ZUdlbmVyYXRlSWQ7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaWQpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5pZCA9IF9leHRlbmRzKHt9LCB0aGlzLm9wdGlvbnMuaWQsIG9wdGlvbnMuaWQpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmNyZWF0ZUdlbmVyYXRlSWQgfHwgb3B0aW9ucy5pZCkge1xuICAgICAgdGhpcy5nZW5lcmF0ZUlkID0gdGhpcy5vcHRpb25zLmNyZWF0ZUdlbmVyYXRlSWQodGhpcy5vcHRpb25zLmlkKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5pbnNlcnRpb25Qb2ludCAhPSBudWxsKSB0aGlzLm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgPSBvcHRpb25zLmluc2VydGlvblBvaW50O1xuXG4gICAgaWYgKCdSZW5kZXJlcicgaW4gb3B0aW9ucykge1xuICAgICAgdGhpcy5vcHRpb25zLlJlbmRlcmVyID0gb3B0aW9ucy5SZW5kZXJlcjtcbiAgICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItc3ByZWFkXG5cblxuICAgIGlmIChvcHRpb25zLnBsdWdpbnMpIHRoaXMudXNlLmFwcGx5KHRoaXMsIG9wdGlvbnMucGx1Z2lucyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIFN0eWxlIFNoZWV0LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmVhdGVTdHlsZVNoZWV0ID0gZnVuY3Rpb24gY3JlYXRlU3R5bGVTaGVldChzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgICAgaW5kZXggPSBfb3B0aW9ucy5pbmRleDtcblxuICAgIGlmICh0eXBlb2YgaW5kZXggIT09ICdudW1iZXInKSB7XG4gICAgICBpbmRleCA9IHNoZWV0cy5pbmRleCA9PT0gMCA/IDAgOiBzaGVldHMuaW5kZXggKyAxO1xuICAgIH1cblxuICAgIHZhciBzaGVldCA9IG5ldyBTdHlsZVNoZWV0KHN0eWxlcywgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIGpzczogdGhpcyxcbiAgICAgIGdlbmVyYXRlSWQ6IG9wdGlvbnMuZ2VuZXJhdGVJZCB8fCB0aGlzLmdlbmVyYXRlSWQsXG4gICAgICBpbnNlcnRpb25Qb2ludDogdGhpcy5vcHRpb25zLmluc2VydGlvblBvaW50LFxuICAgICAgUmVuZGVyZXI6IHRoaXMub3B0aW9ucy5SZW5kZXJlcixcbiAgICAgIGluZGV4OiBpbmRleFxuICAgIH0pKTtcbiAgICB0aGlzLnBsdWdpbnMub25Qcm9jZXNzU2hlZXQoc2hlZXQpO1xuICAgIHJldHVybiBzaGVldDtcbiAgfVxuICAvKipcbiAgICogRGV0YWNoIHRoZSBTdHlsZSBTaGVldCBhbmQgcmVtb3ZlIGl0IGZyb20gdGhlIHJlZ2lzdHJ5LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmVTdHlsZVNoZWV0ID0gZnVuY3Rpb24gcmVtb3ZlU3R5bGVTaGVldChzaGVldCkge1xuICAgIHNoZWV0LmRldGFjaCgpO1xuICAgIHNoZWV0cy5yZW1vdmUoc2hlZXQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBydWxlIHdpdGhvdXQgYSBTdHlsZSBTaGVldC5cbiAgICogW0RlcHJlY2F0ZWRdIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmVhdGVSdWxlID0gZnVuY3Rpb24gY3JlYXRlUnVsZSQkMShuYW1lLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIGlmIChzdHlsZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdHlsZSA9IHt9O1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICAvLyBFbmFibGUgcnVsZSB3aXRob3V0IG5hbWUgZm9yIGlubGluZSBzdHlsZXMuXG4gICAgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUnVsZSh1bmRlZmluZWQsIG5hbWUsIHN0eWxlKTtcbiAgICB9XG5cbiAgICB2YXIgcnVsZU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGpzczogdGhpcyxcbiAgICAgIFJlbmRlcmVyOiB0aGlzLm9wdGlvbnMuUmVuZGVyZXJcbiAgICB9KTtcblxuICAgIGlmICghcnVsZU9wdGlvbnMuZ2VuZXJhdGVJZCkgcnVsZU9wdGlvbnMuZ2VuZXJhdGVJZCA9IHRoaXMuZ2VuZXJhdGVJZDtcbiAgICBpZiAoIXJ1bGVPcHRpb25zLmNsYXNzZXMpIHJ1bGVPcHRpb25zLmNsYXNzZXMgPSB7fTtcbiAgICBpZiAoIXJ1bGVPcHRpb25zLmtleWZyYW1lcykgcnVsZU9wdGlvbnMua2V5ZnJhbWVzID0ge307XG5cbiAgICB2YXIgcnVsZSA9IGNyZWF0ZVJ1bGUobmFtZSwgc3R5bGUsIHJ1bGVPcHRpb25zKTtcblxuICAgIGlmIChydWxlKSB0aGlzLnBsdWdpbnMub25Qcm9jZXNzUnVsZShydWxlKTtcbiAgICByZXR1cm4gcnVsZTtcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgcGx1Z2luLiBQYXNzZWQgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIHdpdGggYSBydWxlIGluc3RhbmNlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51c2UgPSBmdW5jdGlvbiB1c2UoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBwbHVnaW5zJCQxID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgcGx1Z2lucyQkMVtfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBwbHVnaW5zJCQxLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgICAgX3RoaXMucGx1Z2lucy51c2UocGx1Z2luKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICByZXR1cm4gSnNzO1xufSgpO1xuXG4vKipcbiAqIEV4dHJhY3RzIGEgc3R5bGVzIG9iamVjdCB3aXRoIG9ubHkgcHJvcHMgdGhhdCBjb250YWluIGZ1bmN0aW9uIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gZ2V0RHluYW1pY1N0eWxlcyhzdHlsZXMpIHtcbiAgdmFyIHRvID0gbnVsbDtcblxuICBmb3IgKHZhciBrZXkgaW4gc3R5bGVzKSB7XG4gICAgdmFyIHZhbHVlID0gc3R5bGVzW2tleV07XG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cbiAgICBpZiAodHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKCF0bykgdG8gPSB7fTtcbiAgICAgIHRvW2tleV0gPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgdmFyIGV4dHJhY3RlZCA9IGdldER5bmFtaWNTdHlsZXModmFsdWUpO1xuXG4gICAgICBpZiAoZXh0cmFjdGVkKSB7XG4gICAgICAgIGlmICghdG8pIHRvID0ge307XG4gICAgICAgIHRvW2tleV0gPSBleHRyYWN0ZWQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRvO1xufVxuXG4vKipcbiAqIFNoZWV0c01hbmFnZXIgaXMgbGlrZSBhIFdlYWtNYXAgd2hpY2ggaXMgZGVzaWduZWQgdG8gY291bnQgU3R5bGVTaGVldFxuICogaW5zdGFuY2VzIGFuZCBhdHRhY2gvZGV0YWNoIGF1dG9tYXRpY2FsbHkuXG4gKi9cbnZhciBTaGVldHNNYW5hZ2VyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2hlZXRzTWFuYWdlcigpIHtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5zaGVldHMgPSBuZXcgV2Vha01hcCgpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFNoZWV0c01hbmFnZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXQgPSBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gdGhpcy5zaGVldHMuZ2V0KGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnNoZWV0O1xuICB9O1xuXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQoa2V5LCBzaGVldCkge1xuICAgIGlmICh0aGlzLnNoZWV0cy5oYXMoa2V5KSkgcmV0dXJuO1xuICAgIHRoaXMubGVuZ3RoKys7XG4gICAgdGhpcy5zaGVldHMuc2V0KGtleSwge1xuICAgICAgc2hlZXQ6IHNoZWV0LFxuICAgICAgcmVmczogMFxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5tYW5hZ2UgPSBmdW5jdGlvbiBtYW5hZ2Uoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gdGhpcy5zaGVldHMuZ2V0KGtleSk7XG5cbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGlmIChlbnRyeS5yZWZzID09PSAwKSB7XG4gICAgICAgIGVudHJ5LnNoZWV0LmF0dGFjaCgpO1xuICAgICAgfVxuXG4gICAgICBlbnRyeS5yZWZzKys7XG4gICAgICByZXR1cm4gZW50cnkuc2hlZXQ7XG4gICAgfVxuXG4gICAgd2FybmluZyhmYWxzZSwgXCJbSlNTXSBTaGVldHNNYW5hZ2VyOiBjYW4ndCBmaW5kIHNoZWV0IHRvIG1hbmFnZVwiKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xuXG4gIF9wcm90by51bm1hbmFnZSA9IGZ1bmN0aW9uIHVubWFuYWdlKGtleSkge1xuICAgIHZhciBlbnRyeSA9IHRoaXMuc2hlZXRzLmdldChrZXkpO1xuXG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBpZiAoZW50cnkucmVmcyA+IDApIHtcbiAgICAgICAgZW50cnkucmVmcy0tO1xuICAgICAgICBpZiAoZW50cnkucmVmcyA9PT0gMCkgZW50cnkuc2hlZXQuZGV0YWNoKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsIFwiU2hlZXRzTWFuYWdlcjogY2FuJ3QgZmluZCBzaGVldCB0byB1bm1hbmFnZVwiKTtcbiAgICB9XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKFNoZWV0c01hbmFnZXIsIFt7XG4gICAga2V5OiBcInNpemVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmxlbmd0aDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2hlZXRzTWFuYWdlcjtcbn0oKTtcblxuLyoqXG4gKiBBIGJldHRlciBhYnN0cmFjdGlvbiBvdmVyIENTUy5cbiAqXG4gKiBAY29weXJpZ2h0IE9sZWcgSXNvbmVuIChTbG9ib2Rza29pKSAvIElzb25lbiAyMDE0LXByZXNlbnRcbiAqIEB3ZWJzaXRlIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzc1xuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuLyoqXG4gKiBFeHBvcnQgYSBjb25zdGFudCBpbmRpY2F0aW5nIGlmIHRoaXMgYnJvd3NlciBoYXMgQ1NTVE9NIHN1cHBvcnQuXG4gKiBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS93ZWIvdXBkYXRlcy8yMDE4LzAzL2Nzc29tXG4gKi9cbnZhciBoYXNDU1NUT01TdXBwb3J0ID0gdHlwZW9mIENTUyAhPT0gJ3VuZGVmaW5lZCcgJiYgQ1NTICYmICdudW1iZXInIGluIENTUztcbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBKc3MuXG4gKi9cblxudmFyIGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgSnNzKG9wdGlvbnMpO1xufTtcbi8qKlxuICogQSBnbG9iYWwgSnNzIGluc3RhbmNlLlxuICovXG5cbnZhciBpbmRleCA9IGNyZWF0ZSgpO1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbmV4cG9ydCB7IGhhc0NTU1RPTVN1cHBvcnQsIGNyZWF0ZSwgZ2V0RHluYW1pY1N0eWxlcywgdG9Dc3NWYWx1ZSwgY3JlYXRlUnVsZSwgU2hlZXRzUmVnaXN0cnksIFNoZWV0c01hbmFnZXIsIFJ1bGVMaXN0LCBzaGVldHMsIGNyZWF0ZUdlbmVyYXRlSWQgfTtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHsgZ2V0RGlzcGxheU5hbWUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuXG5mdW5jdGlvbiBtZXJnZUNsYXNzZXMoKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIGJhc2VDbGFzc2VzID0gb3B0aW9ucy5iYXNlQ2xhc3NlcyxcbiAgICAgIG5ld0NsYXNzZXMgPSBvcHRpb25zLm5ld0NsYXNzZXMsXG4gICAgICBDb21wb25lbnQgPSBvcHRpb25zLkNvbXBvbmVudDtcblxuICBpZiAoIW5ld0NsYXNzZXMpIHtcbiAgICByZXR1cm4gYmFzZUNsYXNzZXM7XG4gIH1cblxuICB2YXIgbmV4dENsYXNzZXMgPSBfZXh0ZW5kcyh7fSwgYmFzZUNsYXNzZXMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBuZXdDbGFzc2VzID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc29sZS5lcnJvcihbXCJNYXRlcmlhbC1VSTogdGhlIHZhbHVlIGBcIi5jb25jYXQobmV3Q2xhc3NlcywgXCJgIFwiKSArIFwicHJvdmlkZWQgdG8gdGhlIGNsYXNzZXMgcHJvcCBvZiBcIi5jb25jYXQoZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSwgXCIgaXMgaW5jb3JyZWN0LlwiKSwgJ1lvdSBtaWdodCB3YW50IHRvIHVzZSB0aGUgY2xhc3NOYW1lIHByb3AgaW5zdGVhZC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICByZXR1cm4gYmFzZUNsYXNzZXM7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMobmV3Q2xhc3NlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghYmFzZUNsYXNzZXNba2V5XSAmJiBuZXdDbGFzc2VzW2tleV0pIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbXCJNYXRlcmlhbC1VSTogdGhlIGtleSBgXCIuY29uY2F0KGtleSwgXCJgIFwiKSArIFwicHJvdmlkZWQgdG8gdGhlIGNsYXNzZXMgcHJvcCBpcyBub3QgaW1wbGVtZW50ZWQgaW4gXCIuY29uY2F0KGdldERpc3BsYXlOYW1lKENvbXBvbmVudCksIFwiLlwiKSwgXCJZb3UgY2FuIG9ubHkgb3ZlcnJpZGUgb25lIG9mIHRoZSBmb2xsb3dpbmc6IFwiLmNvbmNhdChPYmplY3Qua2V5cyhiYXNlQ2xhc3Nlcykuam9pbignLCcpLCBcIi5cIildLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5ld0NsYXNzZXNba2V5XSAmJiB0eXBlb2YgbmV3Q2xhc3Nlc1trZXldICE9PSAnc3RyaW5nJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiB0aGUga2V5IGBcIi5jb25jYXQoa2V5LCBcImAgXCIpICsgXCJwcm92aWRlZCB0byB0aGUgY2xhc3NlcyBwcm9wIGlzIG5vdCB2YWxpZCBmb3IgXCIuY29uY2F0KGdldERpc3BsYXlOYW1lKENvbXBvbmVudCksIFwiLlwiKSwgXCJZb3UgbmVlZCB0byBwcm92aWRlIGEgbm9uIGVtcHR5IHN0cmluZyBpbnN0ZWFkIG9mOiBcIi5jb25jYXQobmV3Q2xhc3Nlc1trZXldLCBcIi5cIildLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobmV3Q2xhc3Nlc1trZXldKSB7XG4gICAgICBuZXh0Q2xhc3Nlc1trZXldID0gXCJcIi5jb25jYXQoYmFzZUNsYXNzZXNba2V5XSwgXCIgXCIpLmNvbmNhdChuZXdDbGFzc2VzW2tleV0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBuZXh0Q2xhc3Nlcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVyZ2VDbGFzc2VzOyIsIi8vIFVzZWQgaHR0cHM6Ly9naXRodWIuY29tL3RoaW5rbG9vcC9tdWx0aS1rZXktY2FjaGUgYXMgaW5zcGlyYXRpb25cbnZhciBtdWx0aUtleVN0b3JlID0ge1xuICBzZXQ6IGZ1bmN0aW9uIHNldChjYWNoZSwga2V5MSwga2V5MiwgdmFsdWUpIHtcbiAgICB2YXIgc3ViQ2FjaGUgPSBjYWNoZS5nZXQoa2V5MSk7XG5cbiAgICBpZiAoIXN1YkNhY2hlKSB7XG4gICAgICBzdWJDYWNoZSA9IG5ldyBNYXAoKTtcbiAgICAgIGNhY2hlLnNldChrZXkxLCBzdWJDYWNoZSk7XG4gICAgfVxuXG4gICAgc3ViQ2FjaGUuc2V0KGtleTIsIHZhbHVlKTtcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoY2FjaGUsIGtleTEsIGtleTIpIHtcbiAgICB2YXIgc3ViQ2FjaGUgPSBjYWNoZS5nZXQoa2V5MSk7XG4gICAgcmV0dXJuIHN1YkNhY2hlID8gc3ViQ2FjaGUuZ2V0KGtleTIpIDogdW5kZWZpbmVkO1xuICB9LFxuICBkZWxldGU6IGZ1bmN0aW9uIF9kZWxldGUoY2FjaGUsIGtleTEsIGtleTIpIHtcbiAgICB2YXIgc3ViQ2FjaGUgPSBjYWNoZS5nZXQoa2V5MSk7XG4gICAgc3ViQ2FjaGUuZGVsZXRlKGtleTIpO1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbXVsdGlLZXlTdG9yZTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xudmFyIFRoZW1lQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFRoZW1lQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdUaGVtZUNvbnRleHQnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBUaGVtZUNvbnRleHQ7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUaGVtZUNvbnRleHQgZnJvbSAnLi9UaGVtZUNvbnRleHQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGhlbWUoKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG59IiwidmFyIGhhc1N5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmZvcjtcbmV4cG9ydCBkZWZhdWx0IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ211aS5uZXN0ZWQnKSA6ICdfX1RIRU1FX05FU1RFRF9fJzsiLCJpbXBvcnQgbmVzdGVkIGZyb20gJy4uL1RoZW1lUHJvdmlkZXIvbmVzdGVkJztcbi8qKlxuICogVGhpcyBpcyB0aGUgbGlzdCBvZiB0aGUgc3R5bGUgcnVsZSBuYW1lIHdlIHVzZSBhcyBkcm9wIGluIHJlcGxhY2VtZW50IGZvciB0aGUgYnVpbHQtaW5cbiAqIHBzZXVkbyBjbGFzc2VzICg6Y2hlY2tlZCwgOmRpc2FibGVkLCA6Zm9jdXNlZCwgZXRjLikuXG4gKlxuICogV2h5IGRvIHRoZXkgZXhpc3QgaW4gdGhlIGZpcnN0IHBsYWNlP1xuICogVGhlc2UgY2xhc3NlcyBhcmUgdXNlZCBhdCBhIHNwZWNpZmljaXR5IG9mIDIuXG4gKiBJdCBhbGxvd3MgdGhlbSB0byBvdmVycmlkZSBwcmV2aW91c2x5IGRlZmluaWVkIHN0eWxlcyBhcyB3ZWxsIGFzXG4gKiBiZWluZyB1bnRvdWNoZWQgYnkgc2ltcGxlIHVzZXIgb3ZlcnJpZGVzLlxuICovXG5cbnZhciBwc2V1ZG9DbGFzc2VzID0gWydjaGVja2VkJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2ZvY3VzZWQnLCAnZm9jdXNWaXNpYmxlJywgJ3JlcXVpcmVkJywgJ2V4cGFuZGVkJywgJ3NlbGVjdGVkJ107IC8vIFJldHVybnMgYSBmdW5jdGlvbiB3aGljaCBnZW5lcmF0ZXMgdW5pcXVlIGNsYXNzIG5hbWVzIGJhc2VkIG9uIGNvdW50ZXJzLlxuLy8gV2hlbiBuZXcgZ2VuZXJhdG9yIGZ1bmN0aW9uIGlzIGNyZWF0ZWQsIHJ1bGUgY291bnRlciBpcyByZXNldC5cbi8vIFdlIG5lZWQgdG8gcmVzZXQgdGhlIHJ1bGUgY291bnRlciBmb3IgU1NSIGZvciBlYWNoIHJlcXVlc3QuXG4vL1xuLy8gSXQncyBpbnNwaXJlZCBieVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2Jsb2IvNGU2YTA1ZGQzZjdiNjU3MmZkZDNhYjIxNjg2MWQ5ZTQ0NmMyMDMzMS9zcmMvdXRpbHMvY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUuanNcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUoKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIF9vcHRpb25zJGRpc2FibGVHbG9iYSA9IG9wdGlvbnMuZGlzYWJsZUdsb2JhbCxcbiAgICAgIGRpc2FibGVHbG9iYWwgPSBfb3B0aW9ucyRkaXNhYmxlR2xvYmEgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkZGlzYWJsZUdsb2JhLFxuICAgICAgX29wdGlvbnMkcHJvZHVjdGlvblByID0gb3B0aW9ucy5wcm9kdWN0aW9uUHJlZml4LFxuICAgICAgcHJvZHVjdGlvblByZWZpeCA9IF9vcHRpb25zJHByb2R1Y3Rpb25QciA9PT0gdm9pZCAwID8gJ2pzcycgOiBfb3B0aW9ucyRwcm9kdWN0aW9uUHIsXG4gICAgICBfb3B0aW9ucyRzZWVkID0gb3B0aW9ucy5zZWVkLFxuICAgICAgc2VlZCA9IF9vcHRpb25zJHNlZWQgPT09IHZvaWQgMCA/ICcnIDogX29wdGlvbnMkc2VlZDtcbiAgdmFyIHNlZWRQcmVmaXggPSBzZWVkID09PSAnJyA/ICcnIDogXCJcIi5jb25jYXQoc2VlZCwgXCItXCIpO1xuICB2YXIgcnVsZUNvdW50ZXIgPSAwO1xuICByZXR1cm4gZnVuY3Rpb24gKHJ1bGUsIHN0eWxlU2hlZXQpIHtcbiAgICBydWxlQ291bnRlciArPSAxO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChydWxlQ291bnRlciA+PSAxZTEwKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihbJ01hdGVyaWFsLVVJOiB5b3UgbWlnaHQgaGF2ZSBhIG1lbW9yeSBsZWFrLicsICdUaGUgcnVsZUNvdW50ZXIgaXMgbm90IHN1cHBvc2VkIHRvIGdyb3cgdGhhdCBtdWNoLiddLmpvaW4oJycpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbmFtZSA9IHN0eWxlU2hlZXQub3B0aW9ucy5uYW1lOyAvLyBJcyBhIGdsb2JhbCBzdGF0aWMgTVVJIHN0eWxlP1xuXG4gICAgaWYgKG5hbWUgJiYgbmFtZS5pbmRleE9mKCdNdWknKSA9PT0gMCAmJiAhc3R5bGVTaGVldC5vcHRpb25zLmxpbmsgJiYgIWRpc2FibGVHbG9iYWwpIHtcbiAgICAgIC8vIFdlIGNhbiB1c2UgYSBzaG9ydGhhbmQgY2xhc3MgbmFtZSwgd2UgbmV2ZXIgdXNlIHRoZSBrZXlzIHRvIHN0eWxlIHRoZSBjb21wb25lbnRzLlxuICAgICAgaWYgKHBzZXVkb0NsYXNzZXMuaW5kZXhPZihydWxlLmtleSkgIT09IC0xKSB7XG4gICAgICAgIHJldHVybiBcIk11aS1cIi5jb25jYXQocnVsZS5rZXkpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJlZml4ID0gXCJcIi5jb25jYXQoc2VlZFByZWZpeCkuY29uY2F0KG5hbWUsIFwiLVwiKS5jb25jYXQocnVsZS5rZXkpO1xuXG4gICAgICBpZiAoIXN0eWxlU2hlZXQub3B0aW9ucy50aGVtZVtuZXN0ZWRdIHx8IHNlZWQgIT09ICcnKSB7XG4gICAgICAgIHJldHVybiBwcmVmaXg7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChwcmVmaXgsIFwiLVwiKS5jb25jYXQocnVsZUNvdW50ZXIpO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoc2VlZFByZWZpeCkuY29uY2F0KHByb2R1Y3Rpb25QcmVmaXgpLmNvbmNhdChydWxlQ291bnRlcik7XG4gICAgfVxuXG4gICAgdmFyIHN1ZmZpeCA9IFwiXCIuY29uY2F0KHJ1bGUua2V5LCBcIi1cIikuY29uY2F0KHJ1bGVDb3VudGVyKTsgLy8gSGVscCB3aXRoIGRlYnVnZ2FiaWxpdHkuXG5cbiAgICBpZiAoc3R5bGVTaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeCkge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHNlZWRQcmVmaXgpLmNvbmNhdChzdHlsZVNoZWV0Lm9wdGlvbnMuY2xhc3NOYW1lUHJlZml4LCBcIi1cIikuY29uY2F0KHN1ZmZpeCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KHNlZWRQcmVmaXgpLmNvbmNhdChzdWZmaXgpO1xuICB9O1xufSIsImltcG9ydCB7IGNyZWF0ZVJ1bGUgfSBmcm9tICdqc3MnO1xuXG52YXIgbm93ID0gRGF0ZS5ub3coKTtcbnZhciBmblZhbHVlc05zID0gXCJmblZhbHVlc1wiICsgbm93O1xudmFyIGZuUnVsZU5zID0gXCJmblN0eWxlXCIgKyArK25vdztcbmZ1bmN0aW9uIGZ1bmN0aW9uUGx1Z2luKCkge1xuICByZXR1cm4ge1xuICAgIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIGRlY2wsIG9wdGlvbnMpIHtcbiAgICAgIGlmICh0eXBlb2YgZGVjbCAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIG51bGw7XG4gICAgICB2YXIgcnVsZSA9IGNyZWF0ZVJ1bGUobmFtZSwge30sIG9wdGlvbnMpO1xuICAgICAgcnVsZVtmblJ1bGVOc10gPSBkZWNsO1xuICAgICAgcmV0dXJuIHJ1bGU7XG4gICAgfSxcbiAgICBvblByb2Nlc3NTdHlsZTogZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gZXh0cmFjdCBmdW5jdGlvbiB2YWx1ZXMgZnJvbSB0aGUgZGVjbGFyYXRpb24sIHNvIHRoYXQgd2UgY2FuIGtlZXAgY29yZSB1bmF3YXJlIG9mIHRoZW0uXG4gICAgICAvLyBXZSBuZWVkIHRvIGRvIHRoYXQgb25seSBvbmNlLlxuICAgICAgLy8gV2UgZG9uJ3QgbmVlZCB0byBleHRyYWN0IGZ1bmN0aW9ucyBvbiBlYWNoIHN0eWxlIHVwZGF0ZSwgc2luY2UgdGhpcyBjYW4gaGFwcGVuIG9ubHkgb25jZS5cbiAgICAgIC8vIFdlIGRvbid0IHN1cHBvcnQgZnVuY3Rpb24gdmFsdWVzIGluc2lkZSBvZiBmdW5jdGlvbiBydWxlcy5cbiAgICAgIGlmIChmblZhbHVlc05zIGluIHJ1bGUgfHwgZm5SdWxlTnMgaW4gcnVsZSkgcmV0dXJuIHN0eWxlO1xuICAgICAgdmFyIGZuVmFsdWVzID0ge307XG5cbiAgICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gc3R5bGVbcHJvcF07XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicpIGNvbnRpbnVlO1xuICAgICAgICBkZWxldGUgc3R5bGVbcHJvcF07XG4gICAgICAgIGZuVmFsdWVzW3Byb3BdID0gdmFsdWU7XG4gICAgICB9IC8vICRGbG93Rml4TWVcblxuXG4gICAgICBydWxlW2ZuVmFsdWVzTnNdID0gZm5WYWx1ZXM7XG4gICAgICByZXR1cm4gc3R5bGU7XG4gICAgfSxcbiAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoZGF0YSwgcnVsZSwgc2hlZXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBzdHlsZVJ1bGUgPSBydWxlO1xuICAgICAgdmFyIGZuUnVsZSA9IHN0eWxlUnVsZVtmblJ1bGVOc107IC8vIElmIHdlIGhhdmUgYSBzdHlsZSBmdW5jdGlvbiwgdGhlIGVudGlyZSBydWxlIGlzIGR5bmFtaWMgYW5kIHN0eWxlIG9iamVjdFxuICAgICAgLy8gd2lsbCBiZSByZXR1cm5lZCBmcm9tIHRoYXQgZnVuY3Rpb24uXG5cbiAgICAgIGlmIChmblJ1bGUpIHtcbiAgICAgICAgLy8gRW1wdHkgb2JqZWN0IHdpbGwgcmVtb3ZlIGFsbCBjdXJyZW50bHkgZGVmaW5lZCBwcm9wc1xuICAgICAgICAvLyBpbiBjYXNlIGZ1bmN0aW9uIHJ1bGUgcmV0dXJucyBhIGZhbHN5IHZhbHVlLlxuICAgICAgICBzdHlsZVJ1bGUuc3R5bGUgPSBmblJ1bGUoZGF0YSkgfHwge307XG4gICAgICB9XG5cbiAgICAgIHZhciBmblZhbHVlcyA9IHN0eWxlUnVsZVtmblZhbHVlc05zXTsgLy8gSWYgd2UgaGF2ZSBhIGZuIHZhbHVlcyBtYXAsIGl0IGlzIGEgcnVsZSB3aXRoIGZ1bmN0aW9uIHZhbHVlcy5cblxuICAgICAgaWYgKGZuVmFsdWVzKSB7XG4gICAgICAgIGZvciAodmFyIHByb3AgaW4gZm5WYWx1ZXMpIHtcbiAgICAgICAgICBzdHlsZVJ1bGUucHJvcChwcm9wLCBmblZhbHVlc1twcm9wXShkYXRhKSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uUGx1Z2luO1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHsgUnVsZUxpc3QgfSBmcm9tICdqc3MnO1xuXG52YXIgYXQgPSAnQGdsb2JhbCc7XG52YXIgYXRQcmVmaXggPSAnQGdsb2JhbCAnO1xuXG52YXIgR2xvYmFsQ29udGFpbmVyUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEdsb2JhbENvbnRhaW5lclJ1bGUoa2V5LCBzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnZ2xvYmFsJztcbiAgICB0aGlzLmF0ID0gYXQ7XG4gICAgdGhpcy5ydWxlcyA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5ydWxlcyA9IG5ldyBSdWxlTGlzdChfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzXG4gICAgfSkpO1xuXG4gICAgZm9yICh2YXIgc2VsZWN0b3IgaW4gc3R5bGVzKSB7XG4gICAgICB0aGlzLnJ1bGVzLmFkZChzZWxlY3Rvciwgc3R5bGVzW3NlbGVjdG9yXSk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcy5wcm9jZXNzKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIHJ1bGUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEdsb2JhbENvbnRhaW5lclJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRSdWxlID0gZnVuY3Rpb24gZ2V0UnVsZShuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuZ2V0KG5hbWUpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYW5kIHJlZ2lzdGVyIHJ1bGUsIHJ1biBwbHVnaW5zLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hZGRSdWxlID0gZnVuY3Rpb24gYWRkUnVsZShuYW1lLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHZhciBydWxlID0gdGhpcy5ydWxlcy5hZGQobmFtZSwgc3R5bGUsIG9wdGlvbnMpO1xuICAgIHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucy5vblByb2Nlc3NSdWxlKHJ1bGUpO1xuICAgIHJldHVybiBydWxlO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgaW5kZXggb2YgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihydWxlKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuaW5kZXhPZihydWxlKTtcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy50b1N0cmluZygpO1xuICB9O1xuXG4gIHJldHVybiBHbG9iYWxDb250YWluZXJSdWxlO1xufSgpO1xuXG52YXIgR2xvYmFsUHJlZml4ZWRSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gR2xvYmFsUHJlZml4ZWRSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnZ2xvYmFsJztcbiAgICB0aGlzLmF0ID0gYXQ7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMucnVsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB2YXIgc2VsZWN0b3IgPSBrZXkuc3Vic3RyKGF0UHJlZml4Lmxlbmd0aCk7XG4gICAgdGhpcy5ydWxlID0gb3B0aW9ucy5qc3MuY3JlYXRlUnVsZShzZWxlY3Rvciwgc3R5bGUsIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBwYXJlbnQ6IHRoaXNcbiAgICB9KSk7XG4gIH1cblxuICB2YXIgX3Byb3RvMiA9IEdsb2JhbFByZWZpeGVkUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvMi50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlID8gdGhpcy5ydWxlLnRvU3RyaW5nKG9wdGlvbnMpIDogJyc7XG4gIH07XG5cbiAgcmV0dXJuIEdsb2JhbFByZWZpeGVkUnVsZTtcbn0oKTtcblxudmFyIHNlcGFyYXRvclJlZ0V4cCA9IC9cXHMqLFxccyovZztcblxuZnVuY3Rpb24gYWRkU2NvcGUoc2VsZWN0b3IsIHNjb3BlKSB7XG4gIHZhciBwYXJ0cyA9IHNlbGVjdG9yLnNwbGl0KHNlcGFyYXRvclJlZ0V4cCk7XG4gIHZhciBzY29wZWQgPSAnJztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgc2NvcGVkICs9IHNjb3BlICsgXCIgXCIgKyBwYXJ0c1tpXS50cmltKCk7XG4gICAgaWYgKHBhcnRzW2kgKyAxXSkgc2NvcGVkICs9ICcsICc7XG4gIH1cblxuICByZXR1cm4gc2NvcGVkO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVOZXN0ZWRHbG9iYWxDb250YWluZXJSdWxlKHJ1bGUpIHtcbiAgdmFyIG9wdGlvbnMgPSBydWxlLm9wdGlvbnMsXG4gICAgICBzdHlsZSA9IHJ1bGUuc3R5bGU7XG4gIHZhciBydWxlcyA9IHN0eWxlID8gc3R5bGVbYXRdIDogbnVsbDtcbiAgaWYgKCFydWxlcykgcmV0dXJuO1xuXG4gIGZvciAodmFyIG5hbWUgaW4gcnVsZXMpIHtcbiAgICBvcHRpb25zLnNoZWV0LmFkZFJ1bGUobmFtZSwgcnVsZXNbbmFtZV0sIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBzZWxlY3RvcjogYWRkU2NvcGUobmFtZSwgcnVsZS5zZWxlY3RvcilcbiAgICB9KSk7XG4gIH1cblxuICBkZWxldGUgc3R5bGVbYXRdO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVQcmVmaXhlZEdsb2JhbFJ1bGUocnVsZSkge1xuICB2YXIgb3B0aW9ucyA9IHJ1bGUub3B0aW9ucyxcbiAgICAgIHN0eWxlID0gcnVsZS5zdHlsZTtcblxuICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgaWYgKHByb3BbMF0gIT09ICdAJyB8fCBwcm9wLnN1YnN0cigwLCBhdC5sZW5ndGgpICE9PSBhdCkgY29udGludWU7XG4gICAgdmFyIHNlbGVjdG9yID0gYWRkU2NvcGUocHJvcC5zdWJzdHIoYXQubGVuZ3RoKSwgcnVsZS5zZWxlY3Rvcik7XG4gICAgb3B0aW9ucy5zaGVldC5hZGRSdWxlKHNlbGVjdG9yLCBzdHlsZVtwcm9wXSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHNlbGVjdG9yOiBzZWxlY3RvclxuICAgIH0pKTtcbiAgICBkZWxldGUgc3R5bGVbcHJvcF07XG4gIH1cbn1cbi8qKlxuICogQ29udmVydCBuZXN0ZWQgcnVsZXMgdG8gc2VwYXJhdGUsIHJlbW92ZSB0aGVtIGZyb20gb3JpZ2luYWwgc3R5bGVzLlxuICpcbiAqIEBwYXJhbSB7UnVsZX0gcnVsZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5cbmZ1bmN0aW9uIGpzc0dsb2JhbCgpIHtcbiAgZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIHN0eWxlcywgb3B0aW9ucykge1xuICAgIGlmICghbmFtZSkgcmV0dXJuIG51bGw7XG5cbiAgICBpZiAobmFtZSA9PT0gYXQpIHtcbiAgICAgIHJldHVybiBuZXcgR2xvYmFsQ29udGFpbmVyUnVsZShuYW1lLCBzdHlsZXMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmIChuYW1lWzBdID09PSAnQCcgJiYgbmFtZS5zdWJzdHIoMCwgYXRQcmVmaXgubGVuZ3RoKSA9PT0gYXRQcmVmaXgpIHtcbiAgICAgIHJldHVybiBuZXcgR2xvYmFsUHJlZml4ZWRSdWxlKG5hbWUsIHN0eWxlcywgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgdmFyIHBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC50eXBlID09PSAnZ2xvYmFsJyB8fCBwYXJlbnQub3B0aW9ucy5wYXJlbnQgJiYgcGFyZW50Lm9wdGlvbnMucGFyZW50LnR5cGUgPT09ICdnbG9iYWwnKSB7XG4gICAgICAgIG9wdGlvbnMuc2NvcGVkID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuc2NvcGVkID09PSBmYWxzZSkge1xuICAgICAgb3B0aW9ucy5zZWxlY3RvciA9IG5hbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBvblByb2Nlc3NSdWxlKHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm47XG4gICAgaGFuZGxlTmVzdGVkR2xvYmFsQ29udGFpbmVyUnVsZShydWxlKTtcbiAgICBoYW5kbGVQcmVmaXhlZEdsb2JhbFJ1bGUocnVsZSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG9uQ3JlYXRlUnVsZTogb25DcmVhdGVSdWxlLFxuICAgIG9uUHJvY2Vzc1J1bGU6IG9uUHJvY2Vzc1J1bGVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQganNzR2xvYmFsO1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcblxudmFyIHNlcGFyYXRvclJlZ0V4cCA9IC9cXHMqLFxccyovZztcbnZhciBwYXJlbnRSZWdFeHAgPSAvJi9nO1xudmFyIHJlZlJlZ0V4cCA9IC9cXCQoW1xcdy1dKykvZztcbi8qKlxuICogQ29udmVydCBuZXN0ZWQgcnVsZXMgdG8gc2VwYXJhdGUsIHJlbW92ZSB0aGVtIGZyb20gb3JpZ2luYWwgc3R5bGVzLlxuICpcbiAqIEBwYXJhbSB7UnVsZX0gcnVsZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBqc3NOZXN0ZWQoKSB7XG4gIC8vIEdldCBhIGZ1bmN0aW9uIHRvIGJlIHVzZWQgZm9yICRyZWYgcmVwbGFjZW1lbnQuXG4gIGZ1bmN0aW9uIGdldFJlcGxhY2VSZWYoY29udGFpbmVyLCBzaGVldCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAobWF0Y2gsIGtleSkge1xuICAgICAgdmFyIHJ1bGUgPSBjb250YWluZXIuZ2V0UnVsZShrZXkpIHx8IHNoZWV0ICYmIHNoZWV0LmdldFJ1bGUoa2V5KTtcblxuICAgICAgaWYgKHJ1bGUpIHtcbiAgICAgICAgcnVsZSA9IHJ1bGU7XG4gICAgICAgIHJldHVybiBydWxlLnNlbGVjdG9yO1xuICAgICAgfVxuXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIENvdWxkIG5vdCBmaW5kIHRoZSByZWZlcmVuY2VkIHJ1bGUgXFxcIlwiICsga2V5ICsgXCJcXFwiIGluIFxcXCJcIiArIChjb250YWluZXIub3B0aW9ucy5tZXRhIHx8IGNvbnRhaW5lci50b1N0cmluZygpKSArIFwiXFxcIi5cIikgOiB2b2lkIDA7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlUGFyZW50UmVmcyhuZXN0ZWRQcm9wLCBwYXJlbnRQcm9wKSB7XG4gICAgdmFyIHBhcmVudFNlbGVjdG9ycyA9IHBhcmVudFByb3Auc3BsaXQoc2VwYXJhdG9yUmVnRXhwKTtcbiAgICB2YXIgbmVzdGVkU2VsZWN0b3JzID0gbmVzdGVkUHJvcC5zcGxpdChzZXBhcmF0b3JSZWdFeHApO1xuICAgIHZhciByZXN1bHQgPSAnJztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyZW50U2VsZWN0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcGFyZW50ID0gcGFyZW50U2VsZWN0b3JzW2ldO1xuXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG5lc3RlZFNlbGVjdG9ycy5sZW5ndGg7IGorKykge1xuICAgICAgICB2YXIgbmVzdGVkID0gbmVzdGVkU2VsZWN0b3JzW2pdO1xuICAgICAgICBpZiAocmVzdWx0KSByZXN1bHQgKz0gJywgJzsgLy8gUmVwbGFjZSBhbGwgJiBieSB0aGUgcGFyZW50IG9yIHByZWZpeCAmIHdpdGggdGhlIHBhcmVudC5cblxuICAgICAgICByZXN1bHQgKz0gbmVzdGVkLmluZGV4T2YoJyYnKSAhPT0gLTEgPyBuZXN0ZWQucmVwbGFjZShwYXJlbnRSZWdFeHAsIHBhcmVudCkgOiBwYXJlbnQgKyBcIiBcIiArIG5lc3RlZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0T3B0aW9ucyhydWxlLCBjb250YWluZXIsIHByZXZPcHRpb25zKSB7XG4gICAgLy8gT3B0aW9ucyBoYXMgYmVlbiBhbHJlYWR5IGNyZWF0ZWQsIG5vdyB3ZSBvbmx5IGluY3JlYXNlIGluZGV4LlxuICAgIGlmIChwcmV2T3B0aW9ucykgcmV0dXJuIF9leHRlbmRzKHt9LCBwcmV2T3B0aW9ucywge1xuICAgICAgaW5kZXg6IHByZXZPcHRpb25zLmluZGV4ICsgMVxuICAgIH0pO1xuICAgIHZhciBuZXN0aW5nTGV2ZWwgPSBydWxlLm9wdGlvbnMubmVzdGluZ0xldmVsO1xuICAgIG5lc3RpbmdMZXZlbCA9IG5lc3RpbmdMZXZlbCA9PT0gdW5kZWZpbmVkID8gMSA6IG5lc3RpbmdMZXZlbCArIDE7XG5cbiAgICB2YXIgb3B0aW9ucyA9IF9leHRlbmRzKHt9LCBydWxlLm9wdGlvbnMsIHtcbiAgICAgIG5lc3RpbmdMZXZlbDogbmVzdGluZ0xldmVsLFxuICAgICAgaW5kZXg6IGNvbnRhaW5lci5pbmRleE9mKHJ1bGUpICsgMSAvLyBXZSBkb24ndCBuZWVkIHRoZSBwYXJlbnQgbmFtZSB0byBiZSBzZXQgb3B0aW9ucyBmb3IgY2hsaWQuXG5cbiAgICB9KTtcblxuICAgIGRlbGV0ZSBvcHRpb25zLm5hbWU7XG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH1cblxuICBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSwgc2hlZXQpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG4gICAgdmFyIHN0eWxlUnVsZSA9IHJ1bGU7XG4gICAgdmFyIGNvbnRhaW5lciA9IHN0eWxlUnVsZS5vcHRpb25zLnBhcmVudDtcbiAgICB2YXIgb3B0aW9ucztcbiAgICB2YXIgcmVwbGFjZVJlZjtcblxuICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgIHZhciBpc05lc3RlZCA9IHByb3AuaW5kZXhPZignJicpICE9PSAtMTtcbiAgICAgIHZhciBpc05lc3RlZENvbmRpdGlvbmFsID0gcHJvcFswXSA9PT0gJ0AnO1xuICAgICAgaWYgKCFpc05lc3RlZCAmJiAhaXNOZXN0ZWRDb25kaXRpb25hbCkgY29udGludWU7XG4gICAgICBvcHRpb25zID0gZ2V0T3B0aW9ucyhzdHlsZVJ1bGUsIGNvbnRhaW5lciwgb3B0aW9ucyk7XG5cbiAgICAgIGlmIChpc05lc3RlZCkge1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSByZXBsYWNlUGFyZW50UmVmcyhwcm9wLCBzdHlsZVJ1bGUuc2VsZWN0b3IpOyAvLyBMYXppbHkgY3JlYXRlIHRoZSByZWYgcmVwbGFjZXIgZnVuY3Rpb24ganVzdCBvbmNlIGZvclxuICAgICAgICAvLyBhbGwgbmVzdGVkIHJ1bGVzIHdpdGhpbiB0aGUgc2hlZXQuXG5cbiAgICAgICAgaWYgKCFyZXBsYWNlUmVmKSByZXBsYWNlUmVmID0gZ2V0UmVwbGFjZVJlZihjb250YWluZXIsIHNoZWV0KTsgLy8gUmVwbGFjZSBhbGwgJHJlZnMuXG5cbiAgICAgICAgc2VsZWN0b3IgPSBzZWxlY3Rvci5yZXBsYWNlKHJlZlJlZ0V4cCwgcmVwbGFjZVJlZik7XG4gICAgICAgIGNvbnRhaW5lci5hZGRSdWxlKHNlbGVjdG9yLCBzdHlsZVtwcm9wXSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgICAgICBzZWxlY3Rvcjogc2VsZWN0b3JcbiAgICAgICAgfSkpO1xuICAgICAgfSBlbHNlIGlmIChpc05lc3RlZENvbmRpdGlvbmFsKSB7XG4gICAgICAgIC8vIFBsYWNlIGNvbmRpdGlvbmFsIHJpZ2h0IGFmdGVyIHRoZSBwYXJlbnQgcnVsZSB0byBlbnN1cmUgcmlnaHQgb3JkZXJpbmcuXG4gICAgICAgIGNvbnRhaW5lci5hZGRSdWxlKHByb3AsIHt9LCBvcHRpb25zKSAvLyBGbG93IGV4cGVjdHMgbW9yZSBvcHRpb25zIGJ1dCB0aGV5IGFyZW4ndCByZXF1aXJlZFxuICAgICAgICAvLyBBbmQgZmxvdyBkb2Vzbid0IGtub3cgdGhpcyB3aWxsIGFsd2F5cyBiZSBhIFN0eWxlUnVsZSB3aGljaCBoYXMgdGhlIGFkZFJ1bGUgbWV0aG9kXG4gICAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgICAgLmFkZFJ1bGUoc3R5bGVSdWxlLmtleSwgc3R5bGVbcHJvcF0sIHtcbiAgICAgICAgICBzZWxlY3Rvcjogc3R5bGVSdWxlLnNlbGVjdG9yXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBkZWxldGUgc3R5bGVbcHJvcF07XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvblByb2Nlc3NTdHlsZTogb25Qcm9jZXNzU3R5bGVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQganNzTmVzdGVkO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tdmFyLCBwcmVmZXItdGVtcGxhdGUgKi9cbnZhciB1cHBlcmNhc2VQYXR0ZXJuID0gL1tBLVpdL2dcbnZhciBtc1BhdHRlcm4gPSAvXm1zLS9cbnZhciBjYWNoZSA9IHt9XG5cbmZ1bmN0aW9uIHRvSHlwaGVuTG93ZXIobWF0Y2gpIHtcbiAgcmV0dXJuICctJyArIG1hdGNoLnRvTG93ZXJDYXNlKClcbn1cblxuZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKG5hbWUpIHtcbiAgaWYgKGNhY2hlLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgcmV0dXJuIGNhY2hlW25hbWVdXG4gIH1cblxuICB2YXIgaE5hbWUgPSBuYW1lLnJlcGxhY2UodXBwZXJjYXNlUGF0dGVybiwgdG9IeXBoZW5Mb3dlcilcbiAgcmV0dXJuIChjYWNoZVtuYW1lXSA9IG1zUGF0dGVybi50ZXN0KGhOYW1lKSA/ICctJyArIGhOYW1lIDogaE5hbWUpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGh5cGhlbmF0ZVN0eWxlTmFtZVxuIiwiaW1wb3J0IGh5cGhlbmF0ZSBmcm9tICdoeXBoZW5hdGUtc3R5bGUtbmFtZSc7XG5cbi8qKlxuICogQ29udmVydCBjYW1lbCBjYXNlZCBwcm9wZXJ0eSBuYW1lcyB0byBkYXNoIHNlcGFyYXRlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc3R5bGVcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiBjb252ZXJ0Q2FzZShzdHlsZSkge1xuICB2YXIgY29udmVydGVkID0ge307XG5cbiAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgIHZhciBrZXkgPSBwcm9wLmluZGV4T2YoJy0tJykgPT09IDAgPyBwcm9wIDogaHlwaGVuYXRlKHByb3ApO1xuICAgIGNvbnZlcnRlZFtrZXldID0gc3R5bGVbcHJvcF07XG4gIH1cblxuICBpZiAoc3R5bGUuZmFsbGJhY2tzKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc3R5bGUuZmFsbGJhY2tzKSkgY29udmVydGVkLmZhbGxiYWNrcyA9IHN0eWxlLmZhbGxiYWNrcy5tYXAoY29udmVydENhc2UpO2Vsc2UgY29udmVydGVkLmZhbGxiYWNrcyA9IGNvbnZlcnRDYXNlKHN0eWxlLmZhbGxiYWNrcyk7XG4gIH1cblxuICByZXR1cm4gY29udmVydGVkO1xufVxuLyoqXG4gKiBBbGxvdyBjYW1lbCBjYXNlZCBwcm9wZXJ0eSBuYW1lcyBieSBjb252ZXJ0aW5nIHRoZW0gYmFjayB0byBkYXNoZXJpemVkLlxuICpcbiAqIEBwYXJhbSB7UnVsZX0gcnVsZVxuICovXG5cblxuZnVuY3Rpb24gY2FtZWxDYXNlKCkge1xuICBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN0eWxlKSkge1xuICAgICAgLy8gSGFuZGxlIHJ1bGVzIGxpa2UgQGZvbnQtZmFjZSwgd2hpY2ggY2FuIGhhdmUgbXVsdGlwbGUgc3R5bGVzIGluIGFuIGFycmF5XG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgc3R5bGUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHN0eWxlW2luZGV4XSA9IGNvbnZlcnRDYXNlKHN0eWxlW2luZGV4XSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHlsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29udmVydENhc2Uoc3R5bGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25DaGFuZ2VWYWx1ZSh2YWx1ZSwgcHJvcCwgcnVsZSkge1xuICAgIGlmIChwcm9wLmluZGV4T2YoJy0tJykgPT09IDApIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICB2YXIgaHlwaGVuYXRlZFByb3AgPSBoeXBoZW5hdGUocHJvcCk7IC8vIFRoZXJlIHdhcyBubyBjYW1lbCBjYXNlIGluIHBsYWNlXG5cbiAgICBpZiAocHJvcCA9PT0gaHlwaGVuYXRlZFByb3ApIHJldHVybiB2YWx1ZTtcbiAgICBydWxlLnByb3AoaHlwaGVuYXRlZFByb3AsIHZhbHVlKTsgLy8gQ29yZSB3aWxsIGlnbm9yZSB0aGF0IHByb3BlcnR5IHZhbHVlIHdlIHNldCB0aGUgcHJvcGVyIG9uZSBhYm92ZS5cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvblByb2Nlc3NTdHlsZTogb25Qcm9jZXNzU3R5bGUsXG4gICAgb25DaGFuZ2VWYWx1ZTogb25DaGFuZ2VWYWx1ZVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjYW1lbENhc2U7XG4iLCJpbXBvcnQgeyBoYXNDU1NUT01TdXBwb3J0IH0gZnJvbSAnanNzJztcblxudmFyIHB4ID0gaGFzQ1NTVE9NU3VwcG9ydCAmJiBDU1MgPyBDU1MucHggOiAncHgnO1xudmFyIG1zID0gaGFzQ1NTVE9NU3VwcG9ydCAmJiBDU1MgPyBDU1MubXMgOiAnbXMnO1xudmFyIHBlcmNlbnQgPSBoYXNDU1NUT01TdXBwb3J0ICYmIENTUyA/IENTUy5wZXJjZW50IDogJyUnO1xuLyoqXG4gKiBHZW5lcmF0ZWQganNzLXBsdWdpbi1kZWZhdWx0LXVuaXQgQ1NTIHByb3BlcnR5IHVuaXRzXG4gKlxuICogQHR5cGUgb2JqZWN0XG4gKi9cblxudmFyIGRlZmF1bHRVbml0cyA9IHtcbiAgLy8gQW5pbWF0aW9uIHByb3BlcnRpZXNcbiAgJ2FuaW1hdGlvbi1kZWxheSc6IG1zLFxuICAnYW5pbWF0aW9uLWR1cmF0aW9uJzogbXMsXG4gIC8vIEJhY2tncm91bmQgcHJvcGVydGllc1xuICAnYmFja2dyb3VuZC1wb3NpdGlvbic6IHB4LFxuICAnYmFja2dyb3VuZC1wb3NpdGlvbi14JzogcHgsXG4gICdiYWNrZ3JvdW5kLXBvc2l0aW9uLXknOiBweCxcbiAgJ2JhY2tncm91bmQtc2l6ZSc6IHB4LFxuICAvLyBCb3JkZXIgUHJvcGVydGllc1xuICBib3JkZXI6IHB4LFxuICAnYm9yZGVyLWJvdHRvbSc6IHB4LFxuICAnYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci1ib3R0b20td2lkdGgnOiBweCxcbiAgJ2JvcmRlci1sZWZ0JzogcHgsXG4gICdib3JkZXItbGVmdC13aWR0aCc6IHB4LFxuICAnYm9yZGVyLXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLXJpZ2h0JzogcHgsXG4gICdib3JkZXItcmlnaHQtd2lkdGgnOiBweCxcbiAgJ2JvcmRlci10b3AnOiBweCxcbiAgJ2JvcmRlci10b3AtbGVmdC1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci10b3AtcmlnaHQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItdG9wLXdpZHRoJzogcHgsXG4gICdib3JkZXItd2lkdGgnOiBweCxcbiAgLy8gTWFyZ2luIHByb3BlcnRpZXNcbiAgbWFyZ2luOiBweCxcbiAgJ21hcmdpbi1ib3R0b20nOiBweCxcbiAgJ21hcmdpbi1sZWZ0JzogcHgsXG4gICdtYXJnaW4tcmlnaHQnOiBweCxcbiAgJ21hcmdpbi10b3AnOiBweCxcbiAgLy8gUGFkZGluZyBwcm9wZXJ0aWVzXG4gIHBhZGRpbmc6IHB4LFxuICAncGFkZGluZy1ib3R0b20nOiBweCxcbiAgJ3BhZGRpbmctbGVmdCc6IHB4LFxuICAncGFkZGluZy1yaWdodCc6IHB4LFxuICAncGFkZGluZy10b3AnOiBweCxcbiAgLy8gTWFzayBwcm9wZXJ0aWVzXG4gICdtYXNrLXBvc2l0aW9uLXgnOiBweCxcbiAgJ21hc2stcG9zaXRpb24teSc6IHB4LFxuICAnbWFzay1zaXplJzogcHgsXG4gIC8vIFdpZHRoIGFuZCBoZWlnaHQgcHJvcGVydGllc1xuICBoZWlnaHQ6IHB4LFxuICB3aWR0aDogcHgsXG4gICdtaW4taGVpZ2h0JzogcHgsXG4gICdtYXgtaGVpZ2h0JzogcHgsXG4gICdtaW4td2lkdGgnOiBweCxcbiAgJ21heC13aWR0aCc6IHB4LFxuICAvLyBQb3NpdGlvbiBwcm9wZXJ0aWVzXG4gIGJvdHRvbTogcHgsXG4gIGxlZnQ6IHB4LFxuICB0b3A6IHB4LFxuICByaWdodDogcHgsXG4gIC8vIFNoYWRvdyBwcm9wZXJ0aWVzXG4gICdib3gtc2hhZG93JzogcHgsXG4gICd0ZXh0LXNoYWRvdyc6IHB4LFxuICAvLyBDb2x1bW4gcHJvcGVydGllc1xuICAnY29sdW1uLWdhcCc6IHB4LFxuICAnY29sdW1uLXJ1bGUnOiBweCxcbiAgJ2NvbHVtbi1ydWxlLXdpZHRoJzogcHgsXG4gICdjb2x1bW4td2lkdGgnOiBweCxcbiAgLy8gRm9udCBhbmQgdGV4dCBwcm9wZXJ0aWVzXG4gICdmb250LXNpemUnOiBweCxcbiAgJ2ZvbnQtc2l6ZS1kZWx0YSc6IHB4LFxuICAnbGV0dGVyLXNwYWNpbmcnOiBweCxcbiAgJ3RleHQtaW5kZW50JzogcHgsXG4gICd0ZXh0LXN0cm9rZSc6IHB4LFxuICAndGV4dC1zdHJva2Utd2lkdGgnOiBweCxcbiAgJ3dvcmQtc3BhY2luZyc6IHB4LFxuICAvLyBNb3Rpb24gcHJvcGVydGllc1xuICBtb3Rpb246IHB4LFxuICAnbW90aW9uLW9mZnNldCc6IHB4LFxuICAvLyBPdXRsaW5lIHByb3BlcnRpZXNcbiAgb3V0bGluZTogcHgsXG4gICdvdXRsaW5lLW9mZnNldCc6IHB4LFxuICAnb3V0bGluZS13aWR0aCc6IHB4LFxuICAvLyBQZXJzcGVjdGl2ZSBwcm9wZXJ0aWVzXG4gIHBlcnNwZWN0aXZlOiBweCxcbiAgJ3BlcnNwZWN0aXZlLW9yaWdpbi14JzogcGVyY2VudCxcbiAgJ3BlcnNwZWN0aXZlLW9yaWdpbi15JzogcGVyY2VudCxcbiAgLy8gVHJhbnNmb3JtIHByb3BlcnRpZXNcbiAgJ3RyYW5zZm9ybS1vcmlnaW4nOiBwZXJjZW50LFxuICAndHJhbnNmb3JtLW9yaWdpbi14JzogcGVyY2VudCxcbiAgJ3RyYW5zZm9ybS1vcmlnaW4teSc6IHBlcmNlbnQsXG4gICd0cmFuc2Zvcm0tb3JpZ2luLXonOiBwZXJjZW50LFxuICAvLyBUcmFuc2l0aW9uIHByb3BlcnRpZXNcbiAgJ3RyYW5zaXRpb24tZGVsYXknOiBtcyxcbiAgJ3RyYW5zaXRpb24tZHVyYXRpb24nOiBtcyxcbiAgLy8gQWxpZ25tZW50IHByb3BlcnRpZXNcbiAgJ3ZlcnRpY2FsLWFsaWduJzogcHgsXG4gICdmbGV4LWJhc2lzJzogcHgsXG4gIC8vIFNvbWUgcmFuZG9tIHByb3BlcnRpZXNcbiAgJ3NoYXBlLW1hcmdpbic6IHB4LFxuICBzaXplOiBweCxcbiAgLy8gR3JpZCBwcm9wZXJ0aWVzXG4gIGdyaWQ6IHB4LFxuICAnZ3JpZC1nYXAnOiBweCxcbiAgJ2dyaWQtcm93LWdhcCc6IHB4LFxuICAnZ3JpZC1jb2x1bW4tZ2FwJzogcHgsXG4gICdncmlkLXRlbXBsYXRlLXJvd3MnOiBweCxcbiAgJ2dyaWQtdGVtcGxhdGUtY29sdW1ucyc6IHB4LFxuICAnZ3JpZC1hdXRvLXJvd3MnOiBweCxcbiAgJ2dyaWQtYXV0by1jb2x1bW5zJzogcHgsXG4gIC8vIE5vdCBleGlzdGluZyBwcm9wZXJ0aWVzLlxuICAvLyBVc2VkIHRvIGF2b2lkIGlzc3VlcyB3aXRoIGpzcy1wbHVnaW4tZXhwYW5kIGludGVncmF0aW9uLlxuICAnYm94LXNoYWRvdy14JzogcHgsXG4gICdib3gtc2hhZG93LXknOiBweCxcbiAgJ2JveC1zaGFkb3ctYmx1cic6IHB4LFxuICAnYm94LXNoYWRvdy1zcHJlYWQnOiBweCxcbiAgJ2ZvbnQtbGluZS1oZWlnaHQnOiBweCxcbiAgJ3RleHQtc2hhZG93LXgnOiBweCxcbiAgJ3RleHQtc2hhZG93LXknOiBweCxcbiAgJ3RleHQtc2hhZG93LWJsdXInOiBweFxufTtcblxuLyoqXG4gKiBDbG9uZXMgdGhlIG9iamVjdCBhbmQgYWRkcyBhIGNhbWVsIGNhc2VkIHByb3BlcnR5IHZlcnNpb24uXG4gKi9cbmZ1bmN0aW9uIGFkZENhbWVsQ2FzZWRWZXJzaW9uKG9iaikge1xuICB2YXIgcmVnRXhwID0gLygtW2Etel0pL2c7XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHN0cikge1xuICAgIHJldHVybiBzdHJbMV0udG9VcHBlckNhc2UoKTtcbiAgfTtcblxuICB2YXIgbmV3T2JqID0ge307XG5cbiAgZm9yICh2YXIgX2tleSBpbiBvYmopIHtcbiAgICBuZXdPYmpbX2tleV0gPSBvYmpbX2tleV07XG4gICAgbmV3T2JqW19rZXkucmVwbGFjZShyZWdFeHAsIHJlcGxhY2UpXSA9IG9ialtfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBuZXdPYmo7XG59XG5cbnZhciB1bml0cyA9IGFkZENhbWVsQ2FzZWRWZXJzaW9uKGRlZmF1bHRVbml0cyk7XG4vKipcbiAqIFJlY3Vyc2l2ZSBkZWVwIHN0eWxlIHBhc3NpbmcgZnVuY3Rpb25cbiAqL1xuXG5mdW5jdGlvbiBpdGVyYXRlKHByb3AsIHZhbHVlLCBvcHRpb25zKSB7XG4gIGlmICghdmFsdWUpIHJldHVybiB2YWx1ZTtcblxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWx1ZVtpXSA9IGl0ZXJhdGUocHJvcCwgdmFsdWVbaV0sIG9wdGlvbnMpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKHByb3AgPT09ICdmYWxsYmFja3MnKSB7XG4gICAgICBmb3IgKHZhciBpbm5lclByb3AgaW4gdmFsdWUpIHtcbiAgICAgICAgdmFsdWVbaW5uZXJQcm9wXSA9IGl0ZXJhdGUoaW5uZXJQcm9wLCB2YWx1ZVtpbm5lclByb3BdLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgX2lubmVyUHJvcCBpbiB2YWx1ZSkge1xuICAgICAgICB2YWx1ZVtfaW5uZXJQcm9wXSA9IGl0ZXJhdGUocHJvcCArIFwiLVwiICsgX2lubmVyUHJvcCwgdmFsdWVbX2lubmVyUHJvcF0sIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKG9wdGlvbnNbcHJvcF0pIHtcbiAgICAgIHJldHVybiBcIlwiICsgdmFsdWUgKyBvcHRpb25zW3Byb3BdO1xuICAgIH1cblxuICAgIGlmICh1bml0c1twcm9wXSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB1bml0c1twcm9wXSA9PT0gJ2Z1bmN0aW9uJyA/IHVuaXRzW3Byb3BdKHZhbHVlKS50b1N0cmluZygpIDogXCJcIiArIHZhbHVlICsgdW5pdHNbcHJvcF07XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG4vKipcbiAqIEFkZCB1bml0IHRvIG51bWVyaWMgdmFsdWVzLlxuICovXG5cblxuZnVuY3Rpb24gZGVmYXVsdFVuaXQob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIGNhbWVsQ2FzZWRPcHRpb25zID0gYWRkQ2FtZWxDYXNlZFZlcnNpb24ob3B0aW9ucyk7XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICBzdHlsZVtwcm9wXSA9IGl0ZXJhdGUocHJvcCwgc3R5bGVbcHJvcF0sIGNhbWVsQ2FzZWRPcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGU7XG4gIH1cblxuICBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbHVlLCBwcm9wKSB7XG4gICAgcmV0dXJuIGl0ZXJhdGUocHJvcCwgdmFsdWUsIGNhbWVsQ2FzZWRPcHRpb25zKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlLFxuICAgIG9uQ2hhbmdlVmFsdWU6IG9uQ2hhbmdlVmFsdWVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdFVuaXQ7XG4iLCJpbXBvcnQgYXJyYXlXaXRob3V0SG9sZXMgZnJvbSBcIi4vYXJyYXlXaXRob3V0SG9sZXNcIjtcbmltcG9ydCBpdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vaXRlcmFibGVUb0FycmF5XCI7XG5pbXBvcnQgbm9uSXRlcmFibGVTcHJlYWQgZnJvbSBcIi4vbm9uSXRlcmFibGVTcHJlYWRcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIGFycmF5V2l0aG91dEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5KGFycikgfHwgbm9uSXRlcmFibGVTcHJlYWQoKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgYXJyMltpXSA9IGFycltpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyMjtcbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpO1xufSIsImltcG9ydCBpc0luQnJvd3NlciBmcm9tICdpcy1pbi1icm93c2VyJztcbmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXknO1xuXG4vLyBFeHBvcnQgamF2YXNjcmlwdCBzdHlsZSBhbmQgY3NzIHN0eWxlIHZlbmRvciBwcmVmaXhlcy5cbnZhciBqcyA9ICcnO1xudmFyIGNzcyA9ICcnO1xudmFyIHZlbmRvciA9ICcnO1xudmFyIGJyb3dzZXIgPSAnJztcbnZhciBpc1RvdWNoID0gaXNJbkJyb3dzZXIgJiYgJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OyAvLyBXZSBzaG91bGQgbm90IGRvIGFueXRoaW5nIGlmIHJlcXVpcmVkIHNlcnZlcnNpZGUuXG5cbmlmIChpc0luQnJvd3Nlcikge1xuICAvLyBPcmRlciBtYXR0ZXJzLiBXZSBuZWVkIHRvIGNoZWNrIFdlYmtpdCB0aGUgbGFzdCBvbmUgYmVjYXVzZVxuICAvLyBvdGhlciB2ZW5kb3JzIHVzZSB0byBhZGQgV2Via2l0IHByZWZpeGVzIHRvIHNvbWUgcHJvcGVydGllc1xuICB2YXIganNDc3NNYXAgPSB7XG4gICAgTW96OiAnLW1vei0nLFxuICAgIG1zOiAnLW1zLScsXG4gICAgTzogJy1vLScsXG4gICAgV2Via2l0OiAnLXdlYmtpdC0nXG4gIH07XG5cbiAgdmFyIF9kb2N1bWVudCRjcmVhdGVFbGVtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKSxcbiAgICAgIHN0eWxlID0gX2RvY3VtZW50JGNyZWF0ZUVsZW1lLnN0eWxlO1xuXG4gIHZhciB0ZXN0UHJvcCA9ICdUcmFuc2Zvcm0nO1xuXG4gIGZvciAodmFyIGtleSBpbiBqc0Nzc01hcCkge1xuICAgIGlmIChrZXkgKyB0ZXN0UHJvcCBpbiBzdHlsZSkge1xuICAgICAganMgPSBrZXk7XG4gICAgICBjc3MgPSBqc0Nzc01hcFtrZXldO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9IC8vIENvcnJlY3RseSBkZXRlY3QgdGhlIEVkZ2UgYnJvd3Nlci5cblxuXG4gIGlmIChqcyA9PT0gJ1dlYmtpdCcgJiYgJ21zSHlwaGVucycgaW4gc3R5bGUpIHtcbiAgICBqcyA9ICdtcyc7XG4gICAgY3NzID0ganNDc3NNYXAubXM7XG4gICAgYnJvd3NlciA9ICdlZGdlJztcbiAgfSAvLyBDb3JyZWN0bHkgZGV0ZWN0IHRoZSBTYWZhcmkgYnJvd3Nlci5cblxuXG4gIGlmIChqcyA9PT0gJ1dlYmtpdCcgJiYgJy1hcHBsZS10cmFpbGluZy13b3JkJyBpbiBzdHlsZSkge1xuICAgIHZlbmRvciA9ICdhcHBsZSc7XG4gIH1cbn1cbi8qKlxuICogVmVuZG9yIHByZWZpeCBzdHJpbmcgZm9yIHRoZSBjdXJyZW50IGJyb3dzZXIuXG4gKlxuICogQHR5cGUge3tqczogU3RyaW5nLCBjc3M6IFN0cmluZywgdmVuZG9yOiBTdHJpbmcsIGJyb3dzZXI6IFN0cmluZ319XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblxudmFyIHByZWZpeCA9IHtcbiAganM6IGpzLFxuICBjc3M6IGNzcyxcbiAgdmVuZG9yOiB2ZW5kb3IsXG4gIGJyb3dzZXI6IGJyb3dzZXIsXG4gIGlzVG91Y2g6IGlzVG91Y2hcbn07XG5cbi8qKlxuICogVGVzdCBpZiBhIGtleWZyYW1lIGF0LXJ1bGUgc2hvdWxkIGJlIHByZWZpeGVkIG9yIG5vdFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB2ZW5kb3IgcHJlZml4IHN0cmluZyBmb3IgdGhlIGN1cnJlbnQgYnJvd3Nlci5cbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydGVkS2V5ZnJhbWVzKGtleSkge1xuICAvLyBLZXlmcmFtZXMgaXMgYWxyZWFkeSBwcmVmaXhlZC4gZS5nLiBrZXkgPSAnQC13ZWJraXQta2V5ZnJhbWVzIGEnXG4gIGlmIChrZXlbMV0gPT09ICctJykgcmV0dXJuIGtleTsgLy8gTm8gbmVlZCB0byBwcmVmaXggSUUvRWRnZS4gT2xkZXIgYnJvd3NlcnMgd2lsbCBpZ25vcmUgdW5zdXBwb3J0ZWQgcnVsZXMuXG4gIC8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1rZXlmcmFtZXNcblxuICBpZiAocHJlZml4LmpzID09PSAnbXMnKSByZXR1cm4ga2V5O1xuICByZXR1cm4gXCJAXCIgKyBwcmVmaXguY3NzICsgXCJrZXlmcmFtZXNcIiArIGtleS5zdWJzdHIoMTApO1xufVxuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9YXBwZWFyYW5jZVxuXG52YXIgYXBwZWFyZW5jZSA9IHtcbiAgbm9QcmVmaWxsOiBbJ2FwcGVhcmFuY2UnXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcCAhPT0gJ2FwcGVhcmFuY2UnKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ21zJykgcmV0dXJuIFwiLXdlYmtpdC1cIiArIHByb3A7XG4gICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9Y29sb3ItYWRqdXN0XG5cbnZhciBjb2xvckFkanVzdCA9IHtcbiAgbm9QcmVmaWxsOiBbJ2NvbG9yLWFkanVzdCddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAnY29sb3ItYWRqdXN0JykgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChwcmVmaXguanMgPT09ICdXZWJraXQnKSByZXR1cm4gcHJlZml4LmNzcyArIFwicHJpbnQtXCIgKyBwcm9wO1xuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG52YXIgcmVnRXhwID0gL1stXFxzXSsoLik/L2c7XG4vKipcbiAqIFJlcGxhY2VzIHRoZSBsZXR0ZXIgd2l0aCB0aGUgY2FwaXRhbCBsZXR0ZXJcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWF0Y2hcbiAqIEBwYXJhbSB7U3RyaW5nfSBjXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiB0b1VwcGVyKG1hdGNoLCBjKSB7XG4gIHJldHVybiBjID8gYy50b1VwcGVyQ2FzZSgpIDogJyc7XG59XG4vKipcbiAqIENvbnZlcnQgZGFzaCBzZXBhcmF0ZWQgc3RyaW5ncyB0byBjYW1lbC1jYXNlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5cbmZ1bmN0aW9uIGNhbWVsaXplKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UocmVnRXhwLCB0b1VwcGVyKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGRhc2ggc2VwYXJhdGVkIHN0cmluZ3MgdG8gcGFzY2FsIGNhc2VkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhc2NhbGl6ZShzdHIpIHtcbiAgcmV0dXJuIGNhbWVsaXplKFwiLVwiICsgc3RyKTtcbn1cblxuLy8gYnV0IHdlIGNhbiB1c2UgYSBsb25naGFuZCBwcm9wZXJ0eSBpbnN0ZWFkLlxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPW1hc2tcblxudmFyIG1hc2sgPSB7XG4gIG5vUHJlZmlsbDogWydtYXNrJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIGlmICghL15tYXNrLy50ZXN0KHByb3ApKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnV2Via2l0Jykge1xuICAgICAgdmFyIGxvbmdoYW5kID0gJ21hc2staW1hZ2UnO1xuXG4gICAgICBpZiAoY2FtZWxpemUobG9uZ2hhbmQpIGluIHN0eWxlKSB7XG4gICAgICAgIHJldHVybiBwcm9wO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJlZml4LmpzICsgcGFzY2FsaXplKGxvbmdoYW5kKSBpbiBzdHlsZSkge1xuICAgICAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD10ZXh0LW9yaWVudGF0aW9uXG5cbnZhciB0ZXh0T3JpZW50YXRpb24gPSB7XG4gIG5vUHJlZmlsbDogWyd0ZXh0LW9yaWVudGF0aW9uJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICd0ZXh0LW9yaWVudGF0aW9uJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC52ZW5kb3IgPT09ICdhcHBsZScgJiYgIXByZWZpeC5pc1RvdWNoKSB7XG4gICAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD10cmFuc2Zvcm1cblxudmFyIHRyYW5zZm9ybSA9IHtcbiAgbm9QcmVmaWxsOiBbJ3RyYW5zZm9ybSddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAocHJvcCAhPT0gJ3RyYW5zZm9ybScpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChvcHRpb25zLnRyYW5zZm9ybSkge1xuICAgICAgcmV0dXJuIHByb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9dHJhbnNpdGlvblxuXG52YXIgdHJhbnNpdGlvbiA9IHtcbiAgbm9QcmVmaWxsOiBbJ3RyYW5zaXRpb24nXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKHByb3AgIT09ICd0cmFuc2l0aW9uJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKG9wdGlvbnMudHJhbnNpdGlvbikge1xuICAgICAgcmV0dXJuIHByb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9d3JpdGluZy1tb2RlXG5cbnZhciB3cml0aW5nTW9kZSA9IHtcbiAgbm9QcmVmaWxsOiBbJ3dyaXRpbmctbW9kZSddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAnd3JpdGluZy1tb2RlJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ1dlYmtpdCcgfHwgcHJlZml4LmpzID09PSAnbXMnKSB7XG4gICAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD11c2VyLXNlbGVjdFxuXG52YXIgdXNlclNlbGVjdCA9IHtcbiAgbm9QcmVmaWxsOiBbJ3VzZXItc2VsZWN0J10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICd1c2VyLXNlbGVjdCcpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdNb3onIHx8IHByZWZpeC5qcyA9PT0gJ21zJyB8fCBwcmVmaXgudmVuZG9yID09PSAnYXBwbGUnKSB7XG4gICAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1tdWx0aWNvbHVtblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3Bvc3Rjc3MvYXV0b3ByZWZpeGVyL2lzc3Vlcy80OTFcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3N0Y3NzL2F1dG9wcmVmaXhlci9pc3N1ZXMvMTc3XG5cbnZhciBicmVha1Byb3BzT2xkID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICBpZiAoIS9eYnJlYWstLy50ZXN0KHByb3ApKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnV2Via2l0Jykge1xuICAgICAgdmFyIGpzUHJvcCA9IFwiV2Via2l0Q29sdW1uXCIgKyBwYXNjYWxpemUocHJvcCk7XG4gICAgICByZXR1cm4ganNQcm9wIGluIHN0eWxlID8gcHJlZml4LmNzcyArIFwiY29sdW1uLVwiICsgcHJvcCA6IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChwcmVmaXguanMgPT09ICdNb3onKSB7XG4gICAgICB2YXIgX2pzUHJvcCA9IFwicGFnZVwiICsgcGFzY2FsaXplKHByb3ApO1xuXG4gICAgICByZXR1cm4gX2pzUHJvcCBpbiBzdHlsZSA/IFwicGFnZS1cIiArIHByb3AgOiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbi8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcG9zdGNzcy9hdXRvcHJlZml4ZXIvaXNzdWVzLzMyNC5cblxudmFyIGlubGluZUxvZ2ljYWxPbGQgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIGlmICghL14oYm9yZGVyfG1hcmdpbnxwYWRkaW5nKS1pbmxpbmUvLnRlc3QocHJvcCkpIHJldHVybiBmYWxzZTtcbiAgICBpZiAocHJlZml4LmpzID09PSAnTW96JykgcmV0dXJuIHByb3A7XG4gICAgdmFyIG5ld1Byb3AgPSBwcm9wLnJlcGxhY2UoJy1pbmxpbmUnLCAnJyk7XG4gICAgcmV0dXJuIHByZWZpeC5qcyArIHBhc2NhbGl6ZShuZXdQcm9wKSBpbiBzdHlsZSA/IHByZWZpeC5jc3MgKyBuZXdQcm9wIDogZmFsc2U7XG4gIH1cbn07XG5cbi8vIENhbWVsaXphdGlvbiBpcyByZXF1aXJlZCBiZWNhdXNlIHdlIGNhbid0IHRlc3QgdXNpbmcuXG4vLyBDU1Mgc3ludGF4IGZvciBlLmcuIGluIEZGLlxuXG52YXIgdW5wcmVmaXhlZCA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgcmV0dXJuIGNhbWVsaXplKHByb3ApIGluIHN0eWxlID8gcHJvcCA6IGZhbHNlO1xuICB9XG59O1xuXG52YXIgcHJlZml4ZWQgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIHZhciBwYXNjYWxpemVkID0gcGFzY2FsaXplKHByb3ApOyAvLyBSZXR1cm4gY3VzdG9tIENTUyB2YXJpYWJsZSB3aXRob3V0IHByZWZpeGluZy5cblxuICAgIGlmIChwcm9wWzBdID09PSAnLScpIHJldHVybiBwcm9wOyAvLyBSZXR1cm4gYWxyZWFkeSBwcmVmaXhlZCB2YWx1ZSB3aXRob3V0IHByZWZpeGluZy5cblxuICAgIGlmIChwcm9wWzBdID09PSAnLScgJiYgcHJvcFsxXSA9PT0gJy0nKSByZXR1cm4gcHJvcDtcbiAgICBpZiAocHJlZml4LmpzICsgcGFzY2FsaXplZCBpbiBzdHlsZSkgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wOyAvLyBUcnkgd2Via2l0IGZhbGxiYWNrLlxuXG4gICAgaWYgKHByZWZpeC5qcyAhPT0gJ1dlYmtpdCcgJiYgXCJXZWJraXRcIiArIHBhc2NhbGl6ZWQgaW4gc3R5bGUpIHJldHVybiBcIi13ZWJraXQtXCIgKyBwcm9wO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXNjcm9sbC1zbmFwXG5cbnZhciBzY3JvbGxTbmFwID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wLnN1YnN0cmluZygwLCAxMSkgIT09ICdzY3JvbGwtc25hcCcpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdtcycpIHtcbiAgICAgIHJldHVybiBcIlwiICsgcHJlZml4LmNzcyArIHByb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1vdmVyc2Nyb2xsLWJlaGF2aW9yXG5cbnZhciBvdmVyc2Nyb2xsQmVoYXZpb3IgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICdvdmVyc2Nyb2xsLWJlaGF2aW9yJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ21zJykge1xuICAgICAgcmV0dXJuIHByZWZpeC5jc3MgKyBcInNjcm9sbC1jaGFpbmluZ1wiO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG52YXIgcHJvcE1hcCA9IHtcbiAgJ2ZsZXgtZ3Jvdyc6ICdmbGV4LXBvc2l0aXZlJyxcbiAgJ2ZsZXgtc2hyaW5rJzogJ2ZsZXgtbmVnYXRpdmUnLFxuICAnZmxleC1iYXNpcyc6ICdmbGV4LXByZWZlcnJlZC1zaXplJyxcbiAgJ2p1c3RpZnktY29udGVudCc6ICdmbGV4LXBhY2snLFxuICBvcmRlcjogJ2ZsZXgtb3JkZXInLFxuICAnYWxpZ24taXRlbXMnOiAnZmxleC1hbGlnbicsXG4gICdhbGlnbi1jb250ZW50JzogJ2ZsZXgtbGluZS1wYWNrJyAvLyAnYWxpZ24tc2VsZicgaXMgaGFuZGxlZCBieSAnYWxpZ24tc2VsZicgcGx1Z2luLlxuXG59OyAvLyBTdXBwb3J0IG9sZCBmbGV4IHNwZWMgZnJvbSAyMDEyLlxuXG52YXIgZmxleDIwMTIgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIHZhciBuZXdQcm9wID0gcHJvcE1hcFtwcm9wXTtcbiAgICBpZiAoIW5ld1Byb3ApIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gcHJlZml4LmpzICsgcGFzY2FsaXplKG5ld1Byb3ApIGluIHN0eWxlID8gcHJlZml4LmNzcyArIG5ld1Byb3AgOiBmYWxzZTtcbiAgfVxufTtcblxudmFyIHByb3BNYXAkMSA9IHtcbiAgZmxleDogJ2JveC1mbGV4JyxcbiAgJ2ZsZXgtZ3Jvdyc6ICdib3gtZmxleCcsXG4gICdmbGV4LWRpcmVjdGlvbic6IFsnYm94LW9yaWVudCcsICdib3gtZGlyZWN0aW9uJ10sXG4gIG9yZGVyOiAnYm94LW9yZGluYWwtZ3JvdXAnLFxuICAnYWxpZ24taXRlbXMnOiAnYm94LWFsaWduJyxcbiAgJ2ZsZXgtZmxvdyc6IFsnYm94LW9yaWVudCcsICdib3gtZGlyZWN0aW9uJ10sXG4gICdqdXN0aWZ5LWNvbnRlbnQnOiAnYm94LXBhY2snXG59O1xudmFyIHByb3BLZXlzID0gT2JqZWN0LmtleXMocHJvcE1hcCQxKTtcblxudmFyIHByZWZpeENzcyA9IGZ1bmN0aW9uIHByZWZpeENzcyhwKSB7XG4gIHJldHVybiBwcmVmaXguY3NzICsgcDtcbn07IC8vIFN1cHBvcnQgb2xkIGZsZXggc3BlYyBmcm9tIDIwMDkuXG5cblxudmFyIGZsZXgyMDA5ID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUsIF9yZWYpIHtcbiAgICB2YXIgbXVsdGlwbGUgPSBfcmVmLm11bHRpcGxlO1xuXG4gICAgaWYgKHByb3BLZXlzLmluZGV4T2YocHJvcCkgPiAtMSkge1xuICAgICAgdmFyIG5ld1Byb3AgPSBwcm9wTWFwJDFbcHJvcF07XG5cbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShuZXdQcm9wKSkge1xuICAgICAgICByZXR1cm4gcHJlZml4LmpzICsgcGFzY2FsaXplKG5ld1Byb3ApIGluIHN0eWxlID8gcHJlZml4LmNzcyArIG5ld1Byb3AgOiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFtdWx0aXBsZSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld1Byb3AubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCEocHJlZml4LmpzICsgcGFzY2FsaXplKG5ld1Byb3BbMF0pIGluIHN0eWxlKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3UHJvcC5tYXAocHJlZml4Q3NzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbi8vIHBsdWdpbnMgPSBbXG4vLyAgIC4uLnBsdWdpbnMsXG4vLyAgICBicmVha1Byb3BzT2xkLFxuLy8gICAgaW5saW5lTG9naWNhbE9sZCxcbi8vICAgIHVucHJlZml4ZWQsXG4vLyAgICBwcmVmaXhlZCxcbi8vICAgIHNjcm9sbFNuYXAsXG4vLyAgICBmbGV4MjAxMixcbi8vICAgIGZsZXgyMDA5XG4vLyBdXG4vLyBQbHVnaW5zIHdpdGhvdXQgJ25vUHJlZmlsbCcgdmFsdWUsIGdvaW5nIGxhc3QuXG4vLyAnZmxleC0qJyBwbHVnaW5zIHNob3VsZCBiZSBhdCB0aGUgYm90dG9tLlxuLy8gJ2ZsZXgyMDA5JyBnb2luZyBhZnRlciAnZmxleDIwMTInLlxuLy8gJ3ByZWZpeGVkJyBnb2luZyBhZnRlciAndW5wcmVmaXhlZCdcblxudmFyIHBsdWdpbnMgPSBbYXBwZWFyZW5jZSwgY29sb3JBZGp1c3QsIG1hc2ssIHRleHRPcmllbnRhdGlvbiwgdHJhbnNmb3JtLCB0cmFuc2l0aW9uLCB3cml0aW5nTW9kZSwgdXNlclNlbGVjdCwgYnJlYWtQcm9wc09sZCwgaW5saW5lTG9naWNhbE9sZCwgdW5wcmVmaXhlZCwgcHJlZml4ZWQsIHNjcm9sbFNuYXAsIG92ZXJzY3JvbGxCZWhhdmlvciwgZmxleDIwMTIsIGZsZXgyMDA5XTtcbnZhciBwcm9wZXJ0eURldGVjdG9ycyA9IHBsdWdpbnMuZmlsdGVyKGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBwLnN1cHBvcnRlZFByb3BlcnR5O1xufSkubWFwKGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBwLnN1cHBvcnRlZFByb3BlcnR5O1xufSk7XG52YXIgbm9QcmVmaWxsID0gcGx1Z2lucy5maWx0ZXIoZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIHAubm9QcmVmaWxsO1xufSkucmVkdWNlKGZ1bmN0aW9uIChhLCBwKSB7XG4gIGEucHVzaC5hcHBseShhLCBfdG9Db25zdW1hYmxlQXJyYXkocC5ub1ByZWZpbGwpKTtcbiAgcmV0dXJuIGE7XG59LCBbXSk7XG5cbnZhciBlbDtcbnZhciBjYWNoZSA9IHt9O1xuXG5pZiAoaXNJbkJyb3dzZXIpIHtcbiAgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7IC8vIFdlIHRlc3QgZXZlcnkgcHJvcGVydHkgb24gdmVuZG9yIHByZWZpeCByZXF1aXJlbWVudC5cbiAgLy8gT25jZSB0ZXN0ZWQsIHJlc3VsdCBpcyBjYWNoZWQuIEl0IGdpdmVzIHVzIHVwIHRvIDcwJSBwZXJmIGJvb3N0LlxuICAvLyBodHRwOi8vanNwZXJmLmNvbS9lbGVtZW50LXN0eWxlLW9iamVjdC1hY2Nlc3MtdnMtcGxhaW4tb2JqZWN0XG4gIC8vXG4gIC8vIFByZWZpbGwgY2FjaGUgd2l0aCBrbm93biBjc3MgcHJvcGVydGllcyB0byByZWR1Y2UgYW1vdW50IG9mXG4gIC8vIHByb3BlcnRpZXMgd2UgbmVlZCB0byBmZWF0dXJlIHRlc3QgYXQgcnVudGltZS5cbiAgLy8gaHR0cDovL2Rhdmlkd2Fsc2gubmFtZS92ZW5kb3ItcHJlZml4XG5cbiAgdmFyIGNvbXB1dGVkID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCAnJyk7XG5cbiAgZm9yICh2YXIga2V5JDEgaW4gY29tcHV0ZWQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG4gICAgaWYgKCFpc05hTihrZXkkMSkpIGNhY2hlW2NvbXB1dGVkW2tleSQxXV0gPSBjb21wdXRlZFtrZXkkMV07XG4gIH0gLy8gUHJvcGVydGllcyB0aGF0IGNhbm5vdCBiZSBjb3JyZWN0bHkgZGV0ZWN0ZWQgdXNpbmcgdGhlXG4gIC8vIGNhY2hlIHByZWZpbGwgbWV0aG9kLlxuXG5cbiAgbm9QcmVmaWxsLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4gZGVsZXRlIGNhY2hlW3hdO1xuICB9KTtcbn1cbi8qKlxuICogVGVzdCBpZiBhIHByb3BlcnR5IGlzIHN1cHBvcnRlZCwgcmV0dXJucyBzdXBwb3J0ZWQgcHJvcGVydHkgd2l0aCB2ZW5kb3JcbiAqIHByZWZpeCBpZiByZXF1aXJlZC4gUmV0dXJucyBgZmFsc2VgIGlmIG5vdCBzdXBwb3J0ZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHByb3AgZGFzaCBzZXBhcmF0ZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEByZXR1cm4ge1N0cmluZ3xCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5cbmZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIC8vIEZvciBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG4gIGlmICghZWwpIHJldHVybiBwcm9wOyAvLyBSZW1vdmUgY2FjaGUgZm9yIGJlbmNobWFyayB0ZXN0cyBvciByZXR1cm4gcHJvcGVydHkgZnJvbSB0aGUgY2FjaGUuXG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAnYmVuY2htYXJrJyAmJiBjYWNoZVtwcm9wXSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIGNhY2hlW3Byb3BdO1xuICB9IC8vIENoZWNrIGlmICd0cmFuc2l0aW9uJyBvciAndHJhbnNmb3JtJyBuYXRpdmVseSBzdXBwb3J0ZWQgaW4gYnJvd3Nlci5cblxuXG4gIGlmIChwcm9wID09PSAndHJhbnNpdGlvbicgfHwgcHJvcCA9PT0gJ3RyYW5zZm9ybScpIHtcbiAgICBvcHRpb25zW3Byb3BdID0gcHJvcCBpbiBlbC5zdHlsZTtcbiAgfSAvLyBGaW5kIGEgcGx1Z2luIGZvciBjdXJyZW50IHByZWZpeCBwcm9wZXJ0eS5cblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcGVydHlEZXRlY3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICBjYWNoZVtwcm9wXSA9IHByb3BlcnR5RGV0ZWN0b3JzW2ldKHByb3AsIGVsLnN0eWxlLCBvcHRpb25zKTsgLy8gQnJlYWsgbG9vcCwgaWYgdmFsdWUgZm91bmQuXG5cbiAgICBpZiAoY2FjaGVbcHJvcF0pIGJyZWFrO1xuICB9IC8vIFJlc2V0IHN0eWxlcyBmb3IgY3VycmVudCBwcm9wZXJ0eS5cbiAgLy8gRmlyZWZveCBjYW4gZXZlbiB0aHJvdyBhbiBlcnJvciBmb3IgaW52YWxpZCBwcm9wZXJ0aWVzLCBlLmcuLCBcIjBcIi5cblxuXG4gIHRyeSB7XG4gICAgZWwuc3R5bGVbcHJvcF0gPSAnJztcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGNhY2hlW3Byb3BdO1xufVxuXG52YXIgY2FjaGUkMSA9IHt9O1xudmFyIHRyYW5zaXRpb25Qcm9wZXJ0aWVzID0ge1xuICB0cmFuc2l0aW9uOiAxLFxuICAndHJhbnNpdGlvbi1wcm9wZXJ0eSc6IDEsXG4gICctd2Via2l0LXRyYW5zaXRpb24nOiAxLFxuICAnLXdlYmtpdC10cmFuc2l0aW9uLXByb3BlcnR5JzogMVxufTtcbnZhciB0cmFuc1Byb3BzUmVnRXhwID0gLyheXFxzKltcXHctXSspfCwgKFxccypbXFx3LV0rKSg/IVteKCldKlxcKSkvZztcbnZhciBlbCQxO1xuLyoqXG4gKiBSZXR1cm5zIHByZWZpeGVkIHZhbHVlIHRyYW5zaXRpb24vdHJhbnNmb3JtIGlmIG5lZWRlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWF0Y2hcbiAqIEBwYXJhbSB7U3RyaW5nfSBwMVxuICogQHBhcmFtIHtTdHJpbmd9IHAyXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwcmVmaXhUcmFuc2l0aW9uQ2FsbGJhY2sobWF0Y2gsIHAxLCBwMikge1xuICBpZiAocDEgPT09ICd2YXInKSByZXR1cm4gJ3Zhcic7XG4gIGlmIChwMSA9PT0gJ2FsbCcpIHJldHVybiAnYWxsJztcbiAgaWYgKHAyID09PSAnYWxsJykgcmV0dXJuICcsIGFsbCc7XG4gIHZhciBwcmVmaXhlZFZhbHVlID0gcDEgPyBzdXBwb3J0ZWRQcm9wZXJ0eShwMSkgOiBcIiwgXCIgKyBzdXBwb3J0ZWRQcm9wZXJ0eShwMik7XG4gIGlmICghcHJlZml4ZWRWYWx1ZSkgcmV0dXJuIHAxIHx8IHAyO1xuICByZXR1cm4gcHJlZml4ZWRWYWx1ZTtcbn1cblxuaWYgKGlzSW5Ccm93c2VyKSBlbCQxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuLyoqXG4gKiBSZXR1cm5zIHByZWZpeGVkIHZhbHVlIGlmIG5lZWRlZC4gUmV0dXJucyBgZmFsc2VgIGlmIHZhbHVlIGlzIG5vdCBzdXBwb3J0ZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gKiBAcGFyYW0ge1N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge1N0cmluZ3xCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0ZWRWYWx1ZShwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgLy8gRm9yIHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgdmFyIHByZWZpeGVkVmFsdWUgPSB2YWx1ZTtcbiAgaWYgKCFlbCQxIHx8IHByb3BlcnR5ID09PSAnY29udGVudCcpIHJldHVybiB2YWx1ZTsgLy8gSXQgaXMgYSBzdHJpbmcgb3IgYSBudW1iZXIgYXMgYSBzdHJpbmcgbGlrZSAnMScuXG4gIC8vIFdlIHdhbnQgb25seSBwcmVmaXhhYmxlIHZhbHVlcyBoZXJlLlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG5cbiAgaWYgKHR5cGVvZiBwcmVmaXhlZFZhbHVlICE9PSAnc3RyaW5nJyB8fCAhaXNOYU4ocGFyc2VJbnQocHJlZml4ZWRWYWx1ZSwgMTApKSkge1xuICAgIHJldHVybiBwcmVmaXhlZFZhbHVlO1xuICB9IC8vIENyZWF0ZSBjYWNoZSBrZXkgZm9yIGN1cnJlbnQgdmFsdWUuXG5cblxuICB2YXIgY2FjaGVLZXkgPSBwcm9wZXJ0eSArIHByZWZpeGVkVmFsdWU7IC8vIFJlbW92ZSBjYWNoZSBmb3IgYmVuY2htYXJrIHRlc3RzIG9yIHJldHVybiB2YWx1ZSBmcm9tIGNhY2hlLlxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ2JlbmNobWFyaycgJiYgY2FjaGUkMVtjYWNoZUtleV0gIT0gbnVsbCkge1xuICAgIHJldHVybiBjYWNoZSQxW2NhY2hlS2V5XTtcbiAgfSAvLyBJRSBjYW4gZXZlbiB0aHJvdyBhbiBlcnJvciBpbiBzb21lIGNhc2VzLCBmb3IgZS5nLiBzdHlsZS5jb250ZW50ID0gJ2JhcicuXG5cblxuICB0cnkge1xuICAgIC8vIFRlc3QgdmFsdWUgYXMgaXQgaXMuXG4gICAgZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPSBwcmVmaXhlZFZhbHVlO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBSZXR1cm4gZmFsc2UgaWYgdmFsdWUgbm90IHN1cHBvcnRlZC5cbiAgICBjYWNoZSQxW2NhY2hlS2V5XSA9IGZhbHNlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSAvLyBJZiAndHJhbnNpdGlvbicgb3IgJ3RyYW5zaXRpb24tcHJvcGVydHknIHByb3BlcnR5LlxuXG5cbiAgaWYgKHRyYW5zaXRpb25Qcm9wZXJ0aWVzW3Byb3BlcnR5XSkge1xuICAgIHByZWZpeGVkVmFsdWUgPSBwcmVmaXhlZFZhbHVlLnJlcGxhY2UodHJhbnNQcm9wc1JlZ0V4cCwgcHJlZml4VHJhbnNpdGlvbkNhbGxiYWNrKTtcbiAgfSBlbHNlIGlmIChlbCQxLnN0eWxlW3Byb3BlcnR5XSA9PT0gJycpIHtcbiAgICAvLyBWYWx1ZSB3aXRoIGEgdmVuZG9yIHByZWZpeC5cbiAgICBwcmVmaXhlZFZhbHVlID0gcHJlZml4LmNzcyArIHByZWZpeGVkVmFsdWU7IC8vIEhhcmRjb2RlIHRlc3QgdG8gY29udmVydCBcImZsZXhcIiB0byBcIi1tcy1mbGV4Ym94XCIgZm9yIElFMTAuXG5cbiAgICBpZiAocHJlZml4ZWRWYWx1ZSA9PT0gJy1tcy1mbGV4JykgZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPSAnLW1zLWZsZXhib3gnOyAvLyBUZXN0IHByZWZpeGVkIHZhbHVlLlxuXG4gICAgZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPSBwcmVmaXhlZFZhbHVlOyAvLyBSZXR1cm4gZmFsc2UgaWYgdmFsdWUgbm90IHN1cHBvcnRlZC5cblxuICAgIGlmIChlbCQxLnN0eWxlW3Byb3BlcnR5XSA9PT0gJycpIHtcbiAgICAgIGNhY2hlJDFbY2FjaGVLZXldID0gZmFsc2U7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IC8vIFJlc2V0IHN0eWxlcyBmb3IgY3VycmVudCBwcm9wZXJ0eS5cblxuXG4gIGVsJDEuc3R5bGVbcHJvcGVydHldID0gJyc7IC8vIFdyaXRlIGN1cnJlbnQgdmFsdWUgdG8gY2FjaGUuXG5cbiAgY2FjaGUkMVtjYWNoZUtleV0gPSBwcmVmaXhlZFZhbHVlO1xuICByZXR1cm4gY2FjaGUkMVtjYWNoZUtleV07XG59XG5cbmV4cG9ydCB7IHByZWZpeCwgc3VwcG9ydGVkS2V5ZnJhbWVzLCBzdXBwb3J0ZWRQcm9wZXJ0eSwgc3VwcG9ydGVkVmFsdWUgfTtcbiIsImltcG9ydCB7IHN1cHBvcnRlZEtleWZyYW1lcywgc3VwcG9ydGVkVmFsdWUsIHN1cHBvcnRlZFByb3BlcnR5IH0gZnJvbSAnY3NzLXZlbmRvcic7XG5pbXBvcnQgeyB0b0Nzc1ZhbHVlIH0gZnJvbSAnanNzJztcblxuLyoqXG4gKiBBZGQgdmVuZG9yIHByZWZpeCB0byBhIHByb3BlcnR5IG5hbWUgd2hlbiBuZWVkZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBqc3NWZW5kb3JQcmVmaXhlcigpIHtcbiAgZnVuY3Rpb24gb25Qcm9jZXNzUnVsZShydWxlKSB7XG4gICAgaWYgKHJ1bGUudHlwZSA9PT0gJ2tleWZyYW1lcycpIHtcbiAgICAgIHZhciBhdFJ1bGUgPSBydWxlO1xuICAgICAgYXRSdWxlLmF0ID0gc3VwcG9ydGVkS2V5ZnJhbWVzKGF0UnVsZS5hdCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHJlZml4U3R5bGUoc3R5bGUpIHtcbiAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICB2YXIgdmFsdWUgPSBzdHlsZVtwcm9wXTtcblxuICAgICAgaWYgKHByb3AgPT09ICdmYWxsYmFja3MnICYmIEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHN0eWxlW3Byb3BdID0gdmFsdWUubWFwKHByZWZpeFN0eWxlKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBjaGFuZ2VQcm9wID0gZmFsc2U7XG4gICAgICB2YXIgc3VwcG9ydGVkUHJvcCA9IHN1cHBvcnRlZFByb3BlcnR5KHByb3ApO1xuICAgICAgaWYgKHN1cHBvcnRlZFByb3AgJiYgc3VwcG9ydGVkUHJvcCAhPT0gcHJvcCkgY2hhbmdlUHJvcCA9IHRydWU7XG4gICAgICB2YXIgY2hhbmdlVmFsdWUgPSBmYWxzZTtcbiAgICAgIHZhciBzdXBwb3J0ZWRWYWx1ZSQkMSA9IHN1cHBvcnRlZFZhbHVlKHN1cHBvcnRlZFByb3AsIHRvQ3NzVmFsdWUodmFsdWUpKTtcbiAgICAgIGlmIChzdXBwb3J0ZWRWYWx1ZSQkMSAmJiBzdXBwb3J0ZWRWYWx1ZSQkMSAhPT0gdmFsdWUpIGNoYW5nZVZhbHVlID0gdHJ1ZTtcblxuICAgICAgaWYgKGNoYW5nZVByb3AgfHwgY2hhbmdlVmFsdWUpIHtcbiAgICAgICAgaWYgKGNoYW5nZVByb3ApIGRlbGV0ZSBzdHlsZVtwcm9wXTtcbiAgICAgICAgc3R5bGVbc3VwcG9ydGVkUHJvcCB8fCBwcm9wXSA9IHN1cHBvcnRlZFZhbHVlJCQxIHx8IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlKSB7XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJykgcmV0dXJuIHN0eWxlO1xuICAgIHJldHVybiBwcmVmaXhTdHlsZShzdHlsZSk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbHVlLCBwcm9wKSB7XG4gICAgcmV0dXJuIHN1cHBvcnRlZFZhbHVlKHByb3AsIHRvQ3NzVmFsdWUodmFsdWUpKSB8fCB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzUnVsZTogb25Qcm9jZXNzUnVsZSxcbiAgICBvblByb2Nlc3NTdHlsZTogb25Qcm9jZXNzU3R5bGUsXG4gICAgb25DaGFuZ2VWYWx1ZTogb25DaGFuZ2VWYWx1ZVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBqc3NWZW5kb3JQcmVmaXhlcjtcbiIsIi8qKlxuICogU29ydCBwcm9wcyBieSBsZW5ndGguXG4gKi9cbmZ1bmN0aW9uIGpzc1Byb3BzU29ydCgpIHtcbiAgdmFyIHNvcnQgPSBmdW5jdGlvbiBzb3J0KHByb3AwLCBwcm9wMSkge1xuICAgIGlmIChwcm9wMC5sZW5ndGggPT09IHByb3AxLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHByb3AwID4gcHJvcDEgPyAxIDogLTE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3AwLmxlbmd0aCAtIHByb3AxLmxlbmd0aDtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIG9uUHJvY2Vzc1N0eWxlOiBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSkge1xuICAgICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJykgcmV0dXJuIHN0eWxlO1xuICAgICAgdmFyIG5ld1N0eWxlID0ge307XG4gICAgICB2YXIgcHJvcHMgPSBPYmplY3Qua2V5cyhzdHlsZSkuc29ydChzb3J0KTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBuZXdTdHlsZVtwcm9wc1tpXV0gPSBzdHlsZVtwcm9wc1tpXV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXdTdHlsZTtcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGpzc1Byb3BzU29ydDtcbiIsImltcG9ydCBmdW5jdGlvbnMgZnJvbSAnanNzLXBsdWdpbi1ydWxlLXZhbHVlLWZ1bmN0aW9uJztcbmltcG9ydCBnbG9iYWwgZnJvbSAnanNzLXBsdWdpbi1nbG9iYWwnO1xuaW1wb3J0IG5lc3RlZCBmcm9tICdqc3MtcGx1Z2luLW5lc3RlZCc7XG5pbXBvcnQgY2FtZWxDYXNlIGZyb20gJ2pzcy1wbHVnaW4tY2FtZWwtY2FzZSc7XG5pbXBvcnQgZGVmYXVsdFVuaXQgZnJvbSAnanNzLXBsdWdpbi1kZWZhdWx0LXVuaXQnO1xuaW1wb3J0IHZlbmRvclByZWZpeGVyIGZyb20gJ2pzcy1wbHVnaW4tdmVuZG9yLXByZWZpeGVyJztcbmltcG9ydCBwcm9wc1NvcnQgZnJvbSAnanNzLXBsdWdpbi1wcm9wcy1zb3J0JzsgLy8gU3Vic2V0IG9mIGpzcy1wcmVzZXQtZGVmYXVsdCB3aXRoIG9ubHkgdGhlIHBsdWdpbnMgdGhlIE1hdGVyaWFsLVVJIGNvbXBvbmVudHMgYXJlIHVzaW5nLlxuXG5mdW5jdGlvbiBqc3NQcmVzZXQoKSB7XG4gIHJldHVybiB7XG4gICAgcGx1Z2luczogW2Z1bmN0aW9ucygpLCBnbG9iYWwoKSwgbmVzdGVkKCksIGNhbWVsQ2FzZSgpLCBkZWZhdWx0VW5pdCgpLCAvLyBEaXNhYmxlIHRoZSB2ZW5kb3IgcHJlZml4ZXIgc2VydmVyLXNpZGUsIGl0IGRvZXMgbm90aGluZy5cbiAgICAvLyBUaGlzIHdheSwgd2UgY2FuIGdldCBhIHBlcmZvcm1hbmNlIGJvb3N0LlxuICAgIC8vIEluIHRoZSBkb2N1bWVudGF0aW9uLCB3ZSBhcmUgdXNpbmcgYGF1dG9wcmVmaXhlcmAgdG8gc29sdmUgdGhpcyBwcm9ibGVtLlxuICAgIHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHZlbmRvclByZWZpeGVyKCksIHByb3BzU29ydCgpXVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBqc3NQcmVzZXQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBleGFjdFByb3AgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IGNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lIGZyb20gJy4uL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lJztcbmltcG9ydCB7IGNyZWF0ZSB9IGZyb20gJ2pzcyc7XG5pbXBvcnQganNzUHJlc2V0IGZyb20gJy4uL2pzc1ByZXNldCc7IC8vIERlZmF1bHQgSlNTIGluc3RhbmNlLlxuXG52YXIganNzID0gY3JlYXRlKGpzc1ByZXNldCgpKTsgLy8gVXNlIGEgc2luZ2xldG9uIG9yIHRoZSBwcm92aWRlZCBvbmUgYnkgdGhlIGNvbnRleHQuXG4vL1xuLy8gVGhlIGNvdW50ZXItYmFzZWQgYXBwcm9hY2ggZG9lc24ndCB0b2xlcmF0ZSBhbnkgbWlzdGFrZS5cbi8vIEl0J3MgbXVjaCBzYWZlciB0byB1c2UgdGhlIHNhbWUgY291bnRlciBldmVyeXdoZXJlLlxuXG52YXIgZ2VuZXJhdGVDbGFzc05hbWUgPSBjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSgpOyAvLyBFeHBvcnRlZCBmb3IgdGVzdCBwdXJwb3Nlc1xuXG5leHBvcnQgdmFyIHNoZWV0c01hbmFnZXIgPSBuZXcgTWFwKCk7XG52YXIgZGVmYXVsdE9wdGlvbnMgPSB7XG4gIGRpc2FibGVHZW5lcmF0aW9uOiBmYWxzZSxcbiAgZ2VuZXJhdGVDbGFzc05hbWU6IGdlbmVyYXRlQ2xhc3NOYW1lLFxuICBqc3M6IGpzcyxcbiAgc2hlZXRzQ2FjaGU6IG51bGwsXG4gIHNoZWV0c01hbmFnZXI6IHNoZWV0c01hbmFnZXIsXG4gIHNoZWV0c1JlZ2lzdHJ5OiBudWxsXG59O1xuZXhwb3J0IHZhciBTdHlsZXNDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChkZWZhdWx0T3B0aW9ucyk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFN0eWxlc0NvbnRleHQuZGlzcGxheU5hbWUgPSAnU3R5bGVzQ29udGV4dCc7XG59XG5cbnZhciBpbmplY3RGaXJzdE5vZGU7XG5cbmZ1bmN0aW9uIFN0eWxlc1Byb3ZpZGVyKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgX3Byb3BzJGluamVjdEZpcnN0ID0gcHJvcHMuaW5qZWN0Rmlyc3QsXG4gICAgICBpbmplY3RGaXJzdCA9IF9wcm9wcyRpbmplY3RGaXJzdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkaW5qZWN0Rmlyc3QsXG4gICAgICBfcHJvcHMkZGlzYWJsZUdlbmVyYXQgPSBwcm9wcy5kaXNhYmxlR2VuZXJhdGlvbixcbiAgICAgIGRpc2FibGVHZW5lcmF0aW9uID0gX3Byb3BzJGRpc2FibGVHZW5lcmF0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlR2VuZXJhdCxcbiAgICAgIGxvY2FsT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJpbmplY3RGaXJzdFwiLCBcImRpc2FibGVHZW5lcmF0aW9uXCJdKTtcblxuICB2YXIgb3V0ZXJPcHRpb25zID0gUmVhY3QudXNlQ29udGV4dChTdHlsZXNDb250ZXh0KTtcblxuICB2YXIgY29udGV4dCA9IF9leHRlbmRzKHt9LCBvdXRlck9wdGlvbnMsIHtcbiAgICBkaXNhYmxlR2VuZXJhdGlvbjogZGlzYWJsZUdlbmVyYXRpb25cbiAgfSwgbG9jYWxPcHRpb25zKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyAmJiAhY29udGV4dC5zaGVldHNNYW5hZ2VyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogeW91IG5lZWQgdG8gdXNlIHRoZSBTZXJ2ZXJTdHlsZVNoZWV0cyBBUEkgd2hlbiByZW5kZXJpbmcgb24gdGhlIHNlcnZlci4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChjb250ZXh0Lmpzcy5vcHRpb25zLmluc2VydGlvblBvaW50ICYmIGluamVjdEZpcnN0KSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogeW91IGNhbm5vdCB1c2UgYSBjdXN0b20gaW5zZXJ0aW9uUG9pbnQgYW5kIDxTdHlsZXNDb250ZXh0IGluamVjdEZpcnN0PiBhdCB0aGUgc2FtZSB0aW1lLicpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGluamVjdEZpcnN0ICYmIGxvY2FsT3B0aW9ucy5qc3MpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiB5b3UgY2Fubm90IHVzZSB0aGUganNzIGFuZCBpbmplY3RGaXJzdCBwcm9wcyBhdCB0aGUgc2FtZSB0aW1lLicpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29udGV4dC5qc3Mub3B0aW9ucy5pbnNlcnRpb25Qb2ludCAmJiBpbmplY3RGaXJzdCAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICghaW5qZWN0Rmlyc3ROb2RlKSB7XG4gICAgICB2YXIgaGVhZCA9IGRvY3VtZW50LmhlYWQ7XG4gICAgICBpbmplY3RGaXJzdE5vZGUgPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KCdtdWktaW5qZWN0LWZpcnN0Jyk7XG4gICAgICBoZWFkLmluc2VydEJlZm9yZShpbmplY3RGaXJzdE5vZGUsIGhlYWQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgY29udGV4dC5qc3MgPSBjcmVhdGUoe1xuICAgICAgcGx1Z2luczoganNzUHJlc2V0KCkucGx1Z2lucyxcbiAgICAgIGluc2VydGlvblBvaW50OiBpbmplY3RGaXJzdE5vZGVcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFN0eWxlc0NvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29udGV4dFxuICB9LCBjaGlsZHJlbik7XG59XG5cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN0eWxlc1Byb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFlvdXIgY29tcG9uZW50IHRyZWUuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogWW91IGNhbiBkaXNhYmxlIHRoZSBnZW5lcmF0aW9uIG9mIHRoZSBzdHlsZXMgd2l0aCB0aGlzIG9wdGlvbi5cbiAgICogSXQgY2FuIGJlIHVzZWZ1bCB3aGVuIHRyYXZlcnNpbmcgdGhlIFJlYWN0IHRyZWUgb3V0c2lkZSBvZiB0aGUgSFRNTFxuICAgKiByZW5kZXJpbmcgc3RlcCBvbiB0aGUgc2VydmVyLlxuICAgKiBMZXQncyBzYXkgeW91IGFyZSB1c2luZyByZWFjdC1hcG9sbG8gdG8gZXh0cmFjdCBhbGxcbiAgICogdGhlIHF1ZXJpZXMgbWFkZSBieSB0aGUgaW50ZXJmYWNlIHNlcnZlci1zaWRlIC0geW91IGNhbiBzaWduaWZpY2FudGx5IHNwZWVkIHVwIHRoZSB0cmF2ZXJzYWwgd2l0aCB0aGlzIHByb3AuXG4gICAqL1xuICBkaXNhYmxlR2VuZXJhdGlvbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEpTUydzIGNsYXNzIG5hbWUgZ2VuZXJhdG9yLlxuICAgKi9cbiAgZ2VuZXJhdGVDbGFzc05hbWU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0LCB0aGUgc3R5bGVzIGFyZSBpbmplY3RlZCBsYXN0IGluIHRoZSA8aGVhZD4gZWxlbWVudCBvZiB0aGUgcGFnZS5cbiAgICogQXMgYSByZXN1bHQsIHRoZXkgZ2FpbiBtb3JlIHNwZWNpZmljaXR5IHRoYW4gYW55IG90aGVyIHN0eWxlIHNoZWV0LlxuICAgKiBJZiB5b3Ugd2FudCB0byBvdmVycmlkZSBNYXRlcmlhbC1VSSdzIHN0eWxlcywgc2V0IHRoaXMgcHJvcC5cbiAgICovXG4gIGluamVjdEZpcnN0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSlNTJ3MgaW5zdGFuY2UuXG4gICAqL1xuICBqc3M6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHNlcnZlckdlbmVyYXRlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKlxuICAgKiBCZXRhIGZlYXR1cmUuXG4gICAqXG4gICAqIENhY2hlIGZvciB0aGUgc2hlZXRzLlxuICAgKi9cbiAgc2hlZXRzQ2FjaGU6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICpcbiAgICogVGhlIHNoZWV0c01hbmFnZXIgaXMgdXNlZCB0byBkZWR1cGxpY2F0ZSBzdHlsZSBzaGVldCBpbmplY3Rpb24gaW4gdGhlIHBhZ2UuXG4gICAqIEl0J3MgZGVkdXBsaWNhdGluZyB1c2luZyB0aGUgKHRoZW1lLCBzdHlsZXMpIGNvdXBsZS5cbiAgICogT24gdGhlIHNlcnZlciwgeW91IHNob3VsZCBwcm92aWRlIGEgbmV3IGluc3RhbmNlIGZvciBlYWNoIHJlcXVlc3QuXG4gICAqL1xuICBzaGVldHNNYW5hZ2VyOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqXG4gICAqIENvbGxlY3QgdGhlIHNoZWV0cy5cbiAgICovXG4gIHNoZWV0c1JlZ2lzdHJ5OiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdHlsZXNQcm92aWRlci5wcm9wVHlwZXMgPSBleGFjdFByb3AoU3R5bGVzUHJvdmlkZXIucHJvcFR5cGVzKSA6IHZvaWQgMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgU3R5bGVzUHJvdmlkZXI7IiwiLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L3ByZWZlci1kZWZhdWx0LWV4cG9ydCAqL1xuLy8gR2xvYmFsIGluZGV4IGNvdW50ZXIgdG8gcHJlc2VydmUgc291cmNlIG9yZGVyLlxuLy8gV2UgY3JlYXRlIHRoZSBzdHlsZSBzaGVldCBkdXJpbmcgYXQgdGhlIGNyZWF0aW9uIG9mIHRoZSBjb21wb25lbnQsXG4vLyBjaGlsZHJlbiBhcmUgaGFuZGxlZCBhZnRlciB0aGUgcGFyZW50cywgc28gdGhlIG9yZGVyIG9mIHN0eWxlIGVsZW1lbnRzIHdvdWxkIGJlIHBhcmVudC0+Y2hpbGQuXG4vLyBJdCBpcyBhIHByb2JsZW0gdGhvdWdoIHdoZW4gYSBwYXJlbnQgcGFzc2VzIGEgY2xhc3NOYW1lXG4vLyB3aGljaCBuZWVkcyB0byBvdmVycmlkZSBhbnkgY2hpbGQncyBzdHlsZXMuXG4vLyBTdHlsZVNoZWV0IG9mIHRoZSBjaGlsZCBoYXMgYSBoaWdoZXIgc3BlY2lmaWNpdHksIGJlY2F1c2Ugb2YgdGhlIHNvdXJjZSBvcmRlci5cbi8vIFNvIG91ciBzb2x1dGlvbiBpcyB0byByZW5kZXIgc2hlZXRzIHRoZW0gaW4gdGhlIHJldmVyc2Ugb3JkZXIgY2hpbGQtPnNoZWV0LCBzb1xuLy8gdGhhdCBwYXJlbnQgaGFzIGEgaGlnaGVyIHNwZWNpZmljaXR5LlxudmFyIGluZGV4Q291bnRlciA9IC0xZTk7XG5leHBvcnQgZnVuY3Rpb24gaW5jcmVtZW50KCkge1xuICBpbmRleENvdW50ZXIgKz0gMTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChpbmRleENvdW50ZXIgPj0gMCkge1xuICAgICAgY29uc29sZS53YXJuKFsnTWF0ZXJpYWwtVUk6IHlvdSBtaWdodCBoYXZlIGEgbWVtb3J5IGxlYWsuJywgJ1RoZSBpbmRleENvdW50ZXIgaXMgbm90IHN1cHBvc2VkIHRvIGdyb3cgdGhhdCBtdWNoLiddLmpvaW4oJ1xcbicpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaW5kZXhDb3VudGVyO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdChpdGVtKSB7XG4gIHJldHVybiBpdGVtICYmIF90eXBlb2YoaXRlbSkgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KGl0ZW0pO1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVlcG1lcmdlKHRhcmdldCwgc291cmNlKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7XG4gICAgY2xvbmU6IHRydWVcbiAgfTtcbiAgdmFyIG91dHB1dCA9IG9wdGlvbnMuY2xvbmUgPyBfZXh0ZW5kcyh7fSwgdGFyZ2V0KSA6IHRhcmdldDtcblxuICBpZiAoaXNPYmplY3QodGFyZ2V0KSAmJiBpc09iamVjdChzb3VyY2UpKSB7XG4gICAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIC8vIEF2b2lkIHByb3RvdHlwZSBwb2xsdXRpb25cbiAgICAgIGlmIChrZXkgPT09ICdfX3Byb3RvX18nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzT2JqZWN0KHNvdXJjZVtrZXldKSAmJiBrZXkgaW4gdGFyZ2V0KSB7XG4gICAgICAgIG91dHB1dFtrZXldID0gZGVlcG1lcmdlKHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSwgb3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXRwdXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG91dHB1dDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgbm9vcFRoZW1lIGZyb20gJy4vbm9vcFRoZW1lJztcblxuZnVuY3Rpb24gZ2V0U3R5bGVzQ3JlYXRvcihzdHlsZXNPckNyZWF0b3IpIHtcbiAgdmFyIHRoZW1pbmdFbmFibGVkID0gdHlwZW9mIHN0eWxlc09yQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJztcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChfdHlwZW9mKHN0eWxlc09yQ3JlYXRvcikgIT09ICdvYmplY3QnICYmICF0aGVtaW5nRW5hYmxlZCkge1xuICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiB0aGUgYHN0eWxlc2AgYXJndW1lbnQgcHJvdmlkZWQgaXMgaW52YWxpZC4nLCAnWW91IG5lZWQgdG8gcHJvdmlkZSBhIGZ1bmN0aW9uIGdlbmVyYXRpbmcgdGhlIHN0eWxlcyBvciBhIHN0eWxlcyBvYmplY3QuJ10uam9pbignXFxuJykpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUodGhlbWUsIG5hbWUpIHtcbiAgICAgIHZhciBzdHlsZXM7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHN0eWxlcyA9IHRoZW1pbmdFbmFibGVkID8gc3R5bGVzT3JDcmVhdG9yKHRoZW1lKSA6IHN0eWxlc09yQ3JlYXRvcjtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmICh0aGVtaW5nRW5hYmxlZCA9PT0gdHJ1ZSAmJiB0aGVtZSA9PT0gbm9vcFRoZW1lKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBwcmVwZW5kIGVycm9yIG1lc3NhZ2UvbmFtZSBpbnN0ZWFkXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFsnTWF0ZXJpYWwtVUk6IHRoZSBgc3R5bGVzYCBhcmd1bWVudCBwcm92aWRlZCBpcyBpbnZhbGlkLicsICdZb3UgYXJlIHByb3ZpZGluZyBhIGZ1bmN0aW9uIHdpdGhvdXQgYSB0aGVtZSBpbiB0aGUgY29udGV4dC4nLCAnT25lIG9mIHRoZSBwYXJlbnQgZWxlbWVudHMgbmVlZHMgdG8gdXNlIGEgVGhlbWVQcm92aWRlci4nXS5qb2luKCdcXG4nKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW5hbWUgfHwgIXRoZW1lLm92ZXJyaWRlcyB8fCAhdGhlbWUub3ZlcnJpZGVzW25hbWVdKSB7XG4gICAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBvdmVycmlkZXMgPSB0aGVtZS5vdmVycmlkZXNbbmFtZV07XG5cbiAgICAgIHZhciBzdHlsZXNXaXRoT3ZlcnJpZGVzID0gX2V4dGVuZHMoe30sIHN0eWxlcyk7XG5cbiAgICAgIE9iamVjdC5rZXlzKG92ZXJyaWRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKCFzdHlsZXNXaXRoT3ZlcnJpZGVzW2tleV0pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihbJ01hdGVyaWFsLVVJOiB5b3UgYXJlIHRyeWluZyB0byBvdmVycmlkZSBhIHN0eWxlIHRoYXQgZG9lcyBub3QgZXhpc3QuJywgXCJGaXggdGhlIGBcIi5jb25jYXQoa2V5LCBcImAga2V5IG9mIGB0aGVtZS5vdmVycmlkZXMuXCIpLmNvbmNhdChuYW1lLCBcImAuXCIpXS5qb2luKCdcXG4nKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc3R5bGVzV2l0aE92ZXJyaWRlc1trZXldID0gZGVlcG1lcmdlKHN0eWxlc1dpdGhPdmVycmlkZXNba2V5XSwgb3ZlcnJpZGVzW2tleV0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gc3R5bGVzV2l0aE92ZXJyaWRlcztcbiAgICB9LFxuICAgIG9wdGlvbnM6IHt9XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFN0eWxlc0NyZWF0b3I7IiwiLy8gV2UgdXNlIHRoZSBzYW1lIGVtcHR5IG9iamVjdCB0byByZWYgY291bnQgdGhlIHN0eWxlcyB0aGF0IGRvbid0IG5lZWQgYSB0aGVtZSBvYmplY3QuXG52YXIgbm9vcFRoZW1lID0ge307XG5leHBvcnQgZGVmYXVsdCBub29wVGhlbWU7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldER5bmFtaWNTdHlsZXMgfSBmcm9tICdqc3MnO1xuaW1wb3J0IG1lcmdlQ2xhc3NlcyBmcm9tICcuLi9tZXJnZUNsYXNzZXMnO1xuaW1wb3J0IG11bHRpS2V5U3RvcmUgZnJvbSAnLi9tdWx0aUtleVN0b3JlJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi91c2VUaGVtZSc7XG5pbXBvcnQgeyBTdHlsZXNDb250ZXh0IH0gZnJvbSAnLi4vU3R5bGVzUHJvdmlkZXInO1xuaW1wb3J0IHsgaW5jcmVtZW50IH0gZnJvbSAnLi9pbmRleENvdW50ZXInO1xuaW1wb3J0IGdldFN0eWxlc0NyZWF0b3IgZnJvbSAnLi4vZ2V0U3R5bGVzQ3JlYXRvcic7XG5pbXBvcnQgbm9vcFRoZW1lIGZyb20gJy4uL2dldFN0eWxlc0NyZWF0b3Ivbm9vcFRoZW1lJztcblxuZnVuY3Rpb24gZ2V0Q2xhc3NlcyhfcmVmLCBjbGFzc2VzLCBDb21wb25lbnQpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIHN0eWxlc09wdGlvbnMgPSBfcmVmLnN0eWxlc09wdGlvbnM7XG5cbiAgaWYgKHN0eWxlc09wdGlvbnMuZGlzYWJsZUdlbmVyYXRpb24pIHtcbiAgICByZXR1cm4gY2xhc3NlcyB8fCB7fTtcbiAgfVxuXG4gIGlmICghc3RhdGUuY2FjaGVDbGFzc2VzKSB7XG4gICAgc3RhdGUuY2FjaGVDbGFzc2VzID0ge1xuICAgICAgLy8gQ2FjaGUgZm9yIHRoZSBmaW5hbGl6ZWQgY2xhc3NlcyB2YWx1ZS5cbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgLy8gQ2FjaGUgZm9yIHRoZSBsYXN0IHVzZWQgY2xhc3NlcyBwcm9wIHBvaW50ZXIuXG4gICAgICBsYXN0UHJvcDogbnVsbCxcbiAgICAgIC8vIENhY2hlIGZvciB0aGUgbGFzdCB1c2VkIHJlbmRlcmVkIGNsYXNzZXMgcG9pbnRlci5cbiAgICAgIGxhc3RKU1M6IHt9XG4gICAgfTtcbiAgfSAvLyBUcmFja3MgaWYgZWl0aGVyIHRoZSByZW5kZXJlZCBjbGFzc2VzIG9yIGNsYXNzZXMgcHJvcCBoYXMgY2hhbmdlZCxcbiAgLy8gcmVxdWlyaW5nIHRoZSBnZW5lcmF0aW9uIG9mIGEgbmV3IGZpbmFsaXplZCBjbGFzc2VzIG9iamVjdC5cblxuXG4gIHZhciBnZW5lcmF0ZSA9IGZhbHNlO1xuXG4gIGlmIChzdGF0ZS5jbGFzc2VzICE9PSBzdGF0ZS5jYWNoZUNsYXNzZXMubGFzdEpTUykge1xuICAgIHN0YXRlLmNhY2hlQ2xhc3Nlcy5sYXN0SlNTID0gc3RhdGUuY2xhc3NlcztcbiAgICBnZW5lcmF0ZSA9IHRydWU7XG4gIH1cblxuICBpZiAoY2xhc3NlcyAhPT0gc3RhdGUuY2FjaGVDbGFzc2VzLmxhc3RQcm9wKSB7XG4gICAgc3RhdGUuY2FjaGVDbGFzc2VzLmxhc3RQcm9wID0gY2xhc3NlcztcbiAgICBnZW5lcmF0ZSA9IHRydWU7XG4gIH1cblxuICBpZiAoZ2VuZXJhdGUpIHtcbiAgICBzdGF0ZS5jYWNoZUNsYXNzZXMudmFsdWUgPSBtZXJnZUNsYXNzZXMoe1xuICAgICAgYmFzZUNsYXNzZXM6IHN0YXRlLmNhY2hlQ2xhc3Nlcy5sYXN0SlNTLFxuICAgICAgbmV3Q2xhc3NlczogY2xhc3NlcyxcbiAgICAgIENvbXBvbmVudDogQ29tcG9uZW50XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gc3RhdGUuY2FjaGVDbGFzc2VzLnZhbHVlO1xufVxuXG5mdW5jdGlvbiBhdHRhY2goX3JlZjIsIHByb3BzKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYyLnN0YXRlLFxuICAgICAgdGhlbWUgPSBfcmVmMi50aGVtZSxcbiAgICAgIHN0eWxlc09wdGlvbnMgPSBfcmVmMi5zdHlsZXNPcHRpb25zLFxuICAgICAgc3R5bGVzQ3JlYXRvciA9IF9yZWYyLnN0eWxlc0NyZWF0b3IsXG4gICAgICBuYW1lID0gX3JlZjIubmFtZTtcblxuICBpZiAoc3R5bGVzT3B0aW9ucy5kaXNhYmxlR2VuZXJhdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzaGVldE1hbmFnZXIgPSBtdWx0aUtleVN0b3JlLmdldChzdHlsZXNPcHRpb25zLnNoZWV0c01hbmFnZXIsIHN0eWxlc0NyZWF0b3IsIHRoZW1lKTtcblxuICBpZiAoIXNoZWV0TWFuYWdlcikge1xuICAgIHNoZWV0TWFuYWdlciA9IHtcbiAgICAgIHJlZnM6IDAsXG4gICAgICBzdGF0aWNTaGVldDogbnVsbCxcbiAgICAgIGR5bmFtaWNTdHlsZXM6IG51bGxcbiAgICB9O1xuICAgIG11bHRpS2V5U3RvcmUuc2V0KHN0eWxlc09wdGlvbnMuc2hlZXRzTWFuYWdlciwgc3R5bGVzQ3JlYXRvciwgdGhlbWUsIHNoZWV0TWFuYWdlcik7XG4gIH1cblxuICB2YXIgb3B0aW9ucyA9IF9leHRlbmRzKHt9LCBzdHlsZXNDcmVhdG9yLm9wdGlvbnMsIHt9LCBzdHlsZXNPcHRpb25zLCB7XG4gICAgdGhlbWU6IHRoZW1lLFxuICAgIGZsaXA6IHR5cGVvZiBzdHlsZXNPcHRpb25zLmZsaXAgPT09ICdib29sZWFuJyA/IHN0eWxlc09wdGlvbnMuZmxpcCA6IHRoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCdcbiAgfSk7XG5cbiAgb3B0aW9ucy5nZW5lcmF0ZUlkID0gb3B0aW9ucy5zZXJ2ZXJHZW5lcmF0ZUNsYXNzTmFtZSB8fCBvcHRpb25zLmdlbmVyYXRlQ2xhc3NOYW1lO1xuICB2YXIgc2hlZXRzUmVnaXN0cnkgPSBzdHlsZXNPcHRpb25zLnNoZWV0c1JlZ2lzdHJ5O1xuXG4gIGlmIChzaGVldE1hbmFnZXIucmVmcyA9PT0gMCkge1xuICAgIHZhciBzdGF0aWNTaGVldDtcblxuICAgIGlmIChzdHlsZXNPcHRpb25zLnNoZWV0c0NhY2hlKSB7XG4gICAgICBzdGF0aWNTaGVldCA9IG11bHRpS2V5U3RvcmUuZ2V0KHN0eWxlc09wdGlvbnMuc2hlZXRzQ2FjaGUsIHN0eWxlc0NyZWF0b3IsIHRoZW1lKTtcbiAgICB9XG5cbiAgICB2YXIgc3R5bGVzID0gc3R5bGVzQ3JlYXRvci5jcmVhdGUodGhlbWUsIG5hbWUpO1xuXG4gICAgaWYgKCFzdGF0aWNTaGVldCkge1xuICAgICAgc3RhdGljU2hlZXQgPSBzdHlsZXNPcHRpb25zLmpzcy5jcmVhdGVTdHlsZVNoZWV0KHN0eWxlcywgX2V4dGVuZHMoe1xuICAgICAgICBsaW5rOiBmYWxzZVxuICAgICAgfSwgb3B0aW9ucykpO1xuICAgICAgc3RhdGljU2hlZXQuYXR0YWNoKCk7XG5cbiAgICAgIGlmIChzdHlsZXNPcHRpb25zLnNoZWV0c0NhY2hlKSB7XG4gICAgICAgIG11bHRpS2V5U3RvcmUuc2V0KHN0eWxlc09wdGlvbnMuc2hlZXRzQ2FjaGUsIHN0eWxlc0NyZWF0b3IsIHRoZW1lLCBzdGF0aWNTaGVldCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNoZWV0c1JlZ2lzdHJ5KSB7XG4gICAgICBzaGVldHNSZWdpc3RyeS5hZGQoc3RhdGljU2hlZXQpO1xuICAgIH1cblxuICAgIHNoZWV0TWFuYWdlci5zdGF0aWNTaGVldCA9IHN0YXRpY1NoZWV0O1xuICAgIHNoZWV0TWFuYWdlci5keW5hbWljU3R5bGVzID0gZ2V0RHluYW1pY1N0eWxlcyhzdHlsZXMpO1xuICB9XG5cbiAgaWYgKHNoZWV0TWFuYWdlci5keW5hbWljU3R5bGVzKSB7XG4gICAgdmFyIGR5bmFtaWNTaGVldCA9IHN0eWxlc09wdGlvbnMuanNzLmNyZWF0ZVN0eWxlU2hlZXQoc2hlZXRNYW5hZ2VyLmR5bmFtaWNTdHlsZXMsIF9leHRlbmRzKHtcbiAgICAgIGxpbms6IHRydWVcbiAgICB9LCBvcHRpb25zKSk7XG4gICAgZHluYW1pY1NoZWV0LnVwZGF0ZShwcm9wcyk7XG4gICAgZHluYW1pY1NoZWV0LmF0dGFjaCgpO1xuICAgIHN0YXRlLmR5bmFtaWNTaGVldCA9IGR5bmFtaWNTaGVldDtcbiAgICBzdGF0ZS5jbGFzc2VzID0gbWVyZ2VDbGFzc2VzKHtcbiAgICAgIGJhc2VDbGFzc2VzOiBzaGVldE1hbmFnZXIuc3RhdGljU2hlZXQuY2xhc3NlcyxcbiAgICAgIG5ld0NsYXNzZXM6IGR5bmFtaWNTaGVldC5jbGFzc2VzXG4gICAgfSk7XG5cbiAgICBpZiAoc2hlZXRzUmVnaXN0cnkpIHtcbiAgICAgIHNoZWV0c1JlZ2lzdHJ5LmFkZChkeW5hbWljU2hlZXQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5jbGFzc2VzID0gc2hlZXRNYW5hZ2VyLnN0YXRpY1NoZWV0LmNsYXNzZXM7XG4gIH1cblxuICBzaGVldE1hbmFnZXIucmVmcyArPSAxO1xufVxuXG5mdW5jdGlvbiB1cGRhdGUoX3JlZjMsIHByb3BzKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYzLnN0YXRlO1xuXG4gIGlmIChzdGF0ZS5keW5hbWljU2hlZXQpIHtcbiAgICBzdGF0ZS5keW5hbWljU2hlZXQudXBkYXRlKHByb3BzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZXRhY2goX3JlZjQpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjQuc3RhdGUsXG4gICAgICB0aGVtZSA9IF9yZWY0LnRoZW1lLFxuICAgICAgc3R5bGVzT3B0aW9ucyA9IF9yZWY0LnN0eWxlc09wdGlvbnMsXG4gICAgICBzdHlsZXNDcmVhdG9yID0gX3JlZjQuc3R5bGVzQ3JlYXRvcjtcblxuICBpZiAoc3R5bGVzT3B0aW9ucy5kaXNhYmxlR2VuZXJhdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzaGVldE1hbmFnZXIgPSBtdWx0aUtleVN0b3JlLmdldChzdHlsZXNPcHRpb25zLnNoZWV0c01hbmFnZXIsIHN0eWxlc0NyZWF0b3IsIHRoZW1lKTtcbiAgc2hlZXRNYW5hZ2VyLnJlZnMgLT0gMTtcbiAgdmFyIHNoZWV0c1JlZ2lzdHJ5ID0gc3R5bGVzT3B0aW9ucy5zaGVldHNSZWdpc3RyeTtcblxuICBpZiAoc2hlZXRNYW5hZ2VyLnJlZnMgPT09IDApIHtcbiAgICBtdWx0aUtleVN0b3JlLmRlbGV0ZShzdHlsZXNPcHRpb25zLnNoZWV0c01hbmFnZXIsIHN0eWxlc0NyZWF0b3IsIHRoZW1lKTtcbiAgICBzdHlsZXNPcHRpb25zLmpzcy5yZW1vdmVTdHlsZVNoZWV0KHNoZWV0TWFuYWdlci5zdGF0aWNTaGVldCk7XG5cbiAgICBpZiAoc2hlZXRzUmVnaXN0cnkpIHtcbiAgICAgIHNoZWV0c1JlZ2lzdHJ5LnJlbW92ZShzaGVldE1hbmFnZXIuc3RhdGljU2hlZXQpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdGF0ZS5keW5hbWljU2hlZXQpIHtcbiAgICBzdHlsZXNPcHRpb25zLmpzcy5yZW1vdmVTdHlsZVNoZWV0KHN0YXRlLmR5bmFtaWNTaGVldCk7XG5cbiAgICBpZiAoc2hlZXRzUmVnaXN0cnkpIHtcbiAgICAgIHNoZWV0c1JlZ2lzdHJ5LnJlbW92ZShzdGF0ZS5keW5hbWljU2hlZXQpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB1c2VTeW5jaHJvbm91c0VmZmVjdChmdW5jLCB2YWx1ZXMpIHtcbiAgdmFyIGtleSA9IFJlYWN0LnVzZVJlZihbXSk7XG4gIHZhciBvdXRwdXQ7IC8vIFN0b3JlIFwiZ2VuZXJhdGlvblwiIGtleS4gSnVzdCByZXR1cm5zIGEgbmV3IG9iamVjdCBldmVyeSB0aW1lXG5cbiAgdmFyIGN1cnJlbnRLZXkgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge307XG4gIH0sIHZhbHVlcyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIC8vIFwidGhlIGZpcnN0IHJlbmRlclwiLCBvciBcIm1lbW8gZHJvcHBlZCB0aGUgdmFsdWVcIlxuXG4gIGlmIChrZXkuY3VycmVudCAhPT0gY3VycmVudEtleSkge1xuICAgIGtleS5jdXJyZW50ID0gY3VycmVudEtleTtcbiAgICBvdXRwdXQgPSBmdW5jKCk7XG4gIH1cblxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAob3V0cHV0KSB7XG4gICAgICAgIG91dHB1dCgpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtjdXJyZW50S2V5XSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICApO1xufVxuXG5mdW5jdGlvbiBtYWtlU3R5bGVzKHN0eWxlc09yQ3JlYXRvcikge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUsXG4gICAgICBjbGFzc05hbWVQcmVmaXhPcHRpb24gPSBvcHRpb25zLmNsYXNzTmFtZVByZWZpeCxcbiAgICAgIENvbXBvbmVudCA9IG9wdGlvbnMuQ29tcG9uZW50LFxuICAgICAgX29wdGlvbnMkZGVmYXVsdFRoZW1lID0gb3B0aW9ucy5kZWZhdWx0VGhlbWUsXG4gICAgICBkZWZhdWx0VGhlbWUgPSBfb3B0aW9ucyRkZWZhdWx0VGhlbWUgPT09IHZvaWQgMCA/IG5vb3BUaGVtZSA6IF9vcHRpb25zJGRlZmF1bHRUaGVtZSxcbiAgICAgIHN0eWxlc09wdGlvbnMyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9wdGlvbnMsIFtcIm5hbWVcIiwgXCJjbGFzc05hbWVQcmVmaXhcIiwgXCJDb21wb25lbnRcIiwgXCJkZWZhdWx0VGhlbWVcIl0pO1xuXG4gIHZhciBzdHlsZXNDcmVhdG9yID0gZ2V0U3R5bGVzQ3JlYXRvcihzdHlsZXNPckNyZWF0b3IpO1xuICB2YXIgY2xhc3NOYW1lUHJlZml4ID0gbmFtZSB8fCBjbGFzc05hbWVQcmVmaXhPcHRpb24gfHwgJ21ha2VTdHlsZXMnO1xuICBzdHlsZXNDcmVhdG9yLm9wdGlvbnMgPSB7XG4gICAgaW5kZXg6IGluY3JlbWVudCgpLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgbWV0YTogY2xhc3NOYW1lUHJlZml4LFxuICAgIGNsYXNzTmFtZVByZWZpeDogY2xhc3NOYW1lUHJlZml4XG4gIH07XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB2YXIgdGhlbWUgPSB1c2VUaGVtZSgpIHx8IGRlZmF1bHRUaGVtZTtcblxuICAgIHZhciBzdHlsZXNPcHRpb25zID0gX2V4dGVuZHMoe30sIFJlYWN0LnVzZUNvbnRleHQoU3R5bGVzQ29udGV4dCksIHt9LCBzdHlsZXNPcHRpb25zMik7XG5cbiAgICB2YXIgaW5zdGFuY2UgPSBSZWFjdC51c2VSZWYoKTtcbiAgICB2YXIgc2hvdWxkVXBkYXRlID0gUmVhY3QudXNlUmVmKCk7XG4gICAgdXNlU3luY2hyb25vdXNFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGN1cnJlbnQgPSB7XG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIHN0YXRlOiB7fSxcbiAgICAgICAgc3R5bGVzQ3JlYXRvcjogc3R5bGVzQ3JlYXRvcixcbiAgICAgICAgc3R5bGVzT3B0aW9uczogc3R5bGVzT3B0aW9ucyxcbiAgICAgICAgdGhlbWU6IHRoZW1lXG4gICAgICB9O1xuICAgICAgYXR0YWNoKGN1cnJlbnQsIHByb3BzKTtcbiAgICAgIHNob3VsZFVwZGF0ZS5jdXJyZW50ID0gZmFsc2U7XG4gICAgICBpbnN0YW5jZS5jdXJyZW50ID0gY3VycmVudDtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRldGFjaChjdXJyZW50KTtcbiAgICAgIH07XG4gICAgfSwgW3RoZW1lLCBzdHlsZXNDcmVhdG9yXSk7XG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzaG91bGRVcGRhdGUuY3VycmVudCkge1xuICAgICAgICB1cGRhdGUoaW5zdGFuY2UuY3VycmVudCwgcHJvcHMpO1xuICAgICAgfVxuXG4gICAgICBzaG91bGRVcGRhdGUuY3VycmVudCA9IHRydWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIGdldENsYXNzZXMoaW5zdGFuY2UuY3VycmVudCwgcHJvcHMuY2xhc3NlcywgQ29tcG9uZW50KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFrZVN0eWxlczsiLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLXN5bnRheCAqL1xuZnVuY3Rpb24gZ2V0VGhlbWVQcm9wcyhwYXJhbXMpIHtcbiAgdmFyIHRoZW1lID0gcGFyYW1zLnRoZW1lLFxuICAgICAgbmFtZSA9IHBhcmFtcy5uYW1lLFxuICAgICAgcHJvcHMgPSBwYXJhbXMucHJvcHM7XG5cbiAgaWYgKCF0aGVtZSB8fCAhdGhlbWUucHJvcHMgfHwgIXRoZW1lLnByb3BzW25hbWVdKSB7XG4gICAgcmV0dXJuIHByb3BzO1xuICB9IC8vIFJlc29sdmUgZGVmYXVsdCBwcm9wcywgY29kZSBib3Jyb3cgZnJvbSBSZWFjdCBzb3VyY2UuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iLzE1YThmMDMxODM4YTU1M2U0MWMwYjY2ZWIxYmNmMWRhODQ0ODEwNGQvcGFja2FnZXMvcmVhY3Qvc3JjL1JlYWN0RWxlbWVudC5qcyNMMjIxXG5cblxuICB2YXIgZGVmYXVsdFByb3BzID0gdGhlbWUucHJvcHNbbmFtZV07XG4gIHZhciBwcm9wTmFtZTtcblxuICBmb3IgKHByb3BOYW1lIGluIGRlZmF1bHRQcm9wcykge1xuICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcHJvcHNbcHJvcE5hbWVdID0gZGVmYXVsdFByb3BzW3Byb3BOYW1lXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcHJvcHM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFRoZW1lUHJvcHM7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgaG9pc3ROb25SZWFjdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0IHsgY2hhaW5Qcm9wVHlwZXMsIGdldERpc3BsYXlOYW1lIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBtYWtlU3R5bGVzIGZyb20gJy4uL21ha2VTdHlsZXMnO1xuaW1wb3J0IGdldFRoZW1lUHJvcHMgZnJvbSAnLi4vZ2V0VGhlbWVQcm9wcyc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vdXNlVGhlbWUnOyAvLyBMaW5rIGEgc3R5bGUgc2hlZXQgd2l0aCBhIGNvbXBvbmVudC5cbi8vIEl0IGRvZXMgbm90IG1vZGlmeSB0aGUgY29tcG9uZW50IHBhc3NlZCB0byBpdDtcbi8vIGluc3RlYWQsIGl0IHJldHVybnMgYSBuZXcgY29tcG9uZW50LCB3aXRoIGEgYGNsYXNzZXNgIHByb3BlcnR5LlxuXG52YXIgd2l0aFN0eWxlcyA9IGZ1bmN0aW9uIHdpdGhTdHlsZXMoc3R5bGVzT3JDcmVhdG9yKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChDb21wb25lbnQpIHtcbiAgICB2YXIgZGVmYXVsdFRoZW1lID0gb3B0aW9ucy5kZWZhdWx0VGhlbWUsXG4gICAgICAgIF9vcHRpb25zJHdpdGhUaGVtZSA9IG9wdGlvbnMud2l0aFRoZW1lLFxuICAgICAgICB3aXRoVGhlbWUgPSBfb3B0aW9ucyR3aXRoVGhlbWUgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkd2l0aFRoZW1lLFxuICAgICAgICBuYW1lID0gb3B0aW9ucy5uYW1lLFxuICAgICAgICBzdHlsZXNPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9wdGlvbnMsIFtcImRlZmF1bHRUaGVtZVwiLCBcIndpdGhUaGVtZVwiLCBcIm5hbWVcIl0pO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChDb21wb25lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoWydZb3UgYXJlIGNhbGxpbmcgd2l0aFN0eWxlcyhzdHlsZXMpKENvbXBvbmVudCkgd2l0aCBhbiB1bmRlZmluZWQgY29tcG9uZW50LicsICdZb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIGltcG9ydCBpdC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGNsYXNzTmFtZVByZWZpeCA9IG5hbWU7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFuYW1lKSB7XG4gICAgICAgIC8vIFByb3ZpZGUgYSBiZXR0ZXIgRFggb3V0c2lkZSBwcm9kdWN0aW9uLlxuICAgICAgICB2YXIgZGlzcGxheU5hbWUgPSBnZXREaXNwbGF5TmFtZShDb21wb25lbnQpO1xuXG4gICAgICAgIGlmIChkaXNwbGF5TmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY2xhc3NOYW1lUHJlZml4ID0gZGlzcGxheU5hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgdXNlU3R5bGVzID0gbWFrZVN0eWxlcyhzdHlsZXNPckNyZWF0b3IsIF9leHRlbmRzKHtcbiAgICAgIGRlZmF1bHRUaGVtZTogZGVmYXVsdFRoZW1lLFxuICAgICAgQ29tcG9uZW50OiBDb21wb25lbnQsXG4gICAgICBuYW1lOiBuYW1lIHx8IENvbXBvbmVudC5kaXNwbGF5TmFtZSxcbiAgICAgIGNsYXNzTmFtZVByZWZpeDogY2xhc3NOYW1lUHJlZml4XG4gICAgfSwgc3R5bGVzT3B0aW9ucykpO1xuICAgIHZhciBXaXRoU3R5bGVzID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBXaXRoU3R5bGVzKHByb3BzLCByZWYpIHtcbiAgICAgIHZhciBjbGFzc2VzUHJvcCA9IHByb3BzLmNsYXNzZXMsXG4gICAgICAgICAgaW5uZXJSZWYgPSBwcm9wcy5pbm5lclJlZixcbiAgICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImlubmVyUmVmXCJdKTtcblxuICAgICAgdmFyIGNsYXNzZXMgPSB1c2VTdHlsZXMocHJvcHMpO1xuICAgICAgdmFyIHRoZW1lO1xuICAgICAgdmFyIG1vcmUgPSBvdGhlcjtcblxuICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyB8fCB3aXRoVGhlbWUpIHtcbiAgICAgICAgLy8gbmFtZSBhbmQgd2l0aFRoZW1lIGFyZSBpbnZhcmlhbnQgaW4gdGhlIG91dGVyIHNjb3BlXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgICAgICB0aGVtZSA9IHVzZVRoZW1lKCkgfHwgZGVmYXVsdFRoZW1lO1xuXG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgbW9yZSA9IGdldFRoZW1lUHJvcHMoe1xuICAgICAgICAgICAgdGhlbWU6IHRoZW1lLFxuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIHByb3BzOiBvdGhlclxuICAgICAgICAgIH0pO1xuICAgICAgICB9IC8vIFByb3ZpZGUgdGhlIHRoZW1lIHRvIHRoZSB3cmFwcGVkIGNvbXBvbmVudC5cbiAgICAgICAgLy8gU28gd2UgZG9uJ3QgaGF2ZSB0byB1c2UgdGhlIGB3aXRoVGhlbWUoKWAgSGlnaGVyLW9yZGVyIENvbXBvbmVudC5cblxuXG4gICAgICAgIGlmICh3aXRoVGhlbWUgJiYgIW1vcmUudGhlbWUpIHtcbiAgICAgICAgICBtb3JlLnRoZW1lID0gdGhlbWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICAgIHJlZjogaW5uZXJSZWYgfHwgcmVmLFxuICAgICAgICBjbGFzc2VzOiBjbGFzc2VzXG4gICAgICB9LCBtb3JlKSk7XG4gICAgfSk7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gV2l0aFN0eWxlcy5wcm9wVHlwZXMgPSB7XG4gICAgICAvKipcbiAgICAgICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICAgICAqL1xuICAgICAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2UgdGhhdCBwcm9wIHRvIHBhc3MgYSByZWYgdG8gdGhlIGRlY29yYXRlZCBjb21wb25lbnQuXG4gICAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAgICovXG4gICAgICBpbm5lclJlZjogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSwgZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIGlmIChwcm9wcy5pbm5lclJlZiA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDsgLy8gcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgLy8gICAnTWF0ZXJpYWwtVUk6IHRoZSBgaW5uZXJSZWZgIHByb3AgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHY1LiAnICtcbiAgICAgICAgLy8gICAgICdSZWZzIGFyZSBub3cgYXV0b21hdGljYWxseSBmb3J3YXJkZWQgdG8gdGhlIGlubmVyIGNvbXBvbmVudC4nLFxuICAgICAgICAvLyApO1xuICAgICAgfSlcbiAgICB9IDogdm9pZCAwOyAvLyBUaGUgd3JhcHBlciByZWNlaXZlcyBvbmx5IHVzZXIgc3VwcGxpZWQgcHJvcHMsIHdoaWNoIGNvdWxkIGJlIGEgc3Vic2V0IG9mXG4gICAgLy8gdGhlIGFjdHVhbCBwcm9wcyBDb21wb25lbnQgbWlnaHQgcmVjZWl2ZSBkdWUgdG8gbWVyZ2luZyB3aXRoIGRlZmF1bHRQcm9wcy5cbiAgICAvLyBTbyBjb3B5aW5nIGl0IGhlcmUgd291bGQgZ2l2ZSB1cyB0aGUgc2FtZSByZXN1bHQgaW4gdGhlIHdyYXBwZXIgYXMgd2VsbC5cblxuICAgIFdpdGhTdHlsZXMuZGVmYXVsdFByb3BzID0gQ29tcG9uZW50LmRlZmF1bHRQcm9wcztcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBXaXRoU3R5bGVzLmRpc3BsYXlOYW1lID0gXCJXaXRoU3R5bGVzKFwiLmNvbmNhdChnZXREaXNwbGF5TmFtZShDb21wb25lbnQpLCBcIilcIik7XG4gICAgfVxuXG4gICAgaG9pc3ROb25SZWFjdFN0YXRpY3MoV2l0aFN0eWxlcywgQ29tcG9uZW50KTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBFeHBvc2VkIGZvciB0ZXN0IHB1cnBvc2VzLlxuICAgICAgV2l0aFN0eWxlcy5OYWtlZCA9IENvbXBvbmVudDtcbiAgICAgIFdpdGhTdHlsZXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICBXaXRoU3R5bGVzLnVzZVN0eWxlcyA9IHVzZVN0eWxlcztcbiAgICB9XG5cbiAgICByZXR1cm4gV2l0aFN0eWxlcztcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXM7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuLy8gU29ydGVkIEFTQyBieSBzaXplLiBUaGF0J3MgaW1wb3J0YW50LlxuLy8gSXQgY2FuJ3QgYmUgY29uZmlndXJlZCBhcyBpdCdzIHVzZWQgc3RhdGljYWxseSBmb3IgcHJvcFR5cGVzLlxuZXhwb3J0IHZhciBrZXlzID0gWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddOyAvLyBLZWVwIGluIG1pbmQgdGhhdCBAbWVkaWEgaXMgaW5jbHVzaXZlIGJ5IHRoZSBDU1Mgc3BlY2lmaWNhdGlvbi5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQnJlYWtwb2ludHMoYnJlYWtwb2ludHMpIHtcbiAgdmFyIF9icmVha3BvaW50cyR2YWx1ZXMgPSBicmVha3BvaW50cy52YWx1ZXMsXG4gICAgICB2YWx1ZXMgPSBfYnJlYWtwb2ludHMkdmFsdWVzID09PSB2b2lkIDAgPyB7XG4gICAgeHM6IDAsXG4gICAgc206IDYwMCxcbiAgICBtZDogOTYwLFxuICAgIGxnOiAxMjgwLFxuICAgIHhsOiAxOTIwXG4gIH0gOiBfYnJlYWtwb2ludHMkdmFsdWVzLFxuICAgICAgX2JyZWFrcG9pbnRzJHVuaXQgPSBicmVha3BvaW50cy51bml0LFxuICAgICAgdW5pdCA9IF9icmVha3BvaW50cyR1bml0ID09PSB2b2lkIDAgPyAncHgnIDogX2JyZWFrcG9pbnRzJHVuaXQsXG4gICAgICBfYnJlYWtwb2ludHMkc3RlcCA9IGJyZWFrcG9pbnRzLnN0ZXAsXG4gICAgICBzdGVwID0gX2JyZWFrcG9pbnRzJHN0ZXAgPT09IHZvaWQgMCA/IDUgOiBfYnJlYWtwb2ludHMkc3RlcCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKGJyZWFrcG9pbnRzLCBbXCJ2YWx1ZXNcIiwgXCJ1bml0XCIsIFwic3RlcFwiXSk7XG5cbiAgZnVuY3Rpb24gdXAoa2V5KSB7XG4gICAgdmFyIHZhbHVlID0gdHlwZW9mIHZhbHVlc1trZXldID09PSAnbnVtYmVyJyA/IHZhbHVlc1trZXldIDoga2V5O1xuICAgIHJldHVybiBcIkBtZWRpYSAobWluLXdpZHRoOlwiLmNvbmNhdCh2YWx1ZSkuY29uY2F0KHVuaXQsIFwiKVwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvd24oa2V5KSB7XG4gICAgdmFyIGVuZEluZGV4ID0ga2V5cy5pbmRleE9mKGtleSkgKyAxO1xuICAgIHZhciB1cHBlcmJvdW5kID0gdmFsdWVzW2tleXNbZW5kSW5kZXhdXTtcblxuICAgIGlmIChlbmRJbmRleCA9PT0ga2V5cy5sZW5ndGgpIHtcbiAgICAgIC8vIHhsIGRvd24gYXBwbGllcyB0byBhbGwgc2l6ZXNcbiAgICAgIHJldHVybiB1cCgneHMnKTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWUgPSB0eXBlb2YgdXBwZXJib3VuZCA9PT0gJ251bWJlcicgJiYgZW5kSW5kZXggPiAwID8gdXBwZXJib3VuZCA6IGtleTtcbiAgICByZXR1cm4gXCJAbWVkaWEgKG1heC13aWR0aDpcIi5jb25jYXQodmFsdWUgLSBzdGVwIC8gMTAwKS5jb25jYXQodW5pdCwgXCIpXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gYmV0d2VlbihzdGFydCwgZW5kKSB7XG4gICAgdmFyIGVuZEluZGV4ID0ga2V5cy5pbmRleE9mKGVuZCk7XG5cbiAgICBpZiAoZW5kSW5kZXggPT09IGtleXMubGVuZ3RoIC0gMSkge1xuICAgICAgcmV0dXJuIHVwKHN0YXJ0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gXCJAbWVkaWEgKG1pbi13aWR0aDpcIi5jb25jYXQodHlwZW9mIHZhbHVlc1tzdGFydF0gPT09ICdudW1iZXInID8gdmFsdWVzW3N0YXJ0XSA6IHN0YXJ0KS5jb25jYXQodW5pdCwgXCIpIGFuZCBcIikgKyBcIihtYXgtd2lkdGg6XCIuY29uY2F0KChlbmRJbmRleCAhPT0gLTEgJiYgdHlwZW9mIHZhbHVlc1trZXlzW2VuZEluZGV4ICsgMV1dID09PSAnbnVtYmVyJyA/IHZhbHVlc1trZXlzW2VuZEluZGV4ICsgMV1dIDogZW5kKSAtIHN0ZXAgLyAxMDApLmNvbmNhdCh1bml0LCBcIilcIik7XG4gIH1cblxuICBmdW5jdGlvbiBvbmx5KGtleSkge1xuICAgIHJldHVybiBiZXR3ZWVuKGtleSwga2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdpZHRoKGtleSkge1xuICAgIHJldHVybiB2YWx1ZXNba2V5XTtcbiAgfVxuXG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAga2V5czoga2V5cyxcbiAgICB2YWx1ZXM6IHZhbHVlcyxcbiAgICB1cDogdXAsXG4gICAgZG93bjogZG93bixcbiAgICBiZXR3ZWVuOiBiZXR3ZWVuLFxuICAgIG9ubHk6IG9ubHksXG4gICAgd2lkdGg6IHdpZHRoXG4gIH0sIG90aGVyKTtcbn0iLCJpbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVNaXhpbnMoYnJlYWtwb2ludHMsIHNwYWNpbmcsIG1peGlucykge1xuICB2YXIgX3Rvb2xiYXI7XG5cbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICBndXR0ZXJzOiBmdW5jdGlvbiBndXR0ZXJzKCkge1xuICAgICAgdmFyIHN0eWxlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgICAvLyBUbyBkZXByZWNhdGUgaW4gdjQuMVxuICAgICAgLy8gICAgICAgd2FybmluZyhcbiAgICAgIC8vICAgICAgICAgZmFsc2UsXG4gICAgICAvLyAgICAgICAgIFtcbiAgICAgIC8vICAgICAgICAgICAnTWF0ZXJpYWwtVUk6IHRoZW1lLm1peGlucy5ndXR0ZXJzKCkgaXMgZGVwcmVjYXRlZC4nLFxuICAgICAgLy8gICAgICAgICAgICdZb3UgY2FuIHVzZSB0aGUgc291cmNlIG9mIHRoZSBtaXhpbiBkaXJlY3RseTonLFxuICAgICAgLy8gICAgICAgICAgIGBcbiAgICAgIC8vIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgLy8gcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgLy8gW3RoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpXToge1xuICAgICAgLy8gICBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZygzKSxcbiAgICAgIC8vICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDMpLFxuICAgICAgLy8gfSxcbiAgICAgIC8vIGAsXG4gICAgICAvLyAgICAgICAgIF0uam9pbignXFxuJyksXG4gICAgICAvLyAgICAgICApO1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgICAgcGFkZGluZ0xlZnQ6IHNwYWNpbmcoMiksXG4gICAgICAgIHBhZGRpbmdSaWdodDogc3BhY2luZygyKVxuICAgICAgfSwgc3R5bGVzLCBfZGVmaW5lUHJvcGVydHkoe30sIGJyZWFrcG9pbnRzLnVwKCdzbScpLCBfZXh0ZW5kcyh7XG4gICAgICAgIHBhZGRpbmdMZWZ0OiBzcGFjaW5nKDMpLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6IHNwYWNpbmcoMylcbiAgICAgIH0sIHN0eWxlc1ticmVha3BvaW50cy51cCgnc20nKV0pKSk7XG4gICAgfSxcbiAgICB0b29sYmFyOiAoX3Rvb2xiYXIgPSB7XG4gICAgICBtaW5IZWlnaHQ6IDU2XG4gICAgfSwgX2RlZmluZVByb3BlcnR5KF90b29sYmFyLCBcIlwiLmNvbmNhdChicmVha3BvaW50cy51cCgneHMnKSwgXCIgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKVwiKSwge1xuICAgICAgbWluSGVpZ2h0OiA0OFxuICAgIH0pLCBfZGVmaW5lUHJvcGVydHkoX3Rvb2xiYXIsIGJyZWFrcG9pbnRzLnVwKCdzbScpLCB7XG4gICAgICBtaW5IZWlnaHQ6IDY0XG4gICAgfSksIF90b29sYmFyKVxuICB9LCBtaXhpbnMpO1xufSIsInZhciBjb21tb24gPSB7XG4gIGJsYWNrOiAnIzAwMCcsXG4gIHdoaXRlOiAnI2ZmZidcbn07XG5leHBvcnQgZGVmYXVsdCBjb21tb247IiwidmFyIGdyZXkgPSB7XG4gIDUwOiAnI2ZhZmFmYScsXG4gIDEwMDogJyNmNWY1ZjUnLFxuICAyMDA6ICcjZWVlZWVlJyxcbiAgMzAwOiAnI2UwZTBlMCcsXG4gIDQwMDogJyNiZGJkYmQnLFxuICA1MDA6ICcjOWU5ZTllJyxcbiAgNjAwOiAnIzc1NzU3NScsXG4gIDcwMDogJyM2MTYxNjEnLFxuICA4MDA6ICcjNDI0MjQyJyxcbiAgOTAwOiAnIzIxMjEyMScsXG4gIEExMDA6ICcjZDVkNWQ1JyxcbiAgQTIwMDogJyNhYWFhYWEnLFxuICBBNDAwOiAnIzMwMzAzMCcsXG4gIEE3MDA6ICcjNjE2MTYxJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGdyZXk7IiwidmFyIGluZGlnbyA9IHtcbiAgNTA6ICcjZThlYWY2JyxcbiAgMTAwOiAnI2M1Y2FlOScsXG4gIDIwMDogJyM5ZmE4ZGEnLFxuICAzMDA6ICcjNzk4NmNiJyxcbiAgNDAwOiAnIzVjNmJjMCcsXG4gIDUwMDogJyMzZjUxYjUnLFxuICA2MDA6ICcjMzk0OWFiJyxcbiAgNzAwOiAnIzMwM2Y5ZicsXG4gIDgwMDogJyMyODM1OTMnLFxuICA5MDA6ICcjMWEyMzdlJyxcbiAgQTEwMDogJyM4YzllZmYnLFxuICBBMjAwOiAnIzUzNmRmZScsXG4gIEE0MDA6ICcjM2Q1YWZlJyxcbiAgQTcwMDogJyMzMDRmZmUnXG59O1xuZXhwb3J0IGRlZmF1bHQgaW5kaWdvOyIsInZhciBwaW5rID0ge1xuICA1MDogJyNmY2U0ZWMnLFxuICAxMDA6ICcjZjhiYmQwJyxcbiAgMjAwOiAnI2Y0OGZiMScsXG4gIDMwMDogJyNmMDYyOTInLFxuICA0MDA6ICcjZWM0MDdhJyxcbiAgNTAwOiAnI2U5MWU2MycsXG4gIDYwMDogJyNkODFiNjAnLFxuICA3MDA6ICcjYzIxODViJyxcbiAgODAwOiAnI2FkMTQ1NycsXG4gIDkwMDogJyM4ODBlNGYnLFxuICBBMTAwOiAnI2ZmODBhYicsXG4gIEEyMDA6ICcjZmY0MDgxJyxcbiAgQTQwMDogJyNmNTAwNTcnLFxuICBBNzAwOiAnI2M1MTE2Midcbn07XG5leHBvcnQgZGVmYXVsdCBwaW5rOyIsInZhciByZWQgPSB7XG4gIDUwOiAnI2ZmZWJlZScsXG4gIDEwMDogJyNmZmNkZDInLFxuICAyMDA6ICcjZWY5YTlhJyxcbiAgMzAwOiAnI2U1NzM3MycsXG4gIDQwMDogJyNlZjUzNTAnLFxuICA1MDA6ICcjZjQ0MzM2JyxcbiAgNjAwOiAnI2U1MzkzNScsXG4gIDcwMDogJyNkMzJmMmYnLFxuICA4MDA6ICcjYzYyODI4JyxcbiAgOTAwOiAnI2I3MWMxYycsXG4gIEExMDA6ICcjZmY4YTgwJyxcbiAgQTIwMDogJyNmZjUyNTInLFxuICBBNDAwOiAnI2ZmMTc0NCcsXG4gIEE3MDA6ICcjZDUwMDAwJ1xufTtcbmV4cG9ydCBkZWZhdWx0IHJlZDsiLCJ2YXIgb3JhbmdlID0ge1xuICA1MDogJyNmZmYzZTAnLFxuICAxMDA6ICcjZmZlMGIyJyxcbiAgMjAwOiAnI2ZmY2M4MCcsXG4gIDMwMDogJyNmZmI3NGQnLFxuICA0MDA6ICcjZmZhNzI2JyxcbiAgNTAwOiAnI2ZmOTgwMCcsXG4gIDYwMDogJyNmYjhjMDAnLFxuICA3MDA6ICcjZjU3YzAwJyxcbiAgODAwOiAnI2VmNmMwMCcsXG4gIDkwMDogJyNlNjUxMDAnLFxuICBBMTAwOiAnI2ZmZDE4MCcsXG4gIEEyMDA6ICcjZmZhYjQwJyxcbiAgQTQwMDogJyNmZjkxMDAnLFxuICBBNzAwOiAnI2ZmNmQwMCdcbn07XG5leHBvcnQgZGVmYXVsdCBvcmFuZ2U7IiwidmFyIGJsdWUgPSB7XG4gIDUwOiAnI2UzZjJmZCcsXG4gIDEwMDogJyNiYmRlZmInLFxuICAyMDA6ICcjOTBjYWY5JyxcbiAgMzAwOiAnIzY0YjVmNicsXG4gIDQwMDogJyM0MmE1ZjUnLFxuICA1MDA6ICcjMjE5NmYzJyxcbiAgNjAwOiAnIzFlODhlNScsXG4gIDcwMDogJyMxOTc2ZDInLFxuICA4MDA6ICcjMTU2NWMwJyxcbiAgOTAwOiAnIzBkNDdhMScsXG4gIEExMDA6ICcjODJiMWZmJyxcbiAgQTIwMDogJyM0NDhhZmYnLFxuICBBNDAwOiAnIzI5NzlmZicsXG4gIEE3MDA6ICcjMjk2MmZmJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGJsdWU7IiwidmFyIGdyZWVuID0ge1xuICA1MDogJyNlOGY1ZTknLFxuICAxMDA6ICcjYzhlNmM5JyxcbiAgMjAwOiAnI2E1ZDZhNycsXG4gIDMwMDogJyM4MWM3ODQnLFxuICA0MDA6ICcjNjZiYjZhJyxcbiAgNTAwOiAnIzRjYWY1MCcsXG4gIDYwMDogJyM0M2EwNDcnLFxuICA3MDA6ICcjMzg4ZTNjJyxcbiAgODAwOiAnIzJlN2QzMicsXG4gIDkwMDogJyMxYjVlMjAnLFxuICBBMTAwOiAnI2I5ZjZjYScsXG4gIEEyMDA6ICcjNjlmMGFlJyxcbiAgQTQwMDogJyMwMGU2NzYnLFxuICBBNzAwOiAnIzAwYzg1Mydcbn07XG5leHBvcnQgZGVmYXVsdCBncmVlbjsiLCIvKiBlc2xpbnQtZGlzYWJsZSBuby11c2UtYmVmb3JlLWRlZmluZSAqL1xuXG4vKipcbiAqIFJldHVybnMgYSBudW1iZXIgd2hvc2UgdmFsdWUgaXMgbGltaXRlZCB0byB0aGUgZ2l2ZW4gcmFuZ2UuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFRoZSB2YWx1ZSB0byBiZSBjbGFtcGVkXG4gKiBAcGFyYW0ge251bWJlcn0gbWluIFRoZSBsb3dlciBib3VuZGFyeSBvZiB0aGUgb3V0cHV0IHJhbmdlXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4IFRoZSB1cHBlciBib3VuZGFyeSBvZiB0aGUgb3V0cHV0IHJhbmdlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBBIG51bWJlciBpbiB0aGUgcmFuZ2UgW21pbiwgbWF4XVxuICovXG5mdW5jdGlvbiBjbGFtcCh2YWx1ZSkge1xuICB2YXIgbWluID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuICB2YXIgbWF4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAxO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHZhbHVlIDwgbWluIHx8IHZhbHVlID4gbWF4KSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiTWF0ZXJpYWwtVUk6IHRoZSB2YWx1ZSBwcm92aWRlZCBcIi5jb25jYXQodmFsdWUsIFwiIGlzIG91dCBvZiByYW5nZSBbXCIpLmNvbmNhdChtaW4sIFwiLCBcIikuY29uY2F0KG1heCwgXCJdLlwiKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG1pbiwgdmFsdWUpLCBtYXgpO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gQ1NTIGhleCBmb3JtYXQgdG8gQ1NTIHJnYiBmb3JtYXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gSGV4IGNvbG9yLCBpLmUuICNubm4gb3IgI25ubm5ublxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgcmdiIGNvbG9yIHN0cmluZ1xuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGhleFRvUmdiKGNvbG9yKSB7XG4gIGNvbG9yID0gY29sb3Iuc3Vic3RyKDEpO1xuICB2YXIgcmUgPSBuZXcgUmVnRXhwKFwiLnsxLFwiLmNvbmNhdChjb2xvci5sZW5ndGggLyAzLCBcIn1cIiksICdnJyk7XG4gIHZhciBjb2xvcnMgPSBjb2xvci5tYXRjaChyZSk7XG5cbiAgaWYgKGNvbG9ycyAmJiBjb2xvcnNbMF0ubGVuZ3RoID09PSAxKSB7XG4gICAgY29sb3JzID0gY29sb3JzLm1hcChmdW5jdGlvbiAobikge1xuICAgICAgcmV0dXJuIG4gKyBuO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGNvbG9ycyA/IFwicmdiKFwiLmNvbmNhdChjb2xvcnMubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KG4sIDE2KTtcbiAgfSkuam9pbignLCAnKSwgXCIpXCIpIDogJyc7XG59XG5cbmZ1bmN0aW9uIGludFRvSGV4KGludCkge1xuICB2YXIgaGV4ID0gaW50LnRvU3RyaW5nKDE2KTtcbiAgcmV0dXJuIGhleC5sZW5ndGggPT09IDEgPyBcIjBcIi5jb25jYXQoaGV4KSA6IGhleDtcbn1cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBmcm9tIENTUyByZ2IgZm9ybWF0IHRvIENTUyBoZXggZm9ybWF0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIFJHQiBjb2xvciwgaS5lLiByZ2IobiwgbiwgbilcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIHJnYiBjb2xvciBzdHJpbmcsIGkuZS4gI25ubm5ublxuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYlRvSGV4KGNvbG9yKSB7XG4gIC8vIElkZW1wb3RlbnRcbiAgaWYgKGNvbG9yLmluZGV4T2YoJyMnKSA9PT0gMCkge1xuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuXG4gIHZhciBfZGVjb21wb3NlQ29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvciksXG4gICAgICB2YWx1ZXMgPSBfZGVjb21wb3NlQ29sb3IudmFsdWVzO1xuXG4gIHJldHVybiBcIiNcIi5jb25jYXQodmFsdWVzLm1hcChmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBpbnRUb0hleChuKTtcbiAgfSkuam9pbignJykpO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gaHNsIGZvcm1hdCB0byByZ2IgZm9ybWF0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIEhTTCBjb2xvciB2YWx1ZXNcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHJnYiBjb2xvciB2YWx1ZXNcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaHNsVG9SZ2IoY29sb3IpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHZhciBfY29sb3IgPSBjb2xvcixcbiAgICAgIHZhbHVlcyA9IF9jb2xvci52YWx1ZXM7XG4gIHZhciBoID0gdmFsdWVzWzBdO1xuICB2YXIgcyA9IHZhbHVlc1sxXSAvIDEwMDtcbiAgdmFyIGwgPSB2YWx1ZXNbMl0gLyAxMDA7XG4gIHZhciBhID0gcyAqIE1hdGgubWluKGwsIDEgLSBsKTtcblxuICB2YXIgZiA9IGZ1bmN0aW9uIGYobikge1xuICAgIHZhciBrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAobiArIGggLyAzMCkgJSAxMjtcbiAgICByZXR1cm4gbCAtIGEgKiBNYXRoLm1heChNYXRoLm1pbihrIC0gMywgOSAtIGssIDEpLCAtMSk7XG4gIH07XG5cbiAgdmFyIHR5cGUgPSAncmdiJztcbiAgdmFyIHJnYiA9IFtNYXRoLnJvdW5kKGYoMCkgKiAyNTUpLCBNYXRoLnJvdW5kKGYoOCkgKiAyNTUpLCBNYXRoLnJvdW5kKGYoNCkgKiAyNTUpXTtcblxuICBpZiAoY29sb3IudHlwZSA9PT0gJ2hzbGEnKSB7XG4gICAgdHlwZSArPSAnYSc7XG4gICAgcmdiLnB1c2godmFsdWVzWzNdKTtcbiAgfVxuXG4gIHJldHVybiByZWNvbXBvc2VDb2xvcih7XG4gICAgdHlwZTogdHlwZSxcbiAgICB2YWx1ZXM6IHJnYlxuICB9KTtcbn1cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgd2l0aCB0aGUgdHlwZSBhbmQgdmFsdWVzIG9mIGEgY29sb3IuXG4gKlxuICogTm90ZTogRG9lcyBub3Qgc3VwcG9ydCByZ2IgJSB2YWx1ZXMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHJldHVybnMge29iamVjdH0gLSBBIE1VSSBjb2xvciBvYmplY3Q6IHt0eXBlOiBzdHJpbmcsIHZhbHVlczogbnVtYmVyW119XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29tcG9zZUNvbG9yKGNvbG9yKSB7XG4gIC8vIElkZW1wb3RlbnRcbiAgaWYgKGNvbG9yLnR5cGUpIHtcbiAgICByZXR1cm4gY29sb3I7XG4gIH1cblxuICBpZiAoY29sb3IuY2hhckF0KDApID09PSAnIycpIHtcbiAgICByZXR1cm4gZGVjb21wb3NlQ29sb3IoaGV4VG9SZ2IoY29sb3IpKTtcbiAgfVxuXG4gIHZhciBtYXJrZXIgPSBjb2xvci5pbmRleE9mKCcoJyk7XG4gIHZhciB0eXBlID0gY29sb3Iuc3Vic3RyaW5nKDAsIG1hcmtlcik7XG5cbiAgaWYgKFsncmdiJywgJ3JnYmEnLCAnaHNsJywgJ2hzbGEnXS5pbmRleE9mKHR5cGUpID09PSAtMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihbXCJNYXRlcmlhbC1VSTogdW5zdXBwb3J0ZWQgYFwiLmNvbmNhdChjb2xvciwgXCJgIGNvbG9yLlwiKSwgJ1dlIHN1cHBvcnQgdGhlIGZvbGxvd2luZyBmb3JtYXRzOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLiddLmpvaW4oJ1xcbicpKTtcbiAgfVxuXG4gIHZhciB2YWx1ZXMgPSBjb2xvci5zdWJzdHJpbmcobWFya2VyICsgMSwgY29sb3IubGVuZ3RoIC0gMSkuc3BsaXQoJywnKTtcbiAgdmFsdWVzID0gdmFsdWVzLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgdmFsdWVzOiB2YWx1ZXNcbiAgfTtcbn1cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBvYmplY3Qgd2l0aCB0eXBlIGFuZCB2YWx1ZXMgdG8gYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbG9yIC0gRGVjb21wb3NlZCBjb2xvclxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yLnR5cGUgLSBPbmUgb2Y6ICdyZ2InLCAncmdiYScsICdoc2wnLCAnaHNsYSdcbiAqIEBwYXJhbSB7YXJyYXl9IGNvbG9yLnZhbHVlcyAtIFtuLG4sbl0gb3IgW24sbixuLG5dXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmdcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcmVjb21wb3NlQ29sb3IoY29sb3IpIHtcbiAgdmFyIHR5cGUgPSBjb2xvci50eXBlO1xuICB2YXIgdmFsdWVzID0gY29sb3IudmFsdWVzO1xuXG4gIGlmICh0eXBlLmluZGV4T2YoJ3JnYicpICE9PSAtMSkge1xuICAgIC8vIE9ubHkgY29udmVydCB0aGUgZmlyc3QgMyB2YWx1ZXMgdG8gaW50IChpLmUuIG5vdCBhbHBoYSlcbiAgICB2YWx1ZXMgPSB2YWx1ZXMubWFwKGZ1bmN0aW9uIChuLCBpKSB7XG4gICAgICByZXR1cm4gaSA8IDMgPyBwYXJzZUludChuLCAxMCkgOiBuO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKHR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xKSB7XG4gICAgdmFsdWVzWzFdID0gXCJcIi5jb25jYXQodmFsdWVzWzFdLCBcIiVcIik7XG4gICAgdmFsdWVzWzJdID0gXCJcIi5jb25jYXQodmFsdWVzWzJdLCBcIiVcIik7XG4gIH1cblxuICByZXR1cm4gXCJcIi5jb25jYXQodHlwZSwgXCIoXCIpLmNvbmNhdCh2YWx1ZXMuam9pbignLCAnKSwgXCIpXCIpO1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBjb250cmFzdCByYXRpbyBiZXR3ZWVuIHR3byBjb2xvcnMuXG4gKlxuICogRm9ybXVsYTogaHR0cHM6Ly93d3cudzMub3JnL1RSL1dDQUcyMC1URUNIUy9HMTcuaHRtbCNHMTctdGVzdHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9yZWdyb3VuZCAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYWNrZ3JvdW5kIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHJldHVybnMge251bWJlcn0gQSBjb250cmFzdCByYXRpbyB2YWx1ZSBpbiB0aGUgcmFuZ2UgMCAtIDIxLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb250cmFzdFJhdGlvKGZvcmVncm91bmQsIGJhY2tncm91bmQpIHtcbiAgdmFyIGx1bUEgPSBnZXRMdW1pbmFuY2UoZm9yZWdyb3VuZCk7XG4gIHZhciBsdW1CID0gZ2V0THVtaW5hbmNlKGJhY2tncm91bmQpO1xuICByZXR1cm4gKE1hdGgubWF4KGx1bUEsIGx1bUIpICsgMC4wNSkgLyAoTWF0aC5taW4obHVtQSwgbHVtQikgKyAwLjA1KTtcbn1cbi8qKlxuICogVGhlIHJlbGF0aXZlIGJyaWdodG5lc3Mgb2YgYW55IHBvaW50IGluIGEgY29sb3Igc3BhY2UsXG4gKiBub3JtYWxpemVkIHRvIDAgZm9yIGRhcmtlc3QgYmxhY2sgYW5kIDEgZm9yIGxpZ2h0ZXN0IHdoaXRlLlxuICpcbiAqIEZvcm11bGE6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAtVEVDSFMvRzE3Lmh0bWwjRzE3LXRlc3RzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHJldHVybnMge251bWJlcn0gVGhlIHJlbGF0aXZlIGJyaWdodG5lc3Mgb2YgdGhlIGNvbG9yIGluIHRoZSByYW5nZSAwIC0gMVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRMdW1pbmFuY2UoY29sb3IpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHZhciByZ2IgPSBjb2xvci50eXBlID09PSAnaHNsJyA/IGRlY29tcG9zZUNvbG9yKGhzbFRvUmdiKGNvbG9yKSkudmFsdWVzIDogY29sb3IudmFsdWVzO1xuICByZ2IgPSByZ2IubWFwKGZ1bmN0aW9uICh2YWwpIHtcbiAgICB2YWwgLz0gMjU1OyAvLyBub3JtYWxpemVkXG5cbiAgICByZXR1cm4gdmFsIDw9IDAuMDM5MjggPyB2YWwgLyAxMi45MiA6IE1hdGgucG93KCh2YWwgKyAwLjA1NSkgLyAxLjA1NSwgMi40KTtcbiAgfSk7IC8vIFRydW5jYXRlIGF0IDMgZGlnaXRzXG5cbiAgcmV0dXJuIE51bWJlcigoMC4yMTI2ICogcmdiWzBdICsgMC43MTUyICogcmdiWzFdICsgMC4wNzIyICogcmdiWzJdKS50b0ZpeGVkKDMpKTtcbn1cbi8qKlxuICogRGFya2VuIG9yIGxpZ2h0ZW4gYSBjb2xvciwgZGVwZW5kaW5nIG9uIGl0cyBsdW1pbmFuY2UuXG4gKiBMaWdodCBjb2xvcnMgYXJlIGRhcmtlbmVkLCBkYXJrIGNvbG9ycyBhcmUgbGlnaHRlbmVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudD0wLjE1IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGVtcGhhc2l6ZShjb2xvcikge1xuICB2YXIgY29lZmZpY2llbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDAuMTU7XG4gIHJldHVybiBnZXRMdW1pbmFuY2UoY29sb3IpID4gMC41ID8gZGFya2VuKGNvbG9yLCBjb2VmZmljaWVudCkgOiBsaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCk7XG59XG4vKipcbiAqIFNldCB0aGUgYWJzb2x1dGUgdHJhbnNwYXJlbmN5IG9mIGEgY29sb3IuXG4gKiBBbnkgZXhpc3RpbmcgYWxwaGEgdmFsdWVzIGFyZSBvdmVyd3JpdHRlbi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSB2YWx1ZSB0byBzZXQgdGhlIGFscGhhIGNoYW5uZWwgdG8gaW4gdGhlIHJhbmdlIDAgLTFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZhZGUoY29sb3IsIHZhbHVlKSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICB2YWx1ZSA9IGNsYW1wKHZhbHVlKTtcblxuICBpZiAoY29sb3IudHlwZSA9PT0gJ3JnYicgfHwgY29sb3IudHlwZSA9PT0gJ2hzbCcpIHtcbiAgICBjb2xvci50eXBlICs9ICdhJztcbiAgfVxuXG4gIGNvbG9yLnZhbHVlc1szXSA9IHZhbHVlO1xuICByZXR1cm4gcmVjb21wb3NlQ29sb3IoY29sb3IpO1xufVxuLyoqXG4gKiBEYXJrZW5zIGEgY29sb3IuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtudW1iZXJ9IGNvZWZmaWNpZW50IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXAoY29lZmZpY2llbnQpO1xuXG4gIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIGNvbG9yLnZhbHVlc1syXSAqPSAxIC0gY29lZmZpY2llbnQ7XG4gIH0gZWxzZSBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkgKz0gMSkge1xuICAgICAgY29sb3IudmFsdWVzW2ldICo9IDEgLSBjb2VmZmljaWVudDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVjb21wb3NlQ29sb3IoY29sb3IpO1xufVxuLyoqXG4gKiBMaWdodGVucyBhIGNvbG9yLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudCAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBsaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgY29lZmZpY2llbnQgPSBjbGFtcChjb2VmZmljaWVudCk7XG5cbiAgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xKSB7XG4gICAgY29sb3IudmFsdWVzWzJdICs9ICgxMDAgLSBjb2xvci52YWx1ZXNbMl0pICogY29lZmZpY2llbnQ7XG4gIH0gZWxzZSBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkgKz0gMSkge1xuICAgICAgY29sb3IudmFsdWVzW2ldICs9ICgyNTUgLSBjb2xvci52YWx1ZXNbaV0pICogY29lZmZpY2llbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IGNvbW1vbiBmcm9tICcuLi9jb2xvcnMvY29tbW9uJztcbmltcG9ydCBncmV5IGZyb20gJy4uL2NvbG9ycy9ncmV5JztcbmltcG9ydCBpbmRpZ28gZnJvbSAnLi4vY29sb3JzL2luZGlnbyc7XG5pbXBvcnQgcGluayBmcm9tICcuLi9jb2xvcnMvcGluayc7XG5pbXBvcnQgcmVkIGZyb20gJy4uL2NvbG9ycy9yZWQnO1xuaW1wb3J0IG9yYW5nZSBmcm9tICcuLi9jb2xvcnMvb3JhbmdlJztcbmltcG9ydCBibHVlIGZyb20gJy4uL2NvbG9ycy9ibHVlJztcbmltcG9ydCBncmVlbiBmcm9tICcuLi9jb2xvcnMvZ3JlZW4nO1xuaW1wb3J0IHsgZGFya2VuLCBnZXRDb250cmFzdFJhdGlvLCBsaWdodGVuIH0gZnJvbSAnLi9jb2xvck1hbmlwdWxhdG9yJztcbmV4cG9ydCB2YXIgbGlnaHQgPSB7XG4gIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgdGV4dC5cbiAgdGV4dDoge1xuICAgIC8vIFRoZSBtb3N0IGltcG9ydGFudCB0ZXh0LlxuICAgIHByaW1hcnk6ICdyZ2JhKDAsIDAsIDAsIDAuODcpJyxcbiAgICAvLyBTZWNvbmRhcnkgdGV4dC5cbiAgICBzZWNvbmRhcnk6ICdyZ2JhKDAsIDAsIDAsIDAuNTQpJyxcbiAgICAvLyBEaXNhYmxlZCB0ZXh0IGhhdmUgZXZlbiBsb3dlciB2aXN1YWwgcHJvbWluZW5jZS5cbiAgICBkaXNhYmxlZDogJ3JnYmEoMCwgMCwgMCwgMC4zOCknLFxuICAgIC8vIFRleHQgaGludHMuXG4gICAgaGludDogJ3JnYmEoMCwgMCwgMCwgMC4zOCknXG4gIH0sXG4gIC8vIFRoZSBjb2xvciB1c2VkIHRvIGRpdmlkZSBkaWZmZXJlbnQgZWxlbWVudHMuXG4gIGRpdmlkZXI6ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyxcbiAgLy8gVGhlIGJhY2tncm91bmQgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIHN1cmZhY2VzLlxuICAvLyBDb25zaXN0ZW5jeSBiZXR3ZWVuIHRoZXNlIHZhbHVlcyBpcyBpbXBvcnRhbnQuXG4gIGJhY2tncm91bmQ6IHtcbiAgICBwYXBlcjogY29tbW9uLndoaXRlLFxuICAgIGRlZmF1bHQ6IGdyZXlbNTBdXG4gIH0sXG4gIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgYWN0aW9uIGVsZW1lbnRzLlxuICBhY3Rpb246IHtcbiAgICAvLyBUaGUgY29sb3Igb2YgYW4gYWN0aXZlIGFjdGlvbiBsaWtlIGFuIGljb24gYnV0dG9uLlxuICAgIGFjdGl2ZTogJ3JnYmEoMCwgMCwgMCwgMC41NCknLFxuICAgIC8vIFRoZSBjb2xvciBvZiBhbiBob3ZlcmVkIGFjdGlvbi5cbiAgICBob3ZlcjogJ3JnYmEoMCwgMCwgMCwgMC4wNCknLFxuICAgIGhvdmVyT3BhY2l0eTogMC4wNCxcbiAgICAvLyBUaGUgY29sb3Igb2YgYSBzZWxlY3RlZCBhY3Rpb24uXG4gICAgc2VsZWN0ZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMDgpJyxcbiAgICBzZWxlY3RlZE9wYWNpdHk6IDAuMDgsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGEgZGlzYWJsZWQgYWN0aW9uLlxuICAgIGRpc2FibGVkOiAncmdiYSgwLCAwLCAwLCAwLjI2KScsXG4gICAgLy8gVGhlIGJhY2tncm91bmQgY29sb3Igb2YgYSBkaXNhYmxlZCBhY3Rpb24uXG4gICAgZGlzYWJsZWRCYWNrZ3JvdW5kOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gICAgZGlzYWJsZWRPcGFjaXR5OiAwLjM4LFxuICAgIGZvY3VzOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gICAgZm9jdXNPcGFjaXR5OiAwLjEyLFxuICAgIGFjdGl2YXRlZE9wYWNpdHk6IDAuMTJcbiAgfVxufTtcbmV4cG9ydCB2YXIgZGFyayA9IHtcbiAgdGV4dDoge1xuICAgIHByaW1hcnk6IGNvbW1vbi53aGl0ZSxcbiAgICBzZWNvbmRhcnk6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyknLFxuICAgIGRpc2FibGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJyxcbiAgICBoaW50OiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJyxcbiAgICBpY29uOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJ1xuICB9LFxuICBkaXZpZGVyOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKScsXG4gIGJhY2tncm91bmQ6IHtcbiAgICBwYXBlcjogZ3JleVs4MDBdLFxuICAgIGRlZmF1bHQ6ICcjMzAzMDMwJ1xuICB9LFxuICBhY3Rpb246IHtcbiAgICBhY3RpdmU6IGNvbW1vbi53aGl0ZSxcbiAgICBob3ZlcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wOCknLFxuICAgIGhvdmVyT3BhY2l0eTogMC4wOCxcbiAgICBzZWxlY3RlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xNiknLFxuICAgIHNlbGVjdGVkT3BhY2l0eTogMC4xNixcbiAgICBkaXNhYmxlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKScsXG4gICAgZGlzYWJsZWRCYWNrZ3JvdW5kOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKScsXG4gICAgZGlzYWJsZWRPcGFjaXR5OiAwLjM4LFxuICAgIGZvY3VzOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKScsXG4gICAgZm9jdXNPcGFjaXR5OiAwLjEyLFxuICAgIGFjdGl2YXRlZE9wYWNpdHk6IDAuMjRcbiAgfVxufTtcblxuZnVuY3Rpb24gYWRkTGlnaHRPckRhcmsoaW50ZW50LCBkaXJlY3Rpb24sIHNoYWRlLCB0b25hbE9mZnNldCkge1xuICBpZiAoIWludGVudFtkaXJlY3Rpb25dKSB7XG4gICAgaWYgKGludGVudC5oYXNPd25Qcm9wZXJ0eShzaGFkZSkpIHtcbiAgICAgIGludGVudFtkaXJlY3Rpb25dID0gaW50ZW50W3NoYWRlXTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2xpZ2h0Jykge1xuICAgICAgaW50ZW50LmxpZ2h0ID0gbGlnaHRlbihpbnRlbnQubWFpbiwgdG9uYWxPZmZzZXQpO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnZGFyaycpIHtcbiAgICAgIGludGVudC5kYXJrID0gZGFya2VuKGludGVudC5tYWluLCB0b25hbE9mZnNldCAqIDEuNSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVBhbGV0dGUocGFsZXR0ZSkge1xuICB2YXIgX3BhbGV0dGUkcHJpbWFyeSA9IHBhbGV0dGUucHJpbWFyeSxcbiAgICAgIHByaW1hcnkgPSBfcGFsZXR0ZSRwcmltYXJ5ID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IGluZGlnb1szMDBdLFxuICAgIG1haW46IGluZGlnb1s1MDBdLFxuICAgIGRhcms6IGluZGlnb1s3MDBdXG4gIH0gOiBfcGFsZXR0ZSRwcmltYXJ5LFxuICAgICAgX3BhbGV0dGUkc2Vjb25kYXJ5ID0gcGFsZXR0ZS5zZWNvbmRhcnksXG4gICAgICBzZWNvbmRhcnkgPSBfcGFsZXR0ZSRzZWNvbmRhcnkgPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogcGluay5BMjAwLFxuICAgIG1haW46IHBpbmsuQTQwMCxcbiAgICBkYXJrOiBwaW5rLkE3MDBcbiAgfSA6IF9wYWxldHRlJHNlY29uZGFyeSxcbiAgICAgIF9wYWxldHRlJGVycm9yID0gcGFsZXR0ZS5lcnJvcixcbiAgICAgIGVycm9yID0gX3BhbGV0dGUkZXJyb3IgPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogcmVkWzMwMF0sXG4gICAgbWFpbjogcmVkWzUwMF0sXG4gICAgZGFyazogcmVkWzcwMF1cbiAgfSA6IF9wYWxldHRlJGVycm9yLFxuICAgICAgX3BhbGV0dGUkd2FybmluZyA9IHBhbGV0dGUud2FybmluZyxcbiAgICAgIHdhcm5pbmcgPSBfcGFsZXR0ZSR3YXJuaW5nID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IG9yYW5nZVszMDBdLFxuICAgIG1haW46IG9yYW5nZVs1MDBdLFxuICAgIGRhcms6IG9yYW5nZVs3MDBdXG4gIH0gOiBfcGFsZXR0ZSR3YXJuaW5nLFxuICAgICAgX3BhbGV0dGUkaW5mbyA9IHBhbGV0dGUuaW5mbyxcbiAgICAgIGluZm8gPSBfcGFsZXR0ZSRpbmZvID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IGJsdWVbMzAwXSxcbiAgICBtYWluOiBibHVlWzUwMF0sXG4gICAgZGFyazogYmx1ZVs3MDBdXG4gIH0gOiBfcGFsZXR0ZSRpbmZvLFxuICAgICAgX3BhbGV0dGUkc3VjY2VzcyA9IHBhbGV0dGUuc3VjY2VzcyxcbiAgICAgIHN1Y2Nlc3MgPSBfcGFsZXR0ZSRzdWNjZXNzID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IGdyZWVuWzMwMF0sXG4gICAgbWFpbjogZ3JlZW5bNTAwXSxcbiAgICBkYXJrOiBncmVlbls3MDBdXG4gIH0gOiBfcGFsZXR0ZSRzdWNjZXNzLFxuICAgICAgX3BhbGV0dGUkdHlwZSA9IHBhbGV0dGUudHlwZSxcbiAgICAgIHR5cGUgPSBfcGFsZXR0ZSR0eXBlID09PSB2b2lkIDAgPyAnbGlnaHQnIDogX3BhbGV0dGUkdHlwZSxcbiAgICAgIF9wYWxldHRlJGNvbnRyYXN0VGhyZSA9IHBhbGV0dGUuY29udHJhc3RUaHJlc2hvbGQsXG4gICAgICBjb250cmFzdFRocmVzaG9sZCA9IF9wYWxldHRlJGNvbnRyYXN0VGhyZSA9PT0gdm9pZCAwID8gMyA6IF9wYWxldHRlJGNvbnRyYXN0VGhyZSxcbiAgICAgIF9wYWxldHRlJHRvbmFsT2Zmc2V0ID0gcGFsZXR0ZS50b25hbE9mZnNldCxcbiAgICAgIHRvbmFsT2Zmc2V0ID0gX3BhbGV0dGUkdG9uYWxPZmZzZXQgPT09IHZvaWQgMCA/IDAuMiA6IF9wYWxldHRlJHRvbmFsT2Zmc2V0LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocGFsZXR0ZSwgW1wicHJpbWFyeVwiLCBcInNlY29uZGFyeVwiLCBcImVycm9yXCIsIFwid2FybmluZ1wiLCBcImluZm9cIiwgXCJzdWNjZXNzXCIsIFwidHlwZVwiLCBcImNvbnRyYXN0VGhyZXNob2xkXCIsIFwidG9uYWxPZmZzZXRcIl0pOyAvLyBVc2UgdGhlIHNhbWUgbG9naWMgYXNcbiAgLy8gQm9vdHN0cmFwOiBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi8xZDZlMzcxMGRkNDQ3ZGUxYTIwMGYyOWU4ZmE1MjFmOGEwOTA4ZjcwL3Njc3MvX2Z1bmN0aW9ucy5zY3NzI0w1OVxuICAvLyBhbmQgbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIgaHR0cHM6Ly9naXRodWIuY29tL21hdGVyaWFsLWNvbXBvbmVudHMvbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIvYmxvYi9hYzQ2Yjg4NjNjNGRhYjlmYzIyYzRjNjYyZGM2YmQxYjY1ZGQ2NTJmL3BhY2thZ2VzL21kYy10aGVtZS9fZnVuY3Rpb25zLnNjc3MjTDU0XG5cblxuICBmdW5jdGlvbiBnZXRDb250cmFzdFRleHQoYmFja2dyb3VuZCkge1xuICAgIGlmICghYmFja2dyb3VuZCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk1hdGVyaWFsLVVJOiBtaXNzaW5nIGJhY2tncm91bmQgYXJndW1lbnQgaW4gZ2V0Q29udHJhc3RUZXh0KFwiLmNvbmNhdChiYWNrZ3JvdW5kLCBcIikuXCIpKTtcbiAgICB9XG5cbiAgICB2YXIgY29udHJhc3RUZXh0ID0gZ2V0Q29udHJhc3RSYXRpbyhiYWNrZ3JvdW5kLCBkYXJrLnRleHQucHJpbWFyeSkgPj0gY29udHJhc3RUaHJlc2hvbGQgPyBkYXJrLnRleHQucHJpbWFyeSA6IGxpZ2h0LnRleHQucHJpbWFyeTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgY29udHJhc3QgPSBnZXRDb250cmFzdFJhdGlvKGJhY2tncm91bmQsIGNvbnRyYXN0VGV4dCk7XG5cbiAgICAgIGlmIChjb250cmFzdCA8IDMpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbXCJNYXRlcmlhbC1VSTogdGhlIGNvbnRyYXN0IHJhdGlvIG9mIFwiLmNvbmNhdChjb250cmFzdCwgXCI6MSBmb3IgXCIpLmNvbmNhdChjb250cmFzdFRleHQsIFwiIG9uIFwiKS5jb25jYXQoYmFja2dyb3VuZCksICdmYWxscyBiZWxvdyB0aGUgV0NBRyByZWNvbW1lbmRlZCBhYnNvbHV0ZSBtaW5pbXVtIGNvbnRyYXN0IHJhdGlvIG9mIDM6MS4nLCAnaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDgvUkVDLVdDQUcyMC0yMDA4MTIxMS8jdmlzdWFsLWF1ZGlvLWNvbnRyYXN0LWNvbnRyYXN0J10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjb250cmFzdFRleHQ7XG4gIH1cblxuICBmdW5jdGlvbiBhdWdtZW50Q29sb3IoY29sb3IpIHtcbiAgICB2YXIgbWFpblNoYWRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiA1MDA7XG4gICAgdmFyIGxpZ2h0U2hhZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDMwMDtcbiAgICB2YXIgZGFya1NoYWRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiA3MDA7XG4gICAgY29sb3IgPSBfZXh0ZW5kcyh7fSwgY29sb3IpO1xuXG4gICAgaWYgKCFjb2xvci5tYWluICYmIGNvbG9yW21haW5TaGFkZV0pIHtcbiAgICAgIGNvbG9yLm1haW4gPSBjb2xvclttYWluU2hhZGVdO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIWNvbG9yLm1haW4pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFsnTWF0ZXJpYWwtVUk6IHRoZSBjb2xvciBwcm92aWRlZCB0byBhdWdtZW50Q29sb3IoY29sb3IpIGlzIGludmFsaWQuJywgXCJUaGUgY29sb3Igb2JqZWN0IG5lZWRzIHRvIGhhdmUgYSBgbWFpbmAgcHJvcGVydHkgb3IgYSBgXCIuY29uY2F0KG1haW5TaGFkZSwgXCJgIHByb3BlcnR5LlwiKV0uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGFkZExpZ2h0T3JEYXJrKGNvbG9yLCAnbGlnaHQnLCBsaWdodFNoYWRlLCB0b25hbE9mZnNldCk7XG4gICAgYWRkTGlnaHRPckRhcmsoY29sb3IsICdkYXJrJywgZGFya1NoYWRlLCB0b25hbE9mZnNldCk7XG5cbiAgICBpZiAoIWNvbG9yLmNvbnRyYXN0VGV4dCkge1xuICAgICAgY29sb3IuY29udHJhc3RUZXh0ID0gZ2V0Q29udHJhc3RUZXh0KGNvbG9yLm1haW4pO1xuICAgIH1cblxuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuXG4gIHZhciB0eXBlcyA9IHtcbiAgICBkYXJrOiBkYXJrLFxuICAgIGxpZ2h0OiBsaWdodFxuICB9O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKCF0eXBlc1t0eXBlXSkge1xuICAgICAgY29uc29sZS5lcnJvcihcIk1hdGVyaWFsLVVJOiB0aGUgcGFsZXR0ZSB0eXBlIGBcIi5jb25jYXQodHlwZSwgXCJgIGlzIG5vdCBzdXBwb3J0ZWQuXCIpKTtcbiAgICB9XG4gIH1cblxuICB2YXIgcGFsZXR0ZU91dHB1dCA9IGRlZXBtZXJnZShfZXh0ZW5kcyh7XG4gICAgLy8gQSBjb2xsZWN0aW9uIG9mIGNvbW1vbiBjb2xvcnMuXG4gICAgY29tbW9uOiBjb21tb24sXG4gICAgLy8gVGhlIHBhbGV0dGUgdHlwZSwgY2FuIGJlIGxpZ2h0IG9yIGRhcmsuXG4gICAgdHlwZTogdHlwZSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHByaW1hcnkgaW50ZXJmYWNlIGVsZW1lbnRzIGZvciBhIHVzZXIuXG4gICAgcHJpbWFyeTogYXVnbWVudENvbG9yKHByaW1hcnkpLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgc2Vjb25kYXJ5IGludGVyZmFjZSBlbGVtZW50cyBmb3IgYSB1c2VyLlxuICAgIHNlY29uZGFyeTogYXVnbWVudENvbG9yKHNlY29uZGFyeSwgJ0E0MDAnLCAnQTIwMCcsICdBNzAwJyksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBpbnRlcmZhY2UgZWxlbWVudHMgdGhhdCB0aGUgdXNlciBzaG91bGQgYmUgbWFkZSBhd2FyZSBvZi5cbiAgICBlcnJvcjogYXVnbWVudENvbG9yKGVycm9yKSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHBvdGVudGlhbGx5IGRhbmdlcm91cyBhY3Rpb25zIG9yIGltcG9ydGFudCBtZXNzYWdlcy5cbiAgICB3YXJuaW5nOiBhdWdtZW50Q29sb3Iod2FybmluZyksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHByZXNlbnQgaW5mb3JtYXRpb24gdG8gdGhlIHVzZXIgdGhhdCBpcyBuZXV0cmFsIGFuZCBub3QgbmVjZXNzYXJpbHkgaW1wb3J0YW50LlxuICAgIGluZm86IGF1Z21lbnRDb2xvcihpbmZvKSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gaW5kaWNhdGUgdGhlIHN1Y2Nlc3NmdWwgY29tcGxldGlvbiBvZiBhbiBhY3Rpb24gdGhhdCB1c2VyIHRyaWdnZXJlZC5cbiAgICBzdWNjZXNzOiBhdWdtZW50Q29sb3Ioc3VjY2VzcyksXG4gICAgLy8gVGhlIGdyZXkgY29sb3JzLlxuICAgIGdyZXk6IGdyZXksXG4gICAgLy8gVXNlZCBieSBgZ2V0Q29udHJhc3RUZXh0KClgIHRvIG1heGltaXplIHRoZSBjb250cmFzdCBiZXR3ZWVuXG4gICAgLy8gdGhlIGJhY2tncm91bmQgYW5kIHRoZSB0ZXh0LlxuICAgIGNvbnRyYXN0VGhyZXNob2xkOiBjb250cmFzdFRocmVzaG9sZCxcbiAgICAvLyBUYWtlcyBhIGJhY2tncm91bmQgY29sb3IgYW5kIHJldHVybnMgdGhlIHRleHQgY29sb3IgdGhhdCBtYXhpbWl6ZXMgdGhlIGNvbnRyYXN0LlxuICAgIGdldENvbnRyYXN0VGV4dDogZ2V0Q29udHJhc3RUZXh0LFxuICAgIC8vIEdlbmVyYXRlIGEgcmljaCBjb2xvciBvYmplY3QuXG4gICAgYXVnbWVudENvbG9yOiBhdWdtZW50Q29sb3IsXG4gICAgLy8gVXNlZCBieSB0aGUgZnVuY3Rpb25zIGJlbG93IHRvIHNoaWZ0IGEgY29sb3IncyBsdW1pbmFuY2UgYnkgYXBwcm94aW1hdGVseVxuICAgIC8vIHR3byBpbmRleGVzIHdpdGhpbiBpdHMgdG9uYWwgcGFsZXR0ZS5cbiAgICAvLyBFLmcuLCBzaGlmdCBmcm9tIFJlZCA1MDAgdG8gUmVkIDMwMCBvciBSZWQgNzAwLlxuICAgIHRvbmFsT2Zmc2V0OiB0b25hbE9mZnNldFxuICB9LCB0eXBlc1t0eXBlXSksIG90aGVyKTtcbiAgcmV0dXJuIHBhbGV0dGVPdXRwdXQ7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcblxuZnVuY3Rpb24gcm91bmQodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxZTUpIC8gMWU1O1xufVxuXG52YXIgY2FzZUFsbENhcHMgPSB7XG4gIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnXG59O1xudmFyIGRlZmF1bHRGb250RmFtaWx5ID0gJ1wiUm9ib3RvXCIsIFwiSGVsdmV0aWNhXCIsIFwiQXJpYWxcIiwgc2Fucy1zZXJpZic7XG4vKipcbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS90aGUtdHlwZS1zeXN0ZW0uaHRtbH1cbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS91bmRlcnN0YW5kaW5nLXR5cG9ncmFwaHkuaHRtbH1cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVUeXBvZ3JhcGh5KHBhbGV0dGUsIHR5cG9ncmFwaHkpIHtcbiAgdmFyIF9yZWYgPSB0eXBlb2YgdHlwb2dyYXBoeSA9PT0gJ2Z1bmN0aW9uJyA/IHR5cG9ncmFwaHkocGFsZXR0ZSkgOiB0eXBvZ3JhcGh5LFxuICAgICAgX3JlZiRmb250RmFtaWx5ID0gX3JlZi5mb250RmFtaWx5LFxuICAgICAgZm9udEZhbWlseSA9IF9yZWYkZm9udEZhbWlseSA9PT0gdm9pZCAwID8gZGVmYXVsdEZvbnRGYW1pbHkgOiBfcmVmJGZvbnRGYW1pbHksXG4gICAgICBfcmVmJGZvbnRTaXplID0gX3JlZi5mb250U2l6ZSxcbiAgICAgIGZvbnRTaXplID0gX3JlZiRmb250U2l6ZSA9PT0gdm9pZCAwID8gMTQgOiBfcmVmJGZvbnRTaXplLFxuICAgICAgX3JlZiRmb250V2VpZ2h0TGlnaHQgPSBfcmVmLmZvbnRXZWlnaHRMaWdodCxcbiAgICAgIGZvbnRXZWlnaHRMaWdodCA9IF9yZWYkZm9udFdlaWdodExpZ2h0ID09PSB2b2lkIDAgPyAzMDAgOiBfcmVmJGZvbnRXZWlnaHRMaWdodCxcbiAgICAgIF9yZWYkZm9udFdlaWdodFJlZ3VsYSA9IF9yZWYuZm9udFdlaWdodFJlZ3VsYXIsXG4gICAgICBmb250V2VpZ2h0UmVndWxhciA9IF9yZWYkZm9udFdlaWdodFJlZ3VsYSA9PT0gdm9pZCAwID8gNDAwIDogX3JlZiRmb250V2VpZ2h0UmVndWxhLFxuICAgICAgX3JlZiRmb250V2VpZ2h0TWVkaXVtID0gX3JlZi5mb250V2VpZ2h0TWVkaXVtLFxuICAgICAgZm9udFdlaWdodE1lZGl1bSA9IF9yZWYkZm9udFdlaWdodE1lZGl1bSA9PT0gdm9pZCAwID8gNTAwIDogX3JlZiRmb250V2VpZ2h0TWVkaXVtLFxuICAgICAgX3JlZiRmb250V2VpZ2h0Qm9sZCA9IF9yZWYuZm9udFdlaWdodEJvbGQsXG4gICAgICBmb250V2VpZ2h0Qm9sZCA9IF9yZWYkZm9udFdlaWdodEJvbGQgPT09IHZvaWQgMCA/IDcwMCA6IF9yZWYkZm9udFdlaWdodEJvbGQsXG4gICAgICBfcmVmJGh0bWxGb250U2l6ZSA9IF9yZWYuaHRtbEZvbnRTaXplLFxuICAgICAgaHRtbEZvbnRTaXplID0gX3JlZiRodG1sRm9udFNpemUgPT09IHZvaWQgMCA/IDE2IDogX3JlZiRodG1sRm9udFNpemUsXG4gICAgICBhbGxWYXJpYW50cyA9IF9yZWYuYWxsVmFyaWFudHMsXG4gICAgICBweFRvUmVtMiA9IF9yZWYucHhUb1JlbSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFtcImZvbnRGYW1pbHlcIiwgXCJmb250U2l6ZVwiLCBcImZvbnRXZWlnaHRMaWdodFwiLCBcImZvbnRXZWlnaHRSZWd1bGFyXCIsIFwiZm9udFdlaWdodE1lZGl1bVwiLCBcImZvbnRXZWlnaHRCb2xkXCIsIFwiaHRtbEZvbnRTaXplXCIsIFwiYWxsVmFyaWFudHNcIiwgXCJweFRvUmVtXCJdKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0eXBlb2YgZm9udFNpemUgIT09ICdudW1iZXInKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogYGZvbnRTaXplYCBpcyByZXF1aXJlZCB0byBiZSBhIG51bWJlci4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGh0bWxGb250U2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBgaHRtbEZvbnRTaXplYCBpcyByZXF1aXJlZCB0byBiZSBhIG51bWJlci4nKTtcbiAgICB9XG4gIH1cblxuICB2YXIgY29lZiA9IGZvbnRTaXplIC8gMTQ7XG5cbiAgdmFyIHB4VG9SZW0gPSBweFRvUmVtMiB8fCBmdW5jdGlvbiAoc2l6ZSkge1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChzaXplIC8gaHRtbEZvbnRTaXplICogY29lZiwgXCJyZW1cIik7XG4gIH07XG5cbiAgdmFyIGJ1aWxkVmFyaWFudCA9IGZ1bmN0aW9uIGJ1aWxkVmFyaWFudChmb250V2VpZ2h0LCBzaXplLCBsaW5lSGVpZ2h0LCBsZXR0ZXJTcGFjaW5nLCBjYXNpbmcpIHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgZm9udEZhbWlseTogZm9udEZhbWlseSxcbiAgICAgIGZvbnRXZWlnaHQ6IGZvbnRXZWlnaHQsXG4gICAgICBmb250U2l6ZTogcHhUb1JlbShzaXplKSxcbiAgICAgIC8vIFVuaXRsZXNzIGZvbGxvd2luZyBodHRwczovL21leWVyd2ViLmNvbS9lcmljL3Rob3VnaHRzLzIwMDYvMDIvMDgvdW5pdGxlc3MtbGluZS1oZWlnaHRzL1xuICAgICAgbGluZUhlaWdodDogbGluZUhlaWdodFxuICAgIH0sIGZvbnRGYW1pbHkgPT09IGRlZmF1bHRGb250RmFtaWx5ID8ge1xuICAgICAgbGV0dGVyU3BhY2luZzogXCJcIi5jb25jYXQocm91bmQobGV0dGVyU3BhY2luZyAvIHNpemUpLCBcImVtXCIpXG4gICAgfSA6IHt9LCB7fSwgY2FzaW5nLCB7fSwgYWxsVmFyaWFudHMpO1xuICB9O1xuXG4gIHZhciB2YXJpYW50cyA9IHtcbiAgICBoMTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRMaWdodCwgOTYsIDEuMTY3LCAtMS41KSxcbiAgICBoMjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRMaWdodCwgNjAsIDEuMiwgLTAuNSksXG4gICAgaDM6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgNDgsIDEuMTY3LCAwKSxcbiAgICBoNDogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAzNCwgMS4yMzUsIDAuMjUpLFxuICAgIGg1OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDI0LCAxLjMzNCwgMCksXG4gICAgaDY6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TWVkaXVtLCAyMCwgMS42LCAwLjE1KSxcbiAgICBzdWJ0aXRsZTE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTYsIDEuNzUsIDAuMTUpLFxuICAgIHN1YnRpdGxlMjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDE0LCAxLjU3LCAwLjEpLFxuICAgIGJvZHkxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDE2LCAxLjUsIDAuMTUpLFxuICAgIGJvZHkyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDE0LCAxLjQzLCAwLjE1KSxcbiAgICBidXR0b246IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TWVkaXVtLCAxNCwgMS43NSwgMC40LCBjYXNlQWxsQ2FwcyksXG4gICAgY2FwdGlvbjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxMiwgMS42NiwgMC40KSxcbiAgICBvdmVybGluZTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxMiwgMi42NiwgMSwgY2FzZUFsbENhcHMpXG4gIH07XG4gIHJldHVybiBkZWVwbWVyZ2UoX2V4dGVuZHMoe1xuICAgIGh0bWxGb250U2l6ZTogaHRtbEZvbnRTaXplLFxuICAgIHB4VG9SZW06IHB4VG9SZW0sXG4gICAgcm91bmQ6IHJvdW5kLFxuICAgIC8vIFRPRE8gdjU6IHJlbW92ZVxuICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHksXG4gICAgZm9udFNpemU6IGZvbnRTaXplLFxuICAgIGZvbnRXZWlnaHRMaWdodDogZm9udFdlaWdodExpZ2h0LFxuICAgIGZvbnRXZWlnaHRSZWd1bGFyOiBmb250V2VpZ2h0UmVndWxhcixcbiAgICBmb250V2VpZ2h0TWVkaXVtOiBmb250V2VpZ2h0TWVkaXVtLFxuICAgIGZvbnRXZWlnaHRCb2xkOiBmb250V2VpZ2h0Qm9sZFxuICB9LCB2YXJpYW50cyksIG90aGVyLCB7XG4gICAgY2xvbmU6IGZhbHNlIC8vIE5vIG5lZWQgdG8gY2xvbmUgZGVlcFxuXG4gIH0pO1xufSIsInZhciBzaGFkb3dLZXlVbWJyYU9wYWNpdHkgPSAwLjI7XG52YXIgc2hhZG93S2V5UGVudW1icmFPcGFjaXR5ID0gMC4xNDtcbnZhciBzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eSA9IDAuMTI7XG5cbmZ1bmN0aW9uIGNyZWF0ZVNoYWRvdygpIHtcbiAgcmV0dXJuIFtcIlwiLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDIgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMl0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDMgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbM10sIFwicHggcmdiYSgwLDAsMCxcIikuY29uY2F0KHNoYWRvd0tleVVtYnJhT3BhY2l0eSwgXCIpXCIpLCBcIlwiLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDQgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbNF0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDUgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbNV0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDYgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbNl0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDcgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbN10sIFwicHggcmdiYSgwLDAsMCxcIikuY29uY2F0KHNoYWRvd0tleVBlbnVtYnJhT3BhY2l0eSwgXCIpXCIpLCBcIlwiLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDggPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbOF0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDkgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbOV0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDEwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzEwXSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMTEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMTFdLCBcInB4IHJnYmEoMCwwLDAsXCIpLmNvbmNhdChzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eSwgXCIpXCIpXS5qb2luKCcsJyk7XG59IC8vIFZhbHVlcyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRlcmlhbC1jb21wb25lbnRzL21hdGVyaWFsLWNvbXBvbmVudHMtd2ViL2Jsb2IvYmU4NzQ3Zjk0NTc0NjY5Y2I1ZTdhZGQxYTdjNTRmYTQxYTg5Y2VjNy9wYWNrYWdlcy9tZGMtZWxldmF0aW9uL192YXJpYWJsZXMuc2Nzc1xuXG5cbnZhciBzaGFkb3dzID0gWydub25lJywgY3JlYXRlU2hhZG93KDAsIDIsIDEsIC0xLCAwLCAxLCAxLCAwLCAwLCAxLCAzLCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDEsIC0yLCAwLCAyLCAyLCAwLCAwLCAxLCA1LCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDMsIC0yLCAwLCAzLCA0LCAwLCAwLCAxLCA4LCAwKSwgY3JlYXRlU2hhZG93KDAsIDIsIDQsIC0xLCAwLCA0LCA1LCAwLCAwLCAxLCAxMCwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCA1LCAtMSwgMCwgNSwgOCwgMCwgMCwgMSwgMTQsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgNSwgLTEsIDAsIDYsIDEwLCAwLCAwLCAxLCAxOCwgMCksIGNyZWF0ZVNoYWRvdygwLCA0LCA1LCAtMiwgMCwgNywgMTAsIDEsIDAsIDIsIDE2LCAxKSwgY3JlYXRlU2hhZG93KDAsIDUsIDUsIC0zLCAwLCA4LCAxMCwgMSwgMCwgMywgMTQsIDIpLCBjcmVhdGVTaGFkb3coMCwgNSwgNiwgLTMsIDAsIDksIDEyLCAxLCAwLCAzLCAxNiwgMiksIGNyZWF0ZVNoYWRvdygwLCA2LCA2LCAtMywgMCwgMTAsIDE0LCAxLCAwLCA0LCAxOCwgMyksIGNyZWF0ZVNoYWRvdygwLCA2LCA3LCAtNCwgMCwgMTEsIDE1LCAxLCAwLCA0LCAyMCwgMyksIGNyZWF0ZVNoYWRvdygwLCA3LCA4LCAtNCwgMCwgMTIsIDE3LCAyLCAwLCA1LCAyMiwgNCksIGNyZWF0ZVNoYWRvdygwLCA3LCA4LCAtNCwgMCwgMTMsIDE5LCAyLCAwLCA1LCAyNCwgNCksIGNyZWF0ZVNoYWRvdygwLCA3LCA5LCAtNCwgMCwgMTQsIDIxLCAyLCAwLCA1LCAyNiwgNCksIGNyZWF0ZVNoYWRvdygwLCA4LCA5LCAtNSwgMCwgMTUsIDIyLCAyLCAwLCA2LCAyOCwgNSksIGNyZWF0ZVNoYWRvdygwLCA4LCAxMCwgLTUsIDAsIDE2LCAyNCwgMiwgMCwgNiwgMzAsIDUpLCBjcmVhdGVTaGFkb3coMCwgOCwgMTEsIC01LCAwLCAxNywgMjYsIDIsIDAsIDYsIDMyLCA1KSwgY3JlYXRlU2hhZG93KDAsIDksIDExLCAtNSwgMCwgMTgsIDI4LCAyLCAwLCA3LCAzNCwgNiksIGNyZWF0ZVNoYWRvdygwLCA5LCAxMiwgLTYsIDAsIDE5LCAyOSwgMiwgMCwgNywgMzYsIDYpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDEzLCAtNiwgMCwgMjAsIDMxLCAzLCAwLCA4LCAzOCwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTMsIC02LCAwLCAyMSwgMzMsIDMsIDAsIDgsIDQwLCA3KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxNCwgLTYsIDAsIDIyLCAzNSwgMywgMCwgOCwgNDIsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTEsIDE0LCAtNywgMCwgMjMsIDM2LCAzLCAwLCA5LCA0NCwgOCksIGNyZWF0ZVNoYWRvdygwLCAxMSwgMTUsIC03LCAwLCAyNCwgMzgsIDMsIDAsIDksIDQ2LCA4KV07XG5leHBvcnQgZGVmYXVsdCBzaGFkb3dzOyIsInZhciBzaGFwZSA9IHtcbiAgYm9yZGVyUmFkaXVzOiA0XG59O1xuZXhwb3J0IGRlZmF1bHQgc2hhcGU7IiwidmFyIHdhcm5PbmNlO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU3BhY2luZygpIHtcbiAgdmFyIHNwYWNpbmdJbnB1dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogODtcblxuICAvLyBBbHJlYWR5IHRyYW5zZm9ybWVkLlxuICBpZiAoc3BhY2luZ0lucHV0Lm11aSkge1xuICAgIHJldHVybiBzcGFjaW5nSW5wdXQ7XG4gIH0gLy8gQWxsIGNvbXBvbmVudHMgYWxpZ24gdG8gYW4gOGRwIHNxdWFyZSBiYXNlbGluZSBncmlkIGZvciBtb2JpbGUsIHRhYmxldCwgYW5kIGRlc2t0b3AuXG4gIC8vIGh0dHBzOi8vbWF0ZXJpYWwuaW8vZGVzaWduL2xheW91dC91bmRlcnN0YW5kaW5nLWxheW91dC5odG1sI3BpeGVsLWRlbnNpdHlcblxuXG4gIHZhciB0cmFuc2Zvcm07XG5cbiAgaWYgKHR5cGVvZiBzcGFjaW5nSW5wdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICB0cmFuc2Zvcm0gPSBzcGFjaW5nSW5wdXQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2Ygc3BhY2luZ0lucHV0ICE9PSAnbnVtYmVyJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiB0aGUgYHRoZW1lLnNwYWNpbmdgIHZhbHVlIChcIi5jb25jYXQoc3BhY2luZ0lucHV0LCBcIikgaXMgaW52YWxpZC5cIiksICdJdCBzaG91bGQgYmUgYSBudW1iZXIgb3IgYSBmdW5jdGlvbi4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJhbnNmb3JtID0gZnVuY3Rpb24gdHJhbnNmb3JtKGZhY3Rvcikge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBmYWN0b3IgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIkV4cGVjdGVkIHNwYWNpbmcgYXJndW1lbnQgdG8gYmUgYSBudW1iZXIsIGdvdCBcIi5jb25jYXQoZmFjdG9yKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNwYWNpbmdJbnB1dCAqIGZhY3RvcjtcbiAgICB9O1xuICB9XG5cbiAgdmFyIHNwYWNpbmcgPSBmdW5jdGlvbiBzcGFjaW5nKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCEoYXJncy5sZW5ndGggPD0gNCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIk1hdGVyaWFsLVVJOiBUb28gbWFueSBhcmd1bWVudHMgcHJvdmlkZWQsIGV4cGVjdGVkIGJldHdlZW4gMCBhbmQgNCwgZ290IFwiLmNvbmNhdChhcmdzLmxlbmd0aCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRyYW5zZm9ybSgxKTtcbiAgICB9XG5cbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHJldHVybiB0cmFuc2Zvcm0oYXJnc1swXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFyZ3MubWFwKGZ1bmN0aW9uIChmYWN0b3IpIHtcbiAgICAgIHZhciBvdXRwdXQgPSB0cmFuc2Zvcm0oZmFjdG9yKTtcbiAgICAgIHJldHVybiB0eXBlb2Ygb3V0cHV0ID09PSAnbnVtYmVyJyA/IFwiXCIuY29uY2F0KG91dHB1dCwgXCJweFwiKSA6IG91dHB1dDtcbiAgICB9KS5qb2luKCcgJyk7XG4gIH07IC8vIEJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRvIHJlbW92ZSBpbiB2NS5cblxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzcGFjaW5nLCAndW5pdCcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICghd2Fybk9uY2UgfHwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0Jykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoWydNYXRlcmlhbC1VSTogdGhlbWUuc3BhY2luZy51bml0IHVzYWdlIGhhcyBiZWVuIGRlcHJlY2F0ZWQuJywgJ0l0IHdpbGwgYmUgcmVtb3ZlZCBpbiB2NS4nLCAnWW91IGNhbiByZXBsYWNlIGB0aGVtZS5zcGFjaW5nLnVuaXQgKiB5YCB3aXRoIGB0aGVtZS5zcGFjaW5nKHkpYC4nLCAnJywgJ1lvdSBjYW4gdXNlIHRoZSBgaHR0cHM6Ly9naXRodWIuY29tL211aS1vcmcvbWF0ZXJpYWwtdWkvdHJlZS9tYXN0ZXIvcGFja2FnZXMvbWF0ZXJpYWwtdWktY29kZW1vZC9SRUFETUUubWQjdGhlbWUtc3BhY2luZy1hcGlgIG1pZ3JhdGlvbiBoZWxwZXIgdG8gbWFrZSB0aGUgcHJvY2VzcyBzbW9vdGhlci4nXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cblxuICAgICAgICB3YXJuT25jZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzcGFjaW5nSW5wdXQ7XG4gICAgfVxuICB9KTtcbiAgc3BhY2luZy5tdWkgPSB0cnVlO1xuICByZXR1cm4gc3BhY2luZztcbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuLy8gRm9sbG93IGh0dHBzOi8vbWF0ZXJpYWwuZ29vZ2xlLmNvbS9tb3Rpb24vZHVyYXRpb24tZWFzaW5nLmh0bWwjZHVyYXRpb24tZWFzaW5nLW5hdHVyYWwtZWFzaW5nLWN1cnZlc1xuLy8gdG8gbGVhcm4gdGhlIGNvbnRleHQgaW4gd2hpY2ggZWFjaCBlYXNpbmcgc2hvdWxkIGJlIHVzZWQuXG5leHBvcnQgdmFyIGVhc2luZyA9IHtcbiAgLy8gVGhpcyBpcyB0aGUgbW9zdCBjb21tb24gZWFzaW5nIGN1cnZlLlxuICBlYXNlSW5PdXQ6ICdjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpJyxcbiAgLy8gT2JqZWN0cyBlbnRlciB0aGUgc2NyZWVuIGF0IGZ1bGwgdmVsb2NpdHkgZnJvbSBvZmYtc2NyZWVuIGFuZFxuICAvLyBzbG93bHkgZGVjZWxlcmF0ZSB0byBhIHJlc3RpbmcgcG9pbnQuXG4gIGVhc2VPdXQ6ICdjdWJpYy1iZXppZXIoMC4wLCAwLCAwLjIsIDEpJyxcbiAgLy8gT2JqZWN0cyBsZWF2ZSB0aGUgc2NyZWVuIGF0IGZ1bGwgdmVsb2NpdHkuIFRoZXkgZG8gbm90IGRlY2VsZXJhdGUgd2hlbiBvZmYtc2NyZWVuLlxuICBlYXNlSW46ICdjdWJpYy1iZXppZXIoMC40LCAwLCAxLCAxKScsXG4gIC8vIFRoZSBzaGFycCBjdXJ2ZSBpcyB1c2VkIGJ5IG9iamVjdHMgdGhhdCBtYXkgcmV0dXJuIHRvIHRoZSBzY3JlZW4gYXQgYW55IHRpbWUuXG4gIHNoYXJwOiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC42LCAxKSdcbn07IC8vIEZvbGxvdyBodHRwczovL21hdGVyaWFsLmlvL2d1aWRlbGluZXMvbW90aW9uL2R1cmF0aW9uLWVhc2luZy5odG1sI2R1cmF0aW9uLWVhc2luZy1jb21tb24tZHVyYXRpb25zXG4vLyB0byBsZWFybiB3aGVuIHVzZSB3aGF0IHRpbWluZ1xuXG5leHBvcnQgdmFyIGR1cmF0aW9uID0ge1xuICBzaG9ydGVzdDogMTUwLFxuICBzaG9ydGVyOiAyMDAsXG4gIHNob3J0OiAyNTAsXG4gIC8vIG1vc3QgYmFzaWMgcmVjb21tZW5kZWQgdGltaW5nXG4gIHN0YW5kYXJkOiAzMDAsXG4gIC8vIHRoaXMgaXMgdG8gYmUgdXNlZCBpbiBjb21wbGV4IGFuaW1hdGlvbnNcbiAgY29tcGxleDogMzc1LFxuICAvLyByZWNvbW1lbmRlZCB3aGVuIHNvbWV0aGluZyBpcyBlbnRlcmluZyBzY3JlZW5cbiAgZW50ZXJpbmdTY3JlZW46IDIyNSxcbiAgLy8gcmVjb21tZW5kZWQgd2hlbiBzb21ldGhpbmcgaXMgbGVhdmluZyBzY3JlZW5cbiAgbGVhdmluZ1NjcmVlbjogMTk1XG59O1xuXG5mdW5jdGlvbiBmb3JtYXRNcyhtaWxsaXNlY29uZHMpIHtcbiAgcmV0dXJuIFwiXCIuY29uY2F0KE1hdGgucm91bmQobWlsbGlzZWNvbmRzKSwgXCJtc1wiKTtcbn1cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd8QXJyYXl9IHByb3BzXG4gKiBAcGFyYW0ge29iamVjdH0gcGFyYW1cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbS5wcm9wXG4gKiBAcGFyYW0ge251bWJlcn0gcGFyYW0uZHVyYXRpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbS5lYXNpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSBwYXJhbS5kZWxheVxuICovXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBlYXNpbmc6IGVhc2luZyxcbiAgZHVyYXRpb246IGR1cmF0aW9uLFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFsnYWxsJ107XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgdmFyIF9vcHRpb25zJGR1cmF0aW9uID0gb3B0aW9ucy5kdXJhdGlvbixcbiAgICAgICAgZHVyYXRpb25PcHRpb24gPSBfb3B0aW9ucyRkdXJhdGlvbiA9PT0gdm9pZCAwID8gZHVyYXRpb24uc3RhbmRhcmQgOiBfb3B0aW9ucyRkdXJhdGlvbixcbiAgICAgICAgX29wdGlvbnMkZWFzaW5nID0gb3B0aW9ucy5lYXNpbmcsXG4gICAgICAgIGVhc2luZ09wdGlvbiA9IF9vcHRpb25zJGVhc2luZyA9PT0gdm9pZCAwID8gZWFzaW5nLmVhc2VJbk91dCA6IF9vcHRpb25zJGVhc2luZyxcbiAgICAgICAgX29wdGlvbnMkZGVsYXkgPSBvcHRpb25zLmRlbGF5LFxuICAgICAgICBkZWxheSA9IF9vcHRpb25zJGRlbGF5ID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkZGVsYXksXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9wdGlvbnMsIFtcImR1cmF0aW9uXCIsIFwiZWFzaW5nXCIsIFwiZGVsYXlcIl0pO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBpc1N0cmluZyA9IGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xuICAgICAgfTtcblxuICAgICAgdmFyIGlzTnVtYmVyID0gZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICFpc05hTihwYXJzZUZsb2F0KHZhbHVlKSk7XG4gICAgICB9O1xuXG4gICAgICBpZiAoIWlzU3RyaW5nKHByb3BzKSAmJiAhQXJyYXkuaXNBcnJheShwcm9wcykpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IGFyZ3VtZW50IFwicHJvcHNcIiBtdXN0IGJlIGEgc3RyaW5nIG9yIEFycmF5LicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTnVtYmVyKGR1cmF0aW9uT3B0aW9uKSAmJiAhaXNTdHJpbmcoZHVyYXRpb25PcHRpb24pKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJNYXRlcmlhbC1VSTogYXJndW1lbnQgXFxcImR1cmF0aW9uXFxcIiBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nIGJ1dCBmb3VuZCBcIi5jb25jYXQoZHVyYXRpb25PcHRpb24sIFwiLlwiKSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNTdHJpbmcoZWFzaW5nT3B0aW9uKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogYXJndW1lbnQgXCJlYXNpbmdcIiBtdXN0IGJlIGEgc3RyaW5nLicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTnVtYmVyKGRlbGF5KSAmJiAhaXNTdHJpbmcoZGVsYXkpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBhcmd1bWVudCBcImRlbGF5XCIgbXVzdCBiZSBhIG51bWJlciBvciBhIHN0cmluZy4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKE9iamVjdC5rZXlzKG90aGVyKS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIk1hdGVyaWFsLVVJOiB1bnJlY29nbml6ZWQgYXJndW1lbnQocykgW1wiLmNvbmNhdChPYmplY3Qua2V5cyhvdGhlcikuam9pbignLCcpLCBcIl1cIikpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoQXJyYXkuaXNBcnJheShwcm9wcykgPyBwcm9wcyA6IFtwcm9wc10pLm1hcChmdW5jdGlvbiAoYW5pbWF0ZWRQcm9wKSB7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoYW5pbWF0ZWRQcm9wLCBcIiBcIikuY29uY2F0KHR5cGVvZiBkdXJhdGlvbk9wdGlvbiA9PT0gJ3N0cmluZycgPyBkdXJhdGlvbk9wdGlvbiA6IGZvcm1hdE1zKGR1cmF0aW9uT3B0aW9uKSwgXCIgXCIpLmNvbmNhdChlYXNpbmdPcHRpb24sIFwiIFwiKS5jb25jYXQodHlwZW9mIGRlbGF5ID09PSAnc3RyaW5nJyA/IGRlbGF5IDogZm9ybWF0TXMoZGVsYXkpKTtcbiAgICB9KS5qb2luKCcsJyk7XG4gIH0sXG4gIGdldEF1dG9IZWlnaHREdXJhdGlvbjogZnVuY3Rpb24gZ2V0QXV0b0hlaWdodER1cmF0aW9uKGhlaWdodCkge1xuICAgIGlmICghaGVpZ2h0KSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICB2YXIgY29uc3RhbnQgPSBoZWlnaHQgLyAzNjsgLy8gaHR0cHM6Ly93d3cud29sZnJhbWFscGhhLmNvbS9pbnB1dC8/aT0oNCslMkIrMTUrKisoeCslMkYrMzYrKSsqKiswLjI1KyUyQisoeCslMkYrMzYpKyUyRis1KSsqKzEwXG5cbiAgICByZXR1cm4gTWF0aC5yb3VuZCgoNCArIDE1ICogTWF0aC5wb3coY29uc3RhbnQsIDAuMjUpICsgY29uc3RhbnQgLyA1KSAqIDEwKTtcbiAgfVxufTsiLCIvLyBXZSBuZWVkIHRvIGNlbnRyYWxpemUgdGhlIHpJbmRleCBkZWZpbml0aW9ucyBhcyB0aGV5IHdvcmtcbi8vIGxpa2UgZ2xvYmFsIHZhbHVlcyBpbiB0aGUgYnJvd3Nlci5cbnZhciB6SW5kZXggPSB7XG4gIG1vYmlsZVN0ZXBwZXI6IDEwMDAsXG4gIHNwZWVkRGlhbDogMTA1MCxcbiAgYXBwQmFyOiAxMTAwLFxuICBkcmF3ZXI6IDEyMDAsXG4gIG1vZGFsOiAxMzAwLFxuICBzbmFja2JhcjogMTQwMCxcbiAgdG9vbHRpcDogMTUwMFxufTtcbmV4cG9ydCBkZWZhdWx0IHpJbmRleDsiLCJpbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgY3JlYXRlQnJlYWtwb2ludHMgZnJvbSAnLi9jcmVhdGVCcmVha3BvaW50cyc7XG5pbXBvcnQgY3JlYXRlTWl4aW5zIGZyb20gJy4vY3JlYXRlTWl4aW5zJztcbmltcG9ydCBjcmVhdGVQYWxldHRlIGZyb20gJy4vY3JlYXRlUGFsZXR0ZSc7XG5pbXBvcnQgY3JlYXRlVHlwb2dyYXBoeSBmcm9tICcuL2NyZWF0ZVR5cG9ncmFwaHknO1xuaW1wb3J0IHNoYWRvd3MgZnJvbSAnLi9zaGFkb3dzJztcbmltcG9ydCBzaGFwZSBmcm9tICcuL3NoYXBlJztcbmltcG9ydCBjcmVhdGVTcGFjaW5nIGZyb20gJy4vY3JlYXRlU3BhY2luZyc7XG5pbXBvcnQgdHJhbnNpdGlvbnMgZnJvbSAnLi90cmFuc2l0aW9ucyc7XG5pbXBvcnQgekluZGV4IGZyb20gJy4vekluZGV4JztcblxuZnVuY3Rpb24gY3JlYXRlTXVpVGhlbWUoKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICB2YXIgX29wdGlvbnMkYnJlYWtwb2ludHMgPSBvcHRpb25zLmJyZWFrcG9pbnRzLFxuICAgICAgYnJlYWtwb2ludHNJbnB1dCA9IF9vcHRpb25zJGJyZWFrcG9pbnRzID09PSB2b2lkIDAgPyB7fSA6IF9vcHRpb25zJGJyZWFrcG9pbnRzLFxuICAgICAgX29wdGlvbnMkbWl4aW5zID0gb3B0aW9ucy5taXhpbnMsXG4gICAgICBtaXhpbnNJbnB1dCA9IF9vcHRpb25zJG1peGlucyA9PT0gdm9pZCAwID8ge30gOiBfb3B0aW9ucyRtaXhpbnMsXG4gICAgICBfb3B0aW9ucyRwYWxldHRlID0gb3B0aW9ucy5wYWxldHRlLFxuICAgICAgcGFsZXR0ZUlucHV0ID0gX29wdGlvbnMkcGFsZXR0ZSA9PT0gdm9pZCAwID8ge30gOiBfb3B0aW9ucyRwYWxldHRlLFxuICAgICAgc3BhY2luZ0lucHV0ID0gb3B0aW9ucy5zcGFjaW5nLFxuICAgICAgX29wdGlvbnMkdHlwb2dyYXBoeSA9IG9wdGlvbnMudHlwb2dyYXBoeSxcbiAgICAgIHR5cG9ncmFwaHlJbnB1dCA9IF9vcHRpb25zJHR5cG9ncmFwaHkgPT09IHZvaWQgMCA/IHt9IDogX29wdGlvbnMkdHlwb2dyYXBoeSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9wdGlvbnMsIFtcImJyZWFrcG9pbnRzXCIsIFwibWl4aW5zXCIsIFwicGFsZXR0ZVwiLCBcInNwYWNpbmdcIiwgXCJ0eXBvZ3JhcGh5XCJdKTtcblxuICB2YXIgcGFsZXR0ZSA9IGNyZWF0ZVBhbGV0dGUocGFsZXR0ZUlucHV0KTtcbiAgdmFyIGJyZWFrcG9pbnRzID0gY3JlYXRlQnJlYWtwb2ludHMoYnJlYWtwb2ludHNJbnB1dCk7XG4gIHZhciBzcGFjaW5nID0gY3JlYXRlU3BhY2luZyhzcGFjaW5nSW5wdXQpO1xuICB2YXIgbXVpVGhlbWUgPSBkZWVwbWVyZ2Uoe1xuICAgIGJyZWFrcG9pbnRzOiBicmVha3BvaW50cyxcbiAgICBkaXJlY3Rpb246ICdsdHInLFxuICAgIG1peGluczogY3JlYXRlTWl4aW5zKGJyZWFrcG9pbnRzLCBzcGFjaW5nLCBtaXhpbnNJbnB1dCksXG4gICAgb3ZlcnJpZGVzOiB7fSxcbiAgICAvLyBJbmplY3QgY3VzdG9tIHN0eWxlc1xuICAgIHBhbGV0dGU6IHBhbGV0dGUsXG4gICAgcHJvcHM6IHt9LFxuICAgIC8vIFByb3ZpZGUgZGVmYXVsdCBwcm9wc1xuICAgIHNoYWRvd3M6IHNoYWRvd3MsXG4gICAgdHlwb2dyYXBoeTogY3JlYXRlVHlwb2dyYXBoeShwYWxldHRlLCB0eXBvZ3JhcGh5SW5wdXQpLFxuICAgIHNwYWNpbmc6IHNwYWNpbmcsXG4gICAgc2hhcGU6IHNoYXBlLFxuICAgIHRyYW5zaXRpb25zOiB0cmFuc2l0aW9ucyxcbiAgICB6SW5kZXg6IHpJbmRleFxuICB9LCBvdGhlcik7XG5cbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgbXVpVGhlbWUgPSBhcmdzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBhcmd1bWVudCkge1xuICAgIHJldHVybiBkZWVwbWVyZ2UoYWNjLCBhcmd1bWVudCk7XG4gIH0sIG11aVRoZW1lKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBwc2V1ZG9DbGFzc2VzID0gWydjaGVja2VkJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2ZvY3VzZWQnLCAnZm9jdXNWaXNpYmxlJywgJ3JlcXVpcmVkJywgJ2V4cGFuZGVkJywgJ3NlbGVjdGVkJ107XG5cbiAgICB2YXIgdHJhdmVyc2UgPSBmdW5jdGlvbiB0cmF2ZXJzZShub2RlLCBwYXJlbnRLZXkpIHtcbiAgICAgIHZhciBkZXB0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTtcbiAgICAgIHZhciBrZXk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW4sIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG5cbiAgICAgIGZvciAoa2V5IGluIG5vZGUpIHtcbiAgICAgICAgdmFyIGNoaWxkID0gbm9kZVtrZXldO1xuXG4gICAgICAgIGlmIChkZXB0aCA9PT0gMSkge1xuICAgICAgICAgIGlmIChrZXkuaW5kZXhPZignTXVpJykgPT09IDAgJiYgY2hpbGQpIHtcbiAgICAgICAgICAgIHRyYXZlcnNlKGNoaWxkLCBrZXksIGRlcHRoICsgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHBzZXVkb0NsYXNzZXMuaW5kZXhPZihrZXkpICE9PSAtMSAmJiBPYmplY3Qua2V5cyhjaGlsZCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiB0aGUgYFwiLmNvbmNhdChwYXJlbnRLZXksIFwiYCBjb21wb25lbnQgaW5jcmVhc2VzIFwiKSArIFwidGhlIENTUyBzcGVjaWZpY2l0eSBvZiB0aGUgYFwiLmNvbmNhdChrZXksIFwiYCBpbnRlcm5hbCBzdGF0ZS5cIiksICdZb3UgY2FuIG5vdCBvdmVycmlkZSBpdCBsaWtlIHRoaXM6ICcsIEpTT04uc3RyaW5naWZ5KG5vZGUsIG51bGwsIDIpLCAnJywgJ0luc3RlYWQsIHlvdSBuZWVkIHRvIHVzZSB0aGUgJHJ1bGVOYW1lIHN5bnRheDonLCBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgIHJvb3Q6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgXCImJFwiLmNvbmNhdChrZXkpLCBjaGlsZClcbiAgICAgICAgICAgIH0sIG51bGwsIDIpLCAnJywgJ2h0dHBzOi8vbWF0ZXJpYWwtdWkuY29tL3IvcHNldWRvLWNsYXNzZXMtZ3VpZGUnXS5qb2luKCdcXG4nKSk7XG4gICAgICAgICAgfSAvLyBSZW1vdmUgdGhlIHN0eWxlIHRvIHByZXZlbnQgZ2xvYmFsIGNvbmZsaWN0cy5cblxuXG4gICAgICAgICAgbm9kZVtrZXldID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdHJhdmVyc2UobXVpVGhlbWUub3ZlcnJpZGVzKTtcbiAgfVxuXG4gIHJldHVybiBtdWlUaGVtZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlTXVpVGhlbWU7IiwiaW1wb3J0IGNyZWF0ZU11aVRoZW1lIGZyb20gJy4vY3JlYXRlTXVpVGhlbWUnO1xudmFyIGRlZmF1bHRUaGVtZSA9IGNyZWF0ZU11aVRoZW1lKCk7XG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0VGhlbWU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgeyB3aXRoU3R5bGVzIGFzIHdpdGhTdHlsZXNXaXRob3V0RGVmYXVsdCB9IGZyb20gJ0BtYXRlcmlhbC11aS9zdHlsZXMnO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5cbmZ1bmN0aW9uIHdpdGhTdHlsZXMoc3R5bGVzT3JDcmVhdG9yLCBvcHRpb25zKSB7XG4gIHJldHVybiB3aXRoU3R5bGVzV2l0aG91dERlZmF1bHQoc3R5bGVzT3JDcmVhdG9yLCBfZXh0ZW5kcyh7XG4gICAgZGVmYXVsdFRoZW1lOiBkZWZhdWx0VGhlbWVcbiAgfSwgb3B0aW9ucykpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzOyIsIi8vIEl0IHNob3VsZCB0byBiZSBub3RlZCB0aGF0IHRoaXMgZnVuY3Rpb24gaXNuJ3QgZXF1aXZhbGVudCB0byBgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemVgLlxuLy9cbi8vIEEgc3RyaWN0IGNhcGl0YWxpemF0aW9uIHNob3VsZCB1cHBlcmNhc2UgdGhlIGZpcnN0IGxldHRlciBvZiBlYWNoIHdvcmQgYSB0aGUgc2VudGVuY2UuXG4vLyBXZSBvbmx5IGhhbmRsZSB0aGUgZmlyc3Qgd29yZC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyaW5nKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ01hdGVyaWFsLVVJOiBjYXBpdGFsaXplKHN0cmluZykgZXhwZWN0cyBhIHN0cmluZyBhcmd1bWVudC4nKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RyaW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEpO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICB3aWR0aDogJzFlbScsXG4gICAgICBoZWlnaHQ6ICcxZW0nLFxuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICBmaWxsOiAnY3VycmVudENvbG9yJyxcbiAgICAgIGZsZXhTaHJpbms6IDAsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDI0KSxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnZmlsbCcsIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXJcbiAgICAgIH0pXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJhY3Rpb25cImAuICovXG4gICAgY29sb3JBY3Rpb246IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5hY3RpdmVcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJlcnJvclwiYC4gKi9cbiAgICBjb2xvckVycm9yOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiZGlzYWJsZWRcImAuICovXG4gICAgY29sb3JEaXNhYmxlZDoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZvbnRTaXplPVwiaW5oZXJpdFwiYC4gKi9cbiAgICBmb250U2l6ZUluaGVyaXQ6IHtcbiAgICAgIGZvbnRTaXplOiAnaW5oZXJpdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZm9udFNpemU9XCJzbWFsbFwiYC4gKi9cbiAgICBmb250U2l6ZVNtYWxsOiB7XG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDIwKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmb250U2l6ZT1cImxhcmdlXCJgLiAqL1xuICAgIGZvbnRTaXplTGFyZ2U6IHtcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMzUpXG4gICAgfVxuICB9O1xufTtcbnZhciBTdmdJY29uID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTdmdJY29uKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcHJvcHMkY29sb3IgPT09IHZvaWQgMCA/ICdpbmhlcml0JyA6IF9wcm9wcyRjb2xvcixcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnc3ZnJyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkZm9udFNpemUgPSBwcm9wcy5mb250U2l6ZSxcbiAgICAgIGZvbnRTaXplID0gX3Byb3BzJGZvbnRTaXplID09PSB2b2lkIDAgPyAnZGVmYXVsdCcgOiBfcHJvcHMkZm9udFNpemUsXG4gICAgICBodG1sQ29sb3IgPSBwcm9wcy5odG1sQ29sb3IsXG4gICAgICB0aXRsZUFjY2VzcyA9IHByb3BzLnRpdGxlQWNjZXNzLFxuICAgICAgX3Byb3BzJHZpZXdCb3ggPSBwcm9wcy52aWV3Qm94LFxuICAgICAgdmlld0JveCA9IF9wcm9wcyR2aWV3Qm94ID09PSB2b2lkIDAgPyAnMCAwIDI0IDI0JyA6IF9wcm9wcyR2aWV3Qm94LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50XCIsIFwiZm9udFNpemVcIiwgXCJodG1sQ29sb3JcIiwgXCJ0aXRsZUFjY2Vzc1wiLCBcInZpZXdCb3hcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgY29sb3IgIT09ICdpbmhlcml0JyAmJiBjbGFzc2VzW1wiY29sb3JcIi5jb25jYXQoY2FwaXRhbGl6ZShjb2xvcikpXSwgZm9udFNpemUgIT09ICdkZWZhdWx0JyAmJiBjbGFzc2VzW1wiZm9udFNpemVcIi5jb25jYXQoY2FwaXRhbGl6ZShmb250U2l6ZSkpXSksXG4gICAgZm9jdXNhYmxlOiBcImZhbHNlXCIsXG4gICAgdmlld0JveDogdmlld0JveCxcbiAgICBjb2xvcjogaHRtbENvbG9yLFxuICAgIFwiYXJpYS1oaWRkZW5cIjogdGl0bGVBY2Nlc3MgPyB1bmRlZmluZWQgOiAndHJ1ZScsXG4gICAgcm9sZTogdGl0bGVBY2Nlc3MgPyAnaW1nJyA6ICdwcmVzZW50YXRpb24nLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgY2hpbGRyZW4sIHRpdGxlQWNjZXNzID8gUmVhY3QuY3JlYXRlRWxlbWVudChcInRpdGxlXCIsIG51bGwsIHRpdGxlQWNjZXNzKSA6IG51bGwpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdmdJY29uLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIE5vZGUgcGFzc2VkIGludG8gdGhlIFNWRyBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKiBZb3UgY2FuIHVzZSB0aGUgYGh0bWxDb2xvcmAgcHJvcCB0byBhcHBseSBhIGNvbG9yIGF0dHJpYnV0ZSB0byB0aGUgU1ZHIGVsZW1lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnYWN0aW9uJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2luaGVyaXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFRoZSBmb250U2l6ZSBhcHBsaWVkIHRvIHRoZSBpY29uLiBEZWZhdWx0cyB0byAyNHB4LCBidXQgY2FuIGJlIGNvbmZpZ3VyZSB0byBpbmhlcml0IGZvbnQgc2l6ZS5cbiAgICovXG4gIGZvbnRTaXplOiBQcm9wVHlwZXMub25lT2YoWydkZWZhdWx0JywgJ2luaGVyaXQnLCAnbGFyZ2UnLCAnc21hbGwnXSksXG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgYSBjb2xvciBhdHRyaWJ1dGUgdG8gdGhlIFNWRyBlbGVtZW50LlxuICAgKi9cbiAgaHRtbENvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgc2hhcGUtcmVuZGVyaW5nIGF0dHJpYnV0ZS4gVGhlIGJlaGF2aW9yIG9mIHRoZSBkaWZmZXJlbnQgb3B0aW9ucyBpcyBkZXNjcmliZWQgb24gdGhlXG4gICAqIFtNRE4gV2ViIERvY3NdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL1NWRy9BdHRyaWJ1dGUvc2hhcGUtcmVuZGVyaW5nKS5cbiAgICogSWYgeW91IGFyZSBoYXZpbmcgaXNzdWVzIHdpdGggYmx1cnJ5IGljb25zIHlvdSBzaG91bGQgaW52ZXN0aWdhdGUgdGhpcyBwcm9wZXJ0eS5cbiAgICovXG4gIHNoYXBlUmVuZGVyaW5nOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBQcm92aWRlcyBhIGh1bWFuLXJlYWRhYmxlIHRpdGxlIGZvciB0aGUgZWxlbWVudCB0aGF0IGNvbnRhaW5zIGl0LlxuICAgKiBodHRwczovL3d3dy53My5vcmcvVFIvU1ZHLWFjY2Vzcy8jRXF1aXZhbGVudFxuICAgKi9cbiAgdGl0bGVBY2Nlc3M6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEFsbG93cyB5b3UgdG8gcmVkZWZpbmUgd2hhdCB0aGUgY29vcmRpbmF0ZXMgd2l0aG91dCB1bml0cyBtZWFuIGluc2lkZSBhbiBTVkcgZWxlbWVudC5cbiAgICogRm9yIGV4YW1wbGUsIGlmIHRoZSBTVkcgZWxlbWVudCBpcyA1MDAgKHdpZHRoKSBieSAyMDAgKGhlaWdodCksXG4gICAqIGFuZCB5b3UgcGFzcyB2aWV3Qm94PVwiMCAwIDUwIDIwXCIsXG4gICAqIHRoaXMgbWVhbnMgdGhhdCB0aGUgY29vcmRpbmF0ZXMgaW5zaWRlIHRoZSBTVkcgd2lsbCBnbyBmcm9tIHRoZSB0b3AgbGVmdCBjb3JuZXIgKDAsMClcbiAgICogdG8gYm90dG9tIHJpZ2h0ICg1MCwyMCkgYW5kIGVhY2ggdW5pdCB3aWxsIGJlIHdvcnRoIDEwcHguXG4gICAqL1xuICB2aWV3Qm94OiBQcm9wVHlwZXMuc3RyaW5nXG59IDogdm9pZCAwO1xuU3ZnSWNvbi5tdWlOYW1lID0gJ1N2Z0ljb24nO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVN2Z0ljb24nXG59KShTdmdJY29uKTsiLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9TdmdJY29uJzsiXSwic291cmNlUm9vdCI6IiJ9